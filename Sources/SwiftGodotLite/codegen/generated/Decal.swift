// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Node that projects a texture onto a ``MeshInstance3D``.
/// 
/// ``Decal``s are used to project a texture onto a ``Mesh`` in the scene. Use Decals to add detail to a scene without affecting the underlying ``Mesh``. They are often used to add weathering to building, add dirt or mud to the ground, or add variety to props. Decals can be moved at any time, making them suitable for things like blob shadows or laser sight dots.
/// 
/// They are made of an ``AABB`` and a group of ``Texture2D``s specifying ``Color``, normal, ORM (ambient occlusion, roughness, metallic), and emission. Decals are projected within their ``AABB`` so altering the orientation of the Decal affects the direction in which they are projected. By default, Decals are projected down (i.e. from positive Y to negative Y).
/// 
/// The ``Texture2D``s associated with the Decal are automatically stored in a texture atlas which is used for drawing the decals so all decals can be drawn at once. Godot uses clustered decals, meaning they are stored in cluster data and drawn when the mesh is drawn, they are not drawn as a post-processing effect after.
/// 
/// > Note: Decals cannot affect an underlying material's transparency, regardless of its transparency mode (alpha blend, alpha scissor, alpha hash, opaque pre-pass). This means translucent or transparent areas of a material will remain translucent or transparent even if an opaque decal is applied on them.
/// 
/// > Note: Decals are only supported in the Forward+ and Mobile rendering methods, not Compatibility. When using the Mobile rendering method, only 8 decals can be displayed on each mesh resource. Attempting to display more than 8 decals on a single mesh resource will result in decals flickering in and out as the camera moves.
/// 
/// > Note: When using the Mobile rendering method, decals will only correctly affect meshes whose visibility AABB intersects with the decal's AABB. If using a shader to deform the mesh in a way that makes it go outside its AABB, ``GeometryInstance3D/extraCullMargin`` must be increased on the mesh. Otherwise, the decal may not be visible on the mesh.
/// 
open class Decal: VisualInstance3D {
    override open class var godotClassName: StringName { "Decal" }
    public enum DecalTexture: Int64 {
        /// ``Texture2D`` corresponding to ``textureAlbedo``.
        case albedo = 0 // TEXTURE_ALBEDO
        /// ``Texture2D`` corresponding to ``textureNormal``.
        case normal = 1 // TEXTURE_NORMAL
        /// ``Texture2D`` corresponding to ``textureOrm``.
        case orm = 2 // TEXTURE_ORM
        /// ``Texture2D`` corresponding to ``textureEmission``.
        case emission = 3 // TEXTURE_EMISSION
        /// Max size of ``Decal/DecalTexture`` enum.
        case max = 4 // TEXTURE_MAX
    }
    
    
    /* Properties */
    
    /// Sets the size of the ``AABB`` used by the decal. All dimensions must be set to a value greater than zero (they will be clamped to `0.001` if this is not the case). The AABB goes from `-size/2` to `size/2`.
    /// 
    /// > Note: To improve culling efficiency of "hard surface" decals, set their ``upperFade`` and ``lowerFade`` to `0.0` and set the Y component of the ``size`` as low as possible. This will reduce the decals' AABB size without affecting their appearance.
    /// 
    final public var size: Vector3 {
        get {
            return get_size ()
        }
        
        set {
            set_size (newValue)
        }
        
    }
    
    /// ``Texture2D`` with the base ``Color`` of the Decal. Either this or the ``textureEmission`` must be set for the Decal to be visible. Use the alpha channel like a mask to smoothly blend the edges of the decal with the underlying object.
    /// 
    /// > Note: Unlike ``BaseMaterial3D`` whose filter mode can be adjusted on a per-material basis, the filter mode for ``Decal`` textures is set globally with ``ProjectSettings/rendering/textures/decals/filter``.
    /// 
    final public var textureAlbedo: Texture2D? {
        get {
            return get_texture (Decal.DecalTexture (rawValue: 0)!)
        }
        
        set {
            set_texture (Decal.DecalTexture (rawValue: 0)!, newValue)
        }
        
    }
    
    /// ``Texture2D`` with the per-pixel normal map for the decal. Use this to add extra detail to decals.
    /// 
    /// > Note: Unlike ``BaseMaterial3D`` whose filter mode can be adjusted on a per-material basis, the filter mode for ``Decal`` textures is set globally with ``ProjectSettings/rendering/textures/decals/filter``.
    /// 
    /// > Note: Setting this texture alone will not result in a visible decal, as ``textureAlbedo`` must also be set. To create a normal-only decal, load an albedo texture into ``textureAlbedo`` and set ``albedoMix`` to `0.0`. The albedo texture's alpha channel will be used to determine where the underlying surface's normal map should be overridden (and its intensity).
    /// 
    final public var textureNormal: Texture2D? {
        get {
            return get_texture (Decal.DecalTexture (rawValue: 1)!)
        }
        
        set {
            set_texture (Decal.DecalTexture (rawValue: 1)!, newValue)
        }
        
    }
    
    /// ``Texture2D`` storing ambient occlusion, roughness, and metallic for the decal. Use this to add extra detail to decals.
    /// 
    /// > Note: Unlike ``BaseMaterial3D`` whose filter mode can be adjusted on a per-material basis, the filter mode for ``Decal`` textures is set globally with ``ProjectSettings/rendering/textures/decals/filter``.
    /// 
    /// > Note: Setting this texture alone will not result in a visible decal, as ``textureAlbedo`` must also be set. To create an ORM-only decal, load an albedo texture into ``textureAlbedo`` and set ``albedoMix`` to `0.0`. The albedo texture's alpha channel will be used to determine where the underlying surface's ORM map should be overridden (and its intensity).
    /// 
    final public var textureOrm: Texture2D? {
        get {
            return get_texture (Decal.DecalTexture (rawValue: 2)!)
        }
        
        set {
            set_texture (Decal.DecalTexture (rawValue: 2)!, newValue)
        }
        
    }
    
    /// ``Texture2D`` with the emission ``Color`` of the Decal. Either this or the ``textureAlbedo`` must be set for the Decal to be visible. Use the alpha channel like a mask to smoothly blend the edges of the decal with the underlying object.
    /// 
    /// > Note: Unlike ``BaseMaterial3D`` whose filter mode can be adjusted on a per-material basis, the filter mode for ``Decal`` textures is set globally with ``ProjectSettings/rendering/textures/decals/filter``.
    /// 
    final public var textureEmission: Texture2D? {
        get {
            return get_texture (Decal.DecalTexture (rawValue: 3)!)
        }
        
        set {
            set_texture (Decal.DecalTexture (rawValue: 3)!, newValue)
        }
        
    }
    
    /// Energy multiplier for the emission texture. This will make the decal emit light at a higher or lower intensity, independently of the albedo color. See also ``modulate``.
    final public var emissionEnergy: Double {
        get {
            return get_emission_energy ()
        }
        
        set {
            set_emission_energy (newValue)
        }
        
    }
    
    /// Changes the ``Color`` of the Decal by multiplying the albedo and emission colors with this value. The alpha component is only taken into account when multiplying the albedo color, not the emission color. See also ``emissionEnergy`` and ``albedoMix`` to change the emission and albedo intensity independently of each other.
    final public var modulate: Color {
        get {
            return get_modulate ()
        }
        
        set {
            set_modulate (newValue)
        }
        
    }
    
    /// Blends the albedo ``Color`` of the decal with albedo ``Color`` of the underlying mesh. This can be set to `0.0` to create a decal that only affects normal or ORM. In this case, an albedo texture is still required as its alpha channel will determine where the normal and ORM will be overridden. See also ``modulate``.
    final public var albedoMix: Double {
        get {
            return get_albedo_mix ()
        }
        
        set {
            set_albedo_mix (newValue)
        }
        
    }
    
    /// Fades the Decal if the angle between the Decal's ``AABB`` and the target surface becomes too large. A value of `0` projects the Decal regardless of angle, a value of `1` limits the Decal to surfaces that are nearly perpendicular.
    /// 
    /// > Note: Setting ``normalFade`` to a value greater than `0.0` has a small performance cost due to the added normal angle computations.
    /// 
    final public var normalFade: Double {
        get {
            return get_normal_fade ()
        }
        
        set {
            set_normal_fade (newValue)
        }
        
    }
    
    /// Sets the curve over which the decal will fade as the surface gets further from the center of the ``AABB``. Only positive values are valid (negative values will be clamped to `0.0`). See also ``lowerFade``.
    final public var upperFade: Double {
        get {
            return get_upper_fade ()
        }
        
        set {
            set_upper_fade (newValue)
        }
        
    }
    
    /// Sets the curve over which the decal will fade as the surface gets further from the center of the ``AABB``. Only positive values are valid (negative values will be clamped to `0.0`). See also ``upperFade``.
    final public var lowerFade: Double {
        get {
            return get_lower_fade ()
        }
        
        set {
            set_lower_fade (newValue)
        }
        
    }
    
    /// If `true`, decals will smoothly fade away when far from the active ``Camera3D`` starting at ``distanceFadeBegin``. The Decal will fade out over ``distanceFadeBegin`` + ``distanceFadeLength``, after which it will be culled and not sent to the shader at all. Use this to reduce the number of active Decals in a scene and thus improve performance.
    final public var distanceFadeEnabled: Bool {
        get {
            return is_distance_fade_enabled ()
        }
        
        set {
            set_enable_distance_fade (newValue)
        }
        
    }
    
    /// The distance from the camera at which the Decal begins to fade away (in 3D units).
    final public var distanceFadeBegin: Double {
        get {
            return get_distance_fade_begin ()
        }
        
        set {
            set_distance_fade_begin (newValue)
        }
        
    }
    
    /// The distance over which the Decal fades (in 3D units). The Decal becomes slowly more transparent over this distance and is completely invisible at the end. Higher values result in a smoother fade-out transition, which is more suited when the camera moves fast.
    final public var distanceFadeLength: Double {
        get {
            return get_distance_fade_length ()
        }
        
        set {
            set_distance_fade_length (newValue)
        }
        
    }
    
    /// Specifies which ``VisualInstance3D/layers`` this decal will project on. By default, Decals affect all layers. This is used so you can specify which types of objects receive the Decal and which do not. This is especially useful so you can ensure that dynamic objects don't accidentally receive a Decal intended for the terrain under them.
    final public var cullMask: UInt32 {
        get {
            return get_cull_mask ()
        }
        
        set {
            set_cull_mask (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_size")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_size (_ size: Vector3) {
        #if false
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_size ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (Decal.method_get_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2086764391)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the ``Texture2D`` associated with the specified ``Decal/DecalTexture``. This is a convenience method, in most cases you should access the texture directly.
    /// 
    /// For example, instead of `$Decal.set_texture(Decal.TEXTURE_ALBEDO, albedo_tex)`, use `$Decal.texture_albedo = albedo_tex`.
    /// 
    /// One case where this is better than accessing the texture directly is when you want to copy one Decal's textures to another. For example:
    /// 
    fileprivate final func set_texture (_ type: Decal.DecalTexture, _ texture: Texture2D?) {
        #if false
        
        var copy_type = Int64 (type.rawValue)
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_type, &copy_texture_handle)
        
        #else
        
        var copy_type = Int64 (type.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_type) { p0 in
            _args.append (p0)
            withUnsafePointer (to: texture?.handle) { p1 in
            _args.append (texture == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (Decal.method_set_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3244119503)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the ``Texture2D`` associated with the specified ``Decal/DecalTexture``. This is a convenience method, in most cases you should access the texture directly.
    /// 
    /// For example, instead of `albedo_tex = $Decal.get_texture(Decal.TEXTURE_ALBEDO)`, use `albedo_tex = $Decal.texture_albedo`.
    /// 
    /// One case where this is better than accessing the texture directly is when you want to copy one Decal's textures to another. For example:
    /// 
    fileprivate final func get_texture (_ type: Decal.DecalTexture)-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_type = Int64 (type.rawValue)
        
        gi.object_method_bind_ptrcall_v (Decal.method_get_texture, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_type)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_type = Int64 (type.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_type) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_get_texture, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_emission_energy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_energy")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_energy (_ energy: Double) {
        #if false
        
        var copy_energy = energy
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_emission_energy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_energy)
        
        #else
        
        var copy_energy = energy
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_energy) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_emission_energy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_energy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_energy")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_energy ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Decal.method_get_emission_energy, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_albedo_mix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_albedo_mix")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_albedo_mix (_ energy: Double) {
        #if false
        
        var copy_energy = energy
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_albedo_mix, UnsafeMutableRawPointer (mutating: handle), nil, &copy_energy)
        
        #else
        
        var copy_energy = energy
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_energy) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_albedo_mix, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_albedo_mix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_albedo_mix")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_albedo_mix ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Decal.method_get_albedo_mix, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_modulate")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_modulate (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_modulate, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_modulate")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_modulate ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Decal.method_get_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_upper_fade: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_upper_fade")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_upper_fade (_ fade: Double) {
        #if false
        
        var copy_fade = fade
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_upper_fade, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fade)
        
        #else
        
        var copy_fade = fade
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fade) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_upper_fade, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_upper_fade: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_upper_fade")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_upper_fade ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Decal.method_get_upper_fade, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_lower_fade: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_lower_fade")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_lower_fade (_ fade: Double) {
        #if false
        
        var copy_fade = fade
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_lower_fade, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fade)
        
        #else
        
        var copy_fade = fade
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fade) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_lower_fade, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_lower_fade: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_lower_fade")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_lower_fade ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Decal.method_get_lower_fade, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_normal_fade: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_normal_fade")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_normal_fade (_ fade: Double) {
        #if false
        
        var copy_fade = fade
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_normal_fade, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fade)
        
        #else
        
        var copy_fade = fade
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fade) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_normal_fade, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_normal_fade: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_normal_fade")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_normal_fade ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Decal.method_get_normal_fade, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_enable_distance_fade: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_distance_fade")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_distance_fade (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_enable_distance_fade, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_enable_distance_fade, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_distance_fade_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_distance_fade_enabled")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_distance_fade_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Decal.method_is_distance_fade_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_distance_fade_begin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_distance_fade_begin")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_distance_fade_begin (_ distance: Double) {
        #if false
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_distance_fade_begin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_distance_fade_begin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_distance_fade_begin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_distance_fade_begin")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_distance_fade_begin ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Decal.method_get_distance_fade_begin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_distance_fade_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_distance_fade_length")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_distance_fade_length (_ distance: Double) {
        #if false
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_distance_fade_length, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_distance_fade_length, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_distance_fade_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_distance_fade_length")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_distance_fade_length ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Decal.method_get_distance_fade_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_cull_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cull_mask")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cull_mask (_ mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (Decal.method_set_cull_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Decal.method_set_cull_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_cull_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cull_mask")
        return withUnsafePointer (to: &Decal.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_cull_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (Decal.method_get_cull_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

