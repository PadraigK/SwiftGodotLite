// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Performs a 2D texture lookup within the visual shader graph.
/// 
/// Performs a lookup operation on the provided texture, with support for multiple texture sources to choose from.
open class VisualShaderNodeTexture: VisualShaderNode {
    override open class var godotClassName: StringName { "VisualShaderNodeTexture" }
    public enum Source: Int64 {
        /// Use the texture given as an argument for this function.
        case texture = 0 // SOURCE_TEXTURE
        /// Use the current viewport's texture as the source.
        case screen = 1 // SOURCE_SCREEN
        /// Use the texture from this shader's texture built-in (e.g. a texture of a ``Sprite2D``).
        case source2dTexture = 2 // SOURCE_2D_TEXTURE
        /// Use the texture from this shader's normal map built-in.
        case source2dNormal = 3 // SOURCE_2D_NORMAL
        /// Use the depth texture captured during the depth prepass. Only available when the depth prepass is used (i.e. in spatial shaders and in the forward_plus or gl_compatibility renderers).
        case depth = 4 // SOURCE_DEPTH
        /// Use the texture provided in the input port for this function.
        case port = 5 // SOURCE_PORT
        /// Use the normal buffer captured during the depth prepass. Only available when the normal-roughness buffer is available (i.e. in spatial shaders and in the forward_plus renderer).
        case source3dNormal = 6 // SOURCE_3D_NORMAL
        /// Use the roughness buffer captured during the depth prepass. Only available when the normal-roughness buffer is available (i.e. in spatial shaders and in the forward_plus renderer).
        case roughness = 7 // SOURCE_ROUGHNESS
        /// Represents the size of the ``VisualShaderNodeTexture/Source`` enum.
        case max = 8 // SOURCE_MAX
    }
    
    public enum TextureType: Int64 {
        /// No hints are added to the uniform declaration.
        case data = 0 // TYPE_DATA
        /// Adds `hint_albedo` as hint to the uniform declaration for proper sRGB to linear conversion.
        case color = 1 // TYPE_COLOR
        /// Adds `hint_normal` as hint to the uniform declaration, which internally converts the texture for proper usage as normal map.
        case normalMap = 2 // TYPE_NORMAL_MAP
        /// Represents the size of the ``VisualShaderNodeTexture/TextureType`` enum.
        case max = 3 // TYPE_MAX
    }
    
    
    /* Properties */
    
    /// Determines the source for the lookup. See ``VisualShaderNodeTexture/Source`` for options.
    final public var source: VisualShaderNodeTexture.Source {
        get {
            return get_source ()
        }
        
        set {
            set_source (newValue)
        }
        
    }
    
    /// The source texture, if needed for the selected ``source``.
    final public var texture: Texture2D? {
        get {
            return get_texture ()
        }
        
        set {
            set_texture (newValue)
        }
        
    }
    
    /// Specifies the type of the texture if ``source`` is set to .texture. See ``VisualShaderNodeTexture/TextureType`` for options.
    final public var textureType: VisualShaderNodeTexture.TextureType {
        get {
            return get_texture_type ()
        }
        
        set {
            set_texture_type (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_source")
        return withUnsafePointer (to: &VisualShaderNodeTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 905262939)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_source (_ value: VisualShaderNodeTexture.Source) {
        #if false
        
        var copy_value = Int64 (value.rawValue)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeTexture.method_set_source, UnsafeMutableRawPointer (mutating: handle), nil, &copy_value)
        
        #else
        
        var copy_value = Int64 (value.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_value) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeTexture.method_set_source, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_source")
        return withUnsafePointer (to: &VisualShaderNodeTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2896297444)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_source ()-> VisualShaderNodeTexture.Source {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (VisualShaderNodeTexture.method_get_source, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VisualShaderNodeTexture.Source (rawValue: _result)!
    }
    
    fileprivate static var method_set_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture")
        return withUnsafePointer (to: &VisualShaderNodeTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture (_ value: Texture2D?) {
        #if false
        
        var copy_value_handle = value?.handle
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeTexture.method_set_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_value_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: value?.handle) { p0 in
        _args.append (value == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeTexture.method_set_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture")
        return withUnsafePointer (to: &VisualShaderNodeTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (VisualShaderNodeTexture.method_get_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_texture_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_type")
        return withUnsafePointer (to: &VisualShaderNodeTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 986314081)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_type (_ value: VisualShaderNodeTexture.TextureType) {
        #if false
        
        var copy_value = Int64 (value.rawValue)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeTexture.method_set_texture_type, UnsafeMutableRawPointer (mutating: handle), nil, &copy_value)
        
        #else
        
        var copy_value = Int64 (value.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_value) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeTexture.method_set_texture_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_type")
        return withUnsafePointer (to: &VisualShaderNodeTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3290430153)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_type ()-> VisualShaderNodeTexture.TextureType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (VisualShaderNodeTexture.method_get_texture_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VisualShaderNodeTexture.TextureType (rawValue: _result)!
    }
    
}

