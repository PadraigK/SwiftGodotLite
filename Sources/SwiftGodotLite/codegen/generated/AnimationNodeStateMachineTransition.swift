// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A transition within an ``AnimationNodeStateMachine`` connecting two ``AnimationRootNode``s.
/// 
/// The path generated when using ``AnimationNodeStateMachinePlayback/travel(toNode:resetOnTeleport:)`` is limited to the nodes connected by ``AnimationNodeStateMachineTransition``.
/// 
/// You can set the timing and conditions of the transition in detail.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``advanceConditionChanged``
open class AnimationNodeStateMachineTransition: Resource {
    override open class var godotClassName: StringName { "AnimationNodeStateMachineTransition" }
    public enum SwitchMode: Int64 {
        /// Switch to the next state immediately. The current state will end and blend into the beginning of the new one.
        case immediate = 0 // SWITCH_MODE_IMMEDIATE
        /// Switch to the next state immediately, but will seek the new state to the playback position of the old state.
        case sync = 1 // SWITCH_MODE_SYNC
        /// Wait for the current state playback to end, then switch to the beginning of the next state animation.
        case atEnd = 2 // SWITCH_MODE_AT_END
    }
    
    public enum AdvanceMode: Int64 {
        /// Don't use this transition.
        case disabled = 0 // ADVANCE_MODE_DISABLED
        /// Only use this transition during ``AnimationNodeStateMachinePlayback/travel(toNode:resetOnTeleport:)``.
        case enabled = 1 // ADVANCE_MODE_ENABLED
        /// Automatically use this transition if the ``advanceCondition`` and ``advanceExpression`` checks are true (if assigned).
        case auto = 2 // ADVANCE_MODE_AUTO
    }
    
    
    /* Properties */
    
    /// The time to cross-fade between this state and the next.
    final public var xfadeTime: Double {
        get {
            return get_xfade_time ()
        }
        
        set {
            set_xfade_time (newValue)
        }
        
    }
    
    /// Ease curve for better control over cross-fade between this state and the next.
    final public var xfadeCurve: Curve? {
        get {
            return get_xfade_curve ()
        }
        
        set {
            set_xfade_curve (newValue)
        }
        
    }
    
    /// If `true`, the destination animation is played back from the beginning when switched.
    final public var reset: Bool {
        get {
            return is_reset ()
        }
        
        set {
            set_reset (newValue)
        }
        
    }
    
    /// Lower priority transitions are preferred when travelling through the tree via ``AnimationNodeStateMachinePlayback/travel(toNode:resetOnTeleport:)`` or ``advanceMode`` is set to .auto.
    final public var priority: Int32 {
        get {
            return get_priority ()
        }
        
        set {
            set_priority (newValue)
        }
        
    }
    
    /// The transition type.
    final public var switchMode: AnimationNodeStateMachineTransition.SwitchMode {
        get {
            return get_switch_mode ()
        }
        
        set {
            set_switch_mode (newValue)
        }
        
    }
    
    /// Determines whether the transition should disabled, enabled when using ``AnimationNodeStateMachinePlayback/travel(toNode:resetOnTeleport:)``, or traversed automatically if the ``advanceCondition`` and ``advanceExpression`` checks are true (if assigned).
    final public var advanceMode: AnimationNodeStateMachineTransition.AdvanceMode {
        get {
            return get_advance_mode ()
        }
        
        set {
            set_advance_mode (newValue)
        }
        
    }
    
    /// Turn on auto advance when this condition is set. The provided name will become a boolean parameter on the ``AnimationTree`` that can be controlled from code (see [url=$DOCS_URL/tutorials/animation/animation_tree.html#controlling-from-code]Using AnimationTree[/url]). For example, if ``AnimationTree/treeRoot`` is an ``AnimationNodeStateMachine`` and ``advanceCondition`` is set to `"idle"`:
    /// 
    final public var advanceCondition: StringName {
        get {
            return get_advance_condition ()
        }
        
        set {
            set_advance_condition (newValue)
        }
        
    }
    
    /// Use an expression as a condition for state machine transitions. It is possible to create complex animation advance conditions for switching between states and gives much greater flexibility for creating complex state machines by directly interfacing with the script code.
    final public var advanceExpression: String {
        get {
            return get_advance_expression ()
        }
        
        set {
            set_advance_expression (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_switch_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_switch_mode")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2074906633)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_switch_mode (_ mode: AnimationNodeStateMachineTransition.SwitchMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachineTransition.method_set_switch_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_set_switch_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_switch_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_switch_mode")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2138562085)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_switch_mode ()-> AnimationNodeStateMachineTransition.SwitchMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_get_switch_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AnimationNodeStateMachineTransition.SwitchMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_advance_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_advance_mode")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1210869868)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_advance_mode (_ mode: AnimationNodeStateMachineTransition.AdvanceMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachineTransition.method_set_advance_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_set_advance_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_advance_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_advance_mode")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 61101689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_advance_mode ()-> AnimationNodeStateMachineTransition.AdvanceMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_get_advance_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AnimationNodeStateMachineTransition.AdvanceMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_advance_condition: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_advance_condition")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_advance_condition (_ name: StringName) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachineTransition.method_set_advance_condition, UnsafeMutableRawPointer (mutating: handle), nil, &name.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_set_advance_condition, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_advance_condition: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_advance_condition")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_advance_condition ()-> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_get_advance_condition, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_xfade_time: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_xfade_time")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_xfade_time (_ secs: Double) {
        #if true
        
        var copy_secs = secs
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachineTransition.method_set_xfade_time, UnsafeMutableRawPointer (mutating: handle), nil, &copy_secs)
        
        #else
        
        var copy_secs = secs
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_secs) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_set_xfade_time, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_xfade_time: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_xfade_time")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_xfade_time ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_get_xfade_time, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_xfade_curve: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_xfade_curve")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 270443179)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_xfade_curve (_ curve: Curve?) {
        #if true
        
        var copy_curve_handle = curve?.handle
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachineTransition.method_set_xfade_curve, UnsafeMutableRawPointer (mutating: handle), nil, &copy_curve_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: curve?.handle) { p0 in
        _args.append (curve == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_set_xfade_curve, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_xfade_curve: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_xfade_curve")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2460114913)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_xfade_curve ()-> Curve? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_get_xfade_curve, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_reset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_reset")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_reset (_ reset: Bool) {
        #if true
        
        var copy_reset = reset
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachineTransition.method_set_reset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_reset)
        
        #else
        
        var copy_reset = reset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_reset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_set_reset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_reset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_reset")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_reset ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_is_reset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_priority")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_priority (_ priority: Int32) {
        #if true
        
        var copy_priority: Int = Int (priority)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachineTransition.method_set_priority, UnsafeMutableRawPointer (mutating: handle), nil, &copy_priority)
        
        #else
        
        var copy_priority: Int = Int (priority)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_priority) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_set_priority, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_priority")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_priority ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_get_priority, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_advance_expression: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_advance_expression")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_advance_expression (_ text: String) {
        #if true
        
        let gstr_text = GString (text)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachineTransition.method_set_advance_expression, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_text.content)
        
        #else
        
        let gstr_text = GString (text)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_text.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_set_advance_expression, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_advance_expression: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_advance_expression")
        return withUnsafePointer (to: &AnimationNodeStateMachineTransition.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_advance_expression ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (AnimationNodeStateMachineTransition.method_get_advance_expression, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    // Signals 
    /// Emitted when ``advanceCondition`` is changed.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.advanceConditionChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var advanceConditionChanged: SimpleSignal { SimpleSignal (target: self, signalName: "advance_condition_changed") }
    
}

