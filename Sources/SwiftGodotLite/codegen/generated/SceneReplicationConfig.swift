// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Configuration for properties to synchronize with a ``MultiplayerSynchronizer``.
open class SceneReplicationConfig: Resource {
    override open class var godotClassName: StringName { "SceneReplicationConfig" }
    public enum ReplicationMode: Int64 {
        /// Do not keep the given property synchronized.
        case never = 0 // REPLICATION_MODE_NEVER
        /// Replicate the given property on process by constantly sending updates using unreliable transfer mode.
        case always = 1 // REPLICATION_MODE_ALWAYS
        /// Replicate the given property on process by sending updates using reliable transfer mode when its value changes.
        case onChange = 2 // REPLICATION_MODE_ON_CHANGE
    }
    
    /* Methods */
    fileprivate static var method_get_properties: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_properties")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns a list of synchronized property ``NodePath``s.
    public final func getProperties ()-> VariantCollection<NodePath> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (SceneReplicationConfig.method_get_properties, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<NodePath>(content: _result)
    }
    
    fileprivate static var method_add_property: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_property")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4094619021)!
            }
            
        }
        
    }()
    
    /// Adds the property identified by the given `path` to the list of the properties being synchronized, optionally passing an `index`.
    /// 
    /// > Note: For details on restrictions and limitations on property synchronization, see ``MultiplayerSynchronizer``.
    /// 
    public final func addProperty (path: NodePath, index: Int32 = -1) {
        #if false
        
        var copy_index: Int = Int (index)
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_add_property, UnsafeMutableRawPointer (mutating: handle), nil, &path.content, &copy_index)
        
        #else
        
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SceneReplicationConfig.method_add_property, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_has_property: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_property")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 861721659)!
            }
            
        }
        
    }()
    
    /// Returns whether the given `path` is configured for synchronization.
    public final func hasProperty (path: NodePath)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_has_property, UnsafeMutableRawPointer (mutating: handle), &_result, &path.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SceneReplicationConfig.method_has_property, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_remove_property: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_property")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    /// Removes the property identified by the given `path` from the configuration.
    public final func removeProperty (path: NodePath) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_remove_property, UnsafeMutableRawPointer (mutating: handle), nil, &path.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SceneReplicationConfig.method_remove_property, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_property_get_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_get_index")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1382022557)!
            }
            
        }
        
    }()
    
    /// Finds the index of the given `path`.
    public final func propertyGetIndex (path: NodePath)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_property_get_index, UnsafeMutableRawPointer (mutating: handle), &_result, &path.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SceneReplicationConfig.method_property_get_index, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_property_get_spawn: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_get_spawn")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3456846888)!
            }
            
        }
        
    }()
    
    /// Returns whether the property identified by the given `path` is configured to be synchronized on spawn.
    public final func propertyGetSpawn (path: NodePath)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_property_get_spawn, UnsafeMutableRawPointer (mutating: handle), &_result, &path.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SceneReplicationConfig.method_property_get_spawn, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_property_set_spawn: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_set_spawn")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3868023870)!
            }
            
        }
        
    }()
    
    /// Sets whether the property identified by the given `path` is configured to be synchronized on spawn.
    public final func propertySetSpawn (path: NodePath, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_property_set_spawn, UnsafeMutableRawPointer (mutating: handle), nil, &path.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SceneReplicationConfig.method_property_set_spawn, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_property_get_replication_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_get_replication_mode")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2870606336)!
            }
            
        }
        
    }()
    
    /// Returns the replication mode for the property identified by the given `path`. See ``SceneReplicationConfig/ReplicationMode``.
    public final func propertyGetReplicationMode (path: NodePath)-> SceneReplicationConfig.ReplicationMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_property_get_replication_mode, UnsafeMutableRawPointer (mutating: handle), &_result, &path.content)
        return SceneReplicationConfig.ReplicationMode (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SceneReplicationConfig.method_property_get_replication_mode, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return SceneReplicationConfig.ReplicationMode (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_property_set_replication_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_set_replication_mode")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3200083865)!
            }
            
        }
        
    }()
    
    /// Sets the synchronization mode for the property identified by the given `path`. See ``SceneReplicationConfig/ReplicationMode``.
    public final func propertySetReplicationMode (path: NodePath, mode: SceneReplicationConfig.ReplicationMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_property_set_replication_mode, UnsafeMutableRawPointer (mutating: handle), nil, &path.content, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mode) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SceneReplicationConfig.method_property_set_replication_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_property_get_sync: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_get_sync")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3456846888)!
            }
            
        }
        
    }()
    
    /// Returns whether the property identified by the given `path` is configured to be synchronized on process.
    /// 
    /// _Deprecated._ Use ``propertyGetReplicationMode(path:)`` instead.
    /// 
    public final func propertyGetSync (path: NodePath)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_property_get_sync, UnsafeMutableRawPointer (mutating: handle), &_result, &path.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SceneReplicationConfig.method_property_get_sync, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_property_set_sync: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_set_sync")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3868023870)!
            }
            
        }
        
    }()
    
    /// Sets whether the property identified by the given `path` is configured to be synchronized on process.
    /// 
    /// _Deprecated._ Use ``propertySetReplicationMode(path:mode:)`` with .always instead.
    /// 
    public final func propertySetSync (path: NodePath, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_property_set_sync, UnsafeMutableRawPointer (mutating: handle), nil, &path.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SceneReplicationConfig.method_property_set_sync, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_property_get_watch: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_get_watch")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3456846888)!
            }
            
        }
        
    }()
    
    /// Returns whether the property identified by the given `path` is configured to be reliably synchronized when changes are detected on process.
    /// 
    /// _Deprecated._ Use ``propertyGetReplicationMode(path:)`` instead.
    /// 
    public final func propertyGetWatch (path: NodePath)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_property_get_watch, UnsafeMutableRawPointer (mutating: handle), &_result, &path.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SceneReplicationConfig.method_property_get_watch, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_property_set_watch: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_set_watch")
        return withUnsafePointer (to: &SceneReplicationConfig.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3868023870)!
            }
            
        }
        
    }()
    
    /// Sets whether the property identified by the given `path` is configured to be reliably synchronized when changes are detected on process.
    /// 
    /// _Deprecated._ Use ``propertySetReplicationMode(path:mode:)`` with .onChange instead.
    /// 
    public final func propertySetWatch (path: NodePath, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (SceneReplicationConfig.method_property_set_watch, UnsafeMutableRawPointer (mutating: handle), nil, &path.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SceneReplicationConfig.method_property_set_watch, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
}

