// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A material defined by a custom ``Shader`` program and the values of its shader parameters.
/// 
/// A material that uses a custom ``Shader`` program to render visual items (canvas items, meshes, skies, fog), or to process particles. Compared to other materials, ``ShaderMaterial`` gives deeper control over the generated shader code. For more information, see the shaders documentation index below.
/// 
/// Multiple ``ShaderMaterial``s can use the same shader and configure different values for the shader uniforms.
/// 
/// > Note: For performance reasons, the [signal Resource.changed] signal is only emitted when the ``Resource/resourceName`` changes. Only in editor, it is also emitted for ``shader`` changes.
/// 
open class ShaderMaterial: Material {
    override open class var godotClassName: StringName { "ShaderMaterial" }
    
    /* Properties */
    
    /// The ``Shader`` program used to render this material.
    final public var shader: Shader? {
        get {
            return get_shader ()
        }
        
        set {
            set_shader (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_shader: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shader")
        return withUnsafePointer (to: &ShaderMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341921675)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shader (_ shader: Shader?) {
        #if true
        
        var copy_shader_handle = shader?.handle
        
        gi.object_method_bind_ptrcall_v (ShaderMaterial.method_set_shader, UnsafeMutableRawPointer (mutating: handle), nil, &copy_shader_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: shader?.handle) { p0 in
        _args.append (shader == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ShaderMaterial.method_set_shader, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shader: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shader")
        return withUnsafePointer (to: &ShaderMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2078273437)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shader ()-> Shader? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (ShaderMaterial.method_get_shader, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_shader_parameter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shader_parameter")
        return withUnsafePointer (to: &ShaderMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3776071444)!
            }
            
        }
        
    }()
    
    /// Changes the value set for this material of a uniform in the shader.
    /// 
    /// > Note: `param` is case-sensitive and must match the name of the uniform in the code exactly (not the capitalized name in the inspector).
    /// 
    /// > Note: Changes to the shader uniform will be effective on all instances using this ``ShaderMaterial``. To prevent this, use per-instance uniforms with ``GeometryInstance3D/setInstanceShaderParameter(name:value:)`` or duplicate the ``ShaderMaterial`` resource using ``Resource/duplicate(subresources:)``. Per-instance uniforms allow for better shader reuse and are therefore faster, so they should be preferred over duplicating the ``ShaderMaterial`` when possible.
    /// 
    public final func setShaderParameter (param: StringName, value: Variant) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ShaderMaterial.method_set_shader_parameter, UnsafeMutableRawPointer (mutating: handle), nil, &param.content, &value.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &param.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &value.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ShaderMaterial.method_set_shader_parameter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_shader_parameter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shader_parameter")
        return withUnsafePointer (to: &ShaderMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2760726917)!
            }
            
        }
        
    }()
    
    /// Returns the current value set for this material of a uniform in the shader.
    public final func getShaderParameter (param: StringName)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ShaderMaterial.method_get_shader_parameter, UnsafeMutableRawPointer (mutating: handle), &_result.content, &param.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &param.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ShaderMaterial.method_get_shader_parameter, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
}

