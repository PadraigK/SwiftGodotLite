// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Boolean matrix.
/// 
/// A two-dimensional array of boolean values, can be used to efficiently store a binary matrix (every matrix element takes only one bit) and query the values using natural cartesian coordinates.
open class BitMap: Resource {
    override open class var godotClassName: StringName { "BitMap" }
    
    /* Properties */
    
    /* Methods */
    fileprivate static var method_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130785943)!
            }
            
        }
        
    }()
    
    /// Creates a bitmap with the specified size, filled with `false`.
    public final func create (size: Vector2i) {
        #if true
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (BitMap.method_create, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BitMap.method_create, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_create_from_image_alpha: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_from_image_alpha")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 106271684)!
            }
            
        }
        
    }()
    
    /// Creates a bitmap that matches the given image dimensions, every element of the bitmap is set to `false` if the alpha value of the image at that position is equal to `threshold` or less, and `true` in other case.
    public final func createFromImageAlpha (image: Image?, threshold: Double = 0.1) {
        #if true
        
        var copy_threshold = threshold
        var copy_image_handle = image?.handle
        
        gi.object_method_bind_ptrcall_v (BitMap.method_create_from_image_alpha, UnsafeMutableRawPointer (mutating: handle), nil, &copy_image_handle, &copy_threshold)
        
        #else
        
        var copy_threshold = threshold
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: image?.handle) { p0 in
        _args.append (image == nil ? nil : p0)
            withUnsafePointer (to: &copy_threshold) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (BitMap.method_create_from_image_alpha, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_bitv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bitv")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4153096796)!
            }
            
        }
        
    }()
    
    /// Sets the bitmap's element at the specified position, to the specified value.
    public final func setBitv (position: Vector2i, bit: Bool) {
        #if true
        
        var copy_position = position
        var copy_bit = bit
        
        gi.object_method_bind_ptrcall_v (BitMap.method_set_bitv, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position, &copy_bit)
        
        #else
        
        var copy_position = position
        var copy_bit = bit
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_bit) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (BitMap.method_set_bitv, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_bit: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bit")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1383440665)!
            }
            
        }
        
    }()
    
    /// Sets the bitmap's element at the specified position, to the specified value.
    public final func setBit (x: Int32, y: Int32, bit: Bool) {
        #if true
        
        var copy_x: Int = Int (x)
        var copy_y: Int = Int (y)
        var copy_bit = bit
        
        gi.object_method_bind_ptrcall_v (BitMap.method_set_bit, UnsafeMutableRawPointer (mutating: handle), nil, &copy_x, &copy_y, &copy_bit)
        
        #else
        
        var copy_x: Int = Int (x)
        var copy_y: Int = Int (y)
        var copy_bit = bit
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_x) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_y) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_bit) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (BitMap.method_set_bit, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_bitv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bitv")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3900751641)!
            }
            
        }
        
    }()
    
    /// Returns bitmap's value at the specified position.
    public final func getBitv (position: Vector2i)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (BitMap.method_get_bitv, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_position)
        return _result
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BitMap.method_get_bitv, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_bit: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bit")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2522259332)!
            }
            
        }
        
    }()
    
    /// Returns bitmap's value at the specified position.
    public final func getBit (x: Int32, y: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_x: Int = Int (x)
        var copy_y: Int = Int (y)
        
        gi.object_method_bind_ptrcall_v (BitMap.method_get_bit, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_x, &copy_y)
        return _result
        #else
        
        var copy_x: Int = Int (x)
        var copy_y: Int = Int (y)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_x) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_y) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (BitMap.method_get_bit, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_bit_rect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bit_rect")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 472162941)!
            }
            
        }
        
    }()
    
    /// Sets a rectangular portion of the bitmap to the specified value.
    public final func setBitRect (_ rect: Rect2i, bit: Bool) {
        #if true
        
        var copy_rect = rect
        var copy_bit = bit
        
        gi.object_method_bind_ptrcall_v (BitMap.method_set_bit_rect, UnsafeMutableRawPointer (mutating: handle), nil, &copy_rect, &copy_bit)
        
        #else
        
        var copy_rect = rect
        var copy_bit = bit
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_rect) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_bit) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (BitMap.method_set_bit_rect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_true_bit_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_true_bit_count")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of bitmap elements that are set to `true`.
    public final func getTrueBitCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (BitMap.method_get_true_bit_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    /// Returns bitmap's dimensions.
    public final func getSize ()-> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall (BitMap.method_get_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_resize: GDExtensionMethodBindPtr = {
        let methodName = StringName ("resize")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130785943)!
            }
            
        }
        
    }()
    
    /// Resizes the image to `newSize`.
    public final func resize (newSize: Vector2i) {
        #if true
        
        var copy_new_size = newSize
        
        gi.object_method_bind_ptrcall_v (BitMap.method_resize, UnsafeMutableRawPointer (mutating: handle), nil, &copy_new_size)
        
        #else
        
        var copy_new_size = newSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_new_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BitMap.method_resize, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_grow_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("grow_mask")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3317281434)!
            }
            
        }
        
    }()
    
    /// Applies morphological dilation or erosion to the bitmap. If `pixels` is positive, dilation is applied to the bitmap. If `pixels` is negative, erosion is applied to the bitmap. `rect` defines the area where the morphological operation is applied. Pixels located outside the `rect` are unaffected by ``growMask(pixels:rect:)``.
    public final func growMask (pixels: Int32, rect: Rect2i) {
        #if true
        
        var copy_pixels: Int = Int (pixels)
        var copy_rect = rect
        
        gi.object_method_bind_ptrcall_v (BitMap.method_grow_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pixels, &copy_rect)
        
        #else
        
        var copy_pixels: Int = Int (pixels)
        var copy_rect = rect
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pixels) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_rect) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (BitMap.method_grow_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_convert_to_image: GDExtensionMethodBindPtr = {
        let methodName = StringName ("convert_to_image")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4190603485)!
            }
            
        }
        
    }()
    
    /// Returns an image of the same size as the bitmap and with a ``Image.Format`` of type ``Image/Format/l8``. `true` bits of the bitmap are being converted into white pixels, and `false` bits into black.
    public final func convertToImage ()-> Image? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (BitMap.method_convert_to_image, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_opaque_to_polygons: GDExtensionMethodBindPtr = {
        let methodName = StringName ("opaque_to_polygons")
        return withUnsafePointer (to: &BitMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 48478126)!
            }
            
        }
        
    }()
    
    /// Creates an ``GArray`` of polygons covering a rectangular portion of the bitmap. It uses a marching squares algorithm, followed by Ramer-Douglas-Peucker (RDP) reduction of the number of vertices. Each polygon is described as a ``PackedVector2Array`` of its vertices.
    /// 
    /// To get polygons covering the whole bitmap, pass:
    /// 
    /// `epsilon` is passed to RDP to control how accurately the polygons cover the bitmap: a lower `epsilon` corresponds to more points in the polygons.
    /// 
    public final func opaqueToPolygons (rect: Rect2i, epsilon: Double = 2.0)-> VariantCollection<PackedVector2Array> {
        var _result: Int64 = 0
        #if true
        
        var copy_rect = rect
        var copy_epsilon = epsilon
        
        gi.object_method_bind_ptrcall_v (BitMap.method_opaque_to_polygons, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_rect, &copy_epsilon)
        return VariantCollection<PackedVector2Array>(content: _result)
        #else
        
        var copy_rect = rect
        var copy_epsilon = epsilon
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_rect) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_epsilon) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (BitMap.method_opaque_to_polygons, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return VariantCollection<PackedVector2Array>(content: _result)
            }
        }
        
        #endif
    }
    
}

