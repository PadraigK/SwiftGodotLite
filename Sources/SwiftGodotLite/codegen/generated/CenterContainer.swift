// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A container that keeps child controls in its center.
/// 
/// ``CenterContainer`` is a container that keeps all of its child controls in its center at their minimum size.
open class CenterContainer: Container {
    override open class var godotClassName: StringName { "CenterContainer" }
    
    /* Properties */
    
    /// If `true`, centers children relative to the ``CenterContainer``'s top left corner.
    final public var useTopLeft: Bool {
        get {
            return is_using_top_left ()
        }
        
        set {
            set_use_top_left (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_use_top_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_top_left")
        return withUnsafePointer (to: &CenterContainer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_top_left (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (CenterContainer.method_set_use_top_left, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CenterContainer.method_set_use_top_left, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_using_top_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_using_top_left")
        return withUnsafePointer (to: &CenterContainer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_using_top_left ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CenterContainer.method_is_using_top_left, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

