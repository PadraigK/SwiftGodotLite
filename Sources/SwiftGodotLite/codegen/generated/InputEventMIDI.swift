// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Represents an input event from a MIDI device, such as a piano.
/// 
/// InputEventMIDI allows receiving input events from MIDI (Musical Instrument Digital Interface) devices such as a piano.
/// 
/// MIDI signals can be sent over a 5-pin MIDI connector or over USB, if your device supports both be sure to check the settings in the device to see which output it's using.
/// 
/// To receive input events from MIDI devices, you need to call ``OS/openMidiInputs()``. You can check which devices are detected using ``OS/getConnectedMidiInputs()``.
/// 
/// Note that Godot does not currently support MIDI output, so there is no way to emit MIDI signals from Godot. Only MIDI input works.
/// 
open class InputEventMIDI: InputEvent {
    override open class var godotClassName: StringName { "InputEventMIDI" }
    
    /* Properties */
    
    /// The MIDI channel of this input event. There are 16 channels, so this value ranges from 0 to 15. MIDI channel 9 is reserved for the use with percussion instruments, the rest of the channels are for non-percussion instruments.
    final public var channel: Int32 {
        get {
            return get_channel ()
        }
        
        set {
            set_channel (newValue)
        }
        
    }
    
    /// Returns a value indicating the type of message for this MIDI signal. This is a member of the ``MIDIMessage`` enum.
    /// 
    /// For MIDI messages between 0x80 and 0xEF, only the left half of the bits are returned as this value, as the other part is the channel (ex: 0x94 becomes 0x9). For MIDI messages from 0xF0 to 0xFF, the value is returned as-is.
    /// 
    /// Notes will return ``MIDIMessage/noteOn`` when activated, but they might not always return ``MIDIMessage/noteOff`` when deactivated, therefore your code should treat the input as stopped if some period of time has passed.
    /// 
    /// Some MIDI devices may send ``MIDIMessage/noteOn`` with zero velocity instead of ``MIDIMessage/noteOff``.
    /// 
    /// For more information, see the note in ``velocity`` and the MIDI message status byte list chart linked above.
    /// 
    final public var message: MIDIMessage {
        get {
            return get_message ()
        }
        
        set {
            set_message (newValue)
        }
        
    }
    
    /// The pitch index number of this MIDI signal. This value ranges from 0 to 127. On a piano, middle C is 60, and A440 is 69, see the "MIDI note" column of the piano key frequency chart on Wikipedia for more information.
    final public var pitch: Int32 {
        get {
            return get_pitch ()
        }
        
        set {
            set_pitch (newValue)
        }
        
    }
    
    /// The velocity of the MIDI signal. This value ranges from 0 to 127. For a piano, this corresponds to how quickly the key was pressed, and is rarely above about 110 in practice.
    /// 
    /// > Note: Some MIDI devices may send a ``MIDIMessage/noteOn`` message with zero velocity and expect this to be treated the same as a ``MIDIMessage/noteOff`` message, but device implementations vary so Godot reports event data exactly as received. Depending on the hardware and the needs of the game/app, this MIDI quirk can be handled robustly with a couple lines of script (check for ``MIDIMessage/noteOn`` with velocity zero).
    /// 
    final public var velocity: Int32 {
        get {
            return get_velocity ()
        }
        
        set {
            set_velocity (newValue)
        }
        
    }
    
    /// The instrument of this input event. This value ranges from 0 to 127. Refer to the instrument list on the General MIDI wikipedia article to see a list of instruments, except that this value is 0-index, so subtract one from every number on that chart. A standard piano will have an instrument number of 0.
    final public var instrument: Int32 {
        get {
            return get_instrument ()
        }
        
        set {
            set_instrument (newValue)
        }
        
    }
    
    /// The pressure of the MIDI signal. This value ranges from 0 to 127. For many devices, this value is always zero.
    final public var pressure: Int32 {
        get {
            return get_pressure ()
        }
        
        set {
            set_pressure (newValue)
        }
        
    }
    
    /// If the message is ``MIDIMessage/controlChange``, this indicates the controller number, otherwise this is zero. Controllers include devices such as pedals and levers.
    final public var controllerNumber: Int32 {
        get {
            return get_controller_number ()
        }
        
        set {
            set_controller_number (newValue)
        }
        
    }
    
    /// If the message is ``MIDIMessage/controlChange``, this indicates the controller value, otherwise this is zero. Controllers include devices such as pedals and levers.
    final public var controllerValue: Int32 {
        get {
            return get_controller_value ()
        }
        
        set {
            set_controller_value (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_channel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_channel")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_channel (_ channel: Int32) {
        #if false
        
        var copy_channel: Int = Int (channel)
        
        gi.object_method_bind_ptrcall_v (InputEventMIDI.method_set_channel, UnsafeMutableRawPointer (mutating: handle), nil, &copy_channel)
        
        #else
        
        var copy_channel: Int = Int (channel)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_channel) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMIDI.method_set_channel, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_channel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_channel")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_channel ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (InputEventMIDI.method_get_channel, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_message: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_message")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1064271510)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_message (_ message: MIDIMessage) {
        #if false
        
        var copy_message = Int64 (message.rawValue)
        
        gi.object_method_bind_ptrcall_v (InputEventMIDI.method_set_message, UnsafeMutableRawPointer (mutating: handle), nil, &copy_message)
        
        #else
        
        var copy_message = Int64 (message.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_message) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMIDI.method_set_message, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_message: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_message")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1936512097)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_message ()-> MIDIMessage {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (InputEventMIDI.method_get_message, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return MIDIMessage (rawValue: _result)!
    }
    
    fileprivate static var method_set_pitch: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pitch")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pitch (_ pitch: Int32) {
        #if false
        
        var copy_pitch: Int = Int (pitch)
        
        gi.object_method_bind_ptrcall_v (InputEventMIDI.method_set_pitch, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pitch)
        
        #else
        
        var copy_pitch: Int = Int (pitch)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pitch) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMIDI.method_set_pitch, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_pitch: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pitch")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pitch ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (InputEventMIDI.method_get_pitch, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_velocity")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_velocity (_ velocity: Int32) {
        #if false
        
        var copy_velocity: Int = Int (velocity)
        
        gi.object_method_bind_ptrcall_v (InputEventMIDI.method_set_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_velocity)
        
        #else
        
        var copy_velocity: Int = Int (velocity)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMIDI.method_set_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_velocity")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_velocity ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (InputEventMIDI.method_get_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_instrument: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_instrument")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_instrument (_ instrument: Int32) {
        #if false
        
        var copy_instrument: Int = Int (instrument)
        
        gi.object_method_bind_ptrcall_v (InputEventMIDI.method_set_instrument, UnsafeMutableRawPointer (mutating: handle), nil, &copy_instrument)
        
        #else
        
        var copy_instrument: Int = Int (instrument)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_instrument) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMIDI.method_set_instrument, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_instrument: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_instrument")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_instrument ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (InputEventMIDI.method_get_instrument, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_pressure: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pressure")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pressure (_ pressure: Int32) {
        #if false
        
        var copy_pressure: Int = Int (pressure)
        
        gi.object_method_bind_ptrcall_v (InputEventMIDI.method_set_pressure, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pressure)
        
        #else
        
        var copy_pressure: Int = Int (pressure)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pressure) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMIDI.method_set_pressure, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_pressure: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pressure")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pressure ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (InputEventMIDI.method_get_pressure, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_controller_number: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_controller_number")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_controller_number (_ controllerNumber: Int32) {
        #if false
        
        var copy_controller_number: Int = Int (controllerNumber)
        
        gi.object_method_bind_ptrcall_v (InputEventMIDI.method_set_controller_number, UnsafeMutableRawPointer (mutating: handle), nil, &copy_controller_number)
        
        #else
        
        var copy_controller_number: Int = Int (controllerNumber)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_controller_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMIDI.method_set_controller_number, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_controller_number: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_controller_number")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_controller_number ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (InputEventMIDI.method_get_controller_number, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_controller_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_controller_value")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_controller_value (_ controllerValue: Int32) {
        #if false
        
        var copy_controller_value: Int = Int (controllerValue)
        
        gi.object_method_bind_ptrcall_v (InputEventMIDI.method_set_controller_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_controller_value)
        
        #else
        
        var copy_controller_value: Int = Int (controllerValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_controller_value) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMIDI.method_set_controller_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_controller_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_controller_value")
        return withUnsafePointer (to: &InputEventMIDI.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_controller_value ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (InputEventMIDI.method_get_controller_value, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

