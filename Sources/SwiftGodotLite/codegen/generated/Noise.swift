// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract base class for noise generators.
/// 
/// This class defines the interface for noise generation libraries to inherit from.
/// 
/// A default ``getSeamlessImage(width:height:invert:in3dSpace:skirt:normalize:)`` implementation is provided for libraries that do not provide seamless noise. This function requests a larger image from the ``getImage(width:height:invert:in3dSpace:normalize:)`` method, reverses the quadrants of the image, then uses the strips of extra width to blend over the seams.
/// 
/// Inheriting noise classes can optionally override this function to provide a more optimal algorithm.
/// 
open class Noise: Resource {
    override open class var godotClassName: StringName { "Noise" }
    /* Methods */
    fileprivate static var method_get_noise_1d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_noise_1d")
        return withUnsafePointer (to: &Noise.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3919130443)!
            }
            
        }
        
    }()
    
    /// Returns the 1D noise value at the given (x) coordinate.
    public final func getNoise1d (x: Double)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_x = x
        
        gi.object_method_bind_ptrcall_v (Noise.method_get_noise_1d, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_x)
        return _result
        #else
        
        var copy_x = x
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_x) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Noise.method_get_noise_1d, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_noise_2d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_noise_2d")
        return withUnsafePointer (to: &Noise.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2753205203)!
            }
            
        }
        
    }()
    
    /// Returns the 2D noise value at the given position.
    public final func getNoise2d (x: Double, y: Double)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_x = x
        var copy_y = y
        
        gi.object_method_bind_ptrcall_v (Noise.method_get_noise_2d, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_x, &copy_y)
        return _result
        #else
        
        var copy_x = x
        var copy_y = y
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_x) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_y) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Noise.method_get_noise_2d, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_noise_2dv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_noise_2dv")
        return withUnsafePointer (to: &Noise.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2276447920)!
            }
            
        }
        
    }()
    
    /// Returns the 2D noise value at the given position.
    public final func getNoise2dv (v: Vector2)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_v = v
        
        gi.object_method_bind_ptrcall_v (Noise.method_get_noise_2dv, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_v)
        return _result
        #else
        
        var copy_v = v
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_v) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Noise.method_get_noise_2dv, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_noise_3d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_noise_3d")
        return withUnsafePointer (to: &Noise.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 973811851)!
            }
            
        }
        
    }()
    
    /// Returns the 3D noise value at the given position.
    public final func getNoise3d (x: Double, y: Double, z: Double)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_x = x
        var copy_y = y
        var copy_z = z
        
        gi.object_method_bind_ptrcall_v (Noise.method_get_noise_3d, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_x, &copy_y, &copy_z)
        return _result
        #else
        
        var copy_x = x
        var copy_y = y
        var copy_z = z
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_x) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_y) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_z) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (Noise.method_get_noise_3d, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_noise_3dv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_noise_3dv")
        return withUnsafePointer (to: &Noise.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1109078154)!
            }
            
        }
        
    }()
    
    /// Returns the 3D noise value at the given position.
    public final func getNoise3dv (v: Vector3)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_v = v
        
        gi.object_method_bind_ptrcall_v (Noise.method_get_noise_3dv, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_v)
        return _result
        #else
        
        var copy_v = v
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_v) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Noise.method_get_noise_3dv, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_image: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_image")
        return withUnsafePointer (to: &Noise.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3180683109)!
            }
            
        }
        
    }()
    
    /// Returns an ``Image`` containing 2D noise values.
    /// 
    /// > Note: With `normalize` set to `false`, the default implementation expects the noise generator to return values in the range `-1.0` to `1.0`.
    /// 
    public final func getImage (width: Int32, height: Int32, invert: Bool = false, in3dSpace: Bool = false, normalize: Bool = true)-> Image? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_width: Int = Int (width)
        var copy_height: Int = Int (height)
        var copy_invert = invert
        var copy_in_3d_space = in3dSpace
        var copy_normalize = normalize
        
        gi.object_method_bind_ptrcall_v (Noise.method_get_image, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_width, &copy_height, &copy_invert, &copy_in_3d_space, &copy_normalize)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_width: Int = Int (width)
        var copy_height: Int = Int (height)
        var copy_invert = invert
        var copy_in_3d_space = in3dSpace
        var copy_normalize = normalize
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_height) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_invert) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_in_3d_space) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_normalize) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (Noise.method_get_image, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_seamless_image: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_seamless_image")
        return withUnsafePointer (to: &Noise.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2770743602)!
            }
            
        }
        
    }()
    
    /// Returns an ``Image`` containing seamless 2D noise values.
    /// 
    /// > Note: With `normalize` set to `false`, the default implementation expects the noise generator to return values in the range `-1.0` to `1.0`.
    /// 
    public final func getSeamlessImage (width: Int32, height: Int32, invert: Bool = false, in3dSpace: Bool = false, skirt: Double = 0.1, normalize: Bool = true)-> Image? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_width: Int = Int (width)
        var copy_height: Int = Int (height)
        var copy_invert = invert
        var copy_in_3d_space = in3dSpace
        var copy_skirt = skirt
        var copy_normalize = normalize
        
        gi.object_method_bind_ptrcall_v (Noise.method_get_seamless_image, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_width, &copy_height, &copy_invert, &copy_in_3d_space, &copy_skirt, &copy_normalize)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_width: Int = Int (width)
        var copy_height: Int = Int (height)
        var copy_invert = invert
        var copy_in_3d_space = in3dSpace
        var copy_skirt = skirt
        var copy_normalize = normalize
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_height) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_invert) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_in_3d_space) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_skirt) { p4 in
                            _args.append (p4)
                            return withUnsafePointer (to: &copy_normalize) { p5 in
                                _args.append (p5)
        
                                gi.object_method_bind_ptrcall (Noise.method_get_seamless_image, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                                guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_image_3d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_image_3d")
        return withUnsafePointer (to: &Noise.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3977814329)!
            }
            
        }
        
    }()
    
    /// Returns an ``GArray`` of ``Image``s containing 3D noise values for use with ``ImageTexture3D/create(format:width:height:depth:useMipmaps:data:)``.
    /// 
    /// > Note: With `normalize` set to `false`, the default implementation expects the noise generator to return values in the range `-1.0` to `1.0`.
    /// 
    public final func getImage3d (width: Int32, height: Int32, depth: Int32, invert: Bool = false, normalize: Bool = true)-> ObjectCollection<Image> {
        var _result: Int64 = 0
        #if false
        
        var copy_width: Int = Int (width)
        var copy_height: Int = Int (height)
        var copy_depth: Int = Int (depth)
        var copy_invert = invert
        var copy_normalize = normalize
        
        gi.object_method_bind_ptrcall_v (Noise.method_get_image_3d, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_width, &copy_height, &copy_depth, &copy_invert, &copy_normalize)
        return ObjectCollection<Image>(content: _result)
        #else
        
        var copy_width: Int = Int (width)
        var copy_height: Int = Int (height)
        var copy_depth: Int = Int (depth)
        var copy_invert = invert
        var copy_normalize = normalize
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_height) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_depth) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_invert) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_normalize) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (Noise.method_get_image_3d, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                            return ObjectCollection<Image>(content: _result)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_seamless_image_3d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_seamless_image_3d")
        return withUnsafePointer (to: &Noise.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 451006340)!
            }
            
        }
        
    }()
    
    /// Returns an ``GArray`` of ``Image``s containing seamless 3D noise values for use with ``ImageTexture3D/create(format:width:height:depth:useMipmaps:data:)``.
    /// 
    /// > Note: With `normalize` set to `false`, the default implementation expects the noise generator to return values in the range `-1.0` to `1.0`.
    /// 
    public final func getSeamlessImage3d (width: Int32, height: Int32, depth: Int32, invert: Bool = false, skirt: Double = 0.1, normalize: Bool = true)-> ObjectCollection<Image> {
        var _result: Int64 = 0
        #if false
        
        var copy_width: Int = Int (width)
        var copy_height: Int = Int (height)
        var copy_depth: Int = Int (depth)
        var copy_invert = invert
        var copy_skirt = skirt
        var copy_normalize = normalize
        
        gi.object_method_bind_ptrcall_v (Noise.method_get_seamless_image_3d, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_width, &copy_height, &copy_depth, &copy_invert, &copy_skirt, &copy_normalize)
        return ObjectCollection<Image>(content: _result)
        #else
        
        var copy_width: Int = Int (width)
        var copy_height: Int = Int (height)
        var copy_depth: Int = Int (depth)
        var copy_invert = invert
        var copy_skirt = skirt
        var copy_normalize = normalize
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_height) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_depth) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_invert) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_skirt) { p4 in
                            _args.append (p4)
                            return withUnsafePointer (to: &copy_normalize) { p5 in
                                _args.append (p5)
        
                                gi.object_method_bind_ptrcall (Noise.method_get_seamless_image_3d, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                                return ObjectCollection<Image>(content: _result)
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
}

