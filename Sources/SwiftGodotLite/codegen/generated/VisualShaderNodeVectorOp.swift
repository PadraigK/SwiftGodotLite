// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A vector operator to be used within the visual shader graph.
/// 
/// A visual shader node for use of vector operators. Operates on vector `a` and vector `b`.
open class VisualShaderNodeVectorOp: VisualShaderNodeVectorBase {
    override open class var godotClassName: StringName { "VisualShaderNodeVectorOp" }
    public enum Operator: Int64 {
        /// Adds two vectors.
        case add = 0 // OP_ADD
        /// Subtracts a vector from a vector.
        case sub = 1 // OP_SUB
        /// Multiplies two vectors.
        case mul = 2 // OP_MUL
        /// Divides vector by vector.
        case div = 3 // OP_DIV
        /// Returns the remainder of the two vectors.
        case mod = 4 // OP_MOD
        /// Returns the value of the first parameter raised to the power of the second, for each component of the vectors.
        case pow = 5 // OP_POW
        /// Returns the greater of two values, for each component of the vectors.
        case max = 6 // OP_MAX
        /// Returns the lesser of two values, for each component of the vectors.
        case min = 7 // OP_MIN
        /// Calculates the cross product of two vectors.
        case cross = 8 // OP_CROSS
        /// Returns the arc-tangent of the parameters.
        case atan2 = 9 // OP_ATAN2
        /// Returns the vector that points in the direction of reflection. `a` is incident vector and `b` is the normal vector.
        case reflect = 10 // OP_REFLECT
        /// Vector step operator. Returns `0.0` if `a` is smaller than `b` and `1.0` otherwise.
        case step = 11 // OP_STEP
        /// Represents the size of the ``VisualShaderNodeVectorOp/Operator`` enum.
        case enumSize = 12 // OP_ENUM_SIZE
    }
    
    
    /* Properties */
    
    /// The operator to be used. See ``VisualShaderNodeVectorOp/Operator`` for options.
    final public var `operator`: VisualShaderNodeVectorOp.Operator {
        get {
            return get_operator ()
        }
        
        set {
            set_operator (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_operator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_operator")
        return withUnsafePointer (to: &VisualShaderNodeVectorOp.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3371507302)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_operator (_ op: VisualShaderNodeVectorOp.Operator) {
        #if true
        
        var copy_op = Int64 (op.rawValue)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeVectorOp.method_set_operator, UnsafeMutableRawPointer (mutating: handle), nil, &copy_op)
        
        #else
        
        var copy_op = Int64 (op.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_op) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeVectorOp.method_set_operator, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_operator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_operator")
        return withUnsafePointer (to: &VisualShaderNodeVectorOp.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 11793929)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_operator ()-> VisualShaderNodeVectorOp.Operator {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (VisualShaderNodeVectorOp.method_get_operator, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VisualShaderNodeVectorOp.Operator (rawValue: _result)!
    }
    
}

