// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Adds a distortion audio effect to an Audio bus.
/// 
/// Modifies the sound to make it distorted.
/// 
/// 
/// Different types are available: clip, tan, lo-fi (bit crushing), overdrive, or waveshape.
/// 
/// By distorting the waveform the frequency content changes, which will often make the sound "crunchy" or "abrasive". For games, it can simulate sound coming from some saturated device or speaker very efficiently.
/// 
open class AudioEffectDistortion: AudioEffect {
    override open class var godotClassName: StringName { "AudioEffectDistortion" }
    public enum Mode: Int64 {
        /// Digital distortion effect which cuts off peaks at the top and bottom of the waveform.
        case clip = 0 // MODE_CLIP
        /// 
        case atan = 1 // MODE_ATAN
        /// Low-resolution digital distortion effect (bit depth reduction). You can use it to emulate the sound of early digital audio devices.
        case lofi = 2 // MODE_LOFI
        /// Emulates the warm distortion produced by a field effect transistor, which is commonly used in solid-state musical instrument amplifiers. The ``drive`` property has no effect in this mode.
        case overdrive = 3 // MODE_OVERDRIVE
        /// Waveshaper distortions are used mainly by electronic musicians to achieve an extra-abrasive sound.
        case waveshape = 4 // MODE_WAVESHAPE
    }
    
    
    /* Properties */
    
    /// Distortion type.
    final public var mode: AudioEffectDistortion.Mode {
        get {
            return get_mode ()
        }
        
        set {
            set_mode (newValue)
        }
        
    }
    
    /// Increases or decreases the volume before the effect, in decibels. Value can range from -60 to 60.
    final public var preGain: Double {
        get {
            return get_pre_gain ()
        }
        
        set {
            set_pre_gain (newValue)
        }
        
    }
    
    /// High-pass filter, in Hz. Frequencies higher than this value will not be affected by the distortion. Value can range from 1 to 20000.
    final public var keepHfHz: Double {
        get {
            return get_keep_hf_hz ()
        }
        
        set {
            set_keep_hf_hz (newValue)
        }
        
    }
    
    /// Distortion power. Value can range from 0 to 1.
    final public var drive: Double {
        get {
            return get_drive ()
        }
        
        set {
            set_drive (newValue)
        }
        
    }
    
    /// Increases or decreases the volume after the effect, in decibels. Value can range from -80 to 24.
    final public var postGain: Double {
        get {
            return get_post_gain ()
        }
        
        set {
            set_post_gain (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mode")
        return withUnsafePointer (to: &AudioEffectDistortion.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1314744793)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mode (_ mode: AudioEffectDistortion.Mode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (AudioEffectDistortion.method_set_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectDistortion.method_set_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mode")
        return withUnsafePointer (to: &AudioEffectDistortion.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 809118343)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mode ()-> AudioEffectDistortion.Mode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AudioEffectDistortion.method_get_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AudioEffectDistortion.Mode (rawValue: _result)!
    }
    
    fileprivate static var method_set_pre_gain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pre_gain")
        return withUnsafePointer (to: &AudioEffectDistortion.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pre_gain (_ preGain: Double) {
        #if true
        
        var copy_pre_gain = preGain
        
        gi.object_method_bind_ptrcall_v (AudioEffectDistortion.method_set_pre_gain, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pre_gain)
        
        #else
        
        var copy_pre_gain = preGain
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pre_gain) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectDistortion.method_set_pre_gain, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_pre_gain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pre_gain")
        return withUnsafePointer (to: &AudioEffectDistortion.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pre_gain ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectDistortion.method_get_pre_gain, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_keep_hf_hz: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_keep_hf_hz")
        return withUnsafePointer (to: &AudioEffectDistortion.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_keep_hf_hz (_ keepHfHz: Double) {
        #if true
        
        var copy_keep_hf_hz = keepHfHz
        
        gi.object_method_bind_ptrcall_v (AudioEffectDistortion.method_set_keep_hf_hz, UnsafeMutableRawPointer (mutating: handle), nil, &copy_keep_hf_hz)
        
        #else
        
        var copy_keep_hf_hz = keepHfHz
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_keep_hf_hz) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectDistortion.method_set_keep_hf_hz, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_keep_hf_hz: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_keep_hf_hz")
        return withUnsafePointer (to: &AudioEffectDistortion.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_keep_hf_hz ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectDistortion.method_get_keep_hf_hz, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_drive: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_drive")
        return withUnsafePointer (to: &AudioEffectDistortion.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_drive (_ drive: Double) {
        #if true
        
        var copy_drive = drive
        
        gi.object_method_bind_ptrcall_v (AudioEffectDistortion.method_set_drive, UnsafeMutableRawPointer (mutating: handle), nil, &copy_drive)
        
        #else
        
        var copy_drive = drive
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_drive) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectDistortion.method_set_drive, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_drive: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_drive")
        return withUnsafePointer (to: &AudioEffectDistortion.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_drive ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectDistortion.method_get_drive, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_post_gain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_post_gain")
        return withUnsafePointer (to: &AudioEffectDistortion.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_post_gain (_ postGain: Double) {
        #if true
        
        var copy_post_gain = postGain
        
        gi.object_method_bind_ptrcall_v (AudioEffectDistortion.method_set_post_gain, UnsafeMutableRawPointer (mutating: handle), nil, &copy_post_gain)
        
        #else
        
        var copy_post_gain = postGain
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_post_gain) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectDistortion.method_set_post_gain, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_post_gain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_post_gain")
        return withUnsafePointer (to: &AudioEffectDistortion.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_post_gain ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectDistortion.method_get_post_gain, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

