// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Placeholder class for a 2-dimensional texture.
/// 
/// This class is used when loading a project that uses a ``Texture2D`` subclass in 2 conditions:
/// 
/// - When running the project exported in dedicated server mode, only the texture's dimensions are kept (as they may be relied upon for gameplay purposes or positioning of other elements). This allows reducing the exported PCK's size significantly.
/// 
/// - When this subclass is missing due to using a different engine version or build (e.g. modules disabled).
/// 
/// > Note: This is not intended to be used as an actual texture for rendering. It is not guaranteed to work like one in shaders or materials (for example when calculating UV).
/// 
open class PlaceholderTexture2D: Texture2D {
    override open class var godotClassName: StringName { "PlaceholderTexture2D" }
    
    /* Properties */
    
    /// The texture's size (in pixels).
    final public var size: Vector2 {
        get {
            return getSize ()
        }
        
        set {
            set_size (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_size")
        return withUnsafePointer (to: &PlaceholderTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_size (_ size: Vector2) {
        #if true
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (PlaceholderTexture2D.method_set_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PlaceholderTexture2D.method_set_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

