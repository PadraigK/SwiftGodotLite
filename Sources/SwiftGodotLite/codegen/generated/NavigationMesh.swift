// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A navigation mesh that defines traversable areas and obstacles.
/// 
/// A navigation mesh is a collection of polygons that define which areas of an environment are traversable to aid agents in pathfinding through complicated spaces.
open class NavigationMesh: Resource {
    override open class var godotClassName: StringName { "NavigationMesh" }
    public enum SamplePartitionType: Int64 {
        /// Watershed partitioning. Generally the best choice if you precompute the navigation mesh, use this if you have large open areas.
        case watershed = 0 // SAMPLE_PARTITION_WATERSHED
        /// Monotone partitioning. Use this if you want fast navigation mesh generation.
        case monotone = 1 // SAMPLE_PARTITION_MONOTONE
        /// Layer partitioning. Good choice to use for tiled navigation mesh with medium and small sized tiles.
        case layers = 2 // SAMPLE_PARTITION_LAYERS
        /// Represents the size of the ``NavigationMesh/SamplePartitionType`` enum.
        case max = 3 // SAMPLE_PARTITION_MAX
    }
    
    public enum ParsedGeometryType: Int64 {
        /// Parses mesh instances as geometry. This includes ``MeshInstance3D``, ``CSGShape3D``, and ``GridMap`` nodes.
        case meshInstances = 0 // PARSED_GEOMETRY_MESH_INSTANCES
        /// Parses ``StaticBody3D`` colliders as geometry. The collider should be in any of the layers specified by ``geometryCollisionMask``.
        case staticColliders = 1 // PARSED_GEOMETRY_STATIC_COLLIDERS
        /// Both .parsedGeometryMeshInstances and .parsedGeometryStaticColliders.
        case both = 2 // PARSED_GEOMETRY_BOTH
        /// Represents the size of the ``NavigationMesh/ParsedGeometryType`` enum.
        case max = 3 // PARSED_GEOMETRY_MAX
    }
    
    public enum SourceGeometryMode: Int64 {
        /// Scans the child nodes of the root node recursively for geometry.
        case rootNodeChildren = 0 // SOURCE_GEOMETRY_ROOT_NODE_CHILDREN
        /// Scans nodes in a group and their child nodes recursively for geometry. The group is specified by ``geometrySourceGroupName``.
        case groupsWithChildren = 1 // SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN
        /// Uses nodes in a group for geometry. The group is specified by ``geometrySourceGroupName``.
        case groupsExplicit = 2 // SOURCE_GEOMETRY_GROUPS_EXPLICIT
        /// Represents the size of the ``NavigationMesh/SourceGeometryMode`` enum.
        case max = 3 // SOURCE_GEOMETRY_MAX
    }
    
    
    /* Properties */
    
    final public var vertices: PackedVector3Array {
        get {
            return get_vertices ()
        }
        
        set {
            set_vertices (newValue)
        }
        
    }
    
    /// Partitioning algorithm for creating the navigation mesh polys. See ``NavigationMesh/SamplePartitionType`` for possible values.
    final public var samplePartitionType: NavigationMesh.SamplePartitionType {
        get {
            return get_sample_partition_type ()
        }
        
        set {
            set_sample_partition_type (newValue)
        }
        
    }
    
    /// Determines which type of nodes will be parsed as geometry. See ``NavigationMesh/ParsedGeometryType`` for possible values.
    final public var geometryParsedGeometryType: NavigationMesh.ParsedGeometryType {
        get {
            return get_parsed_geometry_type ()
        }
        
        set {
            set_parsed_geometry_type (newValue)
        }
        
    }
    
    /// The physics layers to scan for static colliders.
    /// 
    /// Only used when ``geometryParsedGeometryType`` is .parsedGeometryStaticColliders or .parsedGeometryBoth.
    /// 
    final public var geometryCollisionMask: UInt32 {
        get {
            return get_collision_mask ()
        }
        
        set {
            set_collision_mask (newValue)
        }
        
    }
    
    /// The source of the geometry used when baking. See ``NavigationMesh/SourceGeometryMode`` for possible values.
    final public var geometrySourceGeometryMode: NavigationMesh.SourceGeometryMode {
        get {
            return get_source_geometry_mode ()
        }
        
        set {
            set_source_geometry_mode (newValue)
        }
        
    }
    
    /// The name of the group to scan for geometry.
    /// 
    /// Only used when ``geometrySourceGeometryMode`` is .sourceGeometryGroupsWithChildren or .sourceGeometryGroupsExplicit.
    /// 
    final public var geometrySourceGroupName: StringName {
        get {
            return get_source_group_name ()
        }
        
        set {
            set_source_group_name (newValue)
        }
        
    }
    
    /// The cell size used to rasterize the navigation mesh vertices on the XZ plane. Must match with the cell size on the navigation map.
    final public var cellSize: Double {
        get {
            return get_cell_size ()
        }
        
        set {
            set_cell_size (newValue)
        }
        
    }
    
    /// The cell height used to rasterize the navigation mesh vertices on the Y axis. Must match with the cell height on the navigation map.
    final public var cellHeight: Double {
        get {
            return get_cell_height ()
        }
        
        set {
            set_cell_height (newValue)
        }
        
    }
    
    /// The minimum floor to ceiling height that will still allow the floor area to be considered walkable.
    /// 
    /// > Note: While baking, this value will be rounded up to the nearest multiple of ``cellHeight``.
    /// 
    final public var agentHeight: Double {
        get {
            return get_agent_height ()
        }
        
        set {
            set_agent_height (newValue)
        }
        
    }
    
    /// The distance to erode/shrink the walkable area of the heightfield away from obstructions.
    /// 
    /// > Note: While baking, this value will be rounded up to the nearest multiple of ``cellSize``.
    /// 
    final public var agentRadius: Double {
        get {
            return get_agent_radius ()
        }
        
        set {
            set_agent_radius (newValue)
        }
        
    }
    
    /// The minimum ledge height that is considered to still be traversable.
    /// 
    /// > Note: While baking, this value will be rounded down to the nearest multiple of ``cellHeight``.
    /// 
    final public var agentMaxClimb: Double {
        get {
            return get_agent_max_climb ()
        }
        
        set {
            set_agent_max_climb (newValue)
        }
        
    }
    
    /// The maximum slope that is considered walkable, in degrees.
    final public var agentMaxSlope: Double {
        get {
            return get_agent_max_slope ()
        }
        
        set {
            set_agent_max_slope (newValue)
        }
        
    }
    
    /// The minimum size of a region for it to be created.
    /// 
    /// > Note: This value will be squared to calculate the minimum number of cells allowed to form isolated island areas. For example, a value of 8 will set the number of cells to 64.
    /// 
    final public var regionMinSize: Double {
        get {
            return get_region_min_size ()
        }
        
        set {
            set_region_min_size (newValue)
        }
        
    }
    
    /// Any regions with a size smaller than this will be merged with larger regions if possible.
    /// 
    /// > Note: This value will be squared to calculate the number of cells. For example, a value of 20 will set the number of cells to 400.
    /// 
    final public var regionMergeSize: Double {
        get {
            return get_region_merge_size ()
        }
        
        set {
            set_region_merge_size (newValue)
        }
        
    }
    
    /// The maximum allowed length for contour edges along the border of the mesh. A value of `0.0` disables this feature.
    /// 
    /// > Note: While baking, this value will be rounded up to the nearest multiple of ``cellSize``.
    /// 
    final public var edgeMaxLength: Double {
        get {
            return get_edge_max_length ()
        }
        
        set {
            set_edge_max_length (newValue)
        }
        
    }
    
    /// The maximum distance a simplified contour's border edges should deviate the original raw contour.
    final public var edgeMaxError: Double {
        get {
            return get_edge_max_error ()
        }
        
        set {
            set_edge_max_error (newValue)
        }
        
    }
    
    /// The maximum number of vertices allowed for polygons generated during the contour to polygon conversion process.
    final public var verticesPerPolygon: Double {
        get {
            return get_vertices_per_polygon ()
        }
        
        set {
            set_vertices_per_polygon (newValue)
        }
        
    }
    
    /// The sampling distance to use when generating the detail mesh, in cell unit.
    final public var detailSampleDistance: Double {
        get {
            return get_detail_sample_distance ()
        }
        
        set {
            set_detail_sample_distance (newValue)
        }
        
    }
    
    /// The maximum distance the detail mesh surface should deviate from heightfield, in cell unit.
    final public var detailSampleMaxError: Double {
        get {
            return get_detail_sample_max_error ()
        }
        
        set {
            set_detail_sample_max_error (newValue)
        }
        
    }
    
    /// If `true`, marks non-walkable spans as walkable if their maximum is within ``agentMaxClimb`` of a walkable neighbor.
    final public var filterLowHangingObstacles: Bool {
        get {
            return get_filter_low_hanging_obstacles ()
        }
        
        set {
            set_filter_low_hanging_obstacles (newValue)
        }
        
    }
    
    /// If `true`, marks spans that are ledges as non-walkable.
    final public var filterLedgeSpans: Bool {
        get {
            return get_filter_ledge_spans ()
        }
        
        set {
            set_filter_ledge_spans (newValue)
        }
        
    }
    
    /// If `true`, marks walkable spans as not walkable if the clearance above the span is less than ``agentHeight``.
    final public var filterWalkableLowHeightSpans: Bool {
        get {
            return get_filter_walkable_low_height_spans ()
        }
        
        set {
            set_filter_walkable_low_height_spans (newValue)
        }
        
    }
    
    /// If the baking ``AABB`` has a volume the navigation mesh baking will be restricted to its enclosing area.
    final public var filterBakingAabb: AABB {
        get {
            return get_filter_baking_aabb ()
        }
        
        set {
            set_filter_baking_aabb (newValue)
        }
        
    }
    
    /// The position offset applied to the ``filterBakingAabb`` ``AABB``.
    final public var filterBakingAabbOffset: Vector3 {
        get {
            return get_filter_baking_aabb_offset ()
        }
        
        set {
            set_filter_baking_aabb_offset (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_sample_partition_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sample_partition_type")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2472437533)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sample_partition_type (_ samplePartitionType: NavigationMesh.SamplePartitionType) {
        #if false
        
        var copy_sample_partition_type = Int64 (samplePartitionType.rawValue)
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_sample_partition_type, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sample_partition_type)
        
        #else
        
        var copy_sample_partition_type = Int64 (samplePartitionType.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_sample_partition_type) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_sample_partition_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sample_partition_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sample_partition_type")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 833513918)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sample_partition_type ()-> NavigationMesh.SamplePartitionType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_sample_partition_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return NavigationMesh.SamplePartitionType (rawValue: _result)!
    }
    
    fileprivate static var method_set_parsed_geometry_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_parsed_geometry_type")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3064713163)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_parsed_geometry_type (_ geometryType: NavigationMesh.ParsedGeometryType) {
        #if false
        
        var copy_geometry_type = Int64 (geometryType.rawValue)
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_parsed_geometry_type, UnsafeMutableRawPointer (mutating: handle), nil, &copy_geometry_type)
        
        #else
        
        var copy_geometry_type = Int64 (geometryType.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_geometry_type) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_parsed_geometry_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_parsed_geometry_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_parsed_geometry_type")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3928011953)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_parsed_geometry_type ()-> NavigationMesh.ParsedGeometryType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_parsed_geometry_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return NavigationMesh.ParsedGeometryType (rawValue: _result)!
    }
    
    fileprivate static var method_set_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_mask")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_mask (_ mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_collision_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_collision_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_mask")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_collision_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_mask_value")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``geometryCollisionMask``, given a `layerNumber` between 1 and 32.
    public final func setCollisionMaskValue (layerNumber: Int32, value: Bool) {
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_collision_mask_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_number, &copy_value)
        
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationMesh.method_set_collision_mask_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_mask_value")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``geometryCollisionMask`` is enabled, given a `layerNumber` between 1 and 32.
    public final func getCollisionMaskValue (layerNumber: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_get_collision_mask_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_number)
        return _result
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_get_collision_mask_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_source_geometry_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_source_geometry_mode")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2700825194)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_source_geometry_mode (_ mask: NavigationMesh.SourceGeometryMode) {
        #if false
        
        var copy_mask = Int64 (mask.rawValue)
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_source_geometry_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mask)
        
        #else
        
        var copy_mask = Int64 (mask.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_source_geometry_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_source_geometry_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_source_geometry_mode")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2770484141)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_source_geometry_mode ()-> NavigationMesh.SourceGeometryMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_source_geometry_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return NavigationMesh.SourceGeometryMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_source_group_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_source_group_name")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_source_group_name (_ mask: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_source_group_name, UnsafeMutableRawPointer (mutating: handle), nil, &mask.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &mask.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_source_group_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_source_group_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_source_group_name")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_source_group_name ()-> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_source_group_name, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_cell_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cell_size")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cell_size (_ cellSize: Double) {
        #if false
        
        var copy_cell_size = cellSize
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_cell_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cell_size)
        
        #else
        
        var copy_cell_size = cellSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cell_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_cell_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_cell_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cell_size")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_cell_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_cell_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_cell_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cell_height")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cell_height (_ cellHeight: Double) {
        #if false
        
        var copy_cell_height = cellHeight
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_cell_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cell_height)
        
        #else
        
        var copy_cell_height = cellHeight
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cell_height) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_cell_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_cell_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cell_height")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_cell_height ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_cell_height, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_agent_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_agent_height")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_agent_height (_ agentHeight: Double) {
        #if false
        
        var copy_agent_height = agentHeight
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_agent_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_agent_height)
        
        #else
        
        var copy_agent_height = agentHeight
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_agent_height) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_agent_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_agent_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_agent_height")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_agent_height ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_agent_height, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_agent_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_agent_radius")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_agent_radius (_ agentRadius: Double) {
        #if false
        
        var copy_agent_radius = agentRadius
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_agent_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_agent_radius)
        
        #else
        
        var copy_agent_radius = agentRadius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_agent_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_agent_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_agent_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_agent_radius")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_agent_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_agent_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_agent_max_climb: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_agent_max_climb")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_agent_max_climb (_ agentMaxClimb: Double) {
        #if false
        
        var copy_agent_max_climb = agentMaxClimb
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_agent_max_climb, UnsafeMutableRawPointer (mutating: handle), nil, &copy_agent_max_climb)
        
        #else
        
        var copy_agent_max_climb = agentMaxClimb
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_agent_max_climb) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_agent_max_climb, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_agent_max_climb: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_agent_max_climb")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_agent_max_climb ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_agent_max_climb, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_agent_max_slope: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_agent_max_slope")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_agent_max_slope (_ agentMaxSlope: Double) {
        #if false
        
        var copy_agent_max_slope = agentMaxSlope
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_agent_max_slope, UnsafeMutableRawPointer (mutating: handle), nil, &copy_agent_max_slope)
        
        #else
        
        var copy_agent_max_slope = agentMaxSlope
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_agent_max_slope) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_agent_max_slope, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_agent_max_slope: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_agent_max_slope")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_agent_max_slope ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_agent_max_slope, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_region_min_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_region_min_size")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_region_min_size (_ regionMinSize: Double) {
        #if false
        
        var copy_region_min_size = regionMinSize
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_region_min_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_region_min_size)
        
        #else
        
        var copy_region_min_size = regionMinSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_region_min_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_region_min_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_region_min_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_region_min_size")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_region_min_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_region_min_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_region_merge_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_region_merge_size")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_region_merge_size (_ regionMergeSize: Double) {
        #if false
        
        var copy_region_merge_size = regionMergeSize
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_region_merge_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_region_merge_size)
        
        #else
        
        var copy_region_merge_size = regionMergeSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_region_merge_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_region_merge_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_region_merge_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_region_merge_size")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_region_merge_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_region_merge_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_edge_max_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_edge_max_length")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_edge_max_length (_ edgeMaxLength: Double) {
        #if false
        
        var copy_edge_max_length = edgeMaxLength
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_edge_max_length, UnsafeMutableRawPointer (mutating: handle), nil, &copy_edge_max_length)
        
        #else
        
        var copy_edge_max_length = edgeMaxLength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_edge_max_length) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_edge_max_length, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_edge_max_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_edge_max_length")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_edge_max_length ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_edge_max_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_edge_max_error: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_edge_max_error")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_edge_max_error (_ edgeMaxError: Double) {
        #if false
        
        var copy_edge_max_error = edgeMaxError
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_edge_max_error, UnsafeMutableRawPointer (mutating: handle), nil, &copy_edge_max_error)
        
        #else
        
        var copy_edge_max_error = edgeMaxError
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_edge_max_error) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_edge_max_error, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_edge_max_error: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_edge_max_error")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_edge_max_error ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_edge_max_error, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_vertices_per_polygon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertices_per_polygon")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_vertices_per_polygon (_ verticesPerPolygon: Double) {
        #if false
        
        var copy_vertices_per_polygon = verticesPerPolygon
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_vertices_per_polygon, UnsafeMutableRawPointer (mutating: handle), nil, &copy_vertices_per_polygon)
        
        #else
        
        var copy_vertices_per_polygon = verticesPerPolygon
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_vertices_per_polygon) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_vertices_per_polygon, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertices_per_polygon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertices_per_polygon")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_vertices_per_polygon ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_vertices_per_polygon, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_detail_sample_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_detail_sample_distance")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_detail_sample_distance (_ detailSampleDist: Double) {
        #if false
        
        var copy_detail_sample_dist = detailSampleDist
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_detail_sample_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_detail_sample_dist)
        
        #else
        
        var copy_detail_sample_dist = detailSampleDist
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_detail_sample_dist) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_detail_sample_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_detail_sample_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_detail_sample_distance")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_detail_sample_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_detail_sample_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_detail_sample_max_error: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_detail_sample_max_error")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_detail_sample_max_error (_ detailSampleMaxError: Double) {
        #if false
        
        var copy_detail_sample_max_error = detailSampleMaxError
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_detail_sample_max_error, UnsafeMutableRawPointer (mutating: handle), nil, &copy_detail_sample_max_error)
        
        #else
        
        var copy_detail_sample_max_error = detailSampleMaxError
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_detail_sample_max_error) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_detail_sample_max_error, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_detail_sample_max_error: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_detail_sample_max_error")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_detail_sample_max_error ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_detail_sample_max_error, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_filter_low_hanging_obstacles: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_filter_low_hanging_obstacles")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_filter_low_hanging_obstacles (_ filterLowHangingObstacles: Bool) {
        #if false
        
        var copy_filter_low_hanging_obstacles = filterLowHangingObstacles
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_filter_low_hanging_obstacles, UnsafeMutableRawPointer (mutating: handle), nil, &copy_filter_low_hanging_obstacles)
        
        #else
        
        var copy_filter_low_hanging_obstacles = filterLowHangingObstacles
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_filter_low_hanging_obstacles) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_filter_low_hanging_obstacles, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_filter_low_hanging_obstacles: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_filter_low_hanging_obstacles")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_filter_low_hanging_obstacles ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_filter_low_hanging_obstacles, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_filter_ledge_spans: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_filter_ledge_spans")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_filter_ledge_spans (_ filterLedgeSpans: Bool) {
        #if false
        
        var copy_filter_ledge_spans = filterLedgeSpans
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_filter_ledge_spans, UnsafeMutableRawPointer (mutating: handle), nil, &copy_filter_ledge_spans)
        
        #else
        
        var copy_filter_ledge_spans = filterLedgeSpans
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_filter_ledge_spans) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_filter_ledge_spans, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_filter_ledge_spans: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_filter_ledge_spans")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_filter_ledge_spans ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_filter_ledge_spans, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_filter_walkable_low_height_spans: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_filter_walkable_low_height_spans")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_filter_walkable_low_height_spans (_ filterWalkableLowHeightSpans: Bool) {
        #if false
        
        var copy_filter_walkable_low_height_spans = filterWalkableLowHeightSpans
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_filter_walkable_low_height_spans, UnsafeMutableRawPointer (mutating: handle), nil, &copy_filter_walkable_low_height_spans)
        
        #else
        
        var copy_filter_walkable_low_height_spans = filterWalkableLowHeightSpans
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_filter_walkable_low_height_spans) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_filter_walkable_low_height_spans, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_filter_walkable_low_height_spans: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_filter_walkable_low_height_spans")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_filter_walkable_low_height_spans ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_filter_walkable_low_height_spans, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_filter_baking_aabb: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_filter_baking_aabb")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 259215842)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_filter_baking_aabb (_ bakingAabb: AABB) {
        #if false
        
        var copy_baking_aabb = bakingAabb
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_filter_baking_aabb, UnsafeMutableRawPointer (mutating: handle), nil, &copy_baking_aabb)
        
        #else
        
        var copy_baking_aabb = bakingAabb
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_baking_aabb) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_filter_baking_aabb, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_filter_baking_aabb: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_filter_baking_aabb")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1068685055)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_filter_baking_aabb ()-> AABB {
        var _result: AABB = AABB ()
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_filter_baking_aabb, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_filter_baking_aabb_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_filter_baking_aabb_offset")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_filter_baking_aabb_offset (_ bakingAabbOffset: Vector3) {
        #if false
        
        var copy_baking_aabb_offset = bakingAabbOffset
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_filter_baking_aabb_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_baking_aabb_offset)
        
        #else
        
        var copy_baking_aabb_offset = bakingAabbOffset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_baking_aabb_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_filter_baking_aabb_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_filter_baking_aabb_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_filter_baking_aabb_offset")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_filter_baking_aabb_offset ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_filter_baking_aabb_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_vertices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertices")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 334873810)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the vertices that can be then indexed to create polygons with the ``addPolygon(_:)`` method.
    fileprivate final func set_vertices (_ vertices: PackedVector3Array) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_set_vertices, UnsafeMutableRawPointer (mutating: handle), nil, &vertices.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &vertices.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_set_vertices, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertices")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 497664490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns a ``PackedVector3Array`` containing all the vertices being used to create the polygons.
    fileprivate final func get_vertices ()-> PackedVector3Array {
        let _result: PackedVector3Array = PackedVector3Array ()
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_vertices, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_add_polygon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_polygon")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3614634198)!
            }
            
        }
        
    }()
    
    /// Adds a polygon using the indices of the vertices you get when calling ``getVertices()``.
    public final func addPolygon (_ polygon: PackedInt32Array) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_add_polygon, UnsafeMutableRawPointer (mutating: handle), nil, &polygon.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &polygon.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_add_polygon, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_polygon_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_polygon_count")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of polygons in the navigation mesh.
    public final func getPolygonCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (NavigationMesh.method_get_polygon_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_polygon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_polygon")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3668444399)!
            }
            
        }
        
    }()
    
    /// Returns a ``PackedInt32Array`` containing the indices of the vertices of a created polygon.
    public final func getPolygon (idx: Int32)-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        #if false
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_get_polygon, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_get_polygon, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_clear_polygons: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_polygons")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears the array of polygons, but it doesn't clear the array of vertices.
    public final func clearPolygons () {
        gi.object_method_bind_ptrcall (NavigationMesh.method_clear_polygons, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_create_from_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_from_mesh")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 194775623)!
            }
            
        }
        
    }()
    
    /// Initializes the navigation mesh by setting the vertices and indices according to a ``Mesh``.
    /// 
    /// > Note: The given `mesh` must be of type ``Mesh/PrimitiveType/primitiveTriangles`` and have an index array.
    /// 
    public final func createFromMesh (_ mesh: Mesh?) {
        #if false
        
        var copy_mesh_handle = mesh?.handle
        
        gi.object_method_bind_ptrcall_v (NavigationMesh.method_create_from_mesh, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mesh_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: mesh?.handle) { p0 in
        _args.append (mesh == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (NavigationMesh.method_create_from_mesh, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear")
        return withUnsafePointer (to: &NavigationMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears the internal arrays for vertices and polygon indices.
    public final func clear () {
        gi.object_method_bind_ptrcall (NavigationMesh.method_clear, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
}

