// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A singleton for saving ``Resource``s to the filesystem.
/// 
/// A singleton for saving resource types to the filesystem.
/// 
/// It uses the many ``ResourceFormatSaver`` classes registered in the engine (either built-in or from a plugin) to save resource data to text-based (e.g. `.tres` or `.tscn`) or binary files (e.g. `.res` or `.scn`).
/// 
open class ResourceSaver: Object {
    /// The shared instance of this class
    public static var shared: ResourceSaver = {
        return withUnsafePointer (to: &ResourceSaver.godotClassName.content) { ptr in
            ResourceSaver (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "ResourceSaver" }
    public struct SaverFlags: OptionSet, CustomDebugStringConvertible {
        public let rawValue: Int
        public init (rawValue: Int) {
            self.rawValue = rawValue
        }
        
        /// Save the resource with a path relative to the scene which uses it.
        public static let relativePaths = SaverFlags (rawValue: 1)
        /// Bundles external resources.
        public static let bundleResources = SaverFlags (rawValue: 2)
        /// Changes the ``Resource/resourcePath`` of the saved resource to match its new location.
        public static let changePath = SaverFlags (rawValue: 4)
        /// Do not save editor-specific metadata (identified by their `__editor` prefix).
        public static let omitEditorProperties = SaverFlags (rawValue: 8)
        /// Save as big endian (see ``FileAccess/bigEndian``).
        public static let saveBigEndian = SaverFlags (rawValue: 16)
        /// Compress the resource on save using ``FileAccess/CompressionMode/compressionZstd``. Only available for binary resource types.
        public static let compress = SaverFlags (rawValue: 32)
        /// Take over the paths of the saved subresources (see ``Resource/takeOverPath(_:)``).
        public static let replaceSubresourcePaths = SaverFlags (rawValue: 64)
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            var result = ""
            if self.contains (.relativePaths) { result += "relativePaths, " }
            if self.contains (.bundleResources) { result += "bundleResources, " }
            if self.contains (.changePath) { result += "changePath, " }
            if self.contains (.omitEditorProperties) { result += "omitEditorProperties, " }
            if self.contains (.saveBigEndian) { result += "saveBigEndian, " }
            if self.contains (.compress) { result += "compress, " }
            if self.contains (.replaceSubresourcePaths) { result += "replaceSubresourcePaths, " }
            if result.hasSuffix (", ") { result.removeLast (2) }
            return result
        }
        
    }
    
    /* Methods */
    fileprivate static var method_save: GDExtensionMethodBindPtr = {
        let methodName = StringName ("save")
        return withUnsafePointer (to: &ResourceSaver.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2983274697)!
            }
            
        }
        
    }()
    
    /// Saves a resource to disk to the given path, using a ``ResourceFormatSaver`` that recognizes the resource object. If `path` is empty, ``ResourceSaver`` will try to use ``Resource/resourcePath``.
    /// 
    /// The `flags` bitmask can be specified to customize the save behavior using ``ResourceSaver/SaverFlags`` flags.
    /// 
    /// Returns ``GodotError/ok`` on success.
    /// 
    /// > Note: When the project is running, any generated UID associated with the resource will not be saved as the required code is only executed in editor mode.
    /// 
    public static func save (resource: Resource?, path: String = "", flags: ResourceSaver.SaverFlags = [])-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        var copy_flags = flags
        var copy_resource_handle = resource?.handle
        
        gi.object_method_bind_ptrcall_v (ResourceSaver.method_save, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_resource_handle, &gstr_path.content, &copy_flags)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var copy_flags = flags
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: resource?.handle) { p0 in
        _args.append (resource == nil ? nil : p0)
            return withUnsafePointer (to: &gstr_path.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_flags) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (ResourceSaver.method_save, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                    return GodotError (rawValue: _result)!
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_recognized_extensions: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_recognized_extensions")
        return withUnsafePointer (to: &ResourceSaver.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4223597960)!
            }
            
        }
        
    }()
    
    /// Returns the list of extensions available for saving a resource of a given type.
    public static func getRecognizedExtensions (type: Resource?)-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        #if true
        
        var copy_type_handle = type?.handle
        
        gi.object_method_bind_ptrcall_v (ResourceSaver.method_get_recognized_extensions, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &copy_type_handle)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: type?.handle) { p0 in
        _args.append (type == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ResourceSaver.method_get_recognized_extensions, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_add_resource_format_saver: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_resource_format_saver")
        return withUnsafePointer (to: &ResourceSaver.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 362894272)!
            }
            
        }
        
    }()
    
    /// Registers a new ``ResourceFormatSaver``. The ResourceSaver will use the ResourceFormatSaver as described in ``save(resource:path:flags:)``.
    /// 
    /// This method is performed implicitly for ResourceFormatSavers written in GDScript (see ``ResourceFormatSaver`` for more information).
    /// 
    public static func addResourceFormatSaver (_ formatSaver: ResourceFormatSaver?, atFront: Bool = false) {
        #if true
        
        var copy_at_front = atFront
        var copy_format_saver_handle = formatSaver?.handle
        
        gi.object_method_bind_ptrcall_v (ResourceSaver.method_add_resource_format_saver, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_format_saver_handle, &copy_at_front)
        
        #else
        
        var copy_at_front = atFront
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: formatSaver?.handle) { p0 in
        _args.append (formatSaver == nil ? nil : p0)
            withUnsafePointer (to: &copy_at_front) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ResourceSaver.method_add_resource_format_saver, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_resource_format_saver: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_resource_format_saver")
        return withUnsafePointer (to: &ResourceSaver.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3373026878)!
            }
            
        }
        
    }()
    
    /// Unregisters the given ``ResourceFormatSaver``.
    public static func removeResourceFormatSaver (_ formatSaver: ResourceFormatSaver?) {
        #if true
        
        var copy_format_saver_handle = formatSaver?.handle
        
        gi.object_method_bind_ptrcall_v (ResourceSaver.method_remove_resource_format_saver, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_format_saver_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: formatSaver?.handle) { p0 in
        _args.append (formatSaver == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ResourceSaver.method_remove_resource_format_saver, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
}

