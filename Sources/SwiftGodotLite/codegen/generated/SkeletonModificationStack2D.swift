// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A resource that holds a stack of ``SkeletonModification2D``s.
/// 
/// This resource is used by the Skeleton and holds a stack of ``SkeletonModification2D``s.
/// 
/// This controls the order of the modifications and how they are applied. Modification order is especially important for full-body IK setups, as you need to execute the modifications in the correct order to get the desired results. For example, you want to execute a modification on the spine _before_ the arms on a humanoid skeleton.
/// 
/// This resource also controls how strongly all of the modifications are applied to the ``Skeleton2D``.
/// 
open class SkeletonModificationStack2D: Resource {
    override open class var godotClassName: StringName { "SkeletonModificationStack2D" }
    
    /* Properties */
    
    /// If `true`, the modification's in the stack will be called. This is handled automatically through the ``Skeleton2D`` node.
    final public var enabled: Bool {
        get {
            return get_enabled ()
        }
        
        set {
            set_enabled (newValue)
        }
        
    }
    
    /// The interpolation strength of the modifications in stack. A value of `0` will make it where the modifications are not applied, a strength of `0.5` will be half applied, and a strength of `1` will allow the modifications to be fully applied and override the ``Skeleton2D`` ``Bone2D`` poses.
    final public var strength: Double {
        get {
            return get_strength ()
        }
        
        set {
            set_strength (newValue)
        }
        
    }
    
    /// The number of modifications in the stack.
    final public var modificationCount: Int32 {
        get {
            return get_modification_count ()
        }
        
        set {
            set_modification_count (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_setup: GDExtensionMethodBindPtr = {
        let methodName = StringName ("setup")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Sets up the modification stack so it can execute. This function should be called by ``Skeleton2D`` and shouldn't be manually called unless you know what you are doing.
    public final func setup () {
        gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_setup, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_execute: GDExtensionMethodBindPtr = {
        let methodName = StringName ("execute")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1005356550)!
            }
            
        }
        
    }()
    
    /// Executes all of the ``SkeletonModification2D``s in the stack that use the same execution mode as the passed-in `executionMode`, starting from index `0` to ``modificationCount``.
    /// 
    /// > Note: The order of the modifications can matter depending on the modifications. For example, modifications on a spine should operate before modifications on the arms in order to get proper results.
    /// 
    public final func execute (delta: Double, executionMode: Int32) {
        #if false
        
        var copy_delta = delta
        var copy_execution_mode: Int = Int (executionMode)
        
        gi.object_method_bind_ptrcall_v (SkeletonModificationStack2D.method_execute, UnsafeMutableRawPointer (mutating: handle), nil, &copy_delta, &copy_execution_mode)
        
        #else
        
        var copy_delta = delta
        var copy_execution_mode: Int = Int (executionMode)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_delta) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_execution_mode) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_execute, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_enable_all_modifications: GDExtensionMethodBindPtr = {
        let methodName = StringName ("enable_all_modifications")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// Enables all ``SkeletonModification2D``s in the stack.
    public final func enableAllModifications (enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (SkeletonModificationStack2D.method_enable_all_modifications, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_enable_all_modifications, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_modification: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_modification")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2570274329)!
            }
            
        }
        
    }()
    
    /// Returns the ``SkeletonModification2D`` at the passed-in index, `modIdx`.
    public final func getModification (modIdx: Int32)-> SkeletonModification2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_mod_idx: Int = Int (modIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModificationStack2D.method_get_modification, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_mod_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_mod_idx: Int = Int (modIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_mod_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_get_modification, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_add_modification: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_modification")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 354162120)!
            }
            
        }
        
    }()
    
    /// Adds the passed-in ``SkeletonModification2D`` to the stack.
    public final func addModification (_ modification: SkeletonModification2D?) {
        #if false
        
        var copy_modification_handle = modification?.handle
        
        gi.object_method_bind_ptrcall_v (SkeletonModificationStack2D.method_add_modification, UnsafeMutableRawPointer (mutating: handle), nil, &copy_modification_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: modification?.handle) { p0 in
        _args.append (modification == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_add_modification, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_delete_modification: GDExtensionMethodBindPtr = {
        let methodName = StringName ("delete_modification")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Deletes the ``SkeletonModification2D`` at the index position `modIdx`, if it exists.
    public final func deleteModification (modIdx: Int32) {
        #if false
        
        var copy_mod_idx: Int = Int (modIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModificationStack2D.method_delete_modification, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mod_idx)
        
        #else
        
        var copy_mod_idx: Int = Int (modIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mod_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_delete_modification, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_modification: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_modification")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1098262544)!
            }
            
        }
        
    }()
    
    /// Sets the modification at `modIdx` to the passed-in modification, `modification`.
    public final func setModification (modIdx: Int32, modification: SkeletonModification2D?) {
        #if false
        
        var copy_mod_idx: Int = Int (modIdx)
        var copy_modification_handle = modification?.handle
        
        gi.object_method_bind_ptrcall_v (SkeletonModificationStack2D.method_set_modification, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mod_idx, &copy_modification_handle)
        
        #else
        
        var copy_mod_idx: Int = Int (modIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mod_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: modification?.handle) { p1 in
            _args.append (modification == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_set_modification, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_modification_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_modification_count")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_modification_count (_ count: Int32) {
        #if false
        
        var copy_count: Int = Int (count)
        
        gi.object_method_bind_ptrcall_v (SkeletonModificationStack2D.method_set_modification_count, UnsafeMutableRawPointer (mutating: handle), nil, &copy_count)
        
        #else
        
        var copy_count: Int = Int (count)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_count) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_set_modification_count, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_modification_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_modification_count")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_modification_count ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_get_modification_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_is_setup: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_is_setup")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns a boolean that indicates whether the modification stack is setup and can execute.
    public final func getIsSetup ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_get_is_setup, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enabled")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (SkeletonModificationStack2D.method_set_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_set_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enabled")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_get_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_strength")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_strength (_ strength: Double) {
        #if false
        
        var copy_strength = strength
        
        gi.object_method_bind_ptrcall_v (SkeletonModificationStack2D.method_set_strength, UnsafeMutableRawPointer (mutating: handle), nil, &copy_strength)
        
        #else
        
        var copy_strength = strength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_strength) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_set_strength, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_strength")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_strength ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_get_strength, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_skeleton: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_skeleton")
        return withUnsafePointer (to: &SkeletonModificationStack2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1697361217)!
            }
            
        }
        
    }()
    
    /// Returns the ``Skeleton2D`` node that the SkeletonModificationStack2D is bound to.
    public final func getSkeleton ()-> Skeleton2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (SkeletonModificationStack2D.method_get_skeleton, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

