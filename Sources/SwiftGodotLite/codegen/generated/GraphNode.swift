// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A container with connection ports, representing a node in a ``GraphEdit``.
/// 
/// ``GraphNode`` allows to create nodes for a ``GraphEdit`` graph with customizable content based on its child controls. ``GraphNode`` is derived from ``Container`` and it is responsible for placing its children on screen. This works similar to ``VBoxContainer``. Children, in turn, provide ``GraphNode`` with so-called slots, each of which can have a connection port on either side.
/// 
/// Each ``GraphNode`` slot is defined by its index and can provide the node with up to two ports: one on the left, and one on the right. By convention the left port is also referred to as the **input port** and the right port is referred to as the **output port**. Each port can be enabled and configured individually, using different type and color. The type is an arbitrary value that you can define using your own considerations. The parent ``GraphEdit`` will receive this information on each connect and disconnect request.
/// 
/// Slots can be configured in the Inspector dock once you add at least one child ``Control``. The properties are grouped by each slot's index in the "Slot" section.
/// 
/// > Note: While GraphNode is set up using slots and slot indices, connections are made between the ports which are enabled. Because of that ``GraphEdit`` uses the port's index and not the slot's index. You can use ``getInputPortSlot(portIdx:)`` and ``getOutputPortSlot(portIdx:)`` to get the slot index from the port index.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``slotUpdated``
open class GraphNode: GraphElement {
    override open class var godotClassName: StringName { "GraphNode" }
    
    /* Properties */
    
    /// The text displayed in the GraphNode's title bar.
    final public var title: String {
        get {
            return get_title ()
        }
        
        set {
            set_title (newValue)
        }
        
    }
    
    /* Methods */
    /// 
    @_documentation(visibility: public)
    open func _drawPort (slotIndex: Int32, position: Vector2i, left: Bool, color: Color) {
    }
    
    fileprivate static var method_set_title: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_title")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_title (_ title: String) {
        #if false
        
        let gstr_title = GString (title)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_set_title, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_title.content)
        
        #else
        
        let gstr_title = GString (title)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_title.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_set_title, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_title: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_title")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_title ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (GraphNode.method_get_title, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_titlebar_hbox: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_titlebar_hbox")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3590609951)!
            }
            
        }
        
    }()
    
    /// Returns the ``HBoxContainer`` used for the title bar, only containing a ``Label`` for displaying the title by default. This can be used to add custom controls to the title bar such as option or close buttons.
    public final func getTitlebarHbox ()-> HBoxContainer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (GraphNode.method_get_titlebar_hbox, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_slot: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_slot")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2873310869)!
            }
            
        }
        
    }()
    
    /// Sets properties of the slot with the given `slotIndex`.
    /// 
    /// If `enableLeftPort`/`enableRightPort` is `true`, a port will appear and the slot will be able to be connected from this side.
    /// 
    /// With `typeLeft`/`typeRight` an arbitrary type can be assigned to each port. Two ports can be connected if they share the same type, or if the connection between their types is allowed in the parent ``GraphEdit`` (see ``GraphEdit/addValidConnectionType(fromType:toType:)``). Keep in mind that the ``GraphEdit`` has the final say in accepting the connection. Type compatibility simply allows the [signal GraphEdit.connection_request] signal to be emitted.
    /// 
    /// Ports can be further customized using `colorLeft`/`colorRight` and `customIconLeft`/`customIconRight`. The color parameter adds a tint to the icon. The custom icon can be used to override the default port dot.
    /// 
    /// Additionally, `drawStylebox` can be used to enable or disable drawing of the background stylebox for each slot. See [theme_item slot].
    /// 
    /// Individual properties can also be set using one of the `set_slot_*` methods.
    /// 
    /// > Note: This method only sets properties of the slot. To create the slot itself, add a ``Control``-derived child to the GraphNode.
    /// 
    public final func setSlot (slotIndex: Int32, enableLeftPort: Bool, typeLeft: Int32, colorLeft: Color, enableRightPort: Bool, typeRight: Int32, colorRight: Color, customIconLeft: Texture2D? = nil, customIconRight: Texture2D? = nil, drawStylebox: Bool = true) {
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_enable_left_port = enableLeftPort
        var copy_type_left: Int = Int (typeLeft)
        var copy_color_left = colorLeft
        var copy_enable_right_port = enableRightPort
        var copy_type_right: Int = Int (typeRight)
        var copy_color_right = colorRight
        var copy_draw_stylebox = drawStylebox
        var copy_custom_icon_left_handle = customIconLeft?.handle
        var copy_custom_icon_right_handle = customIconRight?.handle
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_set_slot, UnsafeMutableRawPointer (mutating: handle), nil, &copy_slot_index, &copy_enable_left_port, &copy_type_left, &copy_color_left, &copy_enable_right_port, &copy_type_right, &copy_color_right, &copy_custom_icon_left_handle, &copy_custom_icon_right_handle, &copy_draw_stylebox)
        
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_enable_left_port = enableLeftPort
        var copy_type_left: Int = Int (typeLeft)
        var copy_color_left = colorLeft
        var copy_enable_right_port = enableRightPort
        var copy_type_right: Int = Int (typeRight)
        var copy_color_right = colorRight
        var copy_draw_stylebox = drawStylebox
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable_left_port) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_type_left) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_color_left) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_enable_right_port) { p4 in
                            _args.append (p4)
                            withUnsafePointer (to: &copy_type_right) { p5 in
                                _args.append (p5)
                                withUnsafePointer (to: &copy_color_right) { p6 in
                                    _args.append (p6)
                                    withUnsafePointer (to: customIconLeft?.handle) { p7 in
                                    _args.append (customIconLeft == nil ? nil : p7)
                                        withUnsafePointer (to: customIconRight?.handle) { p8 in
                                        _args.append (customIconRight == nil ? nil : p8)
                                            withUnsafePointer (to: &copy_draw_stylebox) { p9 in
                                                _args.append (p9)
        
                                                gi.object_method_bind_ptrcall (GraphNode.method_set_slot, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_clear_slot: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_slot")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Disables the slot with the given `slotIndex`. This will remove the corresponding input and output port from the GraphNode.
    public final func clearSlot (slotIndex: Int32) {
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_clear_slot, UnsafeMutableRawPointer (mutating: handle), nil, &copy_slot_index)
        
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_clear_slot, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_clear_all_slots: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_all_slots")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Disables all slots of the GraphNode. This will remove all input/output ports from the GraphNode.
    public final func clearAllSlots () {
        gi.object_method_bind_ptrcall (GraphNode.method_clear_all_slots, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_is_slot_enabled_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_slot_enabled_left")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns `true` if left (input) side of the slot with the given `slotIndex` is enabled.
    public final func isSlotEnabledLeft (slotIndex: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_is_slot_enabled_left, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_slot_index)
        return _result
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_is_slot_enabled_left, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_slot_enabled_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_slot_enabled_left")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Toggles the left (input) side of the slot with the given `slotIndex`. If `enable` is `true`, a port will appear on the left side and the slot will be able to be connected from this side.
    public final func setSlotEnabledLeft (slotIndex: Int32, enable: Bool) {
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_set_slot_enabled_left, UnsafeMutableRawPointer (mutating: handle), nil, &copy_slot_index, &copy_enable)
        
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GraphNode.method_set_slot_enabled_left, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_slot_type_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_slot_type_left")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the left (input) type of the slot with the given `slotIndex` to `type`. If the value is negative, all connections will be disallowed to be created via user inputs.
    public final func setSlotTypeLeft (slotIndex: Int32, type: Int32) {
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_type: Int = Int (type)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_set_slot_type_left, UnsafeMutableRawPointer (mutating: handle), nil, &copy_slot_index, &copy_type)
        
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_type: Int = Int (type)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_type) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GraphNode.method_set_slot_type_left, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_slot_type_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_slot_type_left")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the left (input) type of the slot with the given `slotIndex`.
    public final func getSlotTypeLeft (slotIndex: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_slot_type_left, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_slot_index)
        return _result
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_slot_type_left, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_slot_color_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_slot_color_left")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2878471219)!
            }
            
        }
        
    }()
    
    /// Sets the ``Color`` of the left (input) side of the slot with the given `slotIndex` to `color`.
    public final func setSlotColorLeft (slotIndex: Int32, color: Color) {
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_set_slot_color_left, UnsafeMutableRawPointer (mutating: handle), nil, &copy_slot_index, &copy_color)
        
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_color) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GraphNode.method_set_slot_color_left, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_slot_color_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_slot_color_left")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3457211756)!
            }
            
        }
        
    }()
    
    /// Returns the left (input) ``Color`` of the slot with the given `slotIndex`.
    public final func getSlotColorLeft (slotIndex: Int32)-> Color {
        var _result: Color = Color ()
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_slot_color_left, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_slot_index)
        return _result
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_slot_color_left, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_slot_enabled_right: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_slot_enabled_right")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns `true` if right (output) side of the slot with the given `slotIndex` is enabled.
    public final func isSlotEnabledRight (slotIndex: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_is_slot_enabled_right, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_slot_index)
        return _result
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_is_slot_enabled_right, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_slot_enabled_right: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_slot_enabled_right")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Toggles the right (output) side of the slot with the given `slotIndex`. If `enable` is `true`, a port will appear on the right side and the slot will be able to be connected from this side.
    public final func setSlotEnabledRight (slotIndex: Int32, enable: Bool) {
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_set_slot_enabled_right, UnsafeMutableRawPointer (mutating: handle), nil, &copy_slot_index, &copy_enable)
        
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GraphNode.method_set_slot_enabled_right, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_slot_type_right: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_slot_type_right")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the right (output) type of the slot with the given `slotIndex` to `type`. If the value is negative, all connections will be disallowed to be created via user inputs.
    public final func setSlotTypeRight (slotIndex: Int32, type: Int32) {
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_type: Int = Int (type)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_set_slot_type_right, UnsafeMutableRawPointer (mutating: handle), nil, &copy_slot_index, &copy_type)
        
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_type: Int = Int (type)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_type) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GraphNode.method_set_slot_type_right, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_slot_type_right: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_slot_type_right")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the right (output) type of the slot with the given `slotIndex`.
    public final func getSlotTypeRight (slotIndex: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_slot_type_right, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_slot_index)
        return _result
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_slot_type_right, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_slot_color_right: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_slot_color_right")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2878471219)!
            }
            
        }
        
    }()
    
    /// Sets the ``Color`` of the right (output) side of the slot with the given `slotIndex` to `color`.
    public final func setSlotColorRight (slotIndex: Int32, color: Color) {
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_set_slot_color_right, UnsafeMutableRawPointer (mutating: handle), nil, &copy_slot_index, &copy_color)
        
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_color) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GraphNode.method_set_slot_color_right, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_slot_color_right: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_slot_color_right")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3457211756)!
            }
            
        }
        
    }()
    
    /// Returns the right (output) ``Color`` of the slot with the given `slotIndex`.
    public final func getSlotColorRight (slotIndex: Int32)-> Color {
        var _result: Color = Color ()
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_slot_color_right, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_slot_index)
        return _result
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_slot_color_right, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_slot_draw_stylebox: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_slot_draw_stylebox")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns true if the background ``StyleBox`` of the slot with the given `slotIndex` is drawn.
    public final func isSlotDrawStylebox (slotIndex: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_is_slot_draw_stylebox, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_slot_index)
        return _result
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_is_slot_draw_stylebox, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_slot_draw_stylebox: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_slot_draw_stylebox")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Toggles the background ``StyleBox`` of the slot with the given `slotIndex`.
    public final func setSlotDrawStylebox (slotIndex: Int32, enable: Bool) {
        #if false
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_set_slot_draw_stylebox, UnsafeMutableRawPointer (mutating: handle), nil, &copy_slot_index, &copy_enable)
        
        #else
        
        var copy_slot_index: Int = Int (slotIndex)
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_slot_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GraphNode.method_set_slot_draw_stylebox, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_input_port_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_input_port_count")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the number of slots with an enabled input port.
    public final func getInputPortCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GraphNode.method_get_input_port_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_input_port_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_input_port_position")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3114997196)!
            }
            
        }
        
    }()
    
    /// Returns the position of the input port with the given `portIdx`.
    public final func getInputPortPosition (portIdx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_port_idx: Int = Int (portIdx)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_input_port_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port_idx)
        return _result
        #else
        
        var copy_port_idx: Int = Int (portIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_input_port_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_input_port_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_input_port_type")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3744713108)!
            }
            
        }
        
    }()
    
    /// Returns the type of the input port with the given `portIdx`.
    public final func getInputPortType (portIdx: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_port_idx: Int = Int (portIdx)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_input_port_type, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port_idx)
        return _result
        #else
        
        var copy_port_idx: Int = Int (portIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_input_port_type, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_input_port_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_input_port_color")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2624840992)!
            }
            
        }
        
    }()
    
    /// Returns the ``Color`` of the input port with the given `portIdx`.
    public final func getInputPortColor (portIdx: Int32)-> Color {
        var _result: Color = Color ()
        #if false
        
        var copy_port_idx: Int = Int (portIdx)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_input_port_color, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port_idx)
        return _result
        #else
        
        var copy_port_idx: Int = Int (portIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_input_port_color, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_input_port_slot: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_input_port_slot")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3744713108)!
            }
            
        }
        
    }()
    
    /// Returns the corresponding slot index of the input port with the given `portIdx`.
    public final func getInputPortSlot (portIdx: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_port_idx: Int = Int (portIdx)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_input_port_slot, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port_idx)
        return _result
        #else
        
        var copy_port_idx: Int = Int (portIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_input_port_slot, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_output_port_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_output_port_count")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the number of slots with an enabled output port.
    public final func getOutputPortCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GraphNode.method_get_output_port_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_output_port_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_output_port_position")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3114997196)!
            }
            
        }
        
    }()
    
    /// Returns the position of the output port with the given `portIdx`.
    public final func getOutputPortPosition (portIdx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_port_idx: Int = Int (portIdx)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_output_port_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port_idx)
        return _result
        #else
        
        var copy_port_idx: Int = Int (portIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_output_port_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_output_port_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_output_port_type")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3744713108)!
            }
            
        }
        
    }()
    
    /// Returns the type of the output port with the given `portIdx`.
    public final func getOutputPortType (portIdx: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_port_idx: Int = Int (portIdx)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_output_port_type, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port_idx)
        return _result
        #else
        
        var copy_port_idx: Int = Int (portIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_output_port_type, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_output_port_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_output_port_color")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2624840992)!
            }
            
        }
        
    }()
    
    /// Returns the ``Color`` of the output port with the given `portIdx`.
    public final func getOutputPortColor (portIdx: Int32)-> Color {
        var _result: Color = Color ()
        #if false
        
        var copy_port_idx: Int = Int (portIdx)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_output_port_color, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port_idx)
        return _result
        #else
        
        var copy_port_idx: Int = Int (portIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_output_port_color, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_output_port_slot: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_output_port_slot")
        return withUnsafePointer (to: &GraphNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3744713108)!
            }
            
        }
        
    }()
    
    /// Returns the corresponding slot index of the output port with the given `portIdx`.
    public final func getOutputPortSlot (portIdx: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_port_idx: Int = Int (portIdx)
        
        gi.object_method_bind_ptrcall_v (GraphNode.method_get_output_port_slot, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port_idx)
        return _result
        #else
        
        var copy_port_idx: Int = Int (portIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphNode.method_get_output_port_slot, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_draw_port":
                return _GraphNode_proxy_draw_port
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ slotIndex: Int64) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Int64 (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when any GraphNode's slot is updated.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.slotUpdated.connect { slotIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var slotUpdated: Signal1 { Signal1 (target: self, signalName: "slot_updated") }
    
}

// Support methods for proxies
func _GraphNode_proxy_draw_port (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<GraphNode>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._drawPort (slotIndex: args [0]!.assumingMemoryBound (to: Int32.self).pointee, position: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, left: args [2]!.assumingMemoryBound (to: Bool.self).pointee, color: args [3]!.assumingMemoryBound (to: Color.self).pointee)
}

