// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A reference to an existing ``VisualShaderNodeParameter``.
/// 
/// Creating a reference to a ``VisualShaderNodeParameter`` allows you to reuse this parameter in different shaders or shader stages easily.
open class VisualShaderNodeParameterRef: VisualShaderNode {
    override open class var godotClassName: StringName { "VisualShaderNodeParameterRef" }
    
    /* Properties */
    
    /// The name of the parameter which this reference points to.
    final public var parameterName: String {
        get {
            return get_parameter_name ()
        }
        
        set {
            set_parameter_name (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_parameter_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_parameter_name")
        return withUnsafePointer (to: &VisualShaderNodeParameterRef.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_parameter_name (_ name: String) {
        #if false
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeParameterRef.method_set_parameter_name, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeParameterRef.method_set_parameter_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_parameter_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_parameter_name")
        return withUnsafePointer (to: &VisualShaderNodeParameterRef.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_parameter_name ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (VisualShaderNodeParameterRef.method_get_parameter_name, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
}

