// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Base class for all other classes in the engine.
/// 
/// An advanced ``Variant`` type. All classes in the engine inherit from Object. Each class may define new properties, methods or signals, which are available to all inheriting classes. For example, a ``Sprite2D`` instance is able to call ``Node/addChild(node:forceReadableName:`internal`:)`` because it inherits from ``Node``.
/// 
/// You can create new instances, using `Object.new()` in GDScript, or `new GodotObject` in C#.
/// 
/// To delete an Object instance, call ``free()``. This is necessary for most classes inheriting Object, because they do not manage memory on their own, and will otherwise cause memory leaks when no longer in use. There are a few classes that perform memory management. For example, ``RefCounted`` (and by extension ``Resource``) deletes itself when no longer referenced, and ``Node`` deletes its children when freed.
/// 
/// Objects can have a ``Script`` attached to them. Once the ``Script`` is instantiated, it effectively acts as an extension to the base class, allowing it to define and inherit new properties, methods and signals.
/// 
/// Inside a ``Script``, ``_getPropertyList()`` may be overridden to customize properties in several ways. This allows them to be available to the editor, display as lists of options, sub-divide into groups, save on disk, etc. Scripting languages offer easier ways to customize properties, such as with the [annotation @GDScript.@export] annotation.
/// 
/// Godot is very dynamic. An object's script, and therefore its properties, methods and signals, can be changed at run-time. Because of this, there can be occasions where, for example, a property required by a method may not exist. To prevent run-time errors, see methods such as ``set(property:value:)``, ``get(property:)``, ``call(method:)``, ``hasMethod(_:)``, ``hasSignal(_:)``, etc. Note that these methods are **much** slower than direct references.
/// 
/// In GDScript, you can also check if a given property, method, or signal name exists in an object with the `in` operator:
/// 
/// Notifications are integer constants commonly sent and received by objects. For example, on every rendered frame, the ``SceneTree`` notifies nodes inside the tree with a ``Node/``notificationProcess````. The nodes receive it and may call ``Node/_process(delta:)`` to update. To make use of notifications, see ``notification(what:reversed:)`` and ``_notification()``.
/// 
/// Lastly, every object can also contain metadata (data about data). ``setMeta(name:value:)`` can be useful to store information that the object itself does not depend on. To keep your code clean, making excessive use of metadata is discouraged.
/// 
/// > Note: Unlike references to a ``RefCounted``, references to an object stored in a variable can become invalid without being set to `null`. To check if an object has been deleted, do _not_ compare it against `null`. Instead, use ``@GlobalScope.is_instance_valid``. It's also recommended to inherit from ``RefCounted`` for classes storing data instead of ``Object``.
/// 
/// > Note: The `script` is not exposed like most properties. To set or get an object's ``Script`` in code, use ``setScript(_:)`` and ``getScript()``, respectively.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``scriptChanged``
/// - ``propertyListChanged``
open class Object: Wrapped, GodotObject {
    override open class var godotClassName: StringName { "Object" }
    public struct ConnectFlags: OptionSet, CustomDebugStringConvertible {
        public let rawValue: Int
        public init (rawValue: Int) {
            self.rawValue = rawValue
        }
        
        /// Deferred connections trigger their ``Callable``s on idle time (at the end of the frame), rather than instantly.
        public static let deferred = ConnectFlags (rawValue: 1)
        /// Persisting connections are stored when the object is serialized (such as when using ``PackedScene/pack(path:)``). In the editor, connections created through the Node dock are always persisting.
        public static let persist = ConnectFlags (rawValue: 2)
        /// One-shot connections disconnect themselves after emission.
        public static let oneShot = ConnectFlags (rawValue: 4)
        /// Reference-counted connections can be assigned to the same ``Callable`` multiple times. Each disconnection decreases the internal counter. The signal fully disconnects only when the counter reaches 0.
        public static let referenceCounted = ConnectFlags (rawValue: 8)
        /// A textual representation of this instance, suitable for debugging
        public var debugDescription: String {
            var result = ""
            if self.contains (.deferred) { result += "deferred, " }
            if self.contains (.persist) { result += "persist, " }
            if self.contains (.oneShot) { result += "oneShot, " }
            if self.contains (.referenceCounted) { result += "referenceCounted, " }
            if result.hasSuffix (", ") { result.removeLast (2) }
            return result
        }
        
    }
    
    /* Constants */
    /// Notification received when the object is initialized, before its script is attached. Used internally.
    public static let notificationPostinitialize = 0
    /// Notification received when the object is about to be deleted. Can act as the deconstructor of some programming languages.
    public static let notificationPredelete = 1
    /* Methods */
    static var method_get_class: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_class")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the object's built-in class name, as a ``String``. See also ``isClass(_:)``.
    /// 
    /// > Note: This method ignores `class_name` declarations. If this object's script has defined a `class_name`, the base, built-in class name is returned instead.
    /// 
    public final func getClass ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (Object.method_get_class, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_is_class: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_class")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the object inherits from the given `class`. See also ``getClass()``.
    /// 
    /// > Note: This method ignores `class_name` declarations in the object's script.
    /// 
    public final func isClass (_ `class`: String)-> Bool {
        var _result: Bool = false
        #if false
        
        let gstr_class = GString (`class`)
        
        gi.object_method_bind_ptrcall_v (Object.method_is_class, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_class.content)
        return _result
        #else
        
        let gstr_class = GString (`class`)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_class.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_is_class, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3776071444)!
            }
            
        }
        
    }()
    
    /// Assigns `value` to the given `property`. If the property does not exist or the given `value`'s type doesn't match, nothing happens.
    /// 
    /// > Note: In C#, `property` must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the `PropertyName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    public final func set (property: StringName, value: Variant) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_set, UnsafeMutableRawPointer (mutating: handle), nil, &property.content, &value.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &property.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &value.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_set, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2760726917)!
            }
            
        }
        
    }()
    
    /// Returns the ``Variant`` value of the given `property`. If the `property` does not exist, this method returns `null`.
    /// 
    /// > Note: In C#, `property` must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the `PropertyName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    public final func get (property: StringName)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_get, UnsafeMutableRawPointer (mutating: handle), &_result.content, &property.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &property.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_get, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_indexed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_indexed")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3500910842)!
            }
            
        }
        
    }()
    
    /// Assigns a new `value` to the property identified by the `propertyPath`. The path should be a ``NodePath`` relative to this object, and can use the colon character (`:`) to access nested properties.
    /// 
    /// > Note: In C#, `propertyPath` must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the `PropertyName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    public final func setIndexed (propertyPath: NodePath, value: Variant) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_set_indexed, UnsafeMutableRawPointer (mutating: handle), nil, &propertyPath.content, &value.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &propertyPath.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &value.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_set_indexed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_indexed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_indexed")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4006125091)!
            }
            
        }
        
    }()
    
    /// Gets the object's property indexed by the given `propertyPath`. The path should be a ``NodePath`` relative to the current object and can use the colon character (`:`) to access nested properties.
    /// 
    /// **Examples:** `"position:x"` or `"material:next_pass:blend_mode"`.
    /// 
    /// > Note: In C#, `propertyPath` must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the `PropertyName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    /// > Note: This method does not support actual paths to nodes in the ``SceneTree``, only sub-property paths. In the context of nodes, use ``Node/getNodeAndResource(path:)`` instead.
    /// 
    public final func getIndexed (propertyPath: NodePath)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_get_indexed, UnsafeMutableRawPointer (mutating: handle), &_result.content, &propertyPath.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &propertyPath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_get_indexed, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_property_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_property_list")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns the object's property list as an ``GArray`` of dictionaries. Each ``GDictionary`` contains the following entries:
    /// 
    /// - `name` is the property's name, as a ``String``;
    /// 
    /// - `class_name` is an empty ``StringName``, unless the property is ``Variant.GType/object`` and it inherits from a class;
    /// 
    /// - `type` is the property's type, as an integer (see ``Variant.GType``);
    /// 
    /// - `hint` is _how_ the property is meant to be edited (see ``PropertyHint``);
    /// 
    /// - `hint_string` depends on the hint (see ``PropertyHint``);
    /// 
    /// - `usage` is a combination of ``PropertyUsageFlags``.
    /// 
    /// > Note: In GDScript, all class members are treated as properties. In C# and GDExtension, it may be necessary to explicitly mark class members as Godot properties using decorators or attributes.
    /// 
    public final func getPropertyList ()-> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Object.method_get_property_list, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<GDictionary>(content: _result)
    }
    
    fileprivate static var method_get_method_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_method_list")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns this object's methods and their signatures as an ``GArray`` of dictionaries. Each ``GDictionary`` contains the following entries:
    /// 
    /// - `name` is the name of the method, as a ``String``;
    /// 
    /// - `args` is an ``GArray`` of dictionaries representing the arguments;
    /// 
    /// - `default_args` is the default arguments as an ``GArray`` of variants;
    /// 
    /// - `flags` is a combination of ``MethodFlags``;
    /// 
    /// - `id` is the method's internal identifier integer;
    /// 
    /// - `return` is the returned value, as a ``GDictionary``;
    /// 
    /// > Note: The dictionaries of `args` and `return` are formatted identically to the results of ``getPropertyList()``, although not all entries are used.
    /// 
    public final func getMethodList ()-> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Object.method_get_method_list, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<GDictionary>(content: _result)
    }
    
    fileprivate static var method_property_can_revert: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_can_revert")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given `property` has a custom default value. Use ``propertyGetRevert(property:)`` to get the `property`'s default value.
    /// 
    /// > Note: This method is used by the Inspector dock to display a revert icon. The object must implement ``_propertyCanRevert()`` to customize the default value. If ``_propertyCanRevert()`` is not implemented, this method returns `false`.
    /// 
    public final func propertyCanRevert (property: StringName)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_property_can_revert, UnsafeMutableRawPointer (mutating: handle), &_result, &property.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &property.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_property_can_revert, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_property_get_revert: GDExtensionMethodBindPtr = {
        let methodName = StringName ("property_get_revert")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2760726917)!
            }
            
        }
        
    }()
    
    /// Returns the custom default value of the given `property`. Use ``propertyCanRevert(property:)`` to check if the `property` has a custom default value.
    /// 
    /// > Note: This method is used by the Inspector dock to display a revert icon. The object must implement ``_propertyGetRevert()`` to customize the default value. If ``_propertyGetRevert()`` is not implemented, this method returns `null`.
    /// 
    public final func propertyGetRevert (property: StringName)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_property_get_revert, UnsafeMutableRawPointer (mutating: handle), &_result.content, &property.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &property.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_property_get_revert, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_notification: GDExtensionMethodBindPtr = {
        let methodName = StringName ("notification")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4023243586)!
            }
            
        }
        
    }()
    
    /// Sends the given `what` notification to all classes inherited by the object, triggering calls to ``_notification()``, starting from the highest ancestor (the ``Object`` class) and going down to the object's script.
    /// 
    /// If `reversed` is `true`, the call order is reversed.
    /// 
    public final func notification (what: Int32, reversed: Bool = false) {
        #if false
        
        var copy_what: Int = Int (what)
        var copy_reversed = reversed
        
        gi.object_method_bind_ptrcall_v (Object.method_notification, UnsafeMutableRawPointer (mutating: handle), nil, &copy_what, &copy_reversed)
        
        #else
        
        var copy_what: Int = Int (what)
        var copy_reversed = reversed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_what) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_reversed) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_notification, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_to_string: GDExtensionMethodBindPtr = {
        let methodName = StringName ("to_string")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2841200299)!
            }
            
        }
        
    }()
    
    /// Returns a ``String`` representing the object. Defaults to `"<ClassName#RID>"`. Override ``_toString()`` to customize the string representation of the object.
    public final func toString ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (Object.method_to_string, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_instance_id")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the object's unique instance ID. This ID can be saved in ``EncodedObjectAsID``, and can be used to retrieve this object instance with ``@GlobalScope.instance_from_id``.
    public final func getInstanceId ()-> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall (Object.method_get_instance_id, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_script: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_script")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1114965689)!
            }
            
        }
        
    }()
    
    /// Attaches `script` to the object, and instantiates it. As a result, the script's ``_init()`` is called. A ``Script`` is used to extend the object's functionality.
    /// 
    /// If a script already exists, its instance is detached, and its property values and state are lost. Built-in property values are still kept.
    /// 
    public final func setScript (_ script: Variant) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_set_script, UnsafeMutableRawPointer (mutating: handle), nil, &script.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &script.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_set_script, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_script: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_script")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1214101251)!
            }
            
        }
        
    }()
    
    /// Returns the object's ``Script`` instance, or `null` if no script is attached.
    public final func getScript ()-> Variant {
        let _result: Variant = Variant ()
        gi.object_method_bind_ptrcall (Object.method_get_script, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_meta")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3776071444)!
            }
            
        }
        
    }()
    
    /// Adds or changes the entry `name` inside the object's metadata. The metadata `value` can be any ``Variant``, although some types cannot be serialized correctly.
    /// 
    /// If `value` is `null`, the entry is removed. This is the equivalent of using ``removeMeta(name:)``. See also ``hasMeta(name:)`` and ``getMeta(name:`default`:)``.
    /// 
    /// > Note: A metadata's name must be a valid identifier as per ``StringName/isValidIdentifier()`` method.
    /// 
    /// > Note: Metadata that has a name starting with an underscore (`_`) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.
    /// 
    public final func setMeta (name: StringName, value: Variant) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_set_meta, UnsafeMutableRawPointer (mutating: handle), nil, &name.content, &value.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &value.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_set_meta, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_meta")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Removes the given entry `name` from the object's metadata. See also ``hasMeta(name:)``, ``getMeta(name:`default`:)`` and ``setMeta(name:value:)``.
    /// 
    /// > Note: A metadata's name must be a valid identifier as per ``StringName/isValidIdentifier()`` method.
    /// 
    /// > Note: Metadata that has a name starting with an underscore (`_`) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.
    /// 
    public final func removeMeta (name: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_remove_meta, UnsafeMutableRawPointer (mutating: handle), nil, &name.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_remove_meta, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_meta")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3990617847)!
            }
            
        }
        
    }()
    
    /// Returns the object's metadata value for the given entry `name`. If the entry does not exist, returns `default`. If `default` is `null`, an error is also generated.
    /// 
    /// > Note: A metadata's name must be a valid identifier as per ``StringName/isValidIdentifier()`` method.
    /// 
    /// > Note: Metadata that has a name starting with an underscore (`_`) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.
    /// 
    public final func getMeta (name: StringName, `default`: Variant)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_get_meta, UnsafeMutableRawPointer (mutating: handle), &_result.content, &name.content, &`default`.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &`default`.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_get_meta, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_has_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_meta")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a metadata entry is found with the given `name`. See also ``getMeta(name:`default`:)``, ``setMeta(name:value:)`` and ``removeMeta(name:)``.
    /// 
    /// > Note: A metadata's name must be a valid identifier as per ``StringName/isValidIdentifier()`` method.
    /// 
    /// > Note: Metadata that has a name starting with an underscore (`_`) is considered editor-only. Editor-only metadata is not displayed in the Inspector and should not be edited, although it can still be found by this method.
    /// 
    public final func hasMeta (name: StringName)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_has_meta, UnsafeMutableRawPointer (mutating: handle), &_result, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_has_meta, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_meta_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_meta_list")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns the object's metadata entry names as a ``PackedStringArray``.
    public final func getMetaList ()-> VariantCollection<StringName> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Object.method_get_meta_list, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<StringName>(content: _result)
    }
    
    fileprivate static var method_add_user_signal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_user_signal")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 85656714)!
            }
            
        }
        
    }()
    
    /// Adds a user-defined `signal`. Optional arguments for the signal can be added as an ``GArray`` of dictionaries, each defining a `name` ``String`` and a `type` integer (see ``Variant.GType``). See also ``hasUserSignal(_:)``.
    /// 
    public final func addUserSignal (_ signal: String, arguments: GArray = GArray ()) {
        #if false
        
        let gstr_signal = GString (signal)
        
        gi.object_method_bind_ptrcall_v (Object.method_add_user_signal, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_signal.content, &arguments.content)
        
        #else
        
        let gstr_signal = GString (signal)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_signal.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &arguments.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_add_user_signal, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_has_user_signal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_user_signal")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given user-defined `signal` name exists. Only signals added with ``addUserSignal(_:arguments:)`` are included.
    public final func hasUserSignal (_ signal: StringName)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_has_user_signal, UnsafeMutableRawPointer (mutating: handle), &_result, &signal.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &signal.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_has_user_signal, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_emit_signal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("emit_signal")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4047867050)!
            }
            
        }
        
    }()
    
    /// Emits the given `signal` by name. The signal must exist, so it should be a built-in signal of this class or one of its inherited classes, or a user-defined signal (see ``addUserSignal(_:arguments:)``). This method supports a variable number of arguments, so parameters can be passed as a comma separated list.
    /// 
    /// Returns ``GodotError/errUnavailable`` if `signal` does not exist or the parameters are invalid.
    /// 
    /// > Note: In C#, `signal` must be in snake_case when referring to built-in Godot signals. Prefer using the names exposed in the `SignalName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    @discardableResult /* discardable per discardableList: Object, emit_signal */ 
    public final func emitSignal (_ signal: StringName, _ arguments: Variant...)-> GodotError {
        var _result: Variant.ContentType = Variant.zero
        #if false
        
        let copy_signal = Variant (signal)
        
        gi.object_method_bind_call_v (Object.method_emit_signal, UnsafeMutableRawPointer (mutating: handle), &_result, nil, &copy_signal.content)
        return GodotError (rawValue: Int64 (Variant (fromContentPtr: &_result))!)!
        #else
        
        let copy_signal = Variant (signal)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_signal.content) { p0 in
            _args.append (p0)
        
        let content = UnsafeMutableBufferPointer<Variant.ContentType>.allocate(capacity: arguments.count)
        defer { content.deallocate () }
        for idx in 0..<arguments.count {
            content [idx] = arguments [idx].content
            _args.append (content.baseAddress! + idx)
        }
        
            gi.object_method_bind_call (Object.method_emit_signal, UnsafeMutableRawPointer (mutating: handle), &_args, Int64 (_args.count), &_result, nil)
            return GodotError (rawValue: Int64 (Variant (fromContentPtr: &_result))!)!
        }
        
        #endif
    }
    
    fileprivate static var method_call: GDExtensionMethodBindPtr = {
        let methodName = StringName ("call")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3400424181)!
            }
            
        }
        
    }()
    
    /// Calls the `method` on the object and returns the result. This method supports a variable number of arguments, so parameters can be passed as a comma separated list.
    /// 
    /// > Note: In C#, `method` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `MethodName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    public final func call (method: StringName, _ arguments: Variant...)-> Variant {
        var _result: Variant.ContentType = Variant.zero
        #if false
        
        let copy_method = Variant (method)
        
        gi.object_method_bind_call_v (Object.method_call, UnsafeMutableRawPointer (mutating: handle), &_result, nil, &copy_method.content)
        return Variant (fromContentPtr: &_result)
        #else
        
        let copy_method = Variant (method)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_method.content) { p0 in
            _args.append (p0)
        
        let content = UnsafeMutableBufferPointer<Variant.ContentType>.allocate(capacity: arguments.count)
        defer { content.deallocate () }
        for idx in 0..<arguments.count {
            content [idx] = arguments [idx].content
            _args.append (content.baseAddress! + idx)
        }
        
            gi.object_method_bind_call (Object.method_call, UnsafeMutableRawPointer (mutating: handle), &_args, Int64 (_args.count), &_result, nil)
            return Variant (fromContentPtr: &_result)
        }
        
        #endif
    }
    
    fileprivate static var method_call_deferred: GDExtensionMethodBindPtr = {
        let methodName = StringName ("call_deferred")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3400424181)!
            }
            
        }
        
    }()
    
    /// Calls the `method` on the object during idle time. Always returns null, **not** the method's result.
    /// 
    /// Idle time happens mainly at the end of process and physics frames. In it, deferred calls will be run until there are none left, which means you can defer calls from other deferred calls and they'll still be run in the current idle time cycle. If not done carefully, this can result in infinite recursion without causing a stack overflow, which will hang the game similarly to an infinite loop.
    /// 
    /// This method supports a variable number of arguments, so parameters can be passed as a comma separated list.
    /// 
    /// See also ``Callable/callDeferred()``.
    /// 
    /// > Note: In C#, `method` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `MethodName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    /// > Note: If you're looking to delay the function call by a frame, refer to the [signal SceneTree.process_frame] and [signal SceneTree.physics_frame] signals.
    /// 
    public final func callDeferred (method: StringName, _ arguments: Variant...)-> Variant {
        var _result: Variant.ContentType = Variant.zero
        #if false
        
        let copy_method = Variant (method)
        
        gi.object_method_bind_call_v (Object.method_call_deferred, UnsafeMutableRawPointer (mutating: handle), &_result, nil, &copy_method.content)
        return Variant (fromContentPtr: &_result)
        #else
        
        let copy_method = Variant (method)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_method.content) { p0 in
            _args.append (p0)
        
        let content = UnsafeMutableBufferPointer<Variant.ContentType>.allocate(capacity: arguments.count)
        defer { content.deallocate () }
        for idx in 0..<arguments.count {
            content [idx] = arguments [idx].content
            _args.append (content.baseAddress! + idx)
        }
        
            gi.object_method_bind_call (Object.method_call_deferred, UnsafeMutableRawPointer (mutating: handle), &_args, Int64 (_args.count), &_result, nil)
            return Variant (fromContentPtr: &_result)
        }
        
        #endif
    }
    
    fileprivate static var method_set_deferred: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_deferred")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3776071444)!
            }
            
        }
        
    }()
    
    /// Assigns `value` to the given `property`, at the end of the current frame. This is equivalent to calling ``set(property:value:)`` through ``callDeferred(method:)``.
    /// 
    /// > Note: In C#, `property` must be in snake_case when referring to built-in Godot properties. Prefer using the names exposed in the `PropertyName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    public final func setDeferred (property: StringName, value: Variant) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_set_deferred, UnsafeMutableRawPointer (mutating: handle), nil, &property.content, &value.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &property.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &value.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_set_deferred, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_callv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("callv")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1260104456)!
            }
            
        }
        
    }()
    
    /// Calls the `method` on the object and returns the result. Unlike ``call(method:)``, this method expects all parameters to be contained inside `argArray`.
    /// 
    /// > Note: In C#, `method` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `MethodName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    public final func callv (method: StringName, argArray: GArray)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_callv, UnsafeMutableRawPointer (mutating: handle), &_result.content, &method.content, &argArray.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &method.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &argArray.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_callv, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_has_method: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_method")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given `method` name exists in the object.
    /// 
    /// > Note: In C#, `method` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `MethodName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    public final func hasMethod (_ method: StringName)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_has_method, UnsafeMutableRawPointer (mutating: handle), &_result, &method.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &method.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_has_method, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_has_signal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_signal")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given `signal` name exists in the object.
    /// 
    /// > Note: In C#, `signal` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `SignalName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    public final func hasSignal (_ signal: StringName)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_has_signal, UnsafeMutableRawPointer (mutating: handle), &_result, &signal.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &signal.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_has_signal, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_signal_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_signal_list")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns the list of existing signals as an ``GArray`` of dictionaries.
    /// 
    /// > Note: Due of the implementation, each ``GDictionary`` is formatted very similarly to the returned values of ``getMethodList()``.
    /// 
    public final func getSignalList ()-> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Object.method_get_signal_list, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<GDictionary>(content: _result)
    }
    
    fileprivate static var method_get_signal_connection_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_signal_connection_list")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3147814860)!
            }
            
        }
        
    }()
    
    /// Returns an ``GArray`` of connections for the given `signal` name. Each connection is represented as a ``GDictionary`` that contains three entries:
    /// 
    /// - [code skip-lint]signal` is a reference to the ``Signal``;
    /// 
    /// - `callable` is a reference to the connected ``Callable``;
    /// 
    /// - `flags` is a combination of ``Object/ConnectFlags``.
    /// 
    public final func getSignalConnectionList (signal: StringName)-> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_get_signal_connection_list, UnsafeMutableRawPointer (mutating: handle), &_result, &signal.content)
        return VariantCollection<GDictionary>(content: _result)
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &signal.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_get_signal_connection_list, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return VariantCollection<GDictionary>(content: _result)
        }
        
        #endif
    }
    
    fileprivate static var method_get_incoming_connections: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_incoming_connections")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns an ``GArray`` of signal connections received by this object. Each connection is represented as a ``GDictionary`` that contains three entries:
    /// 
    /// - `signal` is a reference to the ``Signal``;
    /// 
    /// - `callable` is a reference to the ``Callable``;
    /// 
    /// - `flags` is a combination of ``Object/ConnectFlags``.
    /// 
    public final func getIncomingConnections ()-> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Object.method_get_incoming_connections, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<GDictionary>(content: _result)
    }
    
    fileprivate static var method_connect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("connect")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1518946055)!
            }
            
        }
        
    }()
    
    /// Connects a `signal` by name to a `callable`. Optional `flags` can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
    /// 
    /// A signal can only be connected once to the same ``Callable``. If the signal is already connected, this method returns ``GodotError/errInvalidParameter`` and pushes an error message, unless the signal is connected with .connectReferenceCounted. To prevent this, use ``isConnected(signal:callable:)`` first to check for existing connections.
    /// 
    /// If the `callable`'s object is freed, the connection will be lost.
    /// 
    /// **Examples with recommended syntax:**
    /// 
    /// Connecting signals is one of the most common operations in Godot and the API gives many options to do so, which are described further down. The code block below shows the recommended approach.
    /// 
    /// **[code skip-lint]Object.connect()` or [code skip-lint]Signal.connect()`?**
    /// 
    /// As seen above, the recommended method to connect signals is not ``Object/connect(signal:callable:flags:)``. The code block below shows the four options for connecting signals, using either this legacy method or the recommended ``Signal/connect(callable:flags:)``, and using either an implicit ``Callable`` or a manually defined one.
    /// 
    /// While all options have the same outcome (`button`'s [signal BaseButton.button_down] signal will be connected to `_on_button_down`), **option 3** offers the best validation: it will print a compile-time error if either the `button_down` ``Signal`` or the `_on_button_down` ``Callable`` are not defined. On the other hand, **option 2** only relies on string names and will only be able to validate either names at runtime: it will print a runtime error if `"button_down"` doesn't correspond to a signal, or if `"_on_button_down"` is not a registered method in the object `self`. The main reason for using options 1, 2, or 4 would be if you actually need to use strings (e.g. to connect signals programmatically based on strings read from a configuration file). Otherwise, option 3 is the recommended (and fastest) method.
    /// 
    /// **Binding and passing parameters:**
    /// 
    /// The syntax to bind parameters is through ``Callable/bind()``, which returns a copy of the ``Callable`` with its parameters bound.
    /// 
    /// When calling ``emitSignal(_:)``, the signal parameters can be also passed. The examples below show the relationship between these signal parameters and bound parameters.
    /// 
    public final func connect (signal: StringName, callable: Callable, flags: UInt32 = 0)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        var copy_flags: Int = Int (flags)
        
        gi.object_method_bind_ptrcall_v (Object.method_connect, UnsafeMutableRawPointer (mutating: handle), &_result, &signal.content, &callable.content, &copy_flags)
        return GodotError (rawValue: _result)!
        #else
        
        var copy_flags: Int = Int (flags)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &signal.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &callable.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_flags) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (Object.method_connect, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return GodotError (rawValue: _result)!
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_disconnect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("disconnect")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1874754934)!
            }
            
        }
        
    }()
    
    /// Disconnects a `signal` by name from a given `callable`. If the connection does not exist, generates an error. Use ``isConnected(signal:callable:)`` to make sure that the connection exists.
    public final func disconnect (signal: StringName, callable: Callable) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_disconnect, UnsafeMutableRawPointer (mutating: handle), nil, &signal.content, &callable.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &signal.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &callable.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_disconnect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_connected: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_connected")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 768136979)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a connection exists between the given `signal` name and `callable`.
    /// 
    /// > Note: In C#, `signal` must be in snake_case when referring to built-in Godot methods. Prefer using the names exposed in the `SignalName` class to avoid allocating a new ``StringName`` on each call.
    /// 
    public final func isConnected (signal: StringName, callable: Callable)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_is_connected, UnsafeMutableRawPointer (mutating: handle), &_result, &signal.content, &callable.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &signal.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &callable.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_is_connected, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_block_signals: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_block_signals")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// If set to `true`, the object becomes unable to emit signals. As such, ``emitSignal(_:)`` and signal connections will not work, until it is set to `false`.
    public final func setBlockSignals (enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Object.method_set_block_signals, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_set_block_signals, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_blocking_signals: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_blocking_signals")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the object is blocking its signals from being emitted. See ``setBlockSignals(enable:)``.
    public final func isBlockingSignals ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Object.method_is_blocking_signals, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_notify_property_list_changed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("notify_property_list_changed")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Emits the [signal property_list_changed] signal. This is mainly used to refresh the editor, so that the Inspector and editor plugins are properly updated.
    public final func notifyPropertyListChanged () {
        gi.object_method_bind_ptrcall (Object.method_notify_property_list_changed, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_message_translation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_message_translation")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// If set to `true`, allows the object to translate messages with ``tr(message:context:)`` and ``trN(message:pluralMessage:n:context:)``. Enabled by default. See also ``canTranslateMessages()``.
    public final func setMessageTranslation (enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Object.method_set_message_translation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Object.method_set_message_translation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_can_translate_messages: GDExtensionMethodBindPtr = {
        let methodName = StringName ("can_translate_messages")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the object is allowed to translate messages with ``tr(message:context:)`` and ``trN(message:pluralMessage:n:context:)``. See also ``setMessageTranslation(enable:)``.
    public final func canTranslateMessages ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Object.method_can_translate_messages, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_tr: GDExtensionMethodBindPtr = {
        let methodName = StringName ("tr")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1195764410)!
            }
            
        }
        
    }()
    
    /// Translates a `message`, using the translation catalogs configured in the Project Settings. Further `context` can be specified to help with the translation.
    /// 
    /// If ``canTranslateMessages()`` is `false`, or no translation is available, this method returns the `message` without changes. See ``setMessageTranslation(enable:)``.
    /// 
    /// For detailed examples, see [url=$DOCS_URL/tutorials/i18n/internationalizing_games.html]Internationalizing games[/url].
    /// 
    public final func tr (message: StringName, context: StringName = StringName (""))-> String {
        let _result = GString ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Object.method_tr, UnsafeMutableRawPointer (mutating: handle), &_result.content, &message.content, &context.content)
        return _result.description
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &message.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &context.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Object.method_tr, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                return _result.description
            }
        }
        
        #endif
    }
    
    fileprivate static var method_tr_n: GDExtensionMethodBindPtr = {
        let methodName = StringName ("tr_n")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 162698058)!
            }
            
        }
        
    }()
    
    /// Translates a `message` or `pluralMessage`, using the translation catalogs configured in the Project Settings. Further `context` can be specified to help with the translation.
    /// 
    /// If ``canTranslateMessages()`` is `false`, or no translation is available, this method returns `message` or `pluralMessage`, without changes. See ``setMessageTranslation(enable:)``.
    /// 
    /// The `n` is the number, or amount, of the message's subject. It is used by the translation system to fetch the correct plural form for the current language.
    /// 
    /// For detailed examples, see [url=$DOCS_URL/tutorials/i18n/localization_using_gettext.html]Localization using gettext[/url].
    /// 
    /// > Note: Negative and float numbers may not properly apply to some countable subjects. It's recommended handling these cases with ``tr(message:context:)``.
    /// 
    public final func trN (message: StringName, pluralMessage: StringName, n: Int32, context: StringName = StringName (""))-> String {
        let _result = GString ()
        #if false
        
        var copy_n: Int = Int (n)
        
        gi.object_method_bind_ptrcall_v (Object.method_tr_n, UnsafeMutableRawPointer (mutating: handle), &_result.content, &message.content, &pluralMessage.content, &copy_n, &context.content)
        return _result.description
        #else
        
        var copy_n: Int = Int (n)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &message.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &pluralMessage.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_n) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &context.content) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (Object.method_tr_n, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                        return _result.description
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_queued_for_deletion: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_queued_for_deletion")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the ``Node/queueFree()`` method was called for the object.
    public final func isQueuedForDeletion ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Object.method_is_queued_for_deletion, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_cancel_free: GDExtensionMethodBindPtr = {
        let methodName = StringName ("cancel_free")
        return withUnsafePointer (to: &Object.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// If this method is called during ``notificationPredelete``, this object will reject being freed and will remain allocated. This is mostly an internal function used for error handling to avoid the user from freeing objects when they are not intended to.
    public final func cancelFree () {
        gi.object_method_bind_ptrcall (Object.method_cancel_free, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    // Signals 
    /// Emitted when the object's script is changed.
    /// 
    /// > Note: When this signal is emitted, the new script is not initialized yet. If you need to access the new script, defer connections to this signal with .connectDeferred.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.scriptChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var scriptChanged: SimpleSignal { SimpleSignal (target: self, signalName: "script_changed") }
    
    /// Emitted when ``notifyPropertyListChanged()`` is called.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.propertyListChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var propertyListChanged: SimpleSignal { SimpleSignal (target: self, signalName: "property_list_changed") }
    
}

