// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Meta class for playing back audio.
/// 
/// Can play, loop, pause a scroll through audio. See ``AudioStream`` and ``AudioStreamOggVorbis`` for usage.
open class AudioStreamPlayback: RefCounted {
    override open class var godotClassName: StringName { "AudioStreamPlayback" }
    /* Methods */
    /// 
    @_documentation(visibility: public)
    open func _start (fromPos: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _stop () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _isPlaying ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getLoopCount ()-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getPlaybackPosition ()-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _seek (position: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _tagUsedStreams () {
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_get_loop_count":
                return _AudioStreamPlayback_proxy_get_loop_count
            case "_get_playback_position":
                return _AudioStreamPlayback_proxy_get_playback_position
            case "_is_playing":
                return _AudioStreamPlayback_proxy_is_playing
            case "_seek":
                return _AudioStreamPlayback_proxy_seek
            case "_start":
                return _AudioStreamPlayback_proxy_start
            case "_stop":
                return _AudioStreamPlayback_proxy_stop
            case "_tag_used_streams":
                return _AudioStreamPlayback_proxy_tag_used_streams
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _AudioStreamPlayback_proxy_get_loop_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<AudioStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getLoopCount ()
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _AudioStreamPlayback_proxy_get_playback_position (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<AudioStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPlaybackPosition ()
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _AudioStreamPlayback_proxy_is_playing (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<AudioStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isPlaying ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _AudioStreamPlayback_proxy_seek (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<AudioStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._seek (position: args [0]!.assumingMemoryBound (to: Double.self).pointee)
}

func _AudioStreamPlayback_proxy_start (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<AudioStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._start (fromPos: args [0]!.assumingMemoryBound (to: Double.self).pointee)
}

func _AudioStreamPlayback_proxy_stop (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<AudioStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._stop ()
}

func _AudioStreamPlayback_proxy_tag_used_streams (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<AudioStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._tagUsedStreams ()
}

