// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A plugin that advanced tooltip for its handled resource type.
/// 
/// Resource tooltip plugins are used by ``FileSystemDock`` to generate customized tooltips for specific resources. E.g. tooltip for a ``Texture2D`` displays a bigger preview and the texture's dimensions.
/// 
/// A plugin must be first registered with ``FileSystemDock/addResourceTooltipPlugin(_:)``. When the user hovers a resource in filesystem dock which is handled by the plugin, ``_makeTooltipForPath(_:metadata:base:)`` is called to create the tooltip. It works similarly to ``Control/_makeCustomTooltip(forText:)``.
/// 
open class EditorResourceTooltipPlugin: RefCounted {
    override open class var godotClassName: StringName { "EditorResourceTooltipPlugin" }
    /* Methods */
    /// Return `true` if the plugin is going to handle the given ``Resource`` `type`.
    @_documentation(visibility: public)
    open func _handles (type: String)-> Bool {
        return false
    }
    
    /// Create and return a tooltip that will be displayed when the user hovers a resource under the given `path` in filesystem dock.
    /// 
    /// The `metadata` dictionary is provided by preview generator (see ``EditorResourcePreviewGenerator/_generate(resource:size:metadata:)``).
    /// 
    /// `base` is the base default tooltip, which is a ``VBoxContainer`` with a file name, type and size labels. If another plugin handled the same file type, `base` will be output from the previous plugin. For best result, make sure the base tooltip is part of the returned ``Control``.
    /// 
    /// > Note: It's unadvised to use ``ResourceLoader/load(path:typeHint:cacheMode:)``, especially with heavy resources like models or textures, because it will make the editor unresponsive when creating the tooltip. You can use ``requestThumbnail(path:control:)`` if you want to display a preview in your tooltip.
    /// 
    /// > Note: If you decide to discard the `base`, make sure to call ``Node/queueFree()``, because it's not freed automatically.
    /// 
    @_documentation(visibility: public)
    open func _makeTooltipForPath (_ path: String, metadata: GDictionary, base: Control?)-> Control? {
        return Control ()
    }
    
    fileprivate static var method_request_thumbnail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("request_thumbnail")
        return withUnsafePointer (to: &EditorResourceTooltipPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3245519720)!
            }
            
        }
        
    }()
    
    /// Requests a thumbnail for the given ``TextureRect``. The thumbnail is created asynchronously by ``EditorResourcePreview`` and automatically set when available.
    public final func requestThumbnail (path: String, control: TextureRect?) {
        #if true
        
        let gstr_path = GString (path)
        var copy_control_handle = control?.handle
        
        gi.object_method_bind_ptrcall_v (EditorResourceTooltipPlugin.method_request_thumbnail, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_path.content, &copy_control_handle)
        
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: control?.handle) { p1 in
            _args.append (control == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (EditorResourceTooltipPlugin.method_request_thumbnail, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_handles":
                return _EditorResourceTooltipPlugin_proxy_handles
            case "_make_tooltip_for_path":
                return _EditorResourceTooltipPlugin_proxy_make_tooltip_for_path
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _EditorResourceTooltipPlugin_proxy_handles (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorResourceTooltipPlugin>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._handles (type: GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _EditorResourceTooltipPlugin_proxy_make_tooltip_for_path (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorResourceTooltipPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_2 = args [2]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._makeTooltipForPath (GString.stringFromGStringPtr (ptr: args [0]!) ?? "", metadata: GDictionary (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), base: lookupLiveObject (handleAddress: resolved_2) as? Control ?? Control (nativeHandle: resolved_2))
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // Control
}

