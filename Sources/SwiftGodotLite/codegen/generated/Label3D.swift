// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A node for displaying plain text in 3D space.
/// 
/// A node for displaying plain text in 3D space. By adjusting various properties of this node, you can configure things such as the text's appearance and whether it always faces the camera.
open class Label3D: GeometryInstance3D {
    override open class var godotClassName: StringName { "Label3D" }
    public enum DrawFlags: Int64 {
        /// If set, lights in the environment affect the label.
        case shaded = 0 // FLAG_SHADED
        /// If set, text can be seen from the back as well. If not, the text is invisible when looking at it from behind.
        case doubleSided = 1 // FLAG_DOUBLE_SIDED
        /// Disables the depth test, so this object is drawn on top of all others. However, objects drawn after it in the draw order may cover it.
        case disableDepthTest = 2 // FLAG_DISABLE_DEPTH_TEST
        /// Label is scaled by depth so that it always appears the same size on screen.
        case fixedSize = 3 // FLAG_FIXED_SIZE
        /// Represents the size of the ``Label3D/DrawFlags`` enum.
        case max = 4 // FLAG_MAX
    }
    
    public enum AlphaCutMode: Int64 {
        /// This mode performs standard alpha blending. It can display translucent areas, but transparency sorting issues may be visible when multiple transparent materials are overlapping. ``GeometryInstance3D/castShadow`` has no effect when this transparency mode is used; the ``Label3D`` will never cast shadows.
        case disabled = 0 // ALPHA_CUT_DISABLED
        /// This mode only allows fully transparent or fully opaque pixels. Harsh edges will be visible unless some form of screen-space antialiasing is enabled (see ``ProjectSettings/rendering/antiAliasing/quality/screenSpaceAa``). This mode is also known as _alpha testing_ or _1-bit transparency_.
        /// 
        /// > Note: This mode might have issues with anti-aliased fonts and outlines, try adjusting ``alphaScissorThreshold`` or using MSDF font.
        /// 
        /// > Note: When using text with overlapping glyphs (e.g., cursive scripts), this mode might have transparency sorting issues between the main text and the outline.
        /// 
        case discard = 1 // ALPHA_CUT_DISCARD
        /// This mode draws fully opaque pixels in the depth prepass. This is slower than .alphaCutDisabled or .alphaCutDiscard, but it allows displaying translucent areas and smooth edges while using proper sorting.
        /// 
        /// > Note: When using text with overlapping glyphs (e.g., cursive scripts), this mode might have transparency sorting issues between the main text and the outline.
        /// 
        case opaquePrepass = 2 // ALPHA_CUT_OPAQUE_PREPASS
        /// This mode draws cuts off all values below a spatially-deterministic threshold, the rest will remain opaque.
        case hash = 3 // ALPHA_CUT_HASH
    }
    
    
    /* Properties */
    
    /// The size of one pixel's width on the label to scale it in 3D. To make the font look more detailed when up close, increase ``fontSize`` while decreasing ``pixelSize`` at the same time.
    final public var pixelSize: Double {
        get {
            return get_pixel_size ()
        }
        
        set {
            set_pixel_size (newValue)
        }
        
    }
    
    /// The text drawing offset (in pixels).
    final public var offset: Vector2 {
        get {
            return get_offset ()
        }
        
        set {
            set_offset (newValue)
        }
        
    }
    
    /// The billboard mode to use for the label. See ``BaseMaterial3D.BillboardMode`` for possible values.
    final public var billboard: BaseMaterial3D.BillboardMode {
        get {
            return get_billboard_mode ()
        }
        
        set {
            set_billboard_mode (newValue)
        }
        
    }
    
    /// If `true`, the ``Light3D`` in the ``Environment`` has effects on the label.
    final public var shaded: Bool {
        get {
            return get_draw_flag (Label3D.DrawFlags (rawValue: 0)!)
        }
        
        set {
            set_draw_flag (Label3D.DrawFlags (rawValue: 0)!, newValue)
        }
        
    }
    
    /// If `true`, text can be seen from the back as well, if `false`, it is invisible when looking at it from behind.
    final public var doubleSided: Bool {
        get {
            return get_draw_flag (Label3D.DrawFlags (rawValue: 1)!)
        }
        
        set {
            set_draw_flag (Label3D.DrawFlags (rawValue: 1)!, newValue)
        }
        
    }
    
    /// If `true`, depth testing is disabled and the object will be drawn in render order.
    final public var noDepthTest: Bool {
        get {
            return get_draw_flag (Label3D.DrawFlags (rawValue: 2)!)
        }
        
        set {
            set_draw_flag (Label3D.DrawFlags (rawValue: 2)!, newValue)
        }
        
    }
    
    /// If `true`, the label is rendered at the same size regardless of distance.
    final public var fixedSize: Bool {
        get {
            return get_draw_flag (Label3D.DrawFlags (rawValue: 3)!)
        }
        
        set {
            set_draw_flag (Label3D.DrawFlags (rawValue: 3)!, newValue)
        }
        
    }
    
    /// The alpha cutting mode to use for the sprite. See ``Label3D/AlphaCutMode`` for possible values.
    final public var alphaCut: Label3D.AlphaCutMode {
        get {
            return get_alpha_cut_mode ()
        }
        
        set {
            set_alpha_cut_mode (newValue)
        }
        
    }
    
    /// Threshold at which the alpha scissor will discard values.
    final public var alphaScissorThreshold: Double {
        get {
            return get_alpha_scissor_threshold ()
        }
        
        set {
            set_alpha_scissor_threshold (newValue)
        }
        
    }
    
    /// The hashing scale for Alpha Hash. Recommended values between `0` and `2`.
    final public var alphaHashScale: Double {
        get {
            return get_alpha_hash_scale ()
        }
        
        set {
            set_alpha_hash_scale (newValue)
        }
        
    }
    
    /// The type of alpha antialiasing to apply. See ``BaseMaterial3D.AlphaAntiAliasing``.
    final public var alphaAntialiasingMode: BaseMaterial3D.AlphaAntiAliasing {
        get {
            return get_alpha_antialiasing ()
        }
        
        set {
            set_alpha_antialiasing (newValue)
        }
        
    }
    
    /// Threshold at which antialiasing will be applied on the alpha channel.
    final public var alphaAntialiasingEdge: Double {
        get {
            return get_alpha_antialiasing_edge ()
        }
        
        set {
            set_alpha_antialiasing_edge (newValue)
        }
        
    }
    
    /// Filter flags for the texture. See ``BaseMaterial3D.TextureFilter`` for options.
    final public var textureFilter: BaseMaterial3D.TextureFilter {
        get {
            return get_texture_filter ()
        }
        
        set {
            set_texture_filter (newValue)
        }
        
    }
    
    /// Sets the render priority for the text. Higher priority objects will be sorted in front of lower priority objects.
    /// 
    /// > Note: This only applies if ``alphaCut`` is set to .alphaCutDisabled (default value).
    /// 
    /// > Note: This only applies to sorting of transparent objects. This will not impact how transparent objects are sorted relative to opaque objects. This is because opaque objects are not sorted, while transparent objects are sorted from back to front (subject to priority).
    /// 
    final public var renderPriority: Int32 {
        get {
            return get_render_priority ()
        }
        
        set {
            set_render_priority (newValue)
        }
        
    }
    
    /// Sets the render priority for the text outline. Higher priority objects will be sorted in front of lower priority objects.
    /// 
    /// > Note: This only applies if ``alphaCut`` is set to .alphaCutDisabled (default value).
    /// 
    /// > Note: This only applies to sorting of transparent objects. This will not impact how transparent objects are sorted relative to opaque objects. This is because opaque objects are not sorted, while transparent objects are sorted from back to front (subject to priority).
    /// 
    final public var outlineRenderPriority: Int32 {
        get {
            return get_outline_render_priority ()
        }
        
        set {
            set_outline_render_priority (newValue)
        }
        
    }
    
    /// Text ``Color`` of the ``Label3D``.
    final public var modulate: Color {
        get {
            return get_modulate ()
        }
        
        set {
            set_modulate (newValue)
        }
        
    }
    
    /// The tint of text outline.
    final public var outlineModulate: Color {
        get {
            return get_outline_modulate ()
        }
        
        set {
            set_outline_modulate (newValue)
        }
        
    }
    
    /// The text to display on screen.
    final public var text: String {
        get {
            return get_text ()
        }
        
        set {
            set_text (newValue)
        }
        
    }
    
    /// Font configuration used to display text.
    final public var font: Font? {
        get {
            return get_font ()
        }
        
        set {
            set_font (newValue)
        }
        
    }
    
    /// Font size of the ``Label3D``'s text. To make the font look more detailed when up close, increase ``fontSize`` while decreasing ``pixelSize`` at the same time.
    /// 
    /// Higher font sizes require more time to render new characters, which can cause stuttering during gameplay.
    /// 
    final public var fontSize: Int32 {
        get {
            return get_font_size ()
        }
        
        set {
            set_font_size (newValue)
        }
        
    }
    
    /// Text outline size.
    final public var outlineSize: Int32 {
        get {
            return get_outline_size ()
        }
        
        set {
            set_outline_size (newValue)
        }
        
    }
    
    /// Controls the text's horizontal alignment. Supports left, center, right, and fill, or justify. Set it to one of the ``HorizontalAlignment`` constants.
    final public var horizontalAlignment: HorizontalAlignment {
        get {
            return get_horizontal_alignment ()
        }
        
        set {
            set_horizontal_alignment (newValue)
        }
        
    }
    
    /// Controls the text's vertical alignment. Supports top, center, bottom. Set it to one of the ``VerticalAlignment`` constants.
    final public var verticalAlignment: VerticalAlignment {
        get {
            return get_vertical_alignment ()
        }
        
        set {
            set_vertical_alignment (newValue)
        }
        
    }
    
    /// If `true`, all the text displays as UPPERCASE.
    final public var uppercase: Bool {
        get {
            return is_uppercase ()
        }
        
        set {
            set_uppercase (newValue)
        }
        
    }
    
    /// Vertical space between lines in multiline ``Label3D``.
    final public var lineSpacing: Double {
        get {
            return get_line_spacing ()
        }
        
        set {
            set_line_spacing (newValue)
        }
        
    }
    
    /// If set to something other than ``TextServer/AutowrapMode/autowrapOff``, the text gets wrapped inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. To see how each mode behaves, see ``TextServer.AutowrapMode``.
    final public var autowrapMode: TextServer.AutowrapMode {
        get {
            return get_autowrap_mode ()
        }
        
        set {
            set_autowrap_mode (newValue)
        }
        
    }
    
    /// Line fill alignment rules. For more info see ``TextServer.JustificationFlag``.
    final public var justificationFlags: TextServer.JustificationFlag {
        get {
            return get_justification_flags ()
        }
        
        set {
            set_justification_flags (newValue)
        }
        
    }
    
    /// Text width (in pixels), used for autowrap and fill alignment.
    final public var width: Double {
        get {
            return get_width ()
        }
        
        set {
            set_width (newValue)
        }
        
    }
    
    /// Base text writing direction.
    final public var textDirection: TextServer.Direction {
        get {
            return get_text_direction ()
        }
        
        set {
            set_text_direction (newValue)
        }
        
    }
    
    /// Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.
    final public var language: String {
        get {
            return get_language ()
        }
        
        set {
            set_language (newValue)
        }
        
    }
    
    /// Set BiDi algorithm override for the structured text.
    final public var structuredTextBidiOverride: TextServer.StructuredTextParser {
        get {
            return get_structured_text_bidi_override ()
        }
        
        set {
            set_structured_text_bidi_override (newValue)
        }
        
    }
    
    /// Set additional options for BiDi override.
    final public var structuredTextBidiOverrideOptions: GArray {
        get {
            return get_structured_text_bidi_override_options ()
        }
        
        set {
            set_structured_text_bidi_override_options (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_horizontal_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_horizontal_alignment")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2312603777)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_horizontal_alignment (_ alignment: HorizontalAlignment) {
        #if false
        
        var copy_alignment = Int64 (alignment.rawValue)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_horizontal_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &copy_alignment)
        
        #else
        
        var copy_alignment = Int64 (alignment.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_alignment) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_horizontal_alignment, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_horizontal_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_horizontal_alignment")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 341400642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_horizontal_alignment ()-> HorizontalAlignment {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Label3D.method_get_horizontal_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return HorizontalAlignment (rawValue: _result)!
    }
    
    fileprivate static var method_set_vertical_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertical_alignment")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1796458609)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_vertical_alignment (_ alignment: VerticalAlignment) {
        #if false
        
        var copy_alignment = Int64 (alignment.rawValue)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_vertical_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &copy_alignment)
        
        #else
        
        var copy_alignment = Int64 (alignment.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_alignment) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_vertical_alignment, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertical_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertical_alignment")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3274884059)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_vertical_alignment ()-> VerticalAlignment {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Label3D.method_get_vertical_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VerticalAlignment (rawValue: _result)!
    }
    
    fileprivate static var method_set_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_modulate")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_modulate (_ modulate: Color) {
        #if false
        
        var copy_modulate = modulate
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &copy_modulate)
        
        #else
        
        var copy_modulate = modulate
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_modulate) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_modulate, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_modulate")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_modulate ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Label3D.method_get_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_outline_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_outline_modulate")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_outline_modulate (_ modulate: Color) {
        #if false
        
        var copy_modulate = modulate
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_outline_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &copy_modulate)
        
        #else
        
        var copy_modulate = modulate
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_modulate) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_outline_modulate, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_outline_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_outline_modulate")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_outline_modulate ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Label3D.method_get_outline_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_text (_ text: String) {
        #if false
        
        let gstr_text = GString (text)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_text, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_text.content)
        
        #else
        
        let gstr_text = GString (text)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_text.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_text, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_text ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (Label3D.method_get_text, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_text_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text_direction")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1418190634)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_text_direction (_ direction: TextServer.Direction) {
        #if false
        
        var copy_direction = Int64 (direction.rawValue)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_text_direction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_direction)
        
        #else
        
        var copy_direction = Int64 (direction.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_direction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_text_direction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_text_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text_direction")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2516697328)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_text_direction ()-> TextServer.Direction {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Label3D.method_get_text_direction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.Direction (rawValue: _result)!
    }
    
    fileprivate static var method_set_language: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_language")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_language (_ language: String) {
        #if false
        
        let gstr_language = GString (language)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_language, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_language.content)
        
        #else
        
        let gstr_language = GString (language)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_language.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_language, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_language: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_language")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_language ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (Label3D.method_get_language, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_structured_text_bidi_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_structured_text_bidi_override")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 55961453)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_structured_text_bidi_override (_ parser: TextServer.StructuredTextParser) {
        #if false
        
        var copy_parser = Int64 (parser.rawValue)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), nil, &copy_parser)
        
        #else
        
        var copy_parser = Int64 (parser.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_parser) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_structured_text_bidi_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_structured_text_bidi_override")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3385126229)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_structured_text_bidi_override ()-> TextServer.StructuredTextParser {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Label3D.method_get_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.StructuredTextParser (rawValue: _result)!
    }
    
    fileprivate static var method_set_structured_text_bidi_override_options: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_structured_text_bidi_override_options")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_structured_text_bidi_override_options (_ args: GArray) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), nil, &args.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &args.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_structured_text_bidi_override_options: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_structured_text_bidi_override_options")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_structured_text_bidi_override_options ()-> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall (Label3D.method_get_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_uppercase: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_uppercase")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_uppercase (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_uppercase, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_uppercase, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_uppercase: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_uppercase")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_uppercase ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Label3D.method_is_uppercase, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_render_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_render_priority")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_render_priority (_ priority: Int32) {
        #if false
        
        var copy_priority: Int = Int (priority)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_render_priority, UnsafeMutableRawPointer (mutating: handle), nil, &copy_priority)
        
        #else
        
        var copy_priority: Int = Int (priority)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_priority) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_render_priority, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_render_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_render_priority")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_render_priority ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Label3D.method_get_render_priority, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_outline_render_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_outline_render_priority")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_outline_render_priority (_ priority: Int32) {
        #if false
        
        var copy_priority: Int = Int (priority)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_outline_render_priority, UnsafeMutableRawPointer (mutating: handle), nil, &copy_priority)
        
        #else
        
        var copy_priority: Int = Int (priority)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_priority) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_outline_render_priority, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_outline_render_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_outline_render_priority")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_outline_render_priority ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Label3D.method_get_outline_render_priority, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_font: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1262170328)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font (_ font: Font?) {
        #if false
        
        var copy_font_handle = font?.handle
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_font, UnsafeMutableRawPointer (mutating: handle), nil, &copy_font_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: font?.handle) { p0 in
        _args.append (font == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_font, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_font: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3229501585)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_font ()-> Font? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Label3D.method_get_font, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_font_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_size")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_size (_ size: Int32) {
        #if false
        
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_font_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_font_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_font_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_size")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_font_size ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Label3D.method_get_font_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_outline_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_outline_size")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_outline_size (_ outlineSize: Int32) {
        #if false
        
        var copy_outline_size: Int = Int (outlineSize)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_outline_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_outline_size)
        
        #else
        
        var copy_outline_size: Int = Int (outlineSize)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_outline_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_outline_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_outline_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_outline_size")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_outline_size ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Label3D.method_get_outline_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_line_spacing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_line_spacing")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_line_spacing (_ lineSpacing: Double) {
        #if false
        
        var copy_line_spacing = lineSpacing
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_line_spacing, UnsafeMutableRawPointer (mutating: handle), nil, &copy_line_spacing)
        
        #else
        
        var copy_line_spacing = lineSpacing
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_line_spacing) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_line_spacing, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_line_spacing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_line_spacing")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_line_spacing ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Label3D.method_get_line_spacing, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_autowrap_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_autowrap_mode")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3289138044)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_autowrap_mode (_ autowrapMode: TextServer.AutowrapMode) {
        #if false
        
        var copy_autowrap_mode = Int64 (autowrapMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_autowrap_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_autowrap_mode)
        
        #else
        
        var copy_autowrap_mode = Int64 (autowrapMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_autowrap_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_autowrap_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_autowrap_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_autowrap_mode")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1549071663)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_autowrap_mode ()-> TextServer.AutowrapMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Label3D.method_get_autowrap_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.AutowrapMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_justification_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_justification_flags")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2877345813)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_justification_flags (_ justificationFlags: TextServer.JustificationFlag) {
        #if false
        
        var copy_justification_flags = justificationFlags
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_justification_flags, UnsafeMutableRawPointer (mutating: handle), nil, &copy_justification_flags)
        
        #else
        
        var copy_justification_flags = justificationFlags
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_justification_flags) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_justification_flags, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_justification_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_justification_flags")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1583363614)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_justification_flags ()-> TextServer.JustificationFlag {
        var _result: TextServer.JustificationFlag = TextServer.JustificationFlag ()
        gi.object_method_bind_ptrcall (Label3D.method_get_justification_flags, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_width")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_width (_ width: Double) {
        #if false
        
        var copy_width = width
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_width, UnsafeMutableRawPointer (mutating: handle), nil, &copy_width)
        
        #else
        
        var copy_width = width
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_width, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_width")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_width ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Label3D.method_get_width, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_pixel_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pixel_size")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pixel_size (_ pixelSize: Double) {
        #if false
        
        var copy_pixel_size = pixelSize
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_pixel_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pixel_size)
        
        #else
        
        var copy_pixel_size = pixelSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pixel_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_pixel_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_pixel_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pixel_size")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pixel_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Label3D.method_get_pixel_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_offset")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_offset (_ offset: Vector2) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_offset")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (Label3D.method_get_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_draw_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_draw_flag")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1285833066)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// If `true`, the specified flag will be enabled. See ``Label3D.DrawFlags`` for a list of flags.
    fileprivate final func set_draw_flag (_ flag: Label3D.DrawFlags, _ enabled: Bool) {
        #if false
        
        var copy_flag = Int64 (flag.rawValue)
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_draw_flag, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flag, &copy_enabled)
        
        #else
        
        var copy_flag = Int64 (flag.rawValue)
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flag) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Label3D.method_set_draw_flag, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_draw_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_draw_flag")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 259226453)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the value of the specified flag.
    fileprivate final func get_draw_flag (_ flag: Label3D.DrawFlags)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_flag = Int64 (flag.rawValue)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_get_draw_flag, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_flag)
        return _result
        #else
        
        var copy_flag = Int64 (flag.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_flag) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_get_draw_flag, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_billboard_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_billboard_mode")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4202036497)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_billboard_mode (_ mode: BaseMaterial3D.BillboardMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_billboard_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_billboard_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_billboard_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_billboard_mode")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1283840139)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_billboard_mode ()-> BaseMaterial3D.BillboardMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Label3D.method_get_billboard_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.BillboardMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_alpha_cut_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_cut_mode")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2549142916)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_cut_mode (_ mode: Label3D.AlphaCutMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_alpha_cut_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_alpha_cut_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_cut_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_cut_mode")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 219468601)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_cut_mode ()-> Label3D.AlphaCutMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Label3D.method_get_alpha_cut_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Label3D.AlphaCutMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_alpha_scissor_threshold: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_scissor_threshold")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_scissor_threshold (_ threshold: Double) {
        #if false
        
        var copy_threshold = threshold
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_alpha_scissor_threshold, UnsafeMutableRawPointer (mutating: handle), nil, &copy_threshold)
        
        #else
        
        var copy_threshold = threshold
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_threshold) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_alpha_scissor_threshold, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_scissor_threshold: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_scissor_threshold")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_scissor_threshold ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Label3D.method_get_alpha_scissor_threshold, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_alpha_hash_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_hash_scale")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_hash_scale (_ threshold: Double) {
        #if false
        
        var copy_threshold = threshold
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_alpha_hash_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_threshold)
        
        #else
        
        var copy_threshold = threshold
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_threshold) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_alpha_hash_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_hash_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_hash_scale")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_hash_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Label3D.method_get_alpha_hash_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_alpha_antialiasing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_antialiasing")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3212649852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_antialiasing (_ alphaAa: BaseMaterial3D.AlphaAntiAliasing) {
        #if false
        
        var copy_alpha_aa = Int64 (alphaAa.rawValue)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_alpha_antialiasing, UnsafeMutableRawPointer (mutating: handle), nil, &copy_alpha_aa)
        
        #else
        
        var copy_alpha_aa = Int64 (alphaAa.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_alpha_aa) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_alpha_antialiasing, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_antialiasing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_antialiasing")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2889939400)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_antialiasing ()-> BaseMaterial3D.AlphaAntiAliasing {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Label3D.method_get_alpha_antialiasing, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.AlphaAntiAliasing (rawValue: _result)!
    }
    
    fileprivate static var method_set_alpha_antialiasing_edge: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_antialiasing_edge")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_antialiasing_edge (_ edge: Double) {
        #if false
        
        var copy_edge = edge
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_alpha_antialiasing_edge, UnsafeMutableRawPointer (mutating: handle), nil, &copy_edge)
        
        #else
        
        var copy_edge = edge
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_edge) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_alpha_antialiasing_edge, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_antialiasing_edge: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_antialiasing_edge")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_antialiasing_edge ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Label3D.method_get_alpha_antialiasing_edge, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_texture_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_filter")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 22904437)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_filter (_ mode: BaseMaterial3D.TextureFilter) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Label3D.method_set_texture_filter, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Label3D.method_set_texture_filter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_filter")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3289213076)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_filter ()-> BaseMaterial3D.TextureFilter {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Label3D.method_get_texture_filter, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.TextureFilter (rawValue: _result)!
    }
    
    fileprivate static var method_generate_triangle_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("generate_triangle_mesh")
        return withUnsafePointer (to: &Label3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3476533166)!
            }
            
        }
        
    }()
    
    /// Returns a ``TriangleMesh`` with the label's vertices following its current configuration (such as its ``pixelSize``).
    public final func generateTriangleMesh ()-> TriangleMesh? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Label3D.method_generate_triangle_mesh, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

