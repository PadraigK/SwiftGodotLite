// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A custom effect for a ``RichTextLabel``.
/// 
/// A custom effect for a ``RichTextLabel``.
/// 
/// > Note: For a ``RichTextEffect`` to be usable, a BBCode tag must be defined as a member variable called `bbcode` in the script.
/// 
/// > Note: As soon as a ``RichTextLabel`` contains at least one ``RichTextEffect``, it will continuously process the effect unless the project is paused. This may impact battery life negatively.
/// 
open class RichTextEffect: Resource {
    override open class var godotClassName: StringName { "RichTextEffect" }
    /* Methods */
    /// Override this method to modify properties in `charFx`. The method must return `true` if the character could be transformed successfully. If the method returns `false`, it will skip transformation to avoid displaying broken text.
    @_documentation(visibility: public)
    open func _processCustomFx (charFx: CharFXTransform?)-> Bool {
        return false
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_process_custom_fx":
                return _RichTextEffect_proxy_process_custom_fx
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _RichTextEffect_proxy_process_custom_fx (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<RichTextEffect>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._processCustomFx (charFx: lookupLiveObject (handleAddress: resolved_0) as? CharFXTransform ?? CharFXTransform (nativeHandle: resolved_0))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

