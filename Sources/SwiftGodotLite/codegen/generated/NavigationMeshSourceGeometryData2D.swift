// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Container for parsed source geometry data used in navigation mesh baking.
/// 
/// Container for parsed source geometry data used in navigation mesh baking.
open class NavigationMeshSourceGeometryData2D: Resource {
    override open class var godotClassName: StringName { "NavigationMeshSourceGeometryData2D" }
    
    /* Properties */
    
    final public var traversableOutlines: VariantCollection<PackedVector2Array> {
        get {
            return get_traversable_outlines ()
        }
        
        set {
            set_traversable_outlines (newValue)
        }
        
    }
    
    final public var obstructionOutlines: VariantCollection<PackedVector2Array> {
        get {
            return get_obstruction_outlines ()
        }
        
        set {
            set_obstruction_outlines (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears the internal data.
    public final func clear () {
        gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData2D.method_clear, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_has_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_data")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` when parsed source geometry data exists.
    public final func hasData ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData2D.method_has_data, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_traversable_outlines: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_traversable_outlines")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets all the traversable area outlines arrays.
    fileprivate final func set_traversable_outlines (_ traversableOutlines: VariantCollection<PackedVector2Array>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationMeshSourceGeometryData2D.method_set_traversable_outlines, UnsafeMutableRawPointer (mutating: handle), nil, &traversableOutlines.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &traversableOutlines.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData2D.method_set_traversable_outlines, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_traversable_outlines: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_traversable_outlines")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns all the traversable area outlines arrays.
    fileprivate final func get_traversable_outlines ()-> VariantCollection<PackedVector2Array> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData2D.method_get_traversable_outlines, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<PackedVector2Array>(content: _result)
    }
    
    fileprivate static var method_set_obstruction_outlines: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_obstruction_outlines")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets all the obstructed area outlines arrays.
    fileprivate final func set_obstruction_outlines (_ obstructionOutlines: VariantCollection<PackedVector2Array>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationMeshSourceGeometryData2D.method_set_obstruction_outlines, UnsafeMutableRawPointer (mutating: handle), nil, &obstructionOutlines.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstructionOutlines.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData2D.method_set_obstruction_outlines, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_obstruction_outlines: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_obstruction_outlines")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns all the obstructed area outlines arrays.
    fileprivate final func get_obstruction_outlines ()-> VariantCollection<PackedVector2Array> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData2D.method_get_obstruction_outlines, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<PackedVector2Array>(content: _result)
    }
    
    fileprivate static var method_add_traversable_outline: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_traversable_outline")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1509147220)!
            }
            
        }
        
    }()
    
    /// Adds the outline points of a shape as traversable area.
    public final func addTraversableOutline (shapeOutline: PackedVector2Array) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationMeshSourceGeometryData2D.method_add_traversable_outline, UnsafeMutableRawPointer (mutating: handle), nil, &shapeOutline.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &shapeOutline.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData2D.method_add_traversable_outline, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_obstruction_outline: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_obstruction_outline")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1509147220)!
            }
            
        }
        
    }()
    
    /// Adds the outline points of a shape as obstructed area.
    public final func addObstructionOutline (shapeOutline: PackedVector2Array) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationMeshSourceGeometryData2D.method_add_obstruction_outline, UnsafeMutableRawPointer (mutating: handle), nil, &shapeOutline.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &shapeOutline.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData2D.method_add_obstruction_outline, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

