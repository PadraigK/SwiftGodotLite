// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A physics body used to make bones in a ``Skeleton3D`` react to physics.
/// 
/// The ``PhysicalBone3D`` node is a physics body that can be used to make bones in a ``Skeleton3D`` react to physics.
open class PhysicalBone3D: PhysicsBody3D {
    override open class var godotClassName: StringName { "PhysicalBone3D" }
    public enum DampMode: Int64 {
        /// In this mode, the body's damping value is added to any value set in areas or the default value.
        case combine = 0 // DAMP_MODE_COMBINE
        /// In this mode, the body's damping value replaces any value set in areas or the default value.
        case replace = 1 // DAMP_MODE_REPLACE
    }
    
    public enum JointType: Int64 {
        /// 
        case none = 0 // JOINT_TYPE_NONE
        /// 
        case pin = 1 // JOINT_TYPE_PIN
        /// 
        case cone = 2 // JOINT_TYPE_CONE
        /// 
        case hinge = 3 // JOINT_TYPE_HINGE
        /// 
        case slider = 4 // JOINT_TYPE_SLIDER
        /// 
        case jointType6dof = 5 // JOINT_TYPE_6DOF
    }
    
    
    /* Properties */
    
    /// Sets the joint type. See ``PhysicalBone3D/JointType`` for possible values.
    final public var jointType: PhysicalBone3D.JointType {
        get {
            return get_joint_type ()
        }
        
        set {
            set_joint_type (newValue)
        }
        
    }
    
    /// Sets the joint's transform.
    final public var jointOffset: Transform3D {
        get {
            return get_joint_offset ()
        }
        
        set {
            set_joint_offset (newValue)
        }
        
    }
    
    /// Sets the joint's rotation in radians.
    final public var jointRotation: Vector3 {
        get {
            return get_joint_rotation ()
        }
        
        set {
            set_joint_rotation (newValue)
        }
        
    }
    
    /// Sets the body's transform.
    final public var bodyOffset: Transform3D {
        get {
            return get_body_offset ()
        }
        
        set {
            set_body_offset (newValue)
        }
        
    }
    
    /// The body's mass.
    final public var mass: Double {
        get {
            return get_mass ()
        }
        
        set {
            set_mass (newValue)
        }
        
    }
    
    /// The body's friction, from `0` (frictionless) to `1` (max friction).
    final public var friction: Double {
        get {
            return get_friction ()
        }
        
        set {
            set_friction (newValue)
        }
        
    }
    
    /// The body's bounciness. Values range from `0` (no bounce) to `1` (full bounciness).
    final public var bounce: Double {
        get {
            return get_bounce ()
        }
        
        set {
            set_bounce (newValue)
        }
        
    }
    
    /// This is multiplied by the global 3D gravity setting found in **Project > Project Settings > Physics > 3d** to produce the body's gravity. For example, a value of 1 will be normal gravity, 2 will apply double gravity, and 0.5 will apply half gravity to this object.
    final public var gravityScale: Double {
        get {
            return get_gravity_scale ()
        }
        
        set {
            set_gravity_scale (newValue)
        }
        
    }
    
    /// If `true`, internal force integration will be disabled (like gravity or air friction) for this body. Other than collision response, the body will only move as determined by the ``_integrateForces(state:)`` function, if defined.
    final public var customIntegrator: Bool {
        get {
            return is_using_custom_integrator ()
        }
        
        set {
            set_use_custom_integrator (newValue)
        }
        
    }
    
    /// Defines how ``linearDamp`` is applied. See ``PhysicalBone3D/DampMode`` for possible values.
    final public var linearDampMode: PhysicalBone3D.DampMode {
        get {
            return get_linear_damp_mode ()
        }
        
        set {
            set_linear_damp_mode (newValue)
        }
        
    }
    
    /// Damps the body's movement. By default, the body will use the **Default Linear Damp** in **Project > Project Settings > Physics > 3d** or any value override set by an ``Area3D`` the body is in. Depending on ``linearDampMode``, you can set ``linearDamp`` to be added to or to replace the body's damping value.
    /// 
    /// See ``ProjectSettings/physics/3d/defaultLinearDamp`` for more details about damping.
    /// 
    final public var linearDamp: Double {
        get {
            return get_linear_damp ()
        }
        
        set {
            set_linear_damp (newValue)
        }
        
    }
    
    /// Defines how ``angularDamp`` is applied. See ``PhysicalBone3D/DampMode`` for possible values.
    final public var angularDampMode: PhysicalBone3D.DampMode {
        get {
            return get_angular_damp_mode ()
        }
        
        set {
            set_angular_damp_mode (newValue)
        }
        
    }
    
    /// Damps the body's rotation. By default, the body will use the **Default Angular Damp** in **Project > Project Settings > Physics > 3d** or any value override set by an ``Area3D`` the body is in. Depending on ``angularDampMode``, you can set ``angularDamp`` to be added to or to replace the body's damping value.
    /// 
    /// See ``ProjectSettings/physics/3d/defaultAngularDamp`` for more details about damping.
    /// 
    final public var angularDamp: Double {
        get {
            return get_angular_damp ()
        }
        
        set {
            set_angular_damp (newValue)
        }
        
    }
    
    /// The body's linear velocity in units per second. Can be used sporadically, but **don't set this every frame**, because physics may run in another thread and runs at a different granularity. Use ``_integrateForces(state:)`` as your process loop for precise control of the body state.
    final public var linearVelocity: Vector3 {
        get {
            return get_linear_velocity ()
        }
        
        set {
            set_linear_velocity (newValue)
        }
        
    }
    
    /// The PhysicalBone3D's rotational velocity in _radians_ per second.
    final public var angularVelocity: Vector3 {
        get {
            return get_angular_velocity ()
        }
        
        set {
            set_angular_velocity (newValue)
        }
        
    }
    
    /// If `true`, the body is deactivated when there is no movement, so it will not take part in the simulation until it is awakened by an external force.
    final public var canSleep: Bool {
        get {
            return is_able_to_sleep ()
        }
        
        set {
            set_can_sleep (newValue)
        }
        
    }
    
    /* Methods */
    /// Called during physics processing, allowing you to read and safely modify the simulation state for the object. By default, it works in addition to the usual physics behavior, but the ``customIntegrator`` property allows you to disable the default behavior and do fully custom force integration for a body.
    @_documentation(visibility: public)
    open func _integrateForces (state: PhysicsDirectBodyState3D?) {
    }
    
    fileprivate static var method_apply_central_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_central_impulse")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    /// 
    public final func applyCentralImpulse (_ impulse: Vector3) {
        #if false
        
        var copy_impulse = impulse
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_apply_central_impulse, UnsafeMutableRawPointer (mutating: handle), nil, &copy_impulse)
        
        #else
        
        var copy_impulse = impulse
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_impulse) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_apply_central_impulse, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_apply_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_impulse")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2754756483)!
            }
            
        }
        
    }()
    
    /// 
    public final func applyImpulse (_ impulse: Vector3, position: Vector3 = Vector3 (x: 0, y: 0, z: 0)) {
        #if false
        
        var copy_impulse = impulse
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_apply_impulse, UnsafeMutableRawPointer (mutating: handle), nil, &copy_impulse, &copy_position)
        
        #else
        
        var copy_impulse = impulse
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_impulse) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicalBone3D.method_apply_impulse, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_joint_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_joint_type")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2289552604)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_joint_type (_ jointType: PhysicalBone3D.JointType) {
        #if false
        
        var copy_joint_type = Int64 (jointType.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_joint_type, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_type)
        
        #else
        
        var copy_joint_type = Int64 (jointType.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_type) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_joint_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_joint_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joint_type")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 931347320)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_joint_type ()-> PhysicalBone3D.JointType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_joint_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return PhysicalBone3D.JointType (rawValue: _result)!
    }
    
    fileprivate static var method_set_joint_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_joint_offset")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2952846383)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_joint_offset (_ offset: Transform3D) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_joint_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_joint_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_joint_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joint_offset")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3229777777)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_joint_offset ()-> Transform3D {
        var _result: Transform3D = Transform3D ()
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_joint_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_joint_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_joint_rotation")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_joint_rotation (_ euler: Vector3) {
        #if false
        
        var copy_euler = euler
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_joint_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_euler)
        
        #else
        
        var copy_euler = euler
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_euler) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_joint_rotation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_joint_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joint_rotation")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_joint_rotation ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_joint_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_body_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_body_offset")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2952846383)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_body_offset (_ offset: Transform3D) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_body_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_body_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_body_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_body_offset")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3229777777)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_body_offset ()-> Transform3D {
        var _result: Transform3D = Transform3D ()
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_body_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_simulate_physics: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_simulate_physics")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// 
    public final func getSimulatePhysics ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_simulate_physics, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_simulating_physics: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_simulating_physics")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// 
    public final func isSimulatingPhysics ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_is_simulating_physics, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_bone_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_id")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// 
    public final func getBoneId ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_bone_id, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mass")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mass (_ mass: Double) {
        #if false
        
        var copy_mass = mass
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_mass, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mass)
        
        #else
        
        var copy_mass = mass
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mass) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_mass, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mass")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mass ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_mass, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_friction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_friction")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_friction (_ friction: Double) {
        #if false
        
        var copy_friction = friction
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_friction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_friction)
        
        #else
        
        var copy_friction = friction
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_friction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_friction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_friction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_friction")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_friction ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_friction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bounce: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bounce")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bounce (_ bounce: Double) {
        #if false
        
        var copy_bounce = bounce
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_bounce, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bounce)
        
        #else
        
        var copy_bounce = bounce
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bounce) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_bounce, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bounce: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bounce")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bounce ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_bounce, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity_scale")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_scale (_ gravityScale: Double) {
        #if false
        
        var copy_gravity_scale = gravityScale
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_gravity_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_gravity_scale)
        
        #else
        
        var copy_gravity_scale = gravityScale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_gravity_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_gravity_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gravity_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gravity_scale")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_gravity_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_damp_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_linear_damp_mode")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1244972221)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_damp_mode (_ linearDampMode: PhysicalBone3D.DampMode) {
        #if false
        
        var copy_linear_damp_mode = Int64 (linearDampMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_linear_damp_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_linear_damp_mode)
        
        #else
        
        var copy_linear_damp_mode = Int64 (linearDampMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_linear_damp_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_linear_damp_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_linear_damp_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_linear_damp_mode")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 205884699)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_damp_mode ()-> PhysicalBone3D.DampMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_linear_damp_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return PhysicalBone3D.DampMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_angular_damp_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_damp_mode")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1244972221)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_damp_mode (_ angularDampMode: PhysicalBone3D.DampMode) {
        #if false
        
        var copy_angular_damp_mode = Int64 (angularDampMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_angular_damp_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angular_damp_mode)
        
        #else
        
        var copy_angular_damp_mode = Int64 (angularDampMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angular_damp_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_angular_damp_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_damp_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_damp_mode")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 205884699)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_damp_mode ()-> PhysicalBone3D.DampMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_angular_damp_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return PhysicalBone3D.DampMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_linear_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_linear_damp")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_damp (_ linearDamp: Double) {
        #if false
        
        var copy_linear_damp = linearDamp
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_linear_damp, UnsafeMutableRawPointer (mutating: handle), nil, &copy_linear_damp)
        
        #else
        
        var copy_linear_damp = linearDamp
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_linear_damp) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_linear_damp, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_linear_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_linear_damp")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_damp ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_linear_damp, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_damp")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_damp (_ angularDamp: Double) {
        #if false
        
        var copy_angular_damp = angularDamp
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_angular_damp, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angular_damp)
        
        #else
        
        var copy_angular_damp = angularDamp
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angular_damp) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_angular_damp, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_damp")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_damp ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_angular_damp, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_linear_velocity")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_velocity (_ linearVelocity: Vector3) {
        #if false
        
        var copy_linear_velocity = linearVelocity
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_linear_velocity)
        
        #else
        
        var copy_linear_velocity = linearVelocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_linear_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_linear_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_linear_velocity")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_velocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_velocity")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_velocity (_ angularVelocity: Vector3) {
        #if false
        
        var copy_angular_velocity = angularVelocity
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angular_velocity)
        
        #else
        
        var copy_angular_velocity = angularVelocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angular_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_angular_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_velocity")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_velocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_get_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_use_custom_integrator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_custom_integrator")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_custom_integrator (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_use_custom_integrator, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_use_custom_integrator, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_using_custom_integrator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_using_custom_integrator")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_using_custom_integrator ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_is_using_custom_integrator, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_can_sleep: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_can_sleep")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_can_sleep (_ ableToSleep: Bool) {
        #if false
        
        var copy_able_to_sleep = ableToSleep
        
        gi.object_method_bind_ptrcall_v (PhysicalBone3D.method_set_can_sleep, UnsafeMutableRawPointer (mutating: handle), nil, &copy_able_to_sleep)
        
        #else
        
        var copy_able_to_sleep = ableToSleep
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_able_to_sleep) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone3D.method_set_can_sleep, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_able_to_sleep: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_able_to_sleep")
        return withUnsafePointer (to: &PhysicalBone3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_able_to_sleep ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicalBone3D.method_is_able_to_sleep, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_integrate_forces":
                return _PhysicalBone3D_proxy_integrate_forces
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _PhysicalBone3D_proxy_integrate_forces (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicalBone3D>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._integrateForces (state: lookupLiveObject (handleAddress: resolved_0) as? PhysicsDirectBodyState3D ?? PhysicsDirectBodyState3D (nativeHandle: resolved_0))
}

