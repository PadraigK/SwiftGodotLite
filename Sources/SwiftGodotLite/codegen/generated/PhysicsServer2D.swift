// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A server interface for low-level 2D physics access.
/// 
/// PhysicsServer2D is the server responsible for all 2D physics. It can directly create and manipulate all physics objects:
/// 
/// - A _space_ is a self-contained world for a physics simulation. It contains bodies, areas, and joints. Its state can be queried for collision and intersection information, and several parameters of the simulation can be modified.
/// 
/// - A _shape_ is a geometric shape such as a circle, a rectangle, a capsule, or a polygon. It can be used for collision detection by adding it to a body/area, possibly with an extra transformation relative to the body/area's origin. Bodies/areas can have multiple (transformed) shapes added to them, and a single shape can be added to bodies/areas multiple times with different local transformations.
/// 
/// - A _body_ is a physical object which can be in static, kinematic, or rigid mode. Its state (such as position and velocity) can be queried and updated. A force integration callback can be set to customize the body's physics.
/// 
/// - An _area_ is a region in space which can be used to detect bodies and areas entering and exiting it. A body monitoring callback can be set to report entering/exiting body shapes, and similarly an area monitoring callback can be set. Gravity and damping can be overridden within the area by setting area parameters.
/// 
/// - A _joint_ is a constraint, either between two bodies or on one body relative to a point. Parameters such as the joint bias and the rest length of a spring joint can be adjusted.
/// 
/// Physics objects in ``PhysicsServer2D`` may be created and manipulated independently; they do not have to be tied to nodes in the scene tree.
/// 
/// > Note: All the 2D physics nodes use the physics server internally. Adding a physics node to the scene tree will cause a corresponding physics object to be created in the physics server. A rigid body node registers a callback that updates the node's transform with the transform of the respective body object in the physics server (every physics update). An area node registers a callback to inform the area node about overlaps with the respective area object in the physics server. The raycast node queries the direct state of the relevant space in the physics server.
/// 
open class PhysicsServer2D: Object {
    /// The shared instance of this class
    public static var shared: PhysicsServer2D = {
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { ptr in
            PhysicsServer2D (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "PhysicsServer2D" }
    public enum SpaceParameter: Int64 {
        /// Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated. The default value of this parameter is ``ProjectSettings/physics/2d/solver/contactRecycleRadius``.
        case contactRecycleRadius = 0 // SPACE_PARAM_CONTACT_RECYCLE_RADIUS
        /// Constant to set/get the maximum distance a shape can be from another before they are considered separated and the contact is discarded. The default value of this parameter is ``ProjectSettings/physics/2d/solver/contactMaxSeparation``.
        case contactMaxSeparation = 1 // SPACE_PARAM_CONTACT_MAX_SEPARATION
        /// Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision. The default value of this parameter is ``ProjectSettings/physics/2d/solver/contactMaxAllowedPenetration``.
        case contactMaxAllowedPenetration = 2 // SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION
        /// Constant to set/get the default solver bias for all physics contacts. A solver bias is a factor controlling how much two objects "rebound", after overlapping, to avoid leaving them in that state because of numerical imprecision. The default value of this parameter is ``ProjectSettings/physics/2d/solver/defaultContactBias``.
        case contactDefaultBias = 3 // SPACE_PARAM_CONTACT_DEFAULT_BIAS
        /// Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given. The default value of this parameter is ``ProjectSettings/physics/2d/sleepThresholdLinear``.
        case bodyLinearVelocitySleepThreshold = 4 // SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD
        /// Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given. The default value of this parameter is ``ProjectSettings/physics/2d/sleepThresholdAngular``.
        case bodyAngularVelocitySleepThreshold = 5 // SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD
        /// Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time. The default value of this parameter is ``ProjectSettings/physics/2d/timeBeforeSleep``.
        case bodyTimeToSleep = 6 // SPACE_PARAM_BODY_TIME_TO_SLEEP
        /// Constant to set/get the default solver bias for all physics constraints. A solver bias is a factor controlling how much two objects "rebound", after violating a constraint, to avoid leaving them in that state because of numerical imprecision. The default value of this parameter is ``ProjectSettings/physics/2d/solver/defaultConstraintBias``.
        case constraintDefaultBias = 7 // SPACE_PARAM_CONSTRAINT_DEFAULT_BIAS
        /// Constant to set/get the number of solver iterations for all contacts and constraints. The greater the number of iterations, the more accurate the collisions will be. However, a greater number of iterations requires more CPU power, which can decrease performance. The default value of this parameter is ``ProjectSettings/physics/2d/solver/solverIterations``.
        case solverIterations = 8 // SPACE_PARAM_SOLVER_ITERATIONS
    }
    
    public enum ShapeType: Int64 {
        /// This is the constant for creating world boundary shapes. A world boundary shape is an _infinite_ line with an origin point, and a normal. Thus, it can be used for front/behind checks.
        case worldBoundary = 0 // SHAPE_WORLD_BOUNDARY
        /// This is the constant for creating separation ray shapes. A separation ray is defined by a length and separates itself from what is touching its far endpoint. Useful for character controllers.
        case separationRay = 1 // SHAPE_SEPARATION_RAY
        /// This is the constant for creating segment shapes. A segment shape is a _finite_ line from a point A to a point B. It can be checked for intersections.
        case segment = 2 // SHAPE_SEGMENT
        /// This is the constant for creating circle shapes. A circle shape only has a radius. It can be used for intersections and inside/outside checks.
        case circle = 3 // SHAPE_CIRCLE
        /// This is the constant for creating rectangle shapes. A rectangle shape is defined by a width and a height. It can be used for intersections and inside/outside checks.
        case rectangle = 4 // SHAPE_RECTANGLE
        /// This is the constant for creating capsule shapes. A capsule shape is defined by a radius and a length. It can be used for intersections and inside/outside checks.
        case capsule = 5 // SHAPE_CAPSULE
        /// This is the constant for creating convex polygon shapes. A polygon is defined by a list of points. It can be used for intersections and inside/outside checks.
        case convexPolygon = 6 // SHAPE_CONVEX_POLYGON
        /// This is the constant for creating concave polygon shapes. A polygon is defined by a list of points. It can be used for intersections checks, but not for inside/outside checks.
        case concavePolygon = 7 // SHAPE_CONCAVE_POLYGON
        /// This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.
        case custom = 8 // SHAPE_CUSTOM
    }
    
    public enum AreaParameter: Int64 {
        /// Constant to set/get gravity override mode in an area. See ``PhysicsServer2D/AreaSpaceOverrideMode`` for possible values. The default value of this parameter is .areaSpaceOverrideDisabled.
        case gravityOverrideMode = 0 // AREA_PARAM_GRAVITY_OVERRIDE_MODE
        /// Constant to set/get gravity strength in an area. The default value of this parameter is `9.80665`.
        case gravity = 1 // AREA_PARAM_GRAVITY
        /// Constant to set/get gravity vector/center in an area. The default value of this parameter is `Vector2(0, -1)`.
        case gravityVector = 2 // AREA_PARAM_GRAVITY_VECTOR
        /// Constant to set/get whether the gravity vector of an area is a direction, or a center point. The default value of this parameter is `false`.
        case gravityIsPoint = 3 // AREA_PARAM_GRAVITY_IS_POINT
        /// Constant to set/get the distance at which the gravity strength is equal to the gravity controlled by .areaParamGravity. For example, on a planet 100 pixels in radius with a surface gravity of 4.0 px/s², set the gravity to 4.0 and the unit distance to 100.0. The gravity will have falloff according to the inverse square law, so in the example, at 200 pixels from the center the gravity will be 1.0 px/s² (twice the distance, 1/4th the gravity), at 50 pixels it will be 16.0 px/s² (half the distance, 4x the gravity), and so on.
        /// 
        /// The above is true only when the unit distance is a positive number. When the unit distance is set to 0.0, the gravity will be constant regardless of distance. The default value of this parameter is `0.0`.
        /// 
        case gravityPointUnitDistance = 4 // AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE
        /// Constant to set/get linear damping override mode in an area. See ``PhysicsServer2D/AreaSpaceOverrideMode`` for possible values. The default value of this parameter is .areaSpaceOverrideDisabled.
        case linearDampOverrideMode = 5 // AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE
        /// Constant to set/get the linear damping factor of an area. The default value of this parameter is `0.1`.
        case linearDamp = 6 // AREA_PARAM_LINEAR_DAMP
        /// Constant to set/get angular damping override mode in an area. See ``PhysicsServer2D/AreaSpaceOverrideMode`` for possible values. The default value of this parameter is .areaSpaceOverrideDisabled.
        case angularDampOverrideMode = 7 // AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE
        /// Constant to set/get the angular damping factor of an area. The default value of this parameter is `1.0`.
        case angularDamp = 8 // AREA_PARAM_ANGULAR_DAMP
        /// Constant to set/get the priority (order of processing) of an area. The default value of this parameter is `0`.
        case priority = 9 // AREA_PARAM_PRIORITY
    }
    
    public enum AreaSpaceOverrideMode: Int64 {
        /// This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.
        case disabled = 0 // AREA_SPACE_OVERRIDE_DISABLED
        /// This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.
        case combine = 1 // AREA_SPACE_OVERRIDE_COMBINE
        /// This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.
        case combineReplace = 2 // AREA_SPACE_OVERRIDE_COMBINE_REPLACE
        /// This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.
        case replace = 3 // AREA_SPACE_OVERRIDE_REPLACE
        /// This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.
        case replaceCombine = 4 // AREA_SPACE_OVERRIDE_REPLACE_COMBINE
    }
    
    public enum BodyMode: Int64 {
        /// Constant for static bodies. In this mode, a body can be only moved by user code and doesn't collide with other bodies along its path when moved.
        case `static` = 0 // BODY_MODE_STATIC
        /// Constant for kinematic bodies. In this mode, a body can be only moved by user code and collides with other bodies along its path.
        case kinematic = 1 // BODY_MODE_KINEMATIC
        /// Constant for rigid bodies. In this mode, a body can be pushed by other bodies and has forces applied.
        case rigid = 2 // BODY_MODE_RIGID
        /// Constant for linear rigid bodies. In this mode, a body can not rotate, and only its linear velocity is affected by external forces.
        case rigidLinear = 3 // BODY_MODE_RIGID_LINEAR
    }
    
    public enum BodyParameter: Int64 {
        /// Constant to set/get a body's bounce factor. The default value of this parameter is `0.0`.
        case bounce = 0 // BODY_PARAM_BOUNCE
        /// Constant to set/get a body's friction. The default value of this parameter is `1.0`.
        case friction = 1 // BODY_PARAM_FRICTION
        /// Constant to set/get a body's mass. The default value of this parameter is `1.0`. If the body's mode is set to .rigid, then setting this parameter will have the following additional effects:
        /// 
        /// - If the parameter .bodyParamCenterOfMass has never been set explicitly, then the value of that parameter will be recalculated based on the body's shapes.
        /// 
        /// - If the parameter .bodyParamInertia is set to a value `<= 0.0`, then the value of that parameter will be recalculated based on the body's shapes, mass, and center of mass.
        /// 
        case mass = 2 // BODY_PARAM_MASS
        /// Constant to set/get a body's inertia. The default value of this parameter is `0.0`. If the body's inertia is set to a value `<= 0.0`, then the inertia will be recalculated based on the body's shapes, mass, and center of mass.
        case inertia = 3 // BODY_PARAM_INERTIA
        /// Constant to set/get a body's center of mass position in the body's local coordinate system. The default value of this parameter is `Vector2(0,0)`. If this parameter is never set explicitly, then it is recalculated based on the body's shapes when setting the parameter .bodyParamMass or when calling ``bodySetSpace(body:space:)``.
        case centerOfMass = 4 // BODY_PARAM_CENTER_OF_MASS
        /// Constant to set/get a body's gravity multiplier. The default value of this parameter is `1.0`.
        case gravityScale = 5 // BODY_PARAM_GRAVITY_SCALE
        /// Constant to set/get a body's linear damping mode. See ``PhysicsServer2D/BodyDampMode`` for possible values. The default value of this parameter is .combine.
        case linearDampMode = 6 // BODY_PARAM_LINEAR_DAMP_MODE
        /// Constant to set/get a body's angular damping mode. See ``PhysicsServer2D/BodyDampMode`` for possible values. The default value of this parameter is .combine.
        case angularDampMode = 7 // BODY_PARAM_ANGULAR_DAMP_MODE
        /// Constant to set/get a body's linear damping factor. The default value of this parameter is `0.0`.
        case linearDamp = 8 // BODY_PARAM_LINEAR_DAMP
        /// Constant to set/get a body's angular damping factor. The default value of this parameter is `0.0`.
        case angularDamp = 9 // BODY_PARAM_ANGULAR_DAMP
        /// Represents the size of the ``PhysicsServer2D/BodyParameter`` enum.
        case max = 10 // BODY_PARAM_MAX
    }
    
    public enum BodyDampMode: Int64 {
        /// The body's damping value is added to any value set in areas or the default value.
        case combine = 0 // BODY_DAMP_MODE_COMBINE
        /// The body's damping value replaces any value set in areas or the default value.
        case replace = 1 // BODY_DAMP_MODE_REPLACE
    }
    
    public enum BodyState: Int64 {
        /// Constant to set/get the current transform matrix of the body.
        case transform = 0 // BODY_STATE_TRANSFORM
        /// Constant to set/get the current linear velocity of the body.
        case linearVelocity = 1 // BODY_STATE_LINEAR_VELOCITY
        /// Constant to set/get the current angular velocity of the body.
        case angularVelocity = 2 // BODY_STATE_ANGULAR_VELOCITY
        /// Constant to sleep/wake up a body, or to get whether it is sleeping.
        case sleeping = 3 // BODY_STATE_SLEEPING
        /// Constant to set/get whether the body can sleep.
        case canSleep = 4 // BODY_STATE_CAN_SLEEP
    }
    
    public enum JointType: Int64 {
        /// Constant to create pin joints.
        case pin = 0 // JOINT_TYPE_PIN
        /// Constant to create groove joints.
        case groove = 1 // JOINT_TYPE_GROOVE
        /// Constant to create damped spring joints.
        case dampedSpring = 2 // JOINT_TYPE_DAMPED_SPRING
        /// Represents the size of the ``PhysicsServer2D/JointType`` enum.
        case max = 3 // JOINT_TYPE_MAX
    }
    
    public enum JointParam: Int64 {
        /// Constant to set/get how fast the joint pulls the bodies back to satisfy the joint constraint. The lower the value, the more the two bodies can pull on the joint. The default value of this parameter is `0.0`.
        /// 
        /// > Note: In Godot Physics, this parameter is only used for pin joints and groove joints.
        /// 
        case bias = 0 // JOINT_PARAM_BIAS
        /// Constant to set/get the maximum speed with which the joint can apply corrections. The default value of this parameter is `3.40282e+38`.
        /// 
        /// > Note: In Godot Physics, this parameter is only used for groove joints.
        /// 
        case maxBias = 1 // JOINT_PARAM_MAX_BIAS
        /// Constant to set/get the maximum force that the joint can use to act on the two bodies. The default value of this parameter is `3.40282e+38`.
        /// 
        /// > Note: In Godot Physics, this parameter is only used for groove joints.
        /// 
        case maxForce = 2 // JOINT_PARAM_MAX_FORCE
    }
    
    public enum PinJointParam: Int64 {
        /// Constant to set/get a how much the bond of the pin joint can flex. The default value of this parameter is `0.0`.
        case softness = 0 // PIN_JOINT_SOFTNESS
        /// The maximum rotation around the pin.
        case limitUpper = 1 // PIN_JOINT_LIMIT_UPPER
        /// The minimum rotation around the pin.
        case limitLower = 2 // PIN_JOINT_LIMIT_LOWER
        /// Target speed for the motor. In radians per second.
        case motorTargetVelocity = 3 // PIN_JOINT_MOTOR_TARGET_VELOCITY
    }
    
    public enum PinJointFlag: Int64 {
        /// If `true`, the pin has a maximum and a minimum rotation.
        case angularLimitEnabled = 0 // PIN_JOINT_FLAG_ANGULAR_LIMIT_ENABLED
        /// If `true`, a motor turns the pin.
        case motorEnabled = 1 // PIN_JOINT_FLAG_MOTOR_ENABLED
    }
    
    public enum DampedSpringParam: Int64 {
        /// Sets the resting length of the spring joint. The joint will always try to go to back this length when pulled apart. The default value of this parameter is the distance between the joint's anchor points.
        case restLength = 0 // DAMPED_SPRING_REST_LENGTH
        /// Sets the stiffness of the spring joint. The joint applies a force equal to the stiffness times the distance from its resting length. The default value of this parameter is `20.0`.
        case stiffness = 1 // DAMPED_SPRING_STIFFNESS
        /// Sets the damping ratio of the spring joint. A value of 0 indicates an undamped spring, while 1 causes the system to reach equilibrium as fast as possible (critical damping). The default value of this parameter is `1.5`.
        case damping = 2 // DAMPED_SPRING_DAMPING
    }
    
    public enum CCDMode: Int64 {
        /// Disables continuous collision detection. This is the fastest way to detect body collisions, but it can miss small and/or fast-moving objects.
        case disabled = 0 // CCD_MODE_DISABLED
        /// Enables continuous collision detection by raycasting. It is faster than shapecasting, but less precise.
        case castRay = 1 // CCD_MODE_CAST_RAY
        /// Enables continuous collision detection by shapecasting. It is the slowest CCD method, and the most precise.
        case castShape = 2 // CCD_MODE_CAST_SHAPE
    }
    
    public enum AreaBodyStatus: Int64 {
        /// The value of the first parameter and area callback function receives, when an object enters one of its shapes.
        case added = 0 // AREA_BODY_ADDED
        /// The value of the first parameter and area callback function receives, when an object exits one of its shapes.
        case removed = 1 // AREA_BODY_REMOVED
    }
    
    public enum ProcessInfo: Int64 {
        /// Constant to get the number of objects that are not sleeping.
        case activeObjects = 0 // INFO_ACTIVE_OBJECTS
        /// Constant to get the number of possible collisions.
        case collisionPairs = 1 // INFO_COLLISION_PAIRS
        /// Constant to get the number of space regions where a collision could occur.
        case islandCount = 2 // INFO_ISLAND_COUNT
    }
    
    /* Methods */
    fileprivate static var method_world_boundary_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("world_boundary_shape_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D world boundary shape in the physics server, and returns the ``RID`` that identifies it. Use ``shapeSetData(shape:data:)`` to set the shape's normal direction and distance properties.
    public static func worldBoundaryShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_world_boundary_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_separation_ray_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("separation_ray_shape_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D separation ray shape in the physics server, and returns the ``RID`` that identifies it. Use ``shapeSetData(shape:data:)`` to set the shape's `length` and `slide_on_slope` properties.
    public static func separationRayShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_separation_ray_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_segment_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("segment_shape_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D segment shape in the physics server, and returns the ``RID`` that identifies it. Use ``shapeSetData(shape:data:)`` to set the segment's start and end points.
    public static func segmentShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_segment_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_circle_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("circle_shape_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D circle shape in the physics server, and returns the ``RID`` that identifies it. Use ``shapeSetData(shape:data:)`` to set the circle's radius.
    public static func circleShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_circle_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_rectangle_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("rectangle_shape_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D rectangle shape in the physics server, and returns the ``RID`` that identifies it. Use ``shapeSetData(shape:data:)`` to set the rectangle's half-extents.
    public static func rectangleShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_rectangle_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_capsule_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("capsule_shape_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D capsule shape in the physics server, and returns the ``RID`` that identifies it. Use ``shapeSetData(shape:data:)`` to set the capsule's height and radius.
    public static func capsuleShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_capsule_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_convex_polygon_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("convex_polygon_shape_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D convex polygon shape in the physics server, and returns the ``RID`` that identifies it. Use ``shapeSetData(shape:data:)`` to set the convex polygon's points.
    public static func convexPolygonShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_convex_polygon_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_concave_polygon_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("concave_polygon_shape_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D concave polygon shape in the physics server, and returns the ``RID`` that identifies it. Use ``shapeSetData(shape:data:)`` to set the concave polygon's segments.
    public static func concavePolygonShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_concave_polygon_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_shape_set_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("shape_set_data")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3175752987)!
            }
            
        }
        
    }()
    
    /// Sets the shape data that defines the configuration of the shape. The `data` to be passed depends on the shape's type (see ``shapeGetType(shape:)``):
    /// 
    /// - .shapeWorldBoundary: an array of length two containing a ``Vector2`` `normal` direction and a float distance `d`,
    /// 
    /// - .shapeSeparationRay: a dictionary containing the key `length` with a float value and the key `slide_on_slope` with a [bool] value,
    /// 
    /// - .shapeSegment: a ``Rect2`` `rect` containing the first point of the segment in `rect.position` and the second point of the segment in `rect.size`,
    /// 
    /// - .shapeCircle: a float `radius`,
    /// 
    /// - .shapeRectangle: a ``Vector2`` `half_extents`,
    /// 
    /// - .shapeCapsule: an array of length two (or a ``Vector2``) containing a float `height` and a float `radius`,
    /// 
    /// - .shapeConvexPolygon: either a ``PackedVector2Array`` of points defining a convex polygon in counterclockwise order (the clockwise outward normal of each segment formed by consecutive points is calculated internally), or a ``PackedFloat32Array`` of length divisible by four so that every 4-tuple of floats contains the coordinates of a point followed by the coordinates of the clockwise outward normal vector to the segment between the current point and the next point,
    /// 
    /// - .shapeConcavePolygon: a ``PackedVector2Array`` of length divisible by two (each pair of points forms one segment).
    /// 
    /// > Warning: In the case of .shapeConvexPolygon, this method does not check if the points supplied actually form a convex polygon (unlike the ``CollisionPolygon2D/polygon`` property).
    /// 
    public static func shapeSetData (shape: RID, data: Variant) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_shape_set_data, UnsafeMutableRawPointer (mutating: shared.handle), nil, &shape.content, &data.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &shape.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &data.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_shape_set_data, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_shape_get_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("shape_get_type")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1240598777)!
            }
            
        }
        
    }()
    
    /// Returns the shape's type (see ``PhysicsServer2D/ShapeType``).
    public static func shapeGetType (shape: RID)-> PhysicsServer2D.ShapeType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_shape_get_type, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &shape.content)
        return PhysicsServer2D.ShapeType (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &shape.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_shape_get_type, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return PhysicsServer2D.ShapeType (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_shape_get_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("shape_get_data")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4171304767)!
            }
            
        }
        
    }()
    
    /// Returns the shape data that defines the configuration of the shape, such as the half-extents of a rectangle or the segments of a concave shape. See ``shapeSetData(shape:data:)`` for the precise format of this data in each case.
    public static func shapeGetData (shape: RID)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_shape_get_data, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &shape.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &shape.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_shape_get_data, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_space_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D space in the physics server, and returns the ``RID`` that identifies it. A space contains bodies and areas, and controls the stepping of the physics simulation of the objects in it.
    public static func spaceCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_space_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_space_set_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_set_active")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Activates or deactivates the space. If `active` is `false`, then the physics server will not do anything with this space in its physics step.
    public static func spaceSetActive (space: RID, active: Bool) {
        #if false
        
        var copy_active = active
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_space_set_active, UnsafeMutableRawPointer (mutating: shared.handle), nil, &space.content, &copy_active)
        
        #else
        
        var copy_active = active
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &space.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_active) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_space_set_active, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_space_is_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_is_active")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the space is active.
    public static func spaceIsActive (space: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_space_is_active, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &space.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &space.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_space_is_active, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_space_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_set_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 949194586)!
            }
            
        }
        
    }()
    
    /// Sets the value of the given space parameter. See ``PhysicsServer2D/SpaceParameter`` for the list of available parameters.
    public static func spaceSetParam (space: RID, param: PhysicsServer2D.SpaceParameter, value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_space_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &space.content, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &space.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_space_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_space_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_get_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 874111783)!
            }
            
        }
        
    }()
    
    /// Returns the value of the given space parameter. See ``PhysicsServer2D/SpaceParameter`` for the list of available parameters.
    public static func spaceGetParam (space: RID, param: PhysicsServer2D.SpaceParameter)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_space_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &space.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &space.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_space_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_space_get_direct_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_get_direct_state")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3160173886)!
            }
            
        }
        
    }()
    
    /// Returns the state of a space, a ``PhysicsDirectSpaceState2D``. This object can be used for collision/intersection queries.
    public static func spaceGetDirectState (space: RID)-> PhysicsDirectSpaceState2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_space_get_direct_state, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &space.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &space.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_space_get_direct_state, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_area_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D area object in the physics server, and returns the ``RID`` that identifies it. Use ``areaAddShape(area:shape:transform:disabled:)`` to add shapes to it, use ``areaSetTransform(area:transform:)`` to set its transform, and use ``areaSetSpace(area:space:)`` to add the area to a space.
    public static func areaCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_area_set_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_space")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Adds the area to the given space, after removing the area from the previously assigned space (if any).
    /// 
    /// > Note: To remove an area from a space without immediately adding it back elsewhere, use `PhysicsServer2D.area_set_space(area, RID())`.
    /// 
    public static func areaSetSpace (area: RID, space: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_space, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &space.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &space.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_space, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_space")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the space assigned to the area. Returns an empty ``RID`` if no space is assigned.
    public static func areaGetSpace (area: RID)-> RID {
        let _result: RID = RID ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_get_space, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_get_space, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_add_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_add_shape")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 339056240)!
            }
            
        }
        
    }()
    
    /// Adds a shape to the area, with the given local transform. The shape (together with its `transform` and `disabled` properties) is added to an array of shapes, and the shapes of an area are usually referenced by their index in this array.
    public static func areaAddShape (area: RID, shape: RID, transform: Transform2D = Transform2D (xAxis: Vector2 (x: 1, y: 0), yAxis: Vector2 (x: 0, y: 1), origin: Vector2 (x: 0, y: 0)), disabled: Bool = false) {
        #if false
        
        var copy_transform = transform
        var copy_disabled = disabled
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_add_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &shape.content, &copy_transform, &copy_disabled)
        
        #else
        
        var copy_transform = transform
        var copy_disabled = disabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &shape.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_transform) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_disabled) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_add_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_shape")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2310537182)!
            }
            
        }
        
    }()
    
    /// Replaces the area's shape at the given index by another shape, while not affecting the `transform` and `disabled` properties at the same index.
    public static func areaSetShape (area: RID, shapeIdx: Int32, shape: RID) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_shape_idx, &shape.content)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &shape.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_shape_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_shape_transform")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 736082694)!
            }
            
        }
        
    }()
    
    /// Sets the local transform matrix of the area's shape with the given index.
    public static func areaSetShapeTransform (area: RID, shapeIdx: Int32, transform: Transform2D) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_transform = transform
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_shape_idx, &copy_transform)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_transform) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_shape_disabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_shape_disabled")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2658558584)!
            }
            
        }
        
    }()
    
    /// Sets the disabled property of the area's shape with the given index. If `disabled` is `true`, then the shape will not detect any other shapes entering or exiting it.
    public static func areaSetShapeDisabled (area: RID, shapeIdx: Int32, disabled: Bool) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_disabled = disabled
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_shape_disabled, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_shape_idx, &copy_disabled)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_disabled = disabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_disabled) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_shape_disabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_shape_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_shape_count")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the number of shapes added to the area.
    public static func areaGetShapeCount (area: RID)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_get_shape_count, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_get_shape_count, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_shape")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1066463050)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the shape with the given index in the area's array of shapes.
    public static func areaGetShape (area: RID, shapeIdx: Int32)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_get_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &area.content, &copy_shape_idx)
        return _result
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_get_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_shape_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_shape_transform")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1324854622)!
            }
            
        }
        
    }()
    
    /// Returns the local transform matrix of the shape with the given index in the area's array of shapes.
    public static func areaGetShapeTransform (area: RID, shapeIdx: Int32)-> Transform2D {
        var _result: Transform2D = Transform2D ()
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_get_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content, &copy_shape_idx)
        return _result
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_get_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_remove_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_remove_shape")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Removes the shape with the given index from the area's array of shapes. The shape itself is not deleted, so it can continue to be used elsewhere or added back later. As a result of this operation, the area's shapes which used to have indices higher than `shapeIdx` will have their index decreased by one.
    public static func areaRemoveShape (area: RID, shapeIdx: Int32) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_remove_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_shape_idx)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_remove_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_clear_shapes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_clear_shapes")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Removes all shapes from the area. This does not delete the shapes themselves, so they can continue to be used elsewhere or added back later.
    public static func areaClearShapes (area: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_clear_shapes, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_clear_shapes, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_collision_layer")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Assigns the area to one or many physics layers, via a bitmask.
    public static func areaSetCollisionLayer (area: RID, layer: UInt32) {
        #if false
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_layer)
        
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_layer) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_collision_layer")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the physics layer or layers the area belongs to, as a bitmask.
    public static func areaGetCollisionLayer (area: RID)-> UInt32 {
        var _result: UInt32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_get_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_get_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_collision_mask")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets which physics layers the area will monitor, via a bitmask.
    public static func areaSetCollisionMask (area: RID, mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mask) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_collision_mask")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the physics layer or layers the area can contact with, as a bitmask.
    public static func areaGetCollisionMask (area: RID)-> UInt32 {
        var _result: UInt32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_get_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_get_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1257146028)!
            }
            
        }
        
    }()
    
    /// Sets the value of the given area parameter. See ``PhysicsServer2D/AreaParameter`` for the list of available parameters.
    public static func areaSetParam (area: RID, param: PhysicsServer2D.AreaParameter, value: Variant) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_param, &value.content)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &value.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_transform")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1246044741)!
            }
            
        }
        
    }()
    
    /// Sets the transform matrix of the area.
    public static func areaSetTransform (area: RID, transform: Transform2D) {
        #if false
        
        var copy_transform = transform
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_transform, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_transform)
        
        #else
        
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_transform) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3047435120)!
            }
            
        }
        
    }()
    
    /// Returns the value of the given area parameter. See ``PhysicsServer2D/AreaParameter`` for the list of available parameters.
    public static func areaGetParam (area: RID, param: PhysicsServer2D.AreaParameter)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &area.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_transform")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 213527486)!
            }
            
        }
        
    }()
    
    /// Returns the transform matrix of the area.
    public static func areaGetTransform (area: RID)-> Transform2D {
        var _result: Transform2D = Transform2D ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_get_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_get_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_attach_object_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_attach_object_instance_id")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Attaches the `ObjectID` of an ``Object`` to the area. Use ``Object/getInstanceId()`` to get the `ObjectID` of a ``CollisionObject2D``.
    public static func areaAttachObjectInstanceId (area: RID, id: UInt) {
        #if false
        
        var copy_id = id
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_attach_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_id)
        
        #else
        
        var copy_id = id
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_attach_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_object_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_object_instance_id")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `ObjectID` attached to the area. Use ``@GlobalScope.instance_from_id`` to retrieve an ``Object`` from a nonzero `ObjectID`.
    public static func areaGetObjectInstanceId (area: RID)-> UInt {
        var _result: UInt = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_get_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_get_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_attach_canvas_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_attach_canvas_instance_id")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Attaches the `ObjectID` of a canvas to the area. Use ``Object/getInstanceId()`` to get the `ObjectID` of a ``CanvasLayer``.
    public static func areaAttachCanvasInstanceId (area: RID, id: UInt) {
        #if false
        
        var copy_id = id
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_attach_canvas_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_id)
        
        #else
        
        var copy_id = id
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_attach_canvas_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_canvas_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_canvas_instance_id")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `ObjectID` of the canvas attached to the area. Use ``@GlobalScope.instance_from_id`` to retrieve a ``CanvasLayer`` from a nonzero `ObjectID`.
    public static func areaGetCanvasInstanceId (area: RID)-> UInt {
        var _result: UInt = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_get_canvas_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_get_canvas_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_monitor_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_monitor_callback")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3379118538)!
            }
            
        }
        
    }()
    
    /// Sets the area's body monitor callback. This callback will be called when any other (shape of a) body enters or exits (a shape of) the given area, and must take the following five parameters:
    /// 
    /// 1. an integer `status`: either .areaBodyAdded or .areaBodyRemoved depending on whether the other body shape entered or exited the area,
    /// 
    /// 2. an ``RID`` `body_rid`: the ``RID`` of the body that entered or exited the area,
    /// 
    /// 3. an integer `instance_id`: the `ObjectID` attached to the body,
    /// 
    /// 4. an integer `body_shape_idx`: the index of the shape of the body that entered or exited the area,
    /// 
    /// 5. an integer `self_shape_idx`: the index of the shape of the area where the body entered or exited.
    /// 
    /// By counting (or keeping track of) the shapes that enter and exit, it can be determined if a body (with all its shapes) is entering for the first time or exiting for the last time.
    /// 
    public static func areaSetMonitorCallback (area: RID, callback: Callable) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_monitor_callback, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &callback.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &callback.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_monitor_callback, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_area_monitor_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_area_monitor_callback")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3379118538)!
            }
            
        }
        
    }()
    
    /// Sets the area's area monitor callback. This callback will be called when any other (shape of an) area enters or exits (a shape of) the given area, and must take the following five parameters:
    /// 
    /// 1. an integer `status`: either .areaBodyAdded or .areaBodyRemoved depending on whether the other area's shape entered or exited the area,
    /// 
    /// 2. an ``RID`` `area_rid`: the ``RID`` of the other area that entered or exited the area,
    /// 
    /// 3. an integer `instance_id`: the `ObjectID` attached to the other area,
    /// 
    /// 4. an integer `area_shape_idx`: the index of the shape of the other area that entered or exited the area,
    /// 
    /// 5. an integer `self_shape_idx`: the index of the shape of the area where the other area entered or exited.
    /// 
    /// By counting (or keeping track of) the shapes that enter and exit, it can be determined if an area (with all its shapes) is entering for the first time or exiting for the last time.
    /// 
    public static func areaSetAreaMonitorCallback (area: RID, callback: Callable) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_area_monitor_callback, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &callback.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &callback.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_area_monitor_callback, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_monitorable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_monitorable")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets whether the area is monitorable or not. If `monitorable` is `true`, the area monitoring callback of other areas will be called when this area enters or exits them.
    public static func areaSetMonitorable (area: RID, monitorable: Bool) {
        #if false
        
        var copy_monitorable = monitorable
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_area_set_monitorable, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_monitorable)
        
        #else
        
        var copy_monitorable = monitorable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_monitorable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_area_set_monitorable, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D body object in the physics server, and returns the ``RID`` that identifies it. Use ``bodyAddShape(body:shape:transform:disabled:)`` to add shapes to it, use ``bodySetState(body:state:value:)`` to set its transform, and use ``bodySetSpace(body:space:)`` to add the body to a space.
    public static func bodyCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_body_set_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_space")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Adds the body to the given space, after removing the body from the previously assigned space (if any). If the body's mode is set to .rigid, then adding the body to a space will have the following additional effects:
    /// 
    /// - If the parameter .bodyParamCenterOfMass has never been set explicitly, then the value of that parameter will be recalculated based on the body's shapes.
    /// 
    /// - If the parameter .bodyParamInertia is set to a value `<= 0.0`, then the value of that parameter will be recalculated based on the body's shapes, mass, and center of mass.
    /// 
    /// > Note: To remove a body from a space without immediately adding it back elsewhere, use `PhysicsServer2D.body_set_space(body, RID())`.
    /// 
    public static func bodySetSpace (body: RID, space: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_space, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &space.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &space.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_space, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_space")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the space assigned to the body. Returns an empty ``RID`` if no space is assigned.
    public static func bodyGetSpace (body: RID)-> RID {
        let _result: RID = RID ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_space, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_space, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_mode")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1658067650)!
            }
            
        }
        
    }()
    
    /// Sets the body's mode. See ``PhysicsServer2D/BodyMode`` for the list of available modes.
    public static func bodySetMode (body: RID, mode: PhysicsServer2D.BodyMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_mode, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mode) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_mode, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_mode")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3261702585)!
            }
            
        }
        
    }()
    
    /// Returns the body's mode (see ``PhysicsServer2D/BodyMode``).
    public static func bodyGetMode (body: RID)-> PhysicsServer2D.BodyMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_mode, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return PhysicsServer2D.BodyMode (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_mode, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return PhysicsServer2D.BodyMode (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_body_add_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_add_shape")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 339056240)!
            }
            
        }
        
    }()
    
    /// Adds a shape to the area, with the given local transform. The shape (together with its `transform` and `disabled` properties) is added to an array of shapes, and the shapes of a body are usually referenced by their index in this array.
    public static func bodyAddShape (body: RID, shape: RID, transform: Transform2D = Transform2D (xAxis: Vector2 (x: 1, y: 0), yAxis: Vector2 (x: 0, y: 1), origin: Vector2 (x: 0, y: 0)), disabled: Bool = false) {
        #if false
        
        var copy_transform = transform
        var copy_disabled = disabled
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_add_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &shape.content, &copy_transform, &copy_disabled)
        
        #else
        
        var copy_transform = transform
        var copy_disabled = disabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &shape.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_transform) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_disabled) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_add_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_shape")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2310537182)!
            }
            
        }
        
    }()
    
    /// Replaces the body's shape at the given index by another shape, while not affecting the `transform`, `disabled`, and one-way collision properties at the same index.
    public static func bodySetShape (body: RID, shapeIdx: Int32, shape: RID) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_shape_idx, &shape.content)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &shape.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_shape_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_shape_transform")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 736082694)!
            }
            
        }
        
    }()
    
    /// Sets the local transform matrix of the body's shape with the given index.
    public static func bodySetShapeTransform (body: RID, shapeIdx: Int32, transform: Transform2D) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_transform = transform
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_shape_idx, &copy_transform)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_transform) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_shape_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_shape_count")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the number of shapes added to the body.
    public static func bodyGetShapeCount (body: RID)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_shape_count, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_shape_count, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_shape")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1066463050)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the shape with the given index in the body's array of shapes.
    public static func bodyGetShape (body: RID, shapeIdx: Int32)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &body.content, &copy_shape_idx)
        return _result
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_shape_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_shape_transform")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1324854622)!
            }
            
        }
        
    }()
    
    /// Returns the local transform matrix of the shape with the given index in the area's array of shapes.
    public static func bodyGetShapeTransform (body: RID, shapeIdx: Int32)-> Transform2D {
        var _result: Transform2D = Transform2D ()
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content, &copy_shape_idx)
        return _result
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_remove_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_remove_shape")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Removes the shape with the given index from the body's array of shapes. The shape itself is not deleted, so it can continue to be used elsewhere or added back later. As a result of this operation, the body's shapes which used to have indices higher than `shapeIdx` will have their index decreased by one.
    public static func bodyRemoveShape (body: RID, shapeIdx: Int32) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_remove_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_shape_idx)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_remove_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_clear_shapes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_clear_shapes")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Removes all shapes from the body. This does not delete the shapes themselves, so they can continue to be used elsewhere or added back later.
    public static func bodyClearShapes (body: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_clear_shapes, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_clear_shapes, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_shape_disabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_shape_disabled")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2658558584)!
            }
            
        }
        
    }()
    
    /// Sets the disabled property of the body's shape with the given index. If `disabled` is `true`, then the shape will be ignored in all collision detection.
    public static func bodySetShapeDisabled (body: RID, shapeIdx: Int32, disabled: Bool) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_disabled = disabled
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_shape_disabled, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_shape_idx, &copy_disabled)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_disabled = disabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_disabled) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_shape_disabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_shape_as_one_way_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_shape_as_one_way_collision")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2556489974)!
            }
            
        }
        
    }()
    
    /// Sets the one-way collision properties of the body's shape with the given index. If `enable` is `true`, the one-way collision direction given by the shape's local upward axis `body_get_shape_transform(body, shape_idx).y` will be used to ignore collisions with the shape in the opposite direction, and to ensure depenetration of kinematic bodies happens in this direction.
    public static func bodySetShapeAsOneWayCollision (body: RID, shapeIdx: Int32, enable: Bool, margin: Double) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_enable = enable
        var copy_margin = margin
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_shape_as_one_way_collision, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_shape_idx, &copy_enable, &copy_margin)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_enable = enable
        var copy_margin = margin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_enable) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_margin) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_shape_as_one_way_collision, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_attach_object_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_attach_object_instance_id")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Attaches the `ObjectID` of an ``Object`` to the body. Use ``Object/getInstanceId()`` to get the `ObjectID` of a ``CollisionObject2D``.
    public static func bodyAttachObjectInstanceId (body: RID, id: UInt) {
        #if false
        
        var copy_id = id
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_attach_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_id)
        
        #else
        
        var copy_id = id
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_attach_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_object_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_object_instance_id")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `ObjectID` attached to the body. Use ``@GlobalScope.instance_from_id`` to retrieve an ``Object`` from a nonzero `ObjectID`.
    public static func bodyGetObjectInstanceId (body: RID)-> UInt {
        var _result: UInt = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_attach_canvas_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_attach_canvas_instance_id")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Attaches the `ObjectID` of a canvas to the body. Use ``Object/getInstanceId()`` to get the `ObjectID` of a ``CanvasLayer``.
    public static func bodyAttachCanvasInstanceId (body: RID, id: UInt) {
        #if false
        
        var copy_id = id
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_attach_canvas_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_id)
        
        #else
        
        var copy_id = id
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_attach_canvas_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_canvas_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_canvas_instance_id")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `ObjectID` of the canvas attached to the body. Use ``@GlobalScope.instance_from_id`` to retrieve a ``CanvasLayer`` from a nonzero `ObjectID`.
    public static func bodyGetCanvasInstanceId (body: RID)-> UInt {
        var _result: UInt = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_canvas_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_canvas_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_continuous_collision_detection_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_continuous_collision_detection_mode")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1882257015)!
            }
            
        }
        
    }()
    
    /// Sets the continuous collision detection mode using one of the ``PhysicsServer2D/CCDMode`` constants.
    /// 
    /// Continuous collision detection tries to predict where a moving body would collide in between physics updates, instead of moving it and correcting its movement if it collided.
    /// 
    public static func bodySetContinuousCollisionDetectionMode (body: RID, mode: PhysicsServer2D.CCDMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_continuous_collision_detection_mode, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mode) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_continuous_collision_detection_mode, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_continuous_collision_detection_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_continuous_collision_detection_mode")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2661282217)!
            }
            
        }
        
    }()
    
    /// Returns the body's continuous collision detection mode (see ``PhysicsServer2D/CCDMode``).
    public static func bodyGetContinuousCollisionDetectionMode (body: RID)-> PhysicsServer2D.CCDMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_continuous_collision_detection_mode, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return PhysicsServer2D.CCDMode (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_continuous_collision_detection_mode, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return PhysicsServer2D.CCDMode (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_collision_layer")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets the physics layer or layers the body belongs to, via a bitmask.
    public static func bodySetCollisionLayer (body: RID, layer: UInt32) {
        #if false
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_layer)
        
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_layer) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_collision_layer")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the physics layer or layers the body belongs to, as a bitmask.
    public static func bodyGetCollisionLayer (body: RID)-> UInt32 {
        var _result: UInt32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_collision_mask")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets the physics layer or layers the body can collide with, via a bitmask.
    public static func bodySetCollisionMask (body: RID, mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mask) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_collision_mask")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the physics layer or layers the body can collide with, as a bitmask.
    public static func bodyGetCollisionMask (body: RID)-> UInt32 {
        var _result: UInt32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_collision_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_collision_priority")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the body's collision priority. This is used in the depenetration phase of ``bodyTestMotion(body:parameters:result:)``. The higher the priority is, the lower the penetration into the body will be.
    public static func bodySetCollisionPriority (body: RID, priority: Double) {
        #if false
        
        var copy_priority = priority
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_collision_priority, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_priority)
        
        #else
        
        var copy_priority = priority
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_priority) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_collision_priority, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_collision_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_collision_priority")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the body's collision priority. This is used in the depenetration phase of ``bodyTestMotion(body:parameters:result:)``. The higher the priority is, the lower the penetration into the body will be.
    public static func bodyGetCollisionPriority (body: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_collision_priority, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_collision_priority, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2715630609)!
            }
            
        }
        
    }()
    
    /// Sets the value of the given body parameter. See ``PhysicsServer2D/BodyParameter`` for the list of available parameters.
    public static func bodySetParam (body: RID, param: PhysicsServer2D.BodyParameter, value: Variant) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_param, &value.content)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &value.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3208033526)!
            }
            
        }
        
    }()
    
    /// Returns the value of the given body parameter. See ``PhysicsServer2D/BodyParameter`` for the list of available parameters.
    public static func bodyGetParam (body: RID, param: PhysicsServer2D.BodyParameter)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &body.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_reset_mass_properties: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_reset_mass_properties")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Restores the default inertia and center of mass of the body based on its shapes. This undoes any custom values previously set using ``bodySetParam(body:param:value:)``.
    public static func bodyResetMassProperties (body: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_reset_mass_properties, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_reset_mass_properties, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_state")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1706355209)!
            }
            
        }
        
    }()
    
    /// Sets the value of a body's state. See ``PhysicsServer2D/BodyState`` for the list of available states.
    /// 
    /// > Note: The state change doesn't take effect immediately. The state will change on the next physics frame.
    /// 
    public static func bodySetState (body: RID, state: PhysicsServer2D.BodyState, value: Variant) {
        #if false
        
        var copy_state = Int64 (state.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_state, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_state, &value.content)
        
        #else
        
        var copy_state = Int64 (state.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_state) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &value.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_state, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_state")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4036367961)!
            }
            
        }
        
    }()
    
    /// Returns the value of the given state of the body. See ``PhysicsServer2D/BodyState`` for the list of available states.
    public static func bodyGetState (body: RID, state: PhysicsServer2D.BodyState)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        var copy_state = Int64 (state.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_state, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &body.content, &copy_state)
        return _result
        #else
        
        var copy_state = Int64 (state.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_state) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_state, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_central_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_central_impulse")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3201125042)!
            }
            
        }
        
    }()
    
    /// Applies a directional impulse to the body, at the body's center of mass. The impulse does not affect rotation.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    /// This is equivalent to using ``bodyApplyImpulse(body:impulse:position:)`` at the body's center of mass.
    /// 
    public static func bodyApplyCentralImpulse (body: RID, impulse: Vector2) {
        #if false
        
        var copy_impulse = impulse
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_apply_central_impulse, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_impulse)
        
        #else
        
        var copy_impulse = impulse
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_impulse) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_apply_central_impulse, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_torque_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_torque_impulse")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Applies a rotational impulse to the body. The impulse does not affect position.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    public static func bodyApplyTorqueImpulse (body: RID, impulse: Double) {
        #if false
        
        var copy_impulse = impulse
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_apply_torque_impulse, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_impulse)
        
        #else
        
        var copy_impulse = impulse
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_impulse) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_apply_torque_impulse, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_impulse")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 205485391)!
            }
            
        }
        
    }()
    
    /// Applies a positioned impulse to the body. The impulse can affect rotation if `position` is different from the body's center of mass.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public static func bodyApplyImpulse (body: RID, impulse: Vector2, position: Vector2 = Vector2 (x: 0, y: 0)) {
        #if false
        
        var copy_impulse = impulse
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_apply_impulse, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_impulse, &copy_position)
        
        #else
        
        var copy_impulse = impulse
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_impulse) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_position) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_apply_impulse, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_central_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_central_force")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3201125042)!
            }
            
        }
        
    }()
    
    /// Applies a directional force to the body, at the body's center of mass. The force does not affect rotation. A force is time dependent and meant to be applied every physics update.
    /// 
    /// This is equivalent to using ``bodyApplyForce(body:force:position:)`` at the body's center of mass.
    /// 
    public static func bodyApplyCentralForce (body: RID, force: Vector2) {
        #if false
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_apply_central_force, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_force) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_apply_central_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_force")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 205485391)!
            }
            
        }
        
    }()
    
    /// Applies a positioned force to the body. The force can affect rotation if `position` is different from the body's center of mass. A force is time dependent and meant to be applied every physics update.
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public static func bodyApplyForce (body: RID, force: Vector2, position: Vector2 = Vector2 (x: 0, y: 0)) {
        #if false
        
        var copy_force = force
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_apply_force, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_force, &copy_position)
        
        #else
        
        var copy_force = force
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_force) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_position) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_apply_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_torque")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Applies a rotational force to the body. The force does not affect position. A force is time dependent and meant to be applied every physics update.
    public static func bodyApplyTorque (body: RID, torque: Double) {
        #if false
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_apply_torque, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_torque) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_apply_torque, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_add_constant_central_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_add_constant_central_force")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3201125042)!
            }
            
        }
        
    }()
    
    /// Adds a constant directional force to the body. The force does not affect rotation. The force remains applied over time until cleared with `PhysicsServer2D.body_set_constant_force(body, Vector2(0, 0))`.
    /// 
    /// This is equivalent to using ``bodyAddConstantForce(body:force:position:)`` at the body's center of mass.
    /// 
    public static func bodyAddConstantCentralForce (body: RID, force: Vector2) {
        #if false
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_add_constant_central_force, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_force) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_add_constant_central_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_add_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_add_constant_force")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 205485391)!
            }
            
        }
        
    }()
    
    /// Adds a constant positioned force to the body. The force can affect rotation if `position` is different from the body's center of mass. The force remains applied over time until cleared with `PhysicsServer2D.body_set_constant_force(body, Vector2(0, 0))`.
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public static func bodyAddConstantForce (body: RID, force: Vector2, position: Vector2 = Vector2 (x: 0, y: 0)) {
        #if false
        
        var copy_force = force
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_add_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_force, &copy_position)
        
        #else
        
        var copy_force = force
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_force) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_position) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_add_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_add_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_add_constant_torque")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Adds a constant rotational force to the body. The force does not affect position. The force remains applied over time until cleared with `PhysicsServer2D.body_set_constant_torque(body, 0)`.
    public static func bodyAddConstantTorque (body: RID, torque: Double) {
        #if false
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_add_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_torque) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_add_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_constant_force")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3201125042)!
            }
            
        }
        
    }()
    
    /// Sets the body's total constant positional force applied during each physics update.
    /// 
    /// See ``bodyAddConstantForce(body:force:position:)`` and ``bodyAddConstantCentralForce(body:force:)``.
    /// 
    public static func bodySetConstantForce (body: RID, force: Vector2) {
        #if false
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_force) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_constant_force")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2440833711)!
            }
            
        }
        
    }()
    
    /// Returns the body's total constant positional force applied during each physics update.
    /// 
    /// See ``bodyAddConstantForce(body:force:position:)`` and ``bodyAddConstantCentralForce(body:force:)``.
    /// 
    public static func bodyGetConstantForce (body: RID)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_constant_torque")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the body's total constant rotational force applied during each physics update.
    /// 
    /// See ``bodyAddConstantTorque(body:torque:)``.
    /// 
    public static func bodySetConstantTorque (body: RID, torque: Double) {
        #if false
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_torque) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_constant_torque")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the body's total constant rotational force applied during each physics update.
    /// 
    /// See ``bodyAddConstantTorque(body:torque:)``.
    /// 
    public static func bodyGetConstantTorque (body: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_axis_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_axis_velocity")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3201125042)!
            }
            
        }
        
    }()
    
    /// Modifies the body's linear velocity so that its projection to the axis `axis_velocity.normalized()` is exactly `axis_velocity.length()`. This is useful for jumping behavior.
    public static func bodySetAxisVelocity (body: RID, axisVelocity: Vector2) {
        #if false
        
        var copy_axis_velocity = axisVelocity
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_axis_velocity, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_axis_velocity)
        
        #else
        
        var copy_axis_velocity = axisVelocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_axis_velocity) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_axis_velocity, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_add_collision_exception: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_add_collision_exception")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Adds `exceptedBody` to the body's list of collision exceptions, so that collisions with it are ignored.
    public static func bodyAddCollisionException (body: RID, exceptedBody: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_add_collision_exception, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &exceptedBody.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &exceptedBody.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_add_collision_exception, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_remove_collision_exception: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_remove_collision_exception")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Removes `exceptedBody` from the body's list of collision exceptions, so that collisions with it are no longer ignored.
    public static func bodyRemoveCollisionException (body: RID, exceptedBody: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_remove_collision_exception, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &exceptedBody.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &exceptedBody.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_remove_collision_exception, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_max_contacts_reported: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_max_contacts_reported")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets the maximum number of contacts that the body can report. If `amount` is greater than zero, then the body will keep track of at most this many contacts with other bodies.
    public static func bodySetMaxContactsReported (body: RID, amount: Int32) {
        #if false
        
        var copy_amount: Int = Int (amount)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_max_contacts_reported, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_amount)
        
        #else
        
        var copy_amount: Int = Int (amount)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_amount) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_max_contacts_reported, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_max_contacts_reported: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_max_contacts_reported")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the maximum number of contacts that the body can report. See ``bodySetMaxContactsReported(body:amount:)``.
    public static func bodyGetMaxContactsReported (body: RID)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_max_contacts_reported, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_max_contacts_reported, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_omit_force_integration: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_omit_force_integration")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets whether the body uses a callback function to calculate its own physics (see ``bodySetForceIntegrationCallback(body:callable:userdata:)``).
    public static func bodySetOmitForceIntegration (body: RID, enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_omit_force_integration, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_omit_force_integration, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_is_omitting_force_integration: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_is_omitting_force_integration")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the body uses a callback function to calculate its own physics (see ``bodySetForceIntegrationCallback(body:callable:userdata:)``).
    public static func bodyIsOmittingForceIntegration (body: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_is_omitting_force_integration, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_is_omitting_force_integration, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_force_integration_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_force_integration_callback")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3059434249)!
            }
            
        }
        
    }()
    
    /// Sets the function used to calculate physics for the body, if that body allows it (see ``bodySetOmitForceIntegration(body:enable:)``).
    /// 
    /// The force integration function takes the following two parameters:
    /// 
    /// 1. a ``PhysicsDirectBodyState2D`` `state`: used to retrieve and modify the body's state,
    /// 
    /// 2. a ``Variant`` `userdata`: optional user data.
    /// 
    /// > Note: This callback is currently not called in Godot Physics.
    /// 
    public static func bodySetForceIntegrationCallback (body: RID, callable: Callable, userdata: Variant) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_set_force_integration_callback, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &callable.content, &userdata.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &callable.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &userdata.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_set_force_integration_callback, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_test_motion: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_test_motion")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1699844009)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a collision would result from moving the body along a motion vector from a given point in space. See ``PhysicsTestMotionParameters2D`` for the available motion parameters. Optionally a ``PhysicsTestMotionResult2D`` object can be passed, which will be used to store the information about the resulting collision.
    public static func bodyTestMotion (body: RID, parameters: PhysicsTestMotionParameters2D?, result: PhysicsTestMotionResult2D? = nil)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_parameters_handle = parameters?.handle
        var copy_result_handle = result?.handle
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_test_motion, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content, &copy_parameters_handle, &copy_result_handle)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: parameters?.handle) { p1 in
            _args.append (parameters == nil ? nil : p1)
                return withUnsafePointer (to: result?.handle) { p2 in
                _args.append (result == nil ? nil : p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_test_motion, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_direct_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_direct_state")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1191931871)!
            }
            
        }
        
    }()
    
    /// Returns the ``PhysicsDirectBodyState2D`` of the body. Returns `null` if the body is destroyed or not assigned to a space.
    public static func bodyGetDirectState (body: RID)-> PhysicsDirectBodyState2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_body_get_direct_state, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_body_get_direct_state, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_joint_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_create")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a 2D joint in the physics server, and returns the ``RID`` that identifies it. To set the joint type, use ``jointMakeDampedSpring(joint:anchorA:anchorB:bodyA:bodyB:)``, ``jointMakeGroove(joint:groove1A:groove2A:anchorB:bodyA:bodyB:)`` or ``jointMakePin(joint:anchor:bodyA:bodyB:)``. Use ``jointSetParam(joint:param:value:)`` to set generic joint parameters.
    public static func jointCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer2D.method_joint_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_joint_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_clear")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Destroys the joint with the given ``RID``, creates a new uninitialized joint, and makes the ``RID`` refer to this new joint.
    public static func jointClear (joint: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_joint_clear, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_joint_clear, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_joint_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_set_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3972556514)!
            }
            
        }
        
    }()
    
    /// Sets the value of the given joint parameter. See ``PhysicsServer2D/JointParam`` for the list of available parameters.
    public static func jointSetParam (joint: RID, param: PhysicsServer2D.JointParam, value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_get_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4016448949)!
            }
            
        }
        
    }()
    
    /// Returns the value of the given joint parameter. See ``PhysicsServer2D/JointParam`` for the list of available parameters.
    public static func jointGetParam (joint: RID, param: PhysicsServer2D.JointParam)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_disable_collisions_between_bodies: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_disable_collisions_between_bodies")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets whether the bodies attached to the ``Joint2D`` will collide with each other.
    public static func jointDisableCollisionsBetweenBodies (joint: RID, disable: Bool) {
        #if false
        
        var copy_disable = disable
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_joint_disable_collisions_between_bodies, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_disable)
        
        #else
        
        var copy_disable = disable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_disable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_joint_disable_collisions_between_bodies, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_is_disabled_collisions_between_bodies: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_is_disabled_collisions_between_bodies")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns whether the bodies attached to the ``Joint2D`` will collide with each other.
    public static func jointIsDisabledCollisionsBetweenBodies (joint: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_joint_is_disabled_collisions_between_bodies, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_joint_is_disabled_collisions_between_bodies, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_joint_make_pin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_make_pin")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1612646186)!
            }
            
        }
        
    }()
    
    /// Makes the joint a pin joint. If `bodyB` is an empty ``RID``, then `bodyA` is pinned to the point `anchor` (given in global coordinates); otherwise, `bodyA` is pinned to `bodyB` at the point `anchor` (given in global coordinates). To set the parameters which are specific to the pin joint, see ``pinJointSetParam(joint:param:value:)``.
    public static func jointMakePin (joint: RID, anchor: Vector2, bodyA: RID, bodyB: RID = RID()) {
        #if false
        
        var copy_anchor = anchor
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_joint_make_pin, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_anchor, &bodyA.content, &bodyB.content)
        
        #else
        
        var copy_anchor = anchor
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_anchor) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &bodyA.content) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &bodyB.content) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (PhysicsServer2D.method_joint_make_pin, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_make_groove: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_make_groove")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 481430435)!
            }
            
        }
        
    }()
    
    /// Makes the joint a groove joint.
    public static func jointMakeGroove (joint: RID, groove1A: Vector2, groove2A: Vector2, anchorB: Vector2, bodyA: RID = RID(), bodyB: RID = RID()) {
        #if false
        
        var copy_groove1_a = groove1A
        var copy_groove2_a = groove2A
        var copy_anchor_b = anchorB
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_joint_make_groove, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_groove1_a, &copy_groove2_a, &copy_anchor_b, &bodyA.content, &bodyB.content)
        
        #else
        
        var copy_groove1_a = groove1A
        var copy_groove2_a = groove2A
        var copy_anchor_b = anchorB
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_groove1_a) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_groove2_a) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_anchor_b) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &bodyA.content) { p4 in
                            _args.append (p4)
                            withUnsafePointer (to: &bodyB.content) { p5 in
                                _args.append (p5)
        
                                gi.object_method_bind_ptrcall (PhysicsServer2D.method_joint_make_groove, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_make_damped_spring: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_make_damped_spring")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1994657646)!
            }
            
        }
        
    }()
    
    /// Makes the joint a damped spring joint, attached at the point `anchorA` (given in global coordinates) on the body `bodyA` and at the point `anchorB` (given in global coordinates) on the body `bodyB`. To set the parameters which are specific to the damped spring, see ``dampedSpringJointSetParam(joint:param:value:)``.
    public static func jointMakeDampedSpring (joint: RID, anchorA: Vector2, anchorB: Vector2, bodyA: RID, bodyB: RID = RID()) {
        #if false
        
        var copy_anchor_a = anchorA
        var copy_anchor_b = anchorB
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_joint_make_damped_spring, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_anchor_a, &copy_anchor_b, &bodyA.content, &bodyB.content)
        
        #else
        
        var copy_anchor_a = anchorA
        var copy_anchor_b = anchorB
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_anchor_a) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_anchor_b) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &bodyA.content) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &bodyB.content) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (PhysicsServer2D.method_joint_make_damped_spring, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_pin_joint_set_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pin_joint_set_flag")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3520002352)!
            }
            
        }
        
    }()
    
    /// Sets a pin joint flag (see ``PhysicsServer2D/PinJointFlag`` constants).
    public static func pinJointSetFlag (joint: RID, flag: PhysicsServer2D.PinJointFlag, enabled: Bool) {
        #if false
        
        var copy_flag = Int64 (flag.rawValue)
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_pin_joint_set_flag, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_flag, &copy_enabled)
        
        #else
        
        var copy_flag = Int64 (flag.rawValue)
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_flag) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_enabled) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_pin_joint_set_flag, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_pin_joint_get_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pin_joint_get_flag")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2647867364)!
            }
            
        }
        
    }()
    
    /// Gets a pin joint flag (see ``PhysicsServer2D/PinJointFlag`` constants).
    public static func pinJointGetFlag (joint: RID, flag: PhysicsServer2D.PinJointFlag)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_flag = Int64 (flag.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_pin_joint_get_flag, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_flag)
        return _result
        #else
        
        var copy_flag = Int64 (flag.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_flag) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_pin_joint_get_flag, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_pin_joint_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pin_joint_set_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 550574241)!
            }
            
        }
        
    }()
    
    /// Sets a pin joint parameter. See ``PhysicsServer2D/PinJointParam`` for a list of available parameters.
    public static func pinJointSetParam (joint: RID, param: PhysicsServer2D.PinJointParam, value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_pin_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_pin_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_pin_joint_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pin_joint_get_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 348281383)!
            }
            
        }
        
    }()
    
    /// Returns the value of a pin joint parameter. See ``PhysicsServer2D/PinJointParam`` for a list of available parameters.
    public static func pinJointGetParam (joint: RID, param: PhysicsServer2D.PinJointParam)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_pin_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_pin_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_damped_spring_joint_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("damped_spring_joint_set_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 220564071)!
            }
            
        }
        
    }()
    
    /// Sets the value of the given damped spring joint parameter. See ``PhysicsServer2D/DampedSpringParam`` for the list of available parameters.
    public static func dampedSpringJointSetParam (joint: RID, param: PhysicsServer2D.DampedSpringParam, value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_damped_spring_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer2D.method_damped_spring_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_damped_spring_joint_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("damped_spring_joint_get_param")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2075871277)!
            }
            
        }
        
    }()
    
    /// Returns the value of the given damped spring joint parameter. See ``PhysicsServer2D/DampedSpringParam`` for the list of available parameters.
    public static func dampedSpringJointGetParam (joint: RID, param: PhysicsServer2D.DampedSpringParam)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_damped_spring_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer2D.method_damped_spring_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_get_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_get_type")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4262502231)!
            }
            
        }
        
    }()
    
    /// Returns the joint's type (see ``PhysicsServer2D/JointType``).
    public static func jointGetType (joint: RID)-> PhysicsServer2D.JointType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_joint_get_type, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content)
        return PhysicsServer2D.JointType (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_joint_get_type, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return PhysicsServer2D.JointType (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_free_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("free_rid")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Destroys any of the objects created by PhysicsServer2D. If the ``RID`` passed is not one of the objects that can be created by PhysicsServer2D, an error will be printed to the console.
    public static func freeRid (_ rid: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_free_rid, UnsafeMutableRawPointer (mutating: shared.handle), nil, &rid.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &rid.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_free_rid, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_active")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// Activates or deactivates the 2D physics server. If `active` is `false`, then the physics server will not do anything in its physics step.
    public static func setActive (_ active: Bool) {
        #if false
        
        var copy_active = active
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_set_active, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_active)
        
        #else
        
        var copy_active = active
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_active) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_set_active, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_process_info: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_process_info")
        return withUnsafePointer (to: &PhysicsServer2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 576496006)!
            }
            
        }
        
    }()
    
    /// Returns information about the current state of the 2D physics engine. See ``PhysicsServer2D/ProcessInfo`` for the list of available states.
    public static func getProcessInfo (_ processInfo: PhysicsServer2D.ProcessInfo)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_process_info = Int64 (processInfo.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer2D.method_get_process_info, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_process_info)
        return _result
        #else
        
        var copy_process_info = Int64 (processInfo.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_process_info) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer2D.method_get_process_info, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

