// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A class to interact with the editor debugger.
/// 
/// This class cannot be directly instantiated and must be retrieved via a ``EditorDebuggerPlugin``.
/// 
/// You can add tabs to the session UI via ``addSessionTab(control:)``, send messages via ``sendMessage(_:data:)``, and toggle ``EngineProfiler``s via ``toggleProfiler(_:enable:data:)``.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``started``
/// - ``stopped``
/// - ``breaked``
/// - ``continued``
open class EditorDebuggerSession: RefCounted {
    override open class var godotClassName: StringName { "EditorDebuggerSession" }
    /* Methods */
    fileprivate static var method_send_message: GDExtensionMethodBindPtr = {
        let methodName = StringName ("send_message")
        return withUnsafePointer (to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 85656714)!
            }
            
        }
        
    }()
    
    /// Sends the given `message` to the attached remote instance, optionally passing additionally `data`. See ``EngineDebugger`` for how to retrieve those messages.
    public final func sendMessage (_ message: String, data: GArray = GArray ()) {
        #if false
        
        let gstr_message = GString (message)
        
        gi.object_method_bind_ptrcall_v (EditorDebuggerSession.method_send_message, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_message.content, &data.content)
        
        #else
        
        let gstr_message = GString (message)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_message.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &data.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorDebuggerSession.method_send_message, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_toggle_profiler: GDExtensionMethodBindPtr = {
        let methodName = StringName ("toggle_profiler")
        return withUnsafePointer (to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1198443697)!
            }
            
        }
        
    }()
    
    /// Toggle the given `profiler` on the attached remote instance, optionally passing additionally `data`. See ``EngineProfiler`` for more details.
    public final func toggleProfiler (_ profiler: String, enable: Bool, data: GArray = GArray ()) {
        #if false
        
        let gstr_profiler = GString (profiler)
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (EditorDebuggerSession.method_toggle_profiler, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_profiler.content, &copy_enable, &data.content)
        
        #else
        
        let gstr_profiler = GString (profiler)
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_profiler.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &data.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (EditorDebuggerSession.method_toggle_profiler, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_breaked: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_breaked")
        return withUnsafePointer (to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the attached remote instance is currently in the debug loop.
    public final func isBreaked ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EditorDebuggerSession.method_is_breaked, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_debuggable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_debuggable")
        return withUnsafePointer (to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the attached remote instance can be debugged.
    public final func isDebuggable ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EditorDebuggerSession.method_is_debuggable, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_active")
        return withUnsafePointer (to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the debug session is currently attached to a remote instance.
    public final func isActive ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EditorDebuggerSession.method_is_active, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_session_tab: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_session_tab")
        return withUnsafePointer (to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1496901182)!
            }
            
        }
        
    }()
    
    /// Adds the given `control` to the debug session UI in the debugger bottom panel.
    public final func addSessionTab (control: Control?) {
        #if false
        
        var copy_control_handle = control?.handle
        
        gi.object_method_bind_ptrcall_v (EditorDebuggerSession.method_add_session_tab, UnsafeMutableRawPointer (mutating: handle), nil, &copy_control_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: control?.handle) { p0 in
        _args.append (control == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorDebuggerSession.method_add_session_tab, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_session_tab: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_session_tab")
        return withUnsafePointer (to: &EditorDebuggerSession.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1496901182)!
            }
            
        }
        
    }()
    
    /// Removes the given `control` from the debug session UI in the debugger bottom panel.
    public final func removeSessionTab (control: Control?) {
        #if false
        
        var copy_control_handle = control?.handle
        
        gi.object_method_bind_ptrcall_v (EditorDebuggerSession.method_remove_session_tab, UnsafeMutableRawPointer (mutating: handle), nil, &copy_control_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: control?.handle) { p0 in
        _args.append (control == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorDebuggerSession.method_remove_session_tab, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    // Signals 
    /// Emitted when a remote instance is attached to this session (i.e. the session becomes active).
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.started.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var started: SimpleSignal { SimpleSignal (target: self, signalName: "started") }
    
    /// Emitted when a remote instance is detached from this session (i.e. the session becomes inactive).
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.stopped.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var stopped: SimpleSignal { SimpleSignal (target: self, signalName: "stopped") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ canDebug: Bool) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Bool (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the attached remote instance enters a break state. If `canDebug` is `true`, the remote instance will enter the debug loop.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.breaked.connect { canDebug in
    ///    print ("caught signal")
    /// }
    /// ```
    public var breaked: Signal1 { Signal1 (target: self, signalName: "breaked") }
    
    /// Emitted when the attached remote instance exits a break state.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.continued.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var continued: SimpleSignal { SimpleSignal (target: self, signalName: "continued") }
    
}

