// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Calls the specified method after optional delay.
/// 
/// ``CallbackTweener`` is used to call a method in a tweening sequence. See ``Tween/tweenCallback(_:)`` for more usage information.
/// 
/// The tweener will finish automatically if the callback's target object is freed.
/// 
/// > Note: ``Tween/tweenCallback(_:)`` is the only correct way to create ``CallbackTweener``. Any ``CallbackTweener`` created manually will not function correctly.
/// 
open class CallbackTweener: Tweener {
    override open class var godotClassName: StringName { "CallbackTweener" }
    /* Methods */
    fileprivate static var method_set_delay: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_delay")
        return withUnsafePointer (to: &CallbackTweener.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3008182292)!
            }
            
        }
        
    }()
    
    /// Makes the callback call delayed by given time in seconds.
    /// 
    /// **Example:**
    /// 
    public final func setDelay (_ delay: Double)-> CallbackTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_delay = delay
        
        gi.object_method_bind_ptrcall_v (CallbackTweener.method_set_delay, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_delay)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_delay = delay
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_delay) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CallbackTweener.method_set_delay, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
}

