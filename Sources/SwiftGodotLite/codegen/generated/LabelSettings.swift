// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Provides common settings to customize the text in a ``Label``.
/// 
/// ``LabelSettings`` is a resource that provides common settings to customize the text in a ``Label``. It will take priority over the properties defined in ``Control/theme``. The resource can be shared between multiple labels and changed on the fly, so it's convenient and flexible way to setup text style.
open class LabelSettings: Resource {
    override open class var godotClassName: StringName { "LabelSettings" }
    
    /* Properties */
    
    /// Vertical space between lines when the text is multiline.
    final public var lineSpacing: Double {
        get {
            return get_line_spacing ()
        }
        
        set {
            set_line_spacing (newValue)
        }
        
    }
    
    /// ``Font`` used for the text.
    final public var font: Font? {
        get {
            return get_font ()
        }
        
        set {
            set_font (newValue)
        }
        
    }
    
    /// Size of the text.
    final public var fontSize: Int32 {
        get {
            return get_font_size ()
        }
        
        set {
            set_font_size (newValue)
        }
        
    }
    
    /// Color of the text.
    final public var fontColor: Color {
        get {
            return get_font_color ()
        }
        
        set {
            set_font_color (newValue)
        }
        
    }
    
    /// Text outline size.
    final public var outlineSize: Int32 {
        get {
            return get_outline_size ()
        }
        
        set {
            set_outline_size (newValue)
        }
        
    }
    
    /// The color of the outline.
    final public var outlineColor: Color {
        get {
            return get_outline_color ()
        }
        
        set {
            set_outline_color (newValue)
        }
        
    }
    
    /// Size of the shadow effect.
    final public var shadowSize: Int32 {
        get {
            return get_shadow_size ()
        }
        
        set {
            set_shadow_size (newValue)
        }
        
    }
    
    /// Color of the shadow effect. If alpha is `0`, no shadow will be drawn.
    final public var shadowColor: Color {
        get {
            return get_shadow_color ()
        }
        
        set {
            set_shadow_color (newValue)
        }
        
    }
    
    /// Offset of the shadow effect, in pixels.
    final public var shadowOffset: Vector2 {
        get {
            return get_shadow_offset ()
        }
        
        set {
            set_shadow_offset (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_line_spacing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_line_spacing")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_line_spacing (_ spacing: Double) {
        #if false
        
        var copy_spacing = spacing
        
        gi.object_method_bind_ptrcall_v (LabelSettings.method_set_line_spacing, UnsafeMutableRawPointer (mutating: handle), nil, &copy_spacing)
        
        #else
        
        var copy_spacing = spacing
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_spacing) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LabelSettings.method_set_line_spacing, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_line_spacing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_line_spacing")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_line_spacing ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (LabelSettings.method_get_line_spacing, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_font: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1262170328)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font (_ font: Font?) {
        #if false
        
        var copy_font_handle = font?.handle
        
        gi.object_method_bind_ptrcall_v (LabelSettings.method_set_font, UnsafeMutableRawPointer (mutating: handle), nil, &copy_font_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: font?.handle) { p0 in
        _args.append (font == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (LabelSettings.method_set_font, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_font: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3229501585)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_font ()-> Font? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (LabelSettings.method_get_font, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_font_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_size")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_size (_ size: Int32) {
        #if false
        
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (LabelSettings.method_set_font_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LabelSettings.method_set_font_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_font_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_size")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_font_size ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (LabelSettings.method_get_font_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_font_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_color")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_color (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (LabelSettings.method_set_font_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LabelSettings.method_set_font_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_font_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_color")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_font_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (LabelSettings.method_get_font_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_outline_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_outline_size")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_outline_size (_ size: Int32) {
        #if false
        
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (LabelSettings.method_set_outline_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LabelSettings.method_set_outline_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_outline_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_outline_size")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_outline_size ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (LabelSettings.method_get_outline_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_outline_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_outline_color")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_outline_color (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (LabelSettings.method_set_outline_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LabelSettings.method_set_outline_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_outline_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_outline_color")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_outline_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (LabelSettings.method_get_outline_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shadow_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shadow_size")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shadow_size (_ size: Int32) {
        #if false
        
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (LabelSettings.method_set_shadow_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LabelSettings.method_set_shadow_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shadow_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shadow_size")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shadow_size ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (LabelSettings.method_get_shadow_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shadow_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shadow_color")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shadow_color (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (LabelSettings.method_set_shadow_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LabelSettings.method_set_shadow_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shadow_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shadow_color")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shadow_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (LabelSettings.method_get_shadow_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shadow_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shadow_offset")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shadow_offset (_ offset: Vector2) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (LabelSettings.method_set_shadow_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LabelSettings.method_set_shadow_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shadow_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shadow_offset")
        return withUnsafePointer (to: &LabelSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shadow_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (LabelSettings.method_get_shadow_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

