// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// 3D polygon shape for use with occlusion culling in ``OccluderInstance3D``.
/// 
/// ``ArrayOccluder3D`` stores an arbitrary 3D polygon shape that can be used by the engine's occlusion culling system. This is analogous to ``ArrayMesh``, but for occluders.
/// 
/// See ``OccluderInstance3D``'s documentation for instructions on setting up occlusion culling.
/// 
open class ArrayOccluder3D: Occluder3D {
    override open class var godotClassName: StringName { "ArrayOccluder3D" }
    
    /* Properties */
    
    /// The occluder's vertex positions in local 3D coordinates.
    /// 
    /// > Note: The occluder is always updated after setting this value. If creating occluders procedurally, consider using ``setArrays(vertices:indices:)`` instead to avoid updating the occluder twice when it's created.
    /// 
    final public var vertices: PackedVector3Array {
        get {
            return getVertices ()
        }
        
        set {
            set_vertices (newValue)
        }
        
    }
    
    /// The occluder's index position. Indices determine which points from the ``vertices`` array should be drawn, and in which order.
    /// 
    /// > Note: The occluder is always updated after setting this value. If creating occluders procedurally, consider using ``setArrays(vertices:indices:)`` instead to avoid updating the occluder twice when it's created.
    /// 
    final public var indices: PackedInt32Array {
        get {
            return getIndices ()
        }
        
        set {
            set_indices (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_arrays: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_arrays")
        return withUnsafePointer (to: &ArrayOccluder3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3233972621)!
            }
            
        }
        
    }()
    
    /// Sets ``indices`` and ``vertices``, while updating the final occluder only once after both values are set.
    public final func setArrays (vertices: PackedVector3Array, indices: PackedInt32Array) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ArrayOccluder3D.method_set_arrays, UnsafeMutableRawPointer (mutating: handle), nil, &vertices.content, &indices.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &vertices.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &indices.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ArrayOccluder3D.method_set_arrays, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_vertices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertices")
        return withUnsafePointer (to: &ArrayOccluder3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 334873810)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_vertices (_ vertices: PackedVector3Array) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ArrayOccluder3D.method_set_vertices, UnsafeMutableRawPointer (mutating: handle), nil, &vertices.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &vertices.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ArrayOccluder3D.method_set_vertices, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_indices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_indices")
        return withUnsafePointer (to: &ArrayOccluder3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3614634198)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_indices (_ indices: PackedInt32Array) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ArrayOccluder3D.method_set_indices, UnsafeMutableRawPointer (mutating: handle), nil, &indices.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &indices.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ArrayOccluder3D.method_set_indices, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

