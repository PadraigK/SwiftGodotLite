// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Base input event type for mouse events.
/// 
/// Stores general information about mouse events.
open class InputEventMouse: InputEventWithModifiers {
    override open class var godotClassName: StringName { "InputEventMouse" }
    
    /* Properties */
    
    /// The mouse button mask identifier, one of or a bitwise combination of the ``MouseButton`` button masks.
    final public var buttonMask: MouseButtonMask {
        get {
            return get_button_mask ()
        }
        
        set {
            set_button_mask (newValue)
        }
        
    }
    
    /// When received in ``Node/_input(event:)`` or ``Node/_unhandledInput(event:)``, returns the mouse's position in the ``Viewport`` this ``Node`` is in using the coordinate system of this ``Viewport``.
    /// 
    /// When received in ``Control/_guiInput(event:)``, returns the mouse's position in the ``Control`` using the local coordinate system of the ``Control``.
    /// 
    final public var position: Vector2 {
        get {
            return get_position ()
        }
        
        set {
            set_position (newValue)
        }
        
    }
    
    /// When received in ``Node/_input(event:)`` or ``Node/_unhandledInput(event:)``, returns the mouse's position in the root ``Viewport`` using the coordinate system of the root ``Viewport``.
    /// 
    /// When received in ``Control/_guiInput(event:)``, returns the mouse's position in the ``CanvasLayer`` that the ``Control`` is in using the coordinate system of the ``CanvasLayer``.
    /// 
    final public var globalPosition: Vector2 {
        get {
            return get_global_position ()
        }
        
        set {
            set_global_position (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_button_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_button_mask")
        return withUnsafePointer (to: &InputEventMouse.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3950145251)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_button_mask (_ buttonMask: MouseButtonMask) {
        #if true
        
        var copy_button_mask = buttonMask
        
        gi.object_method_bind_ptrcall_v (InputEventMouse.method_set_button_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_button_mask)
        
        #else
        
        var copy_button_mask = buttonMask
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_button_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMouse.method_set_button_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_button_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_button_mask")
        return withUnsafePointer (to: &InputEventMouse.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2512161324)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_button_mask ()-> MouseButtonMask {
        var _result: MouseButtonMask = MouseButtonMask ()
        gi.object_method_bind_ptrcall (InputEventMouse.method_get_button_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_position")
        return withUnsafePointer (to: &InputEventMouse.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_position (_ position: Vector2) {
        #if true
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (InputEventMouse.method_set_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMouse.method_set_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_position")
        return withUnsafePointer (to: &InputEventMouse.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_position ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (InputEventMouse.method_get_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_global_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_global_position")
        return withUnsafePointer (to: &InputEventMouse.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_global_position (_ globalPosition: Vector2) {
        #if true
        
        var copy_global_position = globalPosition
        
        gi.object_method_bind_ptrcall_v (InputEventMouse.method_set_global_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_global_position)
        
        #else
        
        var copy_global_position = globalPosition
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_global_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventMouse.method_set_global_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_global_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_global_position")
        return withUnsafePointer (to: &InputEventMouse.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_global_position ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (InputEventMouse.method_get_global_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

