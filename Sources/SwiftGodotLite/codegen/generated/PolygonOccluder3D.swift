// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Flat 2D polygon shape for use with occlusion culling in ``OccluderInstance3D``.
/// 
/// ``PolygonOccluder3D`` stores a polygon shape that can be used by the engine's occlusion culling system. When an ``OccluderInstance3D`` with a ``PolygonOccluder3D`` is selected in the editor, an editor will appear at the top of the 3D viewport so you can add/remove points. All points must be placed on the same 2D plane, which means it is not possible to create arbitrary 3D shapes with a single ``PolygonOccluder3D``. To use arbitrary 3D shapes as occluders, use ``ArrayOccluder3D`` or ``OccluderInstance3D``'s baking feature instead.
/// 
/// See ``OccluderInstance3D``'s documentation for instructions on setting up occlusion culling.
/// 
open class PolygonOccluder3D: Occluder3D {
    override open class var godotClassName: StringName { "PolygonOccluder3D" }
    
    /* Properties */
    
    /// The polygon to use for occlusion culling. The polygon can be convex or concave, but it should have as few points as possible to maximize performance.
    /// 
    /// The polygon must _not_ have intersecting lines. Otherwise, triangulation will fail (with an error message printed).
    /// 
    final public var polygon: PackedVector2Array {
        get {
            return get_polygon ()
        }
        
        set {
            set_polygon (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_polygon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_polygon")
        return withUnsafePointer (to: &PolygonOccluder3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1509147220)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_polygon (_ polygon: PackedVector2Array) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (PolygonOccluder3D.method_set_polygon, UnsafeMutableRawPointer (mutating: handle), nil, &polygon.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &polygon.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PolygonOccluder3D.method_set_polygon, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_polygon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_polygon")
        return withUnsafePointer (to: &PolygonOccluder3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2961356807)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_polygon ()-> PackedVector2Array {
        let _result: PackedVector2Array = PackedVector2Array ()
        gi.object_method_bind_ptrcall (PolygonOccluder3D.method_get_polygon, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
}

