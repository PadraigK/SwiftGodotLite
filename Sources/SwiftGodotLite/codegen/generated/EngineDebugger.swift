// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Exposes the internal debugger.
/// 
/// ``EngineDebugger`` handles the communication between the editor and the running game. It is active in the running game. Messages can be sent/received through it. It also manages the profilers.
open class EngineDebugger: Object {
    /// The shared instance of this class
    public static var shared: EngineDebugger = {
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { ptr in
            EngineDebugger (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "EngineDebugger" }
    /* Methods */
    fileprivate static var method_is_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_active")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the debugger is active otherwise `false`.
    public static func isActive ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EngineDebugger.method_is_active, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_register_profiler: GDExtensionMethodBindPtr = {
        let methodName = StringName ("register_profiler")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3651669560)!
            }
            
        }
        
    }()
    
    /// Registers a profiler with the given `name`. See ``EngineProfiler`` for more information.
    public static func registerProfiler (name: StringName, profiler: EngineProfiler?) {
        #if false
        
        var copy_profiler_handle = profiler?.handle
        
        gi.object_method_bind_ptrcall_v (EngineDebugger.method_register_profiler, UnsafeMutableRawPointer (mutating: shared.handle), nil, &name.content, &copy_profiler_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: profiler?.handle) { p1 in
            _args.append (profiler == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (EngineDebugger.method_register_profiler, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_unregister_profiler: GDExtensionMethodBindPtr = {
        let methodName = StringName ("unregister_profiler")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Unregisters a profiler with given `name`.
    public static func unregisterProfiler (name: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (EngineDebugger.method_unregister_profiler, UnsafeMutableRawPointer (mutating: shared.handle), nil, &name.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EngineDebugger.method_unregister_profiler, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_profiling: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_profiling")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2041966384)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a profiler with the given name is present and active otherwise `false`.
    public static func isProfiling (name: StringName)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (EngineDebugger.method_is_profiling, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EngineDebugger.method_is_profiling, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_has_profiler: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_profiler")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2041966384)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a profiler with the given name is present otherwise `false`.
    public static func hasProfiler (name: StringName)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (EngineDebugger.method_has_profiler, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EngineDebugger.method_has_profiler, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_profiler_add_frame_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("profiler_add_frame_data")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1895267858)!
            }
            
        }
        
    }()
    
    /// Calls the `add` callable of the profiler with given `name` and `data`.
    public static func profilerAddFrameData (name: StringName, data: GArray) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (EngineDebugger.method_profiler_add_frame_data, UnsafeMutableRawPointer (mutating: shared.handle), nil, &name.content, &data.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &data.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EngineDebugger.method_profiler_add_frame_data, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_profiler_enable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("profiler_enable")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3192561009)!
            }
            
        }
        
    }()
    
    /// Calls the `toggle` callable of the profiler with given `name` and `arguments`. Enables/Disables the same profiler depending on `enable` argument.
    public static func profilerEnable (name: StringName, enable: Bool, arguments: GArray = GArray ()) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (EngineDebugger.method_profiler_enable, UnsafeMutableRawPointer (mutating: shared.handle), nil, &name.content, &copy_enable, &arguments.content)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &arguments.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (EngineDebugger.method_profiler_enable, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_register_message_capture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("register_message_capture")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1874754934)!
            }
            
        }
        
    }()
    
    /// Registers a message capture with given `name`. If `name` is "my_message" then messages starting with "my_message:" will be called with the given callable.
    /// 
    /// Callable must accept a message string and a data array as argument. If the message and data are valid then callable must return `true` otherwise `false`.
    /// 
    public static func registerMessageCapture (name: StringName, callable: Callable) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (EngineDebugger.method_register_message_capture, UnsafeMutableRawPointer (mutating: shared.handle), nil, &name.content, &callable.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &callable.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EngineDebugger.method_register_message_capture, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_unregister_message_capture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("unregister_message_capture")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Unregisters the message capture with given `name`.
    public static func unregisterMessageCapture (name: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (EngineDebugger.method_unregister_message_capture, UnsafeMutableRawPointer (mutating: shared.handle), nil, &name.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EngineDebugger.method_unregister_message_capture, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_has_capture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_capture")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2041966384)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a capture with the given name is present otherwise `false`.
    public static func hasCapture (name: StringName)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (EngineDebugger.method_has_capture, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EngineDebugger.method_has_capture, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_send_message: GDExtensionMethodBindPtr = {
        let methodName = StringName ("send_message")
        return withUnsafePointer (to: &EngineDebugger.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1209351045)!
            }
            
        }
        
    }()
    
    /// Sends a message with given `message` and `data` array.
    public static func sendMessage (_ message: String, data: GArray) {
        #if false
        
        let gstr_message = GString (message)
        
        gi.object_method_bind_ptrcall_v (EngineDebugger.method_send_message, UnsafeMutableRawPointer (mutating: shared.handle), nil, &gstr_message.content, &data.content)
        
        #else
        
        let gstr_message = GString (message)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_message.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &data.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EngineDebugger.method_send_message, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
}

