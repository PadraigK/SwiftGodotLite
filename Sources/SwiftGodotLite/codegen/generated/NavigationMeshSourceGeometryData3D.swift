// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Container for parsed source geometry data used in navigation mesh baking.
/// 
/// Container for parsed source geometry data used in navigation mesh baking.
open class NavigationMeshSourceGeometryData3D: Resource {
    override open class var godotClassName: StringName { "NavigationMeshSourceGeometryData3D" }
    
    /* Properties */
    
    final public var vertices: PackedFloat32Array {
        get {
            return get_vertices ()
        }
        
        set {
            set_vertices (newValue)
        }
        
    }
    
    final public var indices: PackedInt32Array {
        get {
            return get_indices ()
        }
        
        set {
            set_indices (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_vertices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertices")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2899603908)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the parsed source geometry data vertices. The vertices need to be matched with appropriated indices.
    /// 
    /// > Warning: Inappropriate data can crash the baking process of the involved third-party libraries.
    /// 
    fileprivate final func set_vertices (_ vertices: PackedFloat32Array) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (NavigationMeshSourceGeometryData3D.method_set_vertices, UnsafeMutableRawPointer (mutating: handle), nil, &vertices.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &vertices.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData3D.method_set_vertices, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertices")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 675695659)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the parsed source geometry data vertices array.
    fileprivate final func get_vertices ()-> PackedFloat32Array {
        let _result: PackedFloat32Array = PackedFloat32Array ()
        gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData3D.method_get_vertices, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_indices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_indices")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3614634198)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the parsed source geometry data indices. The indices need to be matched with appropriated vertices.
    /// 
    /// > Warning: Inappropriate data can crash the baking process of the involved third-party libraries.
    /// 
    fileprivate final func set_indices (_ indices: PackedInt32Array) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (NavigationMeshSourceGeometryData3D.method_set_indices, UnsafeMutableRawPointer (mutating: handle), nil, &indices.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &indices.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData3D.method_set_indices, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_indices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_indices")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1930428628)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the parsed source geometry data indices array.
    fileprivate final func get_indices ()-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData3D.method_get_indices, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears the internal data.
    public final func clear () {
        gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData3D.method_clear, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_has_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_data")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` when parsed source geometry data exists.
    public final func hasData ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData3D.method_has_data, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_mesh")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 975462459)!
            }
            
        }
        
    }()
    
    /// Adds the geometry data of a ``Mesh`` resource to the navigation mesh baking data. The mesh must have valid triangulated mesh data to be considered. Since ``NavigationMesh`` resources have no transform, all vertex positions need to be offset by the node's transform using `xform`.
    public final func addMesh (_ mesh: Mesh?, xform: Transform3D) {
        #if true
        
        var copy_xform = xform
        var copy_mesh_handle = mesh?.handle
        
        gi.object_method_bind_ptrcall_v (NavigationMeshSourceGeometryData3D.method_add_mesh, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mesh_handle, &copy_xform)
        
        #else
        
        var copy_xform = xform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: mesh?.handle) { p0 in
        _args.append (mesh == nil ? nil : p0)
            withUnsafePointer (to: &copy_xform) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData3D.method_add_mesh, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_mesh_array: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_mesh_array")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4235710913)!
            }
            
        }
        
    }()
    
    /// Adds an ``GArray`` the size of ``Mesh/ArrayType/arrayMax`` and with vertices at index ``Mesh/ArrayType/arrayVertex`` and indices at index ``Mesh/ArrayType/arrayIndex`` to the navigation mesh baking data. The array must have valid triangulated mesh data to be considered. Since ``NavigationMesh`` resources have no transform, all vertex positions need to be offset by the node's transform using `xform`.
    public final func addMeshArray (_ meshArray: GArray, xform: Transform3D) {
        #if true
        
        var copy_xform = xform
        
        gi.object_method_bind_ptrcall_v (NavigationMeshSourceGeometryData3D.method_add_mesh_array, UnsafeMutableRawPointer (mutating: handle), nil, &meshArray.content, &copy_xform)
        
        #else
        
        var copy_xform = xform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &meshArray.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_xform) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData3D.method_add_mesh_array, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_faces: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_faces")
        return withUnsafePointer (to: &NavigationMeshSourceGeometryData3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1440358797)!
            }
            
        }
        
    }()
    
    /// Adds an array of vertex positions to the geometry data for navigation mesh baking to form triangulated faces. For each face the array must have three vertex positions in clockwise winding order. Since ``NavigationMesh`` resources have no transform, all vertex positions need to be offset by the node's transform using `xform`.
    public final func addFaces (_ faces: PackedVector3Array, xform: Transform3D) {
        #if true
        
        var copy_xform = xform
        
        gi.object_method_bind_ptrcall_v (NavigationMeshSourceGeometryData3D.method_add_faces, UnsafeMutableRawPointer (mutating: handle), nil, &faces.content, &copy_xform)
        
        #else
        
        var copy_xform = xform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &faces.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_xform) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationMeshSourceGeometryData3D.method_add_faces, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
}

