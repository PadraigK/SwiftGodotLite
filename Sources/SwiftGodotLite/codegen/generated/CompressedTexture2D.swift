// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Texture with 2 dimensions, optionally compressed.
/// 
/// A texture that is loaded from a `.ctex` file. This file format is internal to Godot; it is created by importing other image formats with the import system. ``CompressedTexture2D`` can use one of 4 compression methods (including a lack of any compression):
/// 
/// - Lossless (WebP or PNG, uncompressed on the GPU)
/// 
/// - Lossy (WebP, uncompressed on the GPU)
/// 
/// - VRAM Compressed (compressed on the GPU)
/// 
/// - VRAM Uncompressed (uncompressed on the GPU)
/// 
/// - Basis Universal (compressed on the GPU. Lower file sizes than VRAM Compressed, but slower to compress and lower quality than VRAM Compressed)
/// 
/// Only **VRAM Compressed** actually reduces the memory usage on the GPU. The **Lossless** and **Lossy** compression methods will reduce the required storage on disk, but they will not reduce memory usage on the GPU as the texture is sent to the GPU uncompressed.
/// 
/// Using **VRAM Compressed** also improves loading times, as VRAM-compressed textures are faster to load compared to textures using lossless or lossy compression. VRAM compression can exhibit noticeable artifacts and is intended to be used for 3D rendering, not 2D.
/// 
open class CompressedTexture2D: Texture2D {
    override open class var godotClassName: StringName { "CompressedTexture2D" }
    
    /* Properties */
    
    /// The ``CompressedTexture2D``'s file path to a `.ctex` file.
    final public var loadPath: String {
        get {
            return get_load_path ()
        }
        
        set {
            _ = load (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_load: GDExtensionMethodBindPtr = {
        let methodName = StringName ("load")
        return withUnsafePointer (to: &CompressedTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Loads the texture from the specified `path`.
    fileprivate final func load (_ path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (CompressedTexture2D.method_load, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CompressedTexture2D.method_load, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_load_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_load_path")
        return withUnsafePointer (to: &CompressedTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_load_path ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (CompressedTexture2D.method_get_load_path, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
}

