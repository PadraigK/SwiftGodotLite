// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract base class for fonts and font variations.
/// 
/// Abstract base class for different font types. It has methods for drawing text and font character introspection.
open class Font: Resource {
    override open class var godotClassName: StringName { "Font" }
    
    /* Properties */
    
    /// Array of fallback ``Font``s to use as a substitute if a glyph is not found in this current ``Font``.
    /// 
    /// If this array is empty in a ``FontVariation``, the ``FontVariation/baseFont``'s fallbacks are used instead.
    /// 
    final public var fallbacks: ObjectCollection<Font> {
        get {
            return get_fallbacks ()
        }
        
        set {
            set_fallbacks (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_fallbacks: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fallbacks")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fallbacks (_ fallbacks: ObjectCollection<Font>) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (Font.method_set_fallbacks, UnsafeMutableRawPointer (mutating: handle), nil, &fallbacks.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &fallbacks.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Font.method_set_fallbacks, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fallbacks: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fallbacks")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fallbacks ()-> ObjectCollection<Font> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Font.method_get_fallbacks, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<Font>(content: _result)
    }
    
    fileprivate static var method_find_variation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("find_variation")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3344325384)!
            }
            
        }
        
    }()
    
    /// Returns ``TextServer`` RID of the font cache for specific variation.
    public final func findVariation (variationCoordinates: GDictionary, faceIndex: Int32 = 0, strength: Double = 0.0, transform: Transform2D = Transform2D (xAxis: Vector2 (x: 1, y: 0), yAxis: Vector2 (x: 0, y: 1), origin: Vector2 (x: 0, y: 0)), spacingTop: Int32 = 0, spacingBottom: Int32 = 0, spacingSpace: Int32 = 0, spacingGlyph: Int32 = 0)-> RID {
        let _result: RID = RID ()
        #if true
        
        var copy_face_index: Int = Int (faceIndex)
        var copy_strength = strength
        var copy_transform = transform
        var copy_spacing_top: Int = Int (spacingTop)
        var copy_spacing_bottom: Int = Int (spacingBottom)
        var copy_spacing_space: Int = Int (spacingSpace)
        var copy_spacing_glyph: Int = Int (spacingGlyph)
        
        gi.object_method_bind_ptrcall_v (Font.method_find_variation, UnsafeMutableRawPointer (mutating: handle), &_result.content, &variationCoordinates.content, &copy_face_index, &copy_strength, &copy_transform, &copy_spacing_top, &copy_spacing_bottom, &copy_spacing_space, &copy_spacing_glyph)
        return _result
        #else
        
        var copy_face_index: Int = Int (faceIndex)
        var copy_strength = strength
        var copy_transform = transform
        var copy_spacing_top: Int = Int (spacingTop)
        var copy_spacing_bottom: Int = Int (spacingBottom)
        var copy_spacing_space: Int = Int (spacingSpace)
        var copy_spacing_glyph: Int = Int (spacingGlyph)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &variationCoordinates.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_face_index) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_strength) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_transform) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_spacing_top) { p4 in
                            _args.append (p4)
                            return withUnsafePointer (to: &copy_spacing_bottom) { p5 in
                                _args.append (p5)
                                return withUnsafePointer (to: &copy_spacing_space) { p6 in
                                    _args.append (p6)
                                    return withUnsafePointer (to: &copy_spacing_glyph) { p7 in
                                        _args.append (p7)
        
                                        gi.object_method_bind_ptrcall (Font.method_find_variation, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                                        return _result
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_rids: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rids")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns ``GArray`` of valid ``Font`` ``RID``s, which can be passed to the ``TextServer`` methods.
    public final func getRids ()-> VariantCollection<RID> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Font.method_get_rids, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<RID>(content: _result)
    }
    
    fileprivate static var method_get_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_height")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 378113874)!
            }
            
        }
        
    }()
    
    /// Returns the total average font height (ascent plus descent) in pixels.
    /// 
    /// > Note: Real height of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the height of empty line).
    /// 
    public final func getHeight (fontSize: Int32 = 16)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_font_size: Int = Int (fontSize)
        
        gi.object_method_bind_ptrcall_v (Font.method_get_height, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_font_size)
        return _result
        #else
        
        var copy_font_size: Int = Int (fontSize)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_font_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Font.method_get_height, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_ascent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ascent")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 378113874)!
            }
            
        }
        
    }()
    
    /// Returns the average font ascent (number of pixels above the baseline).
    /// 
    /// > Note: Real ascent of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the ascent of empty line).
    /// 
    public final func getAscent (fontSize: Int32 = 16)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_font_size: Int = Int (fontSize)
        
        gi.object_method_bind_ptrcall_v (Font.method_get_ascent, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_font_size)
        return _result
        #else
        
        var copy_font_size: Int = Int (fontSize)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_font_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Font.method_get_ascent, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_descent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_descent")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 378113874)!
            }
            
        }
        
    }()
    
    /// Returns the average font descent (number of pixels below the baseline).
    /// 
    /// > Note: Real descent of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate (e.g. as the descent of empty line).
    /// 
    public final func getDescent (fontSize: Int32 = 16)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_font_size: Int = Int (fontSize)
        
        gi.object_method_bind_ptrcall_v (Font.method_get_descent, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_font_size)
        return _result
        #else
        
        var copy_font_size: Int = Int (fontSize)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_font_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Font.method_get_descent, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_underline_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_underline_position")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 378113874)!
            }
            
        }
        
    }()
    
    /// Returns average pixel offset of the underline below the baseline.
    /// 
    /// > Note: Real underline position of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate.
    /// 
    public final func getUnderlinePosition (fontSize: Int32 = 16)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_font_size: Int = Int (fontSize)
        
        gi.object_method_bind_ptrcall_v (Font.method_get_underline_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_font_size)
        return _result
        #else
        
        var copy_font_size: Int = Int (fontSize)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_font_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Font.method_get_underline_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_underline_thickness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_underline_thickness")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 378113874)!
            }
            
        }
        
    }()
    
    /// Returns average thickness of the underline.
    /// 
    /// > Note: Real underline thickness of the string is context-dependent and can be significantly different from the value returned by this function. Use it only as rough estimate.
    /// 
    public final func getUnderlineThickness (fontSize: Int32 = 16)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_font_size: Int = Int (fontSize)
        
        gi.object_method_bind_ptrcall_v (Font.method_get_underline_thickness, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_font_size)
        return _result
        #else
        
        var copy_font_size: Int = Int (fontSize)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_font_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Font.method_get_underline_thickness, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_font_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_name")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns font family name.
    public final func getFontName ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (Font.method_get_font_name, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_font_style_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_style_name")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns font style name.
    public final func getFontStyleName ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (Font.method_get_font_style_name, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_ot_name_strings: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ot_name_strings")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Returns ``GDictionary`` with OpenType font name strings (localized font names, version, description, license information, sample text, etc.).
    public final func getOtNameStrings ()-> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall (Font.method_get_ot_name_strings, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_font_style: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_style")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2520224254)!
            }
            
        }
        
    }()
    
    /// Returns font style flags, see ``TextServer.FontStyle``.
    public final func getFontStyle ()-> TextServer.FontStyle {
        var _result: TextServer.FontStyle = TextServer.FontStyle ()
        gi.object_method_bind_ptrcall (Font.method_get_font_style, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_font_weight: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_weight")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns weight (boldness) of the font. A value in the `100...999` range, normal font weight is `400`, bold font weight is `700`.
    public final func getFontWeight ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Font.method_get_font_weight, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_font_stretch: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_stretch")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns font stretch amount, compared to a normal width. A percentage value between `50%` and `200%`.
    public final func getFontStretch ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Font.method_get_font_stretch, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_spacing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_spacing")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1310880908)!
            }
            
        }
        
    }()
    
    /// Returns the spacing for the given `type` (see ``TextServer.SpacingType``).
    public final func getSpacing (_ spacing: TextServer.SpacingType)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_spacing = Int64 (spacing.rawValue)
        
        gi.object_method_bind_ptrcall_v (Font.method_get_spacing, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_spacing)
        return _result
        #else
        
        var copy_spacing = Int64 (spacing.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_spacing) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Font.method_get_spacing, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_opentype_features: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_opentype_features")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Returns a set of OpenType feature tags. More info: [url=https://docs.microsoft.com/en-us/typography/opentype/spec/featuretags]OpenType feature tags[/url].
    public final func getOpentypeFeatures ()-> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall (Font.method_get_opentype_features, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_cache_capacity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cache_capacity")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets LRU cache capacity for `draw_*` methods.
    public final func setCacheCapacity (singleLine: Int32, multiLine: Int32) {
        #if true
        
        var copy_single_line: Int = Int (singleLine)
        var copy_multi_line: Int = Int (multiLine)
        
        gi.object_method_bind_ptrcall_v (Font.method_set_cache_capacity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_single_line, &copy_multi_line)
        
        #else
        
        var copy_single_line: Int = Int (singleLine)
        var copy_multi_line: Int = Int (multiLine)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_single_line) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_multi_line) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Font.method_set_cache_capacity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_string_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_string_size")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1868866121)!
            }
            
        }
        
    }()
    
    /// Returns the size of a bounding box of a single-line string, taking kerning, advance and subpixel positioning into account. See also ``getMultilineStringSize(text:alignment:width:fontSize:maxLines:brkFlags:justificationFlags:direction:orientation:)`` and ``drawString(canvasItem:pos:text:alignment:width:fontSize:modulate:justificationFlags:direction:orientation:)``.
    /// 
    /// For example, to get the string size as displayed by a single-line Label, use:
    /// 
    /// > Note: Since kerning, advance and subpixel positioning are taken into account by ``getStringSize(text:alignment:width:fontSize:justificationFlags:direction:orientation:)``, using separate ``getStringSize(text:alignment:width:fontSize:justificationFlags:direction:orientation:)`` calls on substrings of a string then adding the results together will return a different result compared to using a single ``getStringSize(text:alignment:width:fontSize:justificationFlags:direction:orientation:)`` call on the full string.
    /// 
    /// > Note: Real height of the string is context-dependent and can be significantly different from the value returned by ``getHeight(fontSize:)``.
    /// 
    public final func getStringSize (text: String, alignment: HorizontalAlignment = .left, width: Double = -1, fontSize: Int32 = 16, justificationFlags: TextServer.JustificationFlag = [.kashida, .wordBound], direction: TextServer.Direction = .auto, orientation: TextServer.Orientation = .horizontal)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        
        gi.object_method_bind_ptrcall_v (Font.method_get_string_size, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_text.content, &copy_alignment, &copy_width, &copy_font_size, &copy_justification_flags, &copy_direction, &copy_orientation)
        return _result
        #else
        
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_text.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_alignment) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_width) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_font_size) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_justification_flags) { p4 in
                            _args.append (p4)
                            return withUnsafePointer (to: &copy_direction) { p5 in
                                _args.append (p5)
                                return withUnsafePointer (to: &copy_orientation) { p6 in
                                    _args.append (p6)
        
                                    gi.object_method_bind_ptrcall (Font.method_get_string_size, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                                    return _result
                                }
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_multiline_string_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_multiline_string_size")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 519636710)!
            }
            
        }
        
    }()
    
    /// Returns the size of a bounding box of a string broken into the lines, taking kerning and advance into account.
    /// 
    /// See also ``drawMultilineString(canvasItem:pos:text:alignment:width:fontSize:maxLines:modulate:brkFlags:justificationFlags:direction:orientation:)``.
    /// 
    public final func getMultilineStringSize (text: String, alignment: HorizontalAlignment = .left, width: Double = -1, fontSize: Int32 = 16, maxLines: Int32 = -1, brkFlags: TextServer.LineBreakFlag = [.mandatory, .wordBound], justificationFlags: TextServer.JustificationFlag = [.kashida, .wordBound], direction: TextServer.Direction = .auto, orientation: TextServer.Orientation = .horizontal)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_max_lines: Int = Int (maxLines)
        var copy_brk_flags = brkFlags
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        
        gi.object_method_bind_ptrcall_v (Font.method_get_multiline_string_size, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_text.content, &copy_alignment, &copy_width, &copy_font_size, &copy_max_lines, &copy_brk_flags, &copy_justification_flags, &copy_direction, &copy_orientation)
        return _result
        #else
        
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_max_lines: Int = Int (maxLines)
        var copy_brk_flags = brkFlags
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_text.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_alignment) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_width) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_font_size) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_max_lines) { p4 in
                            _args.append (p4)
                            return withUnsafePointer (to: &copy_brk_flags) { p5 in
                                _args.append (p5)
                                return withUnsafePointer (to: &copy_justification_flags) { p6 in
                                    _args.append (p6)
                                    return withUnsafePointer (to: &copy_direction) { p7 in
                                        _args.append (p7)
                                        return withUnsafePointer (to: &copy_orientation) { p8 in
                                            _args.append (p8)
        
                                            gi.object_method_bind_ptrcall (Font.method_get_multiline_string_size, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                                            return _result
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_draw_string: GDExtensionMethodBindPtr = {
        let methodName = StringName ("draw_string")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1983721962)!
            }
            
        }
        
    }()
    
    /// Draw `text` into a canvas item using the font, at a given position, with `modulate` color, optionally clipping the width and aligning horizontally. `pos` specifies the baseline, not the top. To draw from the top, _ascent_ must be added to the Y axis.
    /// 
    /// See also ``CanvasItem/drawString(font:pos:text:alignment:width:fontSize:modulate:justificationFlags:direction:orientation:)``.
    /// 
    public final func drawString (canvasItem: RID, pos: Vector2, text: String, alignment: HorizontalAlignment = .left, width: Double = -1, fontSize: Int32 = 16, modulate: Color = Color (r: 1, g: 1, b: 1, a: 1), justificationFlags: TextServer.JustificationFlag = [.kashida, .wordBound], direction: TextServer.Direction = .auto, orientation: TextServer.Orientation = .horizontal) {
        #if true
        
        var copy_pos = pos
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_modulate = modulate
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        
        gi.object_method_bind_ptrcall_v (Font.method_draw_string, UnsafeMutableRawPointer (mutating: handle), nil, &canvasItem.content, &copy_pos, &gstr_text.content, &copy_alignment, &copy_width, &copy_font_size, &copy_modulate, &copy_justification_flags, &copy_direction, &copy_orientation)
        
        #else
        
        var copy_pos = pos
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_modulate = modulate
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &canvasItem.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_pos) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &gstr_text.content) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_alignment) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_width) { p4 in
                            _args.append (p4)
                            withUnsafePointer (to: &copy_font_size) { p5 in
                                _args.append (p5)
                                withUnsafePointer (to: &copy_modulate) { p6 in
                                    _args.append (p6)
                                    withUnsafePointer (to: &copy_justification_flags) { p7 in
                                        _args.append (p7)
                                        withUnsafePointer (to: &copy_direction) { p8 in
                                            _args.append (p8)
                                            withUnsafePointer (to: &copy_orientation) { p9 in
                                                _args.append (p9)
        
                                                gi.object_method_bind_ptrcall (Font.method_draw_string, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_draw_multiline_string: GDExtensionMethodBindPtr = {
        let methodName = StringName ("draw_multiline_string")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1171506176)!
            }
            
        }
        
    }()
    
    /// Breaks `text` into lines using rules specified by `brkFlags` and draws it into a canvas item using the font, at a given position, with `modulate` color, optionally clipping the width and aligning horizontally. `pos` specifies the baseline of the first line, not the top. To draw from the top, _ascent_ must be added to the Y axis.
    /// 
    /// See also ``CanvasItem/drawMultilineString(font:pos:text:alignment:width:fontSize:maxLines:modulate:brkFlags:justificationFlags:direction:orientation:)``.
    /// 
    public final func drawMultilineString (canvasItem: RID, pos: Vector2, text: String, alignment: HorizontalAlignment = .left, width: Double = -1, fontSize: Int32 = 16, maxLines: Int32 = -1, modulate: Color = Color (r: 1, g: 1, b: 1, a: 1), brkFlags: TextServer.LineBreakFlag = [.mandatory, .wordBound], justificationFlags: TextServer.JustificationFlag = [.kashida, .wordBound], direction: TextServer.Direction = .auto, orientation: TextServer.Orientation = .horizontal) {
        #if true
        
        var copy_pos = pos
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_max_lines: Int = Int (maxLines)
        var copy_modulate = modulate
        var copy_brk_flags = brkFlags
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        
        gi.object_method_bind_ptrcall_v (Font.method_draw_multiline_string, UnsafeMutableRawPointer (mutating: handle), nil, &canvasItem.content, &copy_pos, &gstr_text.content, &copy_alignment, &copy_width, &copy_font_size, &copy_max_lines, &copy_modulate, &copy_brk_flags, &copy_justification_flags, &copy_direction, &copy_orientation)
        
        #else
        
        var copy_pos = pos
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_max_lines: Int = Int (maxLines)
        var copy_modulate = modulate
        var copy_brk_flags = brkFlags
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &canvasItem.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_pos) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &gstr_text.content) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_alignment) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_width) { p4 in
                            _args.append (p4)
                            withUnsafePointer (to: &copy_font_size) { p5 in
                                _args.append (p5)
                                withUnsafePointer (to: &copy_max_lines) { p6 in
                                    _args.append (p6)
                                    withUnsafePointer (to: &copy_modulate) { p7 in
                                        _args.append (p7)
                                        withUnsafePointer (to: &copy_brk_flags) { p8 in
                                            _args.append (p8)
                                            withUnsafePointer (to: &copy_justification_flags) { p9 in
                                                _args.append (p9)
                                                withUnsafePointer (to: &copy_direction) { p10 in
                                                    _args.append (p10)
                                                    withUnsafePointer (to: &copy_orientation) { p11 in
                                                        _args.append (p11)
        
                                                        gi.object_method_bind_ptrcall (Font.method_draw_multiline_string, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_draw_string_outline: GDExtensionMethodBindPtr = {
        let methodName = StringName ("draw_string_outline")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 623754045)!
            }
            
        }
        
    }()
    
    /// Draw `text` outline into a canvas item using the font, at a given position, with `modulate` color and `size` outline size, optionally clipping the width and aligning horizontally. `pos` specifies the baseline, not the top. To draw from the top, _ascent_ must be added to the Y axis.
    /// 
    /// See also ``CanvasItem/drawStringOutline(font:pos:text:alignment:width:fontSize:size:modulate:justificationFlags:direction:orientation:)``.
    /// 
    public final func drawStringOutline (canvasItem: RID, pos: Vector2, text: String, alignment: HorizontalAlignment = .left, width: Double = -1, fontSize: Int32 = 16, size: Int32 = 1, modulate: Color = Color (r: 1, g: 1, b: 1, a: 1), justificationFlags: TextServer.JustificationFlag = [.kashida, .wordBound], direction: TextServer.Direction = .auto, orientation: TextServer.Orientation = .horizontal) {
        #if true
        
        var copy_pos = pos
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_size: Int = Int (size)
        var copy_modulate = modulate
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        
        gi.object_method_bind_ptrcall_v (Font.method_draw_string_outline, UnsafeMutableRawPointer (mutating: handle), nil, &canvasItem.content, &copy_pos, &gstr_text.content, &copy_alignment, &copy_width, &copy_font_size, &copy_size, &copy_modulate, &copy_justification_flags, &copy_direction, &copy_orientation)
        
        #else
        
        var copy_pos = pos
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_size: Int = Int (size)
        var copy_modulate = modulate
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &canvasItem.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_pos) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &gstr_text.content) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_alignment) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_width) { p4 in
                            _args.append (p4)
                            withUnsafePointer (to: &copy_font_size) { p5 in
                                _args.append (p5)
                                withUnsafePointer (to: &copy_size) { p6 in
                                    _args.append (p6)
                                    withUnsafePointer (to: &copy_modulate) { p7 in
                                        _args.append (p7)
                                        withUnsafePointer (to: &copy_justification_flags) { p8 in
                                            _args.append (p8)
                                            withUnsafePointer (to: &copy_direction) { p9 in
                                                _args.append (p9)
                                                withUnsafePointer (to: &copy_orientation) { p10 in
                                                    _args.append (p10)
        
                                                    gi.object_method_bind_ptrcall (Font.method_draw_string_outline, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_draw_multiline_string_outline: GDExtensionMethodBindPtr = {
        let methodName = StringName ("draw_multiline_string_outline")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3206388178)!
            }
            
        }
        
    }()
    
    /// Breaks `text` to the lines using rules specified by `brkFlags` and draws text outline into a canvas item using the font, at a given position, with `modulate` color and `size` outline size, optionally clipping the width and aligning horizontally. `pos` specifies the baseline of the first line, not the top. To draw from the top, _ascent_ must be added to the Y axis.
    /// 
    /// See also ``CanvasItem/drawMultilineStringOutline(font:pos:text:alignment:width:fontSize:maxLines:size:modulate:brkFlags:justificationFlags:direction:orientation:)``.
    /// 
    public final func drawMultilineStringOutline (canvasItem: RID, pos: Vector2, text: String, alignment: HorizontalAlignment = .left, width: Double = -1, fontSize: Int32 = 16, maxLines: Int32 = -1, size: Int32 = 1, modulate: Color = Color (r: 1, g: 1, b: 1, a: 1), brkFlags: TextServer.LineBreakFlag = [.mandatory, .wordBound], justificationFlags: TextServer.JustificationFlag = [.kashida, .wordBound], direction: TextServer.Direction = .auto, orientation: TextServer.Orientation = .horizontal) {
        #if true
        
        var copy_pos = pos
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_max_lines: Int = Int (maxLines)
        var copy_size: Int = Int (size)
        var copy_modulate = modulate
        var copy_brk_flags = brkFlags
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        
        gi.object_method_bind_ptrcall_v (Font.method_draw_multiline_string_outline, UnsafeMutableRawPointer (mutating: handle), nil, &canvasItem.content, &copy_pos, &gstr_text.content, &copy_alignment, &copy_width, &copy_font_size, &copy_max_lines, &copy_size, &copy_modulate, &copy_brk_flags, &copy_justification_flags, &copy_direction, &copy_orientation)
        
        #else
        
        var copy_pos = pos
        let gstr_text = GString (text)
        var copy_alignment = Int64 (alignment.rawValue)
        var copy_width = width
        var copy_font_size: Int = Int (fontSize)
        var copy_max_lines: Int = Int (maxLines)
        var copy_size: Int = Int (size)
        var copy_modulate = modulate
        var copy_brk_flags = brkFlags
        var copy_justification_flags = justificationFlags
        var copy_direction = Int64 (direction.rawValue)
        var copy_orientation = Int64 (orientation.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &canvasItem.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_pos) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &gstr_text.content) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_alignment) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_width) { p4 in
                            _args.append (p4)
                            withUnsafePointer (to: &copy_font_size) { p5 in
                                _args.append (p5)
                                withUnsafePointer (to: &copy_max_lines) { p6 in
                                    _args.append (p6)
                                    withUnsafePointer (to: &copy_size) { p7 in
                                        _args.append (p7)
                                        withUnsafePointer (to: &copy_modulate) { p8 in
                                            _args.append (p8)
                                            withUnsafePointer (to: &copy_brk_flags) { p9 in
                                                _args.append (p9)
                                                withUnsafePointer (to: &copy_justification_flags) { p10 in
                                                    _args.append (p10)
                                                    withUnsafePointer (to: &copy_direction) { p11 in
                                                        _args.append (p11)
                                                        withUnsafePointer (to: &copy_orientation) { p12 in
                                                            _args.append (p12)
        
                                                            gi.object_method_bind_ptrcall (Font.method_draw_multiline_string_outline, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_char_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_char_size")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3016396712)!
            }
            
        }
        
    }()
    
    /// Returns the size of a character, optionally taking kerning into account if the next character is provided.
    /// 
    /// > Note: Do not use this function to calculate width of the string character by character, use ``getStringSize(text:alignment:width:fontSize:justificationFlags:direction:orientation:)`` or ``TextLine`` instead. The height returned is the font height (see also ``getHeight(fontSize:)``) and has no relation to the glyph height.
    /// 
    public final func getCharSize (char: Int64, fontSize: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        var copy_char = char
        var copy_font_size: Int = Int (fontSize)
        
        gi.object_method_bind_ptrcall_v (Font.method_get_char_size, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_char, &copy_font_size)
        return _result
        #else
        
        var copy_char = char
        var copy_font_size: Int = Int (fontSize)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_char) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_font_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Font.method_get_char_size, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_draw_char: GDExtensionMethodBindPtr = {
        let methodName = StringName ("draw_char")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3815617597)!
            }
            
        }
        
    }()
    
    /// Draw a single Unicode character `char` into a canvas item using the font, at a given position, with `modulate` color. `pos` specifies the baseline, not the top. To draw from the top, _ascent_ must be added to the Y axis.
    /// 
    /// > Note: Do not use this function to draw strings character by character, use ``drawString(canvasItem:pos:text:alignment:width:fontSize:modulate:justificationFlags:direction:orientation:)`` or ``TextLine`` instead.
    /// 
    public final func drawChar (canvasItem: RID, pos: Vector2, char: Int64, fontSize: Int32, modulate: Color = Color (r: 1, g: 1, b: 1, a: 1))-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_pos = pos
        var copy_char = char
        var copy_font_size: Int = Int (fontSize)
        var copy_modulate = modulate
        
        gi.object_method_bind_ptrcall_v (Font.method_draw_char, UnsafeMutableRawPointer (mutating: handle), &_result, &canvasItem.content, &copy_pos, &copy_char, &copy_font_size, &copy_modulate)
        return _result
        #else
        
        var copy_pos = pos
        var copy_char = char
        var copy_font_size: Int = Int (fontSize)
        var copy_modulate = modulate
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &canvasItem.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_pos) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_char) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_font_size) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_modulate) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (Font.method_draw_char, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                            return _result
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_draw_char_outline: GDExtensionMethodBindPtr = {
        let methodName = StringName ("draw_char_outline")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 209525354)!
            }
            
        }
        
    }()
    
    /// Draw a single Unicode character `char` outline into a canvas item using the font, at a given position, with `modulate` color and `size` outline size. `pos` specifies the baseline, not the top. To draw from the top, _ascent_ must be added to the Y axis.
    /// 
    /// > Note: Do not use this function to draw strings character by character, use ``drawString(canvasItem:pos:text:alignment:width:fontSize:modulate:justificationFlags:direction:orientation:)`` or ``TextLine`` instead.
    /// 
    public final func drawCharOutline (canvasItem: RID, pos: Vector2, char: Int64, fontSize: Int32, size: Int32 = -1, modulate: Color = Color (r: 1, g: 1, b: 1, a: 1))-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_pos = pos
        var copy_char = char
        var copy_font_size: Int = Int (fontSize)
        var copy_size: Int = Int (size)
        var copy_modulate = modulate
        
        gi.object_method_bind_ptrcall_v (Font.method_draw_char_outline, UnsafeMutableRawPointer (mutating: handle), &_result, &canvasItem.content, &copy_pos, &copy_char, &copy_font_size, &copy_size, &copy_modulate)
        return _result
        #else
        
        var copy_pos = pos
        var copy_char = char
        var copy_font_size: Int = Int (fontSize)
        var copy_size: Int = Int (size)
        var copy_modulate = modulate
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &canvasItem.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_pos) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_char) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_font_size) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_size) { p4 in
                            _args.append (p4)
                            return withUnsafePointer (to: &copy_modulate) { p5 in
                                _args.append (p5)
        
                                gi.object_method_bind_ptrcall (Font.method_draw_char_outline, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                                return _result
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_has_char: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_char")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a Unicode `char` is available in the font.
    public final func hasChar (_ char: Int64)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_char = char
        
        gi.object_method_bind_ptrcall_v (Font.method_has_char, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_char)
        return _result
        #else
        
        var copy_char = char
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_char) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Font.method_has_char, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_supported_chars: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_supported_chars")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns a string containing all the characters available in the font.
    /// 
    /// If a given character is included in more than one font data source, it appears only once in the returned string.
    /// 
    public final func getSupportedChars ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (Font.method_get_supported_chars, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_is_language_supported: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_language_supported")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Returns `true`, if font supports given language ([url=https://en.wikipedia.org/wiki/ISO_639-1]ISO 639[/url] code).
    public final func isLanguageSupported (language: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_language = GString (language)
        
        gi.object_method_bind_ptrcall_v (Font.method_is_language_supported, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_language.content)
        return _result
        #else
        
        let gstr_language = GString (language)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_language.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Font.method_is_language_supported, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_script_supported: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_script_supported")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Returns `true`, if font supports given script ([url=https://en.wikipedia.org/wiki/ISO_15924]ISO 15924[/url] code).
    public final func isScriptSupported (script: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_script = GString (script)
        
        gi.object_method_bind_ptrcall_v (Font.method_is_script_supported, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_script.content)
        return _result
        #else
        
        let gstr_script = GString (script)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_script.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Font.method_is_script_supported, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_supported_feature_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_supported_feature_list")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Returns list of OpenType features supported by font.
    public final func getSupportedFeatureList ()-> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall (Font.method_get_supported_feature_list, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_supported_variation_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_supported_variation_list")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Returns list of supported [url=https://docs.microsoft.com/en-us/typography/opentype/spec/dvaraxisreg]variation coordinates[/url], each coordinate is returned as `tag: Vector3i(min_value,max_value,default_value)`.
    /// 
    /// Font variations allow for continuous change of glyph characteristics along some given design axis, such as weight, width or slant.
    /// 
    /// To print available variation axes of a variable font:
    /// 
    /// > Note: To set and get variation coordinates of a ``FontVariation``, use ``FontVariation/variationOpentype``.
    /// 
    public final func getSupportedVariationList ()-> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall (Font.method_get_supported_variation_list, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_face_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_face_count")
        return withUnsafePointer (to: &Font.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns number of faces in the TrueType / OpenType collection.
    public final func getFaceCount ()-> Int {
        var _result: Int = 0
        gi.object_method_bind_ptrcall (Font.method_get_face_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

