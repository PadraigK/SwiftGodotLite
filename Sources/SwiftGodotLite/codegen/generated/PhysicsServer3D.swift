// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A server interface for low-level 3D physics access.
/// 
/// PhysicsServer3D is the server responsible for all 3D physics. It can directly create and manipulate all physics objects:
/// 
/// - A _space_ is a self-contained world for a physics simulation. It contains bodies, areas, and joints. Its state can be queried for collision and intersection information, and several parameters of the simulation can be modified.
/// 
/// - A _shape_ is a geometric shape such as a sphere, a box, a cylinder, or a polygon. It can be used for collision detection by adding it to a body/area, possibly with an extra transformation relative to the body/area's origin. Bodies/areas can have multiple (transformed) shapes added to them, and a single shape can be added to bodies/areas multiple times with different local transformations.
/// 
/// - A _body_ is a physical object which can be in static, kinematic, or rigid mode. Its state (such as position and velocity) can be queried and updated. A force integration callback can be set to customize the body's physics.
/// 
/// - An _area_ is a region in space which can be used to detect bodies and areas entering and exiting it. A body monitoring callback can be set to report entering/exiting body shapes, and similarly an area monitoring callback can be set. Gravity and damping can be overridden within the area by setting area parameters.
/// 
/// - A _joint_ is a constraint, either between two bodies or on one body relative to a point. Parameters such as the joint bias and the rest length of a spring joint can be adjusted.
/// 
/// Physics objects in ``PhysicsServer3D`` may be created and manipulated independently; they do not have to be tied to nodes in the scene tree.
/// 
/// > Note: All the 3D physics nodes use the physics server internally. Adding a physics node to the scene tree will cause a corresponding physics object to be created in the physics server. A rigid body node registers a callback that updates the node's transform with the transform of the respective body object in the physics server (every physics update). An area node registers a callback to inform the area node about overlaps with the respective area object in the physics server. The raycast node queries the direct state of the relevant space in the physics server.
/// 
open class PhysicsServer3D: Object {
    /// The shared instance of this class
    public static var shared: PhysicsServer3D = {
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { ptr in
            PhysicsServer3D (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "PhysicsServer3D" }
    public enum JointType: Int64 {
        /// The ``Joint3D`` is a ``PinJoint3D``.
        case pin = 0 // JOINT_TYPE_PIN
        /// The ``Joint3D`` is a ``HingeJoint3D``.
        case hinge = 1 // JOINT_TYPE_HINGE
        /// The ``Joint3D`` is a ``SliderJoint3D``.
        case slider = 2 // JOINT_TYPE_SLIDER
        /// The ``Joint3D`` is a ``ConeTwistJoint3D``.
        case coneTwist = 3 // JOINT_TYPE_CONE_TWIST
        /// The ``Joint3D`` is a ``Generic6DOFJoint3D``.
        case jointType6dof = 4 // JOINT_TYPE_6DOF
        /// Represents the size of the ``PhysicsServer3D/JointType`` enum.
        case max = 5 // JOINT_TYPE_MAX
    }
    
    public enum PinJointParam: Int64 {
        /// The strength with which the pinned objects try to stay in positional relation to each other.
        /// 
        /// The higher, the stronger.
        /// 
        case bias = 0 // PIN_JOINT_BIAS
        /// The strength with which the pinned objects try to stay in velocity relation to each other.
        /// 
        /// The higher, the stronger.
        /// 
        case damping = 1 // PIN_JOINT_DAMPING
        /// If above 0, this value is the maximum value for an impulse that this Joint3D puts on its ends.
        case impulseClamp = 2 // PIN_JOINT_IMPULSE_CLAMP
    }
    
    public enum HingeJointParam: Int64 {
        /// The speed with which the two bodies get pulled together when they move in different directions.
        case bias = 0 // HINGE_JOINT_BIAS
        /// The maximum rotation across the Hinge.
        case limitUpper = 1 // HINGE_JOINT_LIMIT_UPPER
        /// The minimum rotation across the Hinge.
        case limitLower = 2 // HINGE_JOINT_LIMIT_LOWER
        /// The speed with which the rotation across the axis perpendicular to the hinge gets corrected.
        case limitBias = 3 // HINGE_JOINT_LIMIT_BIAS
        /// 
        case limitSoftness = 4 // HINGE_JOINT_LIMIT_SOFTNESS
        /// The lower this value, the more the rotation gets slowed down.
        case limitRelaxation = 5 // HINGE_JOINT_LIMIT_RELAXATION
        /// Target speed for the motor.
        case motorTargetVelocity = 6 // HINGE_JOINT_MOTOR_TARGET_VELOCITY
        /// Maximum acceleration for the motor.
        case motorMaxImpulse = 7 // HINGE_JOINT_MOTOR_MAX_IMPULSE
    }
    
    public enum HingeJointFlag: Int64 {
        /// If `true`, the Hinge has a maximum and a minimum rotation.
        case useLimit = 0 // HINGE_JOINT_FLAG_USE_LIMIT
        /// If `true`, a motor turns the Hinge.
        case enableMotor = 1 // HINGE_JOINT_FLAG_ENABLE_MOTOR
    }
    
    public enum SliderJointParam: Int64 {
        /// The maximum difference between the pivot points on their X axis before damping happens.
        case linearLimitUpper = 0 // SLIDER_JOINT_LINEAR_LIMIT_UPPER
        /// The minimum difference between the pivot points on their X axis before damping happens.
        case linearLimitLower = 1 // SLIDER_JOINT_LINEAR_LIMIT_LOWER
        /// A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.
        case linearLimitSoftness = 2 // SLIDER_JOINT_LINEAR_LIMIT_SOFTNESS
        /// The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost.
        case linearLimitRestitution = 3 // SLIDER_JOINT_LINEAR_LIMIT_RESTITUTION
        /// The amount of damping once the slider limits are surpassed.
        case linearLimitDamping = 4 // SLIDER_JOINT_LINEAR_LIMIT_DAMPING
        /// A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.
        case linearMotionSoftness = 5 // SLIDER_JOINT_LINEAR_MOTION_SOFTNESS
        /// The amount of restitution inside the slider limits.
        case linearMotionRestitution = 6 // SLIDER_JOINT_LINEAR_MOTION_RESTITUTION
        /// The amount of damping inside the slider limits.
        case linearMotionDamping = 7 // SLIDER_JOINT_LINEAR_MOTION_DAMPING
        /// A factor applied to the movement across axes orthogonal to the slider.
        case linearOrthogonalSoftness = 8 // SLIDER_JOINT_LINEAR_ORTHOGONAL_SOFTNESS
        /// The amount of restitution when movement is across axes orthogonal to the slider.
        case linearOrthogonalRestitution = 9 // SLIDER_JOINT_LINEAR_ORTHOGONAL_RESTITUTION
        /// The amount of damping when movement is across axes orthogonal to the slider.
        case linearOrthogonalDamping = 10 // SLIDER_JOINT_LINEAR_ORTHOGONAL_DAMPING
        /// The upper limit of rotation in the slider.
        case angularLimitUpper = 11 // SLIDER_JOINT_ANGULAR_LIMIT_UPPER
        /// The lower limit of rotation in the slider.
        case angularLimitLower = 12 // SLIDER_JOINT_ANGULAR_LIMIT_LOWER
        /// A factor applied to the all rotation once the limit is surpassed.
        case angularLimitSoftness = 13 // SLIDER_JOINT_ANGULAR_LIMIT_SOFTNESS
        /// The amount of restitution of the rotation when the limit is surpassed.
        case angularLimitRestitution = 14 // SLIDER_JOINT_ANGULAR_LIMIT_RESTITUTION
        /// The amount of damping of the rotation when the limit is surpassed.
        case angularLimitDamping = 15 // SLIDER_JOINT_ANGULAR_LIMIT_DAMPING
        /// A factor that gets applied to the all rotation in the limits.
        case angularMotionSoftness = 16 // SLIDER_JOINT_ANGULAR_MOTION_SOFTNESS
        /// The amount of restitution of the rotation in the limits.
        case angularMotionRestitution = 17 // SLIDER_JOINT_ANGULAR_MOTION_RESTITUTION
        /// The amount of damping of the rotation in the limits.
        case angularMotionDamping = 18 // SLIDER_JOINT_ANGULAR_MOTION_DAMPING
        /// A factor that gets applied to the all rotation across axes orthogonal to the slider.
        case angularOrthogonalSoftness = 19 // SLIDER_JOINT_ANGULAR_ORTHOGONAL_SOFTNESS
        /// The amount of restitution of the rotation across axes orthogonal to the slider.
        case angularOrthogonalRestitution = 20 // SLIDER_JOINT_ANGULAR_ORTHOGONAL_RESTITUTION
        /// The amount of damping of the rotation across axes orthogonal to the slider.
        case angularOrthogonalDamping = 21 // SLIDER_JOINT_ANGULAR_ORTHOGONAL_DAMPING
        /// Represents the size of the ``PhysicsServer3D/SliderJointParam`` enum.
        case max = 22 // SLIDER_JOINT_MAX
    }
    
    public enum ConeTwistJointParam: Int64 {
        /// Swing is rotation from side to side, around the axis perpendicular to the twist axis.
        /// 
        /// The swing span defines, how much rotation will not get corrected along the swing axis.
        /// 
        /// Could be defined as looseness in the ``ConeTwistJoint3D``.
        /// 
        /// If below 0.05, this behavior is locked.
        /// 
        case swingSpan = 0 // CONE_TWIST_JOINT_SWING_SPAN
        /// Twist is the rotation around the twist axis, this value defined how far the joint can twist.
        /// 
        /// Twist is locked if below 0.05.
        /// 
        case twistSpan = 1 // CONE_TWIST_JOINT_TWIST_SPAN
        /// The speed with which the swing or twist will take place.
        /// 
        /// The higher, the faster.
        /// 
        case bias = 2 // CONE_TWIST_JOINT_BIAS
        /// The ease with which the Joint3D twists, if it's too low, it takes more force to twist the joint.
        case softness = 3 // CONE_TWIST_JOINT_SOFTNESS
        /// Defines, how fast the swing- and twist-speed-difference on both sides gets synced.
        case relaxation = 4 // CONE_TWIST_JOINT_RELAXATION
    }
    
    public enum G6DOFJointAxisParam: Int64 {
        /// The minimum difference between the pivot points' axes.
        case linearLowerLimit = 0 // G6DOF_JOINT_LINEAR_LOWER_LIMIT
        /// The maximum difference between the pivot points' axes.
        case linearUpperLimit = 1 // G6DOF_JOINT_LINEAR_UPPER_LIMIT
        /// A factor that gets applied to the movement across the axes. The lower, the slower the movement.
        case linearLimitSoftness = 2 // G6DOF_JOINT_LINEAR_LIMIT_SOFTNESS
        /// The amount of restitution on the axes movement. The lower, the more velocity-energy gets lost.
        case linearRestitution = 3 // G6DOF_JOINT_LINEAR_RESTITUTION
        /// The amount of damping that happens at the linear motion across the axes.
        case linearDamping = 4 // G6DOF_JOINT_LINEAR_DAMPING
        /// The velocity that the joint's linear motor will attempt to reach.
        case linearMotorTargetVelocity = 5 // G6DOF_JOINT_LINEAR_MOTOR_TARGET_VELOCITY
        /// The maximum force that the linear motor can apply while trying to reach the target velocity.
        case linearMotorForceLimit = 6 // G6DOF_JOINT_LINEAR_MOTOR_FORCE_LIMIT
        /// The minimum rotation in negative direction to break loose and rotate around the axes.
        case angularLowerLimit = 10 // G6DOF_JOINT_ANGULAR_LOWER_LIMIT
        /// The minimum rotation in positive direction to break loose and rotate around the axes.
        case angularUpperLimit = 11 // G6DOF_JOINT_ANGULAR_UPPER_LIMIT
        /// A factor that gets multiplied onto all rotations across the axes.
        case angularLimitSoftness = 12 // G6DOF_JOINT_ANGULAR_LIMIT_SOFTNESS
        /// The amount of rotational damping across the axes. The lower, the more damping occurs.
        case angularDamping = 13 // G6DOF_JOINT_ANGULAR_DAMPING
        /// The amount of rotational restitution across the axes. The lower, the more restitution occurs.
        case angularRestitution = 14 // G6DOF_JOINT_ANGULAR_RESTITUTION
        /// The maximum amount of force that can occur, when rotating around the axes.
        case angularForceLimit = 15 // G6DOF_JOINT_ANGULAR_FORCE_LIMIT
        /// When correcting the crossing of limits in rotation across the axes, this error tolerance factor defines how much the correction gets slowed down. The lower, the slower.
        case angularErp = 16 // G6DOF_JOINT_ANGULAR_ERP
        /// Target speed for the motor at the axes.
        case angularMotorTargetVelocity = 17 // G6DOF_JOINT_ANGULAR_MOTOR_TARGET_VELOCITY
        /// Maximum acceleration for the motor at the axes.
        case angularMotorForceLimit = 18 // G6DOF_JOINT_ANGULAR_MOTOR_FORCE_LIMIT
    }
    
    public enum G6DOFJointAxisFlag: Int64 {
        /// If set, linear motion is possible within the given limits.
        case linearLimit = 0 // G6DOF_JOINT_FLAG_ENABLE_LINEAR_LIMIT
        /// If set, rotational motion is possible.
        case angularLimit = 1 // G6DOF_JOINT_FLAG_ENABLE_ANGULAR_LIMIT
        /// If set, there is a rotational motor across these axes.
        case motor = 4 // G6DOF_JOINT_FLAG_ENABLE_MOTOR
        /// If set, there is a linear motor on this axis that targets a specific velocity.
        case linearMotor = 5 // G6DOF_JOINT_FLAG_ENABLE_LINEAR_MOTOR
    }
    
    public enum ShapeType: Int64 {
        /// The ``Shape3D`` is a ``WorldBoundaryShape3D``.
        case worldBoundary = 0 // SHAPE_WORLD_BOUNDARY
        /// The ``Shape3D`` is a ``SeparationRayShape3D``.
        case separationRay = 1 // SHAPE_SEPARATION_RAY
        /// The ``Shape3D`` is a ``SphereShape3D``.
        case sphere = 2 // SHAPE_SPHERE
        /// The ``Shape3D`` is a ``BoxShape3D``.
        case box = 3 // SHAPE_BOX
        /// The ``Shape3D`` is a ``CapsuleShape3D``.
        case capsule = 4 // SHAPE_CAPSULE
        /// The ``Shape3D`` is a ``CylinderShape3D``.
        case cylinder = 5 // SHAPE_CYLINDER
        /// The ``Shape3D`` is a ``ConvexPolygonShape3D``.
        case convexPolygon = 6 // SHAPE_CONVEX_POLYGON
        /// The ``Shape3D`` is a ``ConcavePolygonShape3D``.
        case concavePolygon = 7 // SHAPE_CONCAVE_POLYGON
        /// The ``Shape3D`` is a ``HeightMapShape3D``.
        case heightmap = 8 // SHAPE_HEIGHTMAP
        /// The ``Shape3D`` is used internally for a soft body. Any attempt to create this kind of shape results in an error.
        case softBody = 9 // SHAPE_SOFT_BODY
        /// This constant is used internally by the engine. Any attempt to create this kind of shape results in an error.
        case custom = 10 // SHAPE_CUSTOM
    }
    
    public enum AreaParameter: Int64 {
        /// Constant to set/get gravity override mode in an area. See ``PhysicsServer3D/AreaSpaceOverrideMode`` for possible values.
        case gravityOverrideMode = 0 // AREA_PARAM_GRAVITY_OVERRIDE_MODE
        /// Constant to set/get gravity strength in an area.
        case gravity = 1 // AREA_PARAM_GRAVITY
        /// Constant to set/get gravity vector/center in an area.
        case gravityVector = 2 // AREA_PARAM_GRAVITY_VECTOR
        /// Constant to set/get whether the gravity vector of an area is a direction, or a center point.
        case gravityIsPoint = 3 // AREA_PARAM_GRAVITY_IS_POINT
        /// Constant to set/get the distance at which the gravity strength is equal to the gravity controlled by .areaParamGravity. For example, on a planet 100 meters in radius with a surface gravity of 4.0 m/s², set the gravity to 4.0 and the unit distance to 100.0. The gravity will have falloff according to the inverse square law, so in the example, at 200 meters from the center the gravity will be 1.0 m/s² (twice the distance, 1/4th the gravity), at 50 meters it will be 16.0 m/s² (half the distance, 4x the gravity), and so on.
        /// 
        /// The above is true only when the unit distance is a positive number. When this is set to 0.0, the gravity will be constant regardless of distance.
        /// 
        case gravityPointUnitDistance = 4 // AREA_PARAM_GRAVITY_POINT_UNIT_DISTANCE
        /// Constant to set/get linear damping override mode in an area. See ``PhysicsServer3D/AreaSpaceOverrideMode`` for possible values.
        case linearDampOverrideMode = 5 // AREA_PARAM_LINEAR_DAMP_OVERRIDE_MODE
        /// Constant to set/get the linear damping factor of an area.
        case linearDamp = 6 // AREA_PARAM_LINEAR_DAMP
        /// Constant to set/get angular damping override mode in an area. See ``PhysicsServer3D/AreaSpaceOverrideMode`` for possible values.
        case angularDampOverrideMode = 7 // AREA_PARAM_ANGULAR_DAMP_OVERRIDE_MODE
        /// Constant to set/get the angular damping factor of an area.
        case angularDamp = 8 // AREA_PARAM_ANGULAR_DAMP
        /// Constant to set/get the priority (order of processing) of an area.
        case priority = 9 // AREA_PARAM_PRIORITY
        /// Constant to set/get the magnitude of area-specific wind force.
        case windForceMagnitude = 10 // AREA_PARAM_WIND_FORCE_MAGNITUDE
        /// Constant to set/get the 3D vector that specifies the origin from which an area-specific wind blows.
        case windSource = 11 // AREA_PARAM_WIND_SOURCE
        /// Constant to set/get the 3D vector that specifies the direction in which an area-specific wind blows.
        case windDirection = 12 // AREA_PARAM_WIND_DIRECTION
        /// Constant to set/get the exponential rate at which wind force decreases with distance from its origin.
        case windAttenuationFactor = 13 // AREA_PARAM_WIND_ATTENUATION_FACTOR
    }
    
    public enum AreaSpaceOverrideMode: Int64 {
        /// This area does not affect gravity/damp. These are generally areas that exist only to detect collisions, and objects entering or exiting them.
        case disabled = 0 // AREA_SPACE_OVERRIDE_DISABLED
        /// This area adds its gravity/damp values to whatever has been calculated so far. This way, many overlapping areas can combine their physics to make interesting effects.
        case combine = 1 // AREA_SPACE_OVERRIDE_COMBINE
        /// This area adds its gravity/damp values to whatever has been calculated so far. Then stops taking into account the rest of the areas, even the default one.
        case combineReplace = 2 // AREA_SPACE_OVERRIDE_COMBINE_REPLACE
        /// This area replaces any gravity/damp, even the default one, and stops taking into account the rest of the areas.
        case replace = 3 // AREA_SPACE_OVERRIDE_REPLACE
        /// This area replaces any gravity/damp calculated so far, but keeps calculating the rest of the areas, down to the default one.
        case replaceCombine = 4 // AREA_SPACE_OVERRIDE_REPLACE_COMBINE
    }
    
    public enum BodyMode: Int64 {
        /// Constant for static bodies. In this mode, a body can be only moved by user code and doesn't collide with other bodies along its path when moved.
        case `static` = 0 // BODY_MODE_STATIC
        /// Constant for kinematic bodies. In this mode, a body can be only moved by user code and collides with other bodies along its path.
        case kinematic = 1 // BODY_MODE_KINEMATIC
        /// Constant for rigid bodies. In this mode, a body can be pushed by other bodies and has forces applied.
        case rigid = 2 // BODY_MODE_RIGID
        /// Constant for linear rigid bodies. In this mode, a body can not rotate, and only its linear velocity is affected by external forces.
        case rigidLinear = 3 // BODY_MODE_RIGID_LINEAR
    }
    
    public enum BodyParameter: Int64 {
        /// Constant to set/get a body's bounce factor.
        case bounce = 0 // BODY_PARAM_BOUNCE
        /// Constant to set/get a body's friction.
        case friction = 1 // BODY_PARAM_FRICTION
        /// Constant to set/get a body's mass.
        case mass = 2 // BODY_PARAM_MASS
        /// Constant to set/get a body's inertia.
        case inertia = 3 // BODY_PARAM_INERTIA
        /// Constant to set/get a body's center of mass position in the body's local coordinate system.
        case centerOfMass = 4 // BODY_PARAM_CENTER_OF_MASS
        /// Constant to set/get a body's gravity multiplier.
        case gravityScale = 5 // BODY_PARAM_GRAVITY_SCALE
        /// Constant to set/get a body's linear damping mode. See ``PhysicsServer3D/BodyDampMode`` for possible values.
        case linearDampMode = 6 // BODY_PARAM_LINEAR_DAMP_MODE
        /// Constant to set/get a body's angular damping mode. See ``PhysicsServer3D/BodyDampMode`` for possible values.
        case angularDampMode = 7 // BODY_PARAM_ANGULAR_DAMP_MODE
        /// Constant to set/get a body's linear damping factor.
        case linearDamp = 8 // BODY_PARAM_LINEAR_DAMP
        /// Constant to set/get a body's angular damping factor.
        case angularDamp = 9 // BODY_PARAM_ANGULAR_DAMP
        /// Represents the size of the ``PhysicsServer3D/BodyParameter`` enum.
        case max = 10 // BODY_PARAM_MAX
    }
    
    public enum BodyDampMode: Int64 {
        /// The body's damping value is added to any value set in areas or the default value.
        case combine = 0 // BODY_DAMP_MODE_COMBINE
        /// The body's damping value replaces any value set in areas or the default value.
        case replace = 1 // BODY_DAMP_MODE_REPLACE
    }
    
    public enum BodyState: Int64 {
        /// Constant to set/get the current transform matrix of the body.
        case transform = 0 // BODY_STATE_TRANSFORM
        /// Constant to set/get the current linear velocity of the body.
        case linearVelocity = 1 // BODY_STATE_LINEAR_VELOCITY
        /// Constant to set/get the current angular velocity of the body.
        case angularVelocity = 2 // BODY_STATE_ANGULAR_VELOCITY
        /// Constant to sleep/wake up a body, or to get whether it is sleeping.
        case sleeping = 3 // BODY_STATE_SLEEPING
        /// Constant to set/get whether the body can sleep.
        case canSleep = 4 // BODY_STATE_CAN_SLEEP
    }
    
    public enum AreaBodyStatus: Int64 {
        /// The value of the first parameter and area callback function receives, when an object enters one of its shapes.
        case added = 0 // AREA_BODY_ADDED
        /// The value of the first parameter and area callback function receives, when an object exits one of its shapes.
        case removed = 1 // AREA_BODY_REMOVED
    }
    
    public enum ProcessInfo: Int64 {
        /// Constant to get the number of objects that are not sleeping.
        case activeObjects = 0 // INFO_ACTIVE_OBJECTS
        /// Constant to get the number of possible collisions.
        case collisionPairs = 1 // INFO_COLLISION_PAIRS
        /// Constant to get the number of space regions where a collision could occur.
        case islandCount = 2 // INFO_ISLAND_COUNT
    }
    
    public enum SpaceParameter: Int64 {
        /// Constant to set/get the maximum distance a pair of bodies has to move before their collision status has to be recalculated.
        case contactRecycleRadius = 0 // SPACE_PARAM_CONTACT_RECYCLE_RADIUS
        /// Constant to set/get the maximum distance a shape can be from another before they are considered separated and the contact is discarded.
        case contactMaxSeparation = 1 // SPACE_PARAM_CONTACT_MAX_SEPARATION
        /// Constant to set/get the maximum distance a shape can penetrate another shape before it is considered a collision.
        case contactMaxAllowedPenetration = 2 // SPACE_PARAM_CONTACT_MAX_ALLOWED_PENETRATION
        /// Constant to set/get the default solver bias for all physics contacts. A solver bias is a factor controlling how much two objects "rebound", after overlapping, to avoid leaving them in that state because of numerical imprecision.
        case contactDefaultBias = 3 // SPACE_PARAM_CONTACT_DEFAULT_BIAS
        /// Constant to set/get the threshold linear velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.
        case bodyLinearVelocitySleepThreshold = 4 // SPACE_PARAM_BODY_LINEAR_VELOCITY_SLEEP_THRESHOLD
        /// Constant to set/get the threshold angular velocity of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after the time given.
        case bodyAngularVelocitySleepThreshold = 5 // SPACE_PARAM_BODY_ANGULAR_VELOCITY_SLEEP_THRESHOLD
        /// Constant to set/get the maximum time of activity. A body marked as potentially inactive for both linear and angular velocity will be put to sleep after this time.
        case bodyTimeToSleep = 6 // SPACE_PARAM_BODY_TIME_TO_SLEEP
        /// Constant to set/get the number of solver iterations for contacts and constraints. The greater the number of iterations, the more accurate the collisions and constraints will be. However, a greater number of iterations requires more CPU power, which can decrease performance.
        case solverIterations = 7 // SPACE_PARAM_SOLVER_ITERATIONS
    }
    
    public enum BodyAxis: Int64 {
        /// 
        case linearX = 1 // BODY_AXIS_LINEAR_X
        /// 
        case linearY = 2 // BODY_AXIS_LINEAR_Y
        /// 
        case linearZ = 4 // BODY_AXIS_LINEAR_Z
        /// 
        case angularX = 8 // BODY_AXIS_ANGULAR_X
        /// 
        case angularY = 16 // BODY_AXIS_ANGULAR_Y
        /// 
        case angularZ = 32 // BODY_AXIS_ANGULAR_Z
    }
    
    /* Methods */
    fileprivate static var method_world_boundary_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("world_boundary_shape_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func worldBoundaryShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_world_boundary_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_separation_ray_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("separation_ray_shape_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func separationRayShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_separation_ray_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_sphere_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("sphere_shape_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func sphereShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_sphere_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_box_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("box_shape_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func boxShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_box_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_capsule_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("capsule_shape_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func capsuleShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_capsule_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_cylinder_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("cylinder_shape_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func cylinderShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_cylinder_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_convex_polygon_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("convex_polygon_shape_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func convexPolygonShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_convex_polygon_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_concave_polygon_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("concave_polygon_shape_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func concavePolygonShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_concave_polygon_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_heightmap_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("heightmap_shape_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func heightmapShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_heightmap_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_custom_shape_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("custom_shape_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func customShapeCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_custom_shape_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_shape_set_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("shape_set_data")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3175752987)!
            }
            
        }
        
    }()
    
    /// Sets the shape data that defines its shape and size. The data to be passed depends on the kind of shape created ``shapeGetType(shape:)``.
    public static func shapeSetData (shape: RID, data: Variant) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_shape_set_data, UnsafeMutableRawPointer (mutating: shared.handle), nil, &shape.content, &data.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &shape.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &data.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_shape_set_data, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_shape_get_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("shape_get_type")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3418923367)!
            }
            
        }
        
    }()
    
    /// Returns the type of shape (see ``PhysicsServer3D/ShapeType`` constants).
    public static func shapeGetType (shape: RID)-> PhysicsServer3D.ShapeType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_shape_get_type, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &shape.content)
        return PhysicsServer3D.ShapeType (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &shape.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_shape_get_type, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return PhysicsServer3D.ShapeType (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_shape_get_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("shape_get_data")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4171304767)!
            }
            
        }
        
    }()
    
    /// Returns the shape data.
    public static func shapeGetData (shape: RID)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_shape_get_data, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &shape.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &shape.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_shape_get_data, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_space_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a space. A space is a collection of parameters for the physics engine that can be assigned to an area or a body. It can be assigned to an area with ``areaSetSpace(area:space:)``, or to a body with ``bodySetSpace(body:space:)``.
    public static func spaceCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_space_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_space_set_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_set_active")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Marks a space as active. It will not have an effect, unless it is assigned to an area or body.
    public static func spaceSetActive (space: RID, active: Bool) {
        #if false
        
        var copy_active = active
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_space_set_active, UnsafeMutableRawPointer (mutating: shared.handle), nil, &space.content, &copy_active)
        
        #else
        
        var copy_active = active
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &space.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_active) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_space_set_active, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_space_is_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_is_active")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns whether the space is active.
    public static func spaceIsActive (space: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_space_is_active, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &space.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &space.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_space_is_active, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_space_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_set_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2406017470)!
            }
            
        }
        
    }()
    
    /// Sets the value for a space parameter. A list of available parameters is on the ``PhysicsServer3D/SpaceParameter`` constants.
    public static func spaceSetParam (space: RID, param: PhysicsServer3D.SpaceParameter, value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_space_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &space.content, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &space.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_space_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_space_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_get_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1523206731)!
            }
            
        }
        
    }()
    
    /// Returns the value of a space parameter.
    public static func spaceGetParam (space: RID, param: PhysicsServer3D.SpaceParameter)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_space_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &space.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &space.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_space_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_space_get_direct_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("space_get_direct_state")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2048616813)!
            }
            
        }
        
    }()
    
    /// Returns the state of a space, a ``PhysicsDirectSpaceState3D``. This object can be used to make collision/intersection queries.
    public static func spaceGetDirectState (space: RID)-> PhysicsDirectSpaceState3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_space_get_direct_state, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &space.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &space.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_space_get_direct_state, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_area_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates an ``Area3D``.
    public static func areaCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_area_set_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_space")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Assigns a space to the area.
    public static func areaSetSpace (area: RID, space: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_space, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &space.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &space.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_space, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_space")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the space assigned to the area.
    public static func areaGetSpace (area: RID)-> RID {
        let _result: RID = RID ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_get_space, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_get_space, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_add_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_add_shape")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3711419014)!
            }
            
        }
        
    }()
    
    /// Adds a shape to the area, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
    public static func areaAddShape (area: RID, shape: RID, transform: Transform3D = Transform3D (xAxis: Vector3 (x: 1, y: 0, z: 0), yAxis: Vector3 (x: 0, y: 1, z: 0), zAxis: Vector3(x: 0, y: 0, z: 1), origin: Vector3 (x: 0, y: 0, z: 0)), disabled: Bool = false) {
        #if false
        
        var copy_transform = transform
        var copy_disabled = disabled
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_add_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &shape.content, &copy_transform, &copy_disabled)
        
        #else
        
        var copy_transform = transform
        var copy_disabled = disabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &shape.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_transform) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_disabled) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_add_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_shape")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2310537182)!
            }
            
        }
        
    }()
    
    /// Substitutes a given area shape by another. The old shape is selected by its index, the new one by its ``RID``.
    public static func areaSetShape (area: RID, shapeIdx: Int32, shape: RID) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_shape_idx, &shape.content)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &shape.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_shape_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_shape_transform")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 675327471)!
            }
            
        }
        
    }()
    
    /// Sets the transform matrix for an area shape.
    public static func areaSetShapeTransform (area: RID, shapeIdx: Int32, transform: Transform3D) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_transform = transform
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_shape_idx, &copy_transform)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_transform) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_shape_disabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_shape_disabled")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2658558584)!
            }
            
        }
        
    }()
    
    /// 
    public static func areaSetShapeDisabled (area: RID, shapeIdx: Int32, disabled: Bool) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_disabled = disabled
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_shape_disabled, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_shape_idx, &copy_disabled)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_disabled = disabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_disabled) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_shape_disabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_shape_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_shape_count")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the number of shapes assigned to an area.
    public static func areaGetShapeCount (area: RID)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_get_shape_count, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_get_shape_count, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_shape")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1066463050)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the nth shape of an area.
    public static func areaGetShape (area: RID, shapeIdx: Int32)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_get_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &area.content, &copy_shape_idx)
        return _result
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_get_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_shape_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_shape_transform")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1050775521)!
            }
            
        }
        
    }()
    
    /// Returns the transform matrix of a shape within an area.
    public static func areaGetShapeTransform (area: RID, shapeIdx: Int32)-> Transform3D {
        var _result: Transform3D = Transform3D ()
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_get_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content, &copy_shape_idx)
        return _result
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_get_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_remove_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_remove_shape")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Removes a shape from an area. It does not delete the shape, so it can be reassigned later.
    public static func areaRemoveShape (area: RID, shapeIdx: Int32) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_remove_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_shape_idx)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_remove_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_clear_shapes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_clear_shapes")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Removes all shapes from an area. It does not delete the shapes, so they can be reassigned later.
    public static func areaClearShapes (area: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_clear_shapes, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_clear_shapes, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_collision_layer")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Assigns the area to one or many physics layers.
    public static func areaSetCollisionLayer (area: RID, layer: UInt32) {
        #if false
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_layer)
        
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_layer) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_collision_layer")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the physics layer or layers an area belongs to.
    public static func areaGetCollisionLayer (area: RID)-> UInt32 {
        var _result: UInt32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_get_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_get_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_collision_mask")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets which physics layers the area will monitor.
    public static func areaSetCollisionMask (area: RID, mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mask) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_collision_mask")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the physics layer or layers an area can contact with.
    public static func areaGetCollisionMask (area: RID)-> UInt32 {
        var _result: UInt32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_get_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_get_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2980114638)!
            }
            
        }
        
    }()
    
    /// Sets the value for an area parameter. A list of available parameters is on the ``PhysicsServer3D/AreaParameter`` constants.
    public static func areaSetParam (area: RID, param: PhysicsServer3D.AreaParameter, value: Variant) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_param, &value.content)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &value.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_transform")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3935195649)!
            }
            
        }
        
    }()
    
    /// Sets the transform matrix for an area.
    public static func areaSetTransform (area: RID, transform: Transform3D) {
        #if false
        
        var copy_transform = transform
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_transform, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_transform)
        
        #else
        
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_transform) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 890056067)!
            }
            
        }
        
    }()
    
    /// Returns an area parameter value. A list of available parameters is on the ``PhysicsServer3D/AreaParameter`` constants.
    public static func areaGetParam (area: RID, param: PhysicsServer3D.AreaParameter)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &area.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_transform")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1128465797)!
            }
            
        }
        
    }()
    
    /// Returns the transform matrix for an area.
    public static func areaGetTransform (area: RID)-> Transform3D {
        var _result: Transform3D = Transform3D ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_get_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_get_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_attach_object_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_attach_object_instance_id")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Assigns the area to a descendant of ``Object``, so it can exist in the node tree.
    public static func areaAttachObjectInstanceId (area: RID, id: UInt) {
        #if false
        
        var copy_id = id
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_attach_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_id)
        
        #else
        
        var copy_id = id
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_attach_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_get_object_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_get_object_instance_id")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Gets the instance ID of the object the area is assigned to.
    public static func areaGetObjectInstanceId (area: RID)-> UInt {
        var _result: UInt = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_get_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &area.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_get_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_monitor_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_monitor_callback")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3379118538)!
            }
            
        }
        
    }()
    
    /// Sets the area's body monitor callback. This callback will be called when any other (shape of a) body enters or exits (a shape of) the given area, and must take the following five parameters:
    /// 
    /// 1. an integer `status`: either .areaBodyAdded or .areaBodyRemoved depending on whether the other body shape entered or exited the area,
    /// 
    /// 2. an ``RID`` `body_rid`: the ``RID`` of the body that entered or exited the area,
    /// 
    /// 3. an integer `instance_id`: the `ObjectID` attached to the body,
    /// 
    /// 4. an integer `body_shape_idx`: the index of the shape of the body that entered or exited the area,
    /// 
    /// 5. an integer `self_shape_idx`: the index of the shape of the area where the body entered or exited.
    /// 
    /// By counting (or keeping track of) the shapes that enter and exit, it can be determined if a body (with all its shapes) is entering for the first time or exiting for the last time.
    /// 
    public static func areaSetMonitorCallback (area: RID, callback: Callable) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_monitor_callback, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &callback.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &callback.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_monitor_callback, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_area_monitor_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_area_monitor_callback")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3379118538)!
            }
            
        }
        
    }()
    
    /// Sets the area's area monitor callback. This callback will be called when any other (shape of an) area enters or exits (a shape of) the given area, and must take the following five parameters:
    /// 
    /// 1. an integer `status`: either .areaBodyAdded or .areaBodyRemoved depending on whether the other area's shape entered or exited the area,
    /// 
    /// 2. an ``RID`` `area_rid`: the ``RID`` of the other area that entered or exited the area,
    /// 
    /// 3. an integer `instance_id`: the `ObjectID` attached to the other area,
    /// 
    /// 4. an integer `area_shape_idx`: the index of the shape of the other area that entered or exited the area,
    /// 
    /// 5. an integer `self_shape_idx`: the index of the shape of the area where the other area entered or exited.
    /// 
    /// By counting (or keeping track of) the shapes that enter and exit, it can be determined if an area (with all its shapes) is entering for the first time or exiting for the last time.
    /// 
    public static func areaSetAreaMonitorCallback (area: RID, callback: Callable) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_area_monitor_callback, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &callback.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &callback.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_area_monitor_callback, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_monitorable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_monitorable")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// 
    public static func areaSetMonitorable (area: RID, monitorable: Bool) {
        #if false
        
        var copy_monitorable = monitorable
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_monitorable, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_monitorable)
        
        #else
        
        var copy_monitorable = monitorable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_monitorable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_monitorable, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_area_set_ray_pickable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("area_set_ray_pickable")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets object pickable with rays.
    public static func areaSetRayPickable (area: RID, enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_area_set_ray_pickable, UnsafeMutableRawPointer (mutating: shared.handle), nil, &area.content, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &area.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_area_set_ray_pickable, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func bodyCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_body_set_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_space")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Assigns a space to the body (see ``spaceCreate()``).
    public static func bodySetSpace (body: RID, space: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_space, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &space.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &space.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_space, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_space")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the space assigned to a body.
    public static func bodyGetSpace (body: RID)-> RID {
        let _result: RID = RID ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_space, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_space, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_mode")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 606803466)!
            }
            
        }
        
    }()
    
    /// Sets the body mode, from one of the ``PhysicsServer3D/BodyMode`` constants.
    public static func bodySetMode (body: RID, mode: PhysicsServer3D.BodyMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_mode, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mode) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_mode, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_mode")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2488819728)!
            }
            
        }
        
    }()
    
    /// Returns the body mode.
    public static func bodyGetMode (body: RID)-> PhysicsServer3D.BodyMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_mode, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return PhysicsServer3D.BodyMode (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_mode, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return PhysicsServer3D.BodyMode (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_collision_layer")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets the physics layer or layers a body belongs to.
    public static func bodySetCollisionLayer (body: RID, layer: UInt32) {
        #if false
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_layer)
        
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_layer) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_collision_layer")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the physics layer or layers a body belongs to.
    public static func bodyGetCollisionLayer (body: RID)-> UInt32 {
        var _result: UInt32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_collision_layer, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_collision_mask")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets the physics layer or layers a body can collide with.
    public static func bodySetCollisionMask (body: RID, mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mask) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_collision_mask")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the physics layer or layers a body can collide with.
    public static func bodyGetCollisionMask (body: RID)-> UInt32 {
        var _result: UInt32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_collision_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_collision_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_collision_priority")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the body's collision priority.
    public static func bodySetCollisionPriority (body: RID, priority: Double) {
        #if false
        
        var copy_priority = priority
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_collision_priority, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_priority)
        
        #else
        
        var copy_priority = priority
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_priority) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_collision_priority, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_collision_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_collision_priority")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the body's collision priority.
    public static func bodyGetCollisionPriority (body: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_collision_priority, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_collision_priority, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_add_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_add_shape")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3711419014)!
            }
            
        }
        
    }()
    
    /// Adds a shape to the body, along with a transform matrix. Shapes are usually referenced by their index, so you should track which shape has a given index.
    public static func bodyAddShape (body: RID, shape: RID, transform: Transform3D = Transform3D (xAxis: Vector3 (x: 1, y: 0, z: 0), yAxis: Vector3 (x: 0, y: 1, z: 0), zAxis: Vector3(x: 0, y: 0, z: 1), origin: Vector3 (x: 0, y: 0, z: 0)), disabled: Bool = false) {
        #if false
        
        var copy_transform = transform
        var copy_disabled = disabled
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_add_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &shape.content, &copy_transform, &copy_disabled)
        
        #else
        
        var copy_transform = transform
        var copy_disabled = disabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &shape.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_transform) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_disabled) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_add_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_shape")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2310537182)!
            }
            
        }
        
    }()
    
    /// Substitutes a given body shape by another. The old shape is selected by its index, the new one by its ``RID``.
    public static func bodySetShape (body: RID, shapeIdx: Int32, shape: RID) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_shape_idx, &shape.content)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &shape.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_shape_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_shape_transform")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 675327471)!
            }
            
        }
        
    }()
    
    /// Sets the transform matrix for a body shape.
    public static func bodySetShapeTransform (body: RID, shapeIdx: Int32, transform: Transform3D) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_transform = transform
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_shape_idx, &copy_transform)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_transform) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_shape_disabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_shape_disabled")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2658558584)!
            }
            
        }
        
    }()
    
    /// 
    public static func bodySetShapeDisabled (body: RID, shapeIdx: Int32, disabled: Bool) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_disabled = disabled
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_shape_disabled, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_shape_idx, &copy_disabled)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var copy_disabled = disabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_disabled) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_shape_disabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_shape_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_shape_count")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the number of shapes assigned to a body.
    public static func bodyGetShapeCount (body: RID)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_shape_count, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_shape_count, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_shape")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1066463050)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the nth shape of a body.
    public static func bodyGetShape (body: RID, shapeIdx: Int32)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &body.content, &copy_shape_idx)
        return _result
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_shape_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_shape_transform")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1050775521)!
            }
            
        }
        
    }()
    
    /// Returns the transform matrix of a body shape.
    public static func bodyGetShapeTransform (body: RID, shapeIdx: Int32)-> Transform3D {
        var _result: Transform3D = Transform3D ()
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content, &copy_shape_idx)
        return _result
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_shape_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_remove_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_remove_shape")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Removes a shape from a body. The shape is not deleted, so it can be reused afterwards.
    public static func bodyRemoveShape (body: RID, shapeIdx: Int32) {
        #if false
        
        var copy_shape_idx: Int = Int (shapeIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_remove_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_shape_idx)
        
        #else
        
        var copy_shape_idx: Int = Int (shapeIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_shape_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_remove_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_clear_shapes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_clear_shapes")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Removes all shapes from a body.
    public static func bodyClearShapes (body: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_clear_shapes, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_clear_shapes, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_body_attach_object_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_attach_object_instance_id")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Assigns the area to a descendant of ``Object``, so it can exist in the node tree.
    public static func bodyAttachObjectInstanceId (body: RID, id: UInt) {
        #if false
        
        var copy_id = id
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_attach_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_id)
        
        #else
        
        var copy_id = id
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_attach_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_object_instance_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_object_instance_id")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Gets the instance ID of the object the area is assigned to.
    public static func bodyGetObjectInstanceId (body: RID)-> UInt {
        var _result: UInt = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_object_instance_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_enable_continuous_collision_detection: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_enable_continuous_collision_detection")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `true`, the continuous collision detection mode is enabled.
    /// 
    /// Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
    /// 
    public static func bodySetEnableContinuousCollisionDetection (body: RID, enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_enable_continuous_collision_detection, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_enable_continuous_collision_detection, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_is_continuous_collision_detection_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_is_continuous_collision_detection_enabled")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// If `true`, the continuous collision detection mode is enabled.
    public static func bodyIsContinuousCollisionDetectionEnabled (body: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_is_continuous_collision_detection_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_is_continuous_collision_detection_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 910941953)!
            }
            
        }
        
    }()
    
    /// Sets a body parameter. A list of available parameters is on the ``PhysicsServer3D/BodyParameter`` constants.
    public static func bodySetParam (body: RID, param: PhysicsServer3D.BodyParameter, value: Variant) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_param, &value.content)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &value.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3385027841)!
            }
            
        }
        
    }()
    
    /// Returns the value of a body parameter. A list of available parameters is on the ``PhysicsServer3D/BodyParameter`` constants.
    public static func bodyGetParam (body: RID, param: PhysicsServer3D.BodyParameter)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &body.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_reset_mass_properties: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_reset_mass_properties")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Restores the default inertia and center of mass based on shapes to cancel any custom values previously set using ``bodySetParam(body:param:value:)``.
    public static func bodyResetMassProperties (body: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_reset_mass_properties, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_reset_mass_properties, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_state")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 599977762)!
            }
            
        }
        
    }()
    
    /// Sets a body state (see ``PhysicsServer3D/BodyState`` constants).
    public static func bodySetState (body: RID, state: PhysicsServer3D.BodyState, value: Variant) {
        #if false
        
        var copy_state = Int64 (state.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_state, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_state, &value.content)
        
        #else
        
        var copy_state = Int64 (state.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_state) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &value.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_state, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_state")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1850449534)!
            }
            
        }
        
    }()
    
    /// Returns a body state.
    public static func bodyGetState (body: RID, state: PhysicsServer3D.BodyState)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        var copy_state = Int64 (state.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_state, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &body.content, &copy_state)
        return _result
        #else
        
        var copy_state = Int64 (state.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_state) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_state, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_central_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_central_impulse")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Applies a directional impulse without affecting rotation.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    /// This is equivalent to using ``bodyApplyImpulse(body:impulse:position:)`` at the body's center of mass.
    /// 
    public static func bodyApplyCentralImpulse (body: RID, impulse: Vector3) {
        #if false
        
        var copy_impulse = impulse
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_apply_central_impulse, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_impulse)
        
        #else
        
        var copy_impulse = impulse
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_impulse) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_apply_central_impulse, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_impulse")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 390416203)!
            }
            
        }
        
    }()
    
    /// Applies a positioned impulse to the body.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public static func bodyApplyImpulse (body: RID, impulse: Vector3, position: Vector3 = Vector3 (x: 0, y: 0, z: 0)) {
        #if false
        
        var copy_impulse = impulse
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_apply_impulse, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_impulse, &copy_position)
        
        #else
        
        var copy_impulse = impulse
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_impulse) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_position) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_apply_impulse, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_torque_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_torque_impulse")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Applies a rotational impulse to the body without affecting the position.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    public static func bodyApplyTorqueImpulse (body: RID, impulse: Vector3) {
        #if false
        
        var copy_impulse = impulse
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_apply_torque_impulse, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_impulse)
        
        #else
        
        var copy_impulse = impulse
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_impulse) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_apply_torque_impulse, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_central_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_central_force")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Applies a directional force without affecting rotation. A force is time dependent and meant to be applied every physics update.
    /// 
    /// This is equivalent to using ``bodyApplyForce(body:force:position:)`` at the body's center of mass.
    /// 
    public static func bodyApplyCentralForce (body: RID, force: Vector3) {
        #if false
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_apply_central_force, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_force) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_apply_central_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_force")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 390416203)!
            }
            
        }
        
    }()
    
    /// Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update.
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public static func bodyApplyForce (body: RID, force: Vector3, position: Vector3 = Vector3 (x: 0, y: 0, z: 0)) {
        #if false
        
        var copy_force = force
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_apply_force, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_force, &copy_position)
        
        #else
        
        var copy_force = force
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_force) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_position) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_apply_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_apply_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_apply_torque")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Applies a rotational force without affecting position. A force is time dependent and meant to be applied every physics update.
    public static func bodyApplyTorque (body: RID, torque: Vector3) {
        #if false
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_apply_torque, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_torque) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_apply_torque, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_add_constant_central_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_add_constant_central_force")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Adds a constant directional force without affecting rotation that keeps being applied over time until cleared with `body_set_constant_force(body, Vector3(0, 0, 0))`.
    /// 
    /// This is equivalent to using ``bodyAddConstantForce(body:force:position:)`` at the body's center of mass.
    /// 
    public static func bodyAddConstantCentralForce (body: RID, force: Vector3) {
        #if false
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_add_constant_central_force, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_force) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_add_constant_central_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_add_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_add_constant_force")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 390416203)!
            }
            
        }
        
    }()
    
    /// Adds a constant positioned force to the body that keeps being applied over time until cleared with `body_set_constant_force(body, Vector3(0, 0, 0))`.
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public static func bodyAddConstantForce (body: RID, force: Vector3, position: Vector3 = Vector3 (x: 0, y: 0, z: 0)) {
        #if false
        
        var copy_force = force
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_add_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_force, &copy_position)
        
        #else
        
        var copy_force = force
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_force) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_position) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_add_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_add_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_add_constant_torque")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Adds a constant rotational force without affecting position that keeps being applied over time until cleared with `body_set_constant_torque(body, Vector3(0, 0, 0))`.
    public static func bodyAddConstantTorque (body: RID, torque: Vector3) {
        #if false
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_add_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_torque) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_add_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_constant_force")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets the body's total constant positional forces applied during each physics update.
    /// 
    /// See ``bodyAddConstantForce(body:force:position:)`` and ``bodyAddConstantCentralForce(body:force:)``.
    /// 
    public static func bodySetConstantForce (body: RID, force: Vector3) {
        #if false
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_force) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_constant_force")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the body's total constant positional forces applied during each physics update.
    /// 
    /// See ``bodyAddConstantForce(body:force:position:)`` and ``bodyAddConstantCentralForce(body:force:)``.
    /// 
    public static func bodyGetConstantForce (body: RID)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_constant_force, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_constant_torque")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets the body's total constant rotational forces applied during each physics update.
    /// 
    /// See ``bodyAddConstantTorque(body:torque:)``.
    /// 
    public static func bodySetConstantTorque (body: RID, torque: Vector3) {
        #if false
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_torque) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_constant_torque")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the body's total constant rotational forces applied during each physics update.
    /// 
    /// See ``bodyAddConstantTorque(body:torque:)``.
    /// 
    public static func bodyGetConstantTorque (body: RID)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_constant_torque, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_axis_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_axis_velocity")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets an axis velocity. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
    public static func bodySetAxisVelocity (body: RID, axisVelocity: Vector3) {
        #if false
        
        var copy_axis_velocity = axisVelocity
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_axis_velocity, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_axis_velocity)
        
        #else
        
        var copy_axis_velocity = axisVelocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_axis_velocity) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_axis_velocity, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_axis_lock: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_axis_lock")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2020836892)!
            }
            
        }
        
    }()
    
    /// 
    public static func bodySetAxisLock (body: RID, axis: PhysicsServer3D.BodyAxis, lock: Bool) {
        #if false
        
        var copy_axis = Int64 (axis.rawValue)
        var copy_lock = lock
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_axis_lock, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_axis, &copy_lock)
        
        #else
        
        var copy_axis = Int64 (axis.rawValue)
        var copy_lock = lock
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_axis) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_lock) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_axis_lock, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_is_axis_locked: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_is_axis_locked")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 587853580)!
            }
            
        }
        
    }()
    
    /// 
    public static func bodyIsAxisLocked (body: RID, axis: PhysicsServer3D.BodyAxis)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_axis = Int64 (axis.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_is_axis_locked, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content, &copy_axis)
        return _result
        #else
        
        var copy_axis = Int64 (axis.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_axis) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_is_axis_locked, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_add_collision_exception: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_add_collision_exception")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Adds a body to the list of bodies exempt from collisions.
    public static func bodyAddCollisionException (body: RID, exceptedBody: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_add_collision_exception, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &exceptedBody.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &exceptedBody.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_add_collision_exception, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_remove_collision_exception: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_remove_collision_exception")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Removes a body from the list of bodies exempt from collisions.
    /// 
    /// Continuous collision detection tries to predict where a moving body will collide, instead of moving it and correcting its movement if it collided.
    /// 
    public static func bodyRemoveCollisionException (body: RID, exceptedBody: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_remove_collision_exception, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &exceptedBody.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &exceptedBody.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_remove_collision_exception, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_max_contacts_reported: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_max_contacts_reported")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets the maximum contacts to report. Bodies can keep a log of the contacts with other bodies. This is enabled by setting the maximum number of contacts reported to a number greater than 0.
    public static func bodySetMaxContactsReported (body: RID, amount: Int32) {
        #if false
        
        var copy_amount: Int = Int (amount)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_max_contacts_reported, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_amount)
        
        #else
        
        var copy_amount: Int = Int (amount)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_amount) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_max_contacts_reported, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_max_contacts_reported: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_max_contacts_reported")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the maximum contacts that can be reported. See ``bodySetMaxContactsReported(body:amount:)``.
    public static func bodyGetMaxContactsReported (body: RID)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_max_contacts_reported, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_max_contacts_reported, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_omit_force_integration: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_omit_force_integration")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets whether a body uses a callback function to calculate its own physics (see ``bodySetForceIntegrationCallback(body:callable:userdata:)``).
    public static func bodySetOmitForceIntegration (body: RID, enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_omit_force_integration, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_omit_force_integration, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_is_omitting_force_integration: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_is_omitting_force_integration")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns whether a body uses a callback function to calculate its own physics (see ``bodySetForceIntegrationCallback(body:callable:userdata:)``).
    public static func bodyIsOmittingForceIntegration (body: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_is_omitting_force_integration, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_is_omitting_force_integration, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_force_integration_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_force_integration_callback")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3059434249)!
            }
            
        }
        
    }()
    
    /// Sets the function used to calculate physics for an object, if that object allows it (see ``bodySetOmitForceIntegration(body:enable:)``). The force integration function takes 2 arguments:
    /// 
    /// - `state` — ``PhysicsDirectBodyState3D`` used to retrieve and modify the body's state.
    /// 
    /// - [code skip-lint]userdata` — optional user data passed to ``bodySetForceIntegrationCallback(body:callable:userdata:)``.
    /// 
    public static func bodySetForceIntegrationCallback (body: RID, callable: Callable, userdata: Variant) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_force_integration_callback, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &callable.content, &userdata.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &callable.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &userdata.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_force_integration_callback, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_set_ray_pickable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_set_ray_pickable")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets the body pickable with rays if `enable` is set.
    public static func bodySetRayPickable (body: RID, enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_set_ray_pickable, UnsafeMutableRawPointer (mutating: shared.handle), nil, &body.content, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_set_ray_pickable, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_test_motion: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_test_motion")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1944921792)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a collision would result from moving along a motion vector from a given point in space. ``PhysicsTestMotionParameters3D`` is passed to set motion parameters. ``PhysicsTestMotionResult3D`` can be passed to return additional information.
    public static func bodyTestMotion (body: RID, parameters: PhysicsTestMotionParameters3D?, result: PhysicsTestMotionResult3D? = nil)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_parameters_handle = parameters?.handle
        var copy_result_handle = result?.handle
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_test_motion, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content, &copy_parameters_handle, &copy_result_handle)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: parameters?.handle) { p1 in
            _args.append (parameters == nil ? nil : p1)
                return withUnsafePointer (to: result?.handle) { p2 in
                _args.append (result == nil ? nil : p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_test_motion, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_body_get_direct_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_get_direct_state")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3029727957)!
            }
            
        }
        
    }()
    
    /// Returns the ``PhysicsDirectBodyState3D`` of the body. Returns `null` if the body is destroyed or removed from the physics space.
    public static func bodyGetDirectState (body: RID)-> PhysicsDirectBodyState3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_body_get_direct_state, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_body_get_direct_state, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_soft_body_get_bounds: GDExtensionMethodBindPtr = {
        let methodName = StringName ("soft_body_get_bounds")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 974181306)!
            }
            
        }
        
    }()
    
    /// 
    public static func softBodyGetBounds (body: RID)-> AABB {
        var _result: AABB = AABB ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_soft_body_get_bounds, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_soft_body_get_bounds, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_joint_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_create")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// 
    public static func jointCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_joint_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_clear")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// 
    public static func jointClear (joint: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_clear, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_clear, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_joint_make_pin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_make_pin")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4280171926)!
            }
            
        }
        
    }()
    
    /// 
    public static func jointMakePin (joint: RID, bodyA: RID, localA: Vector3, bodyB: RID, localB: Vector3) {
        #if false
        
        var copy_local_A = localA
        var copy_local_B = localB
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_make_pin, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &bodyA.content, &copy_local_A, &bodyB.content, &copy_local_B)
        
        #else
        
        var copy_local_A = localA
        var copy_local_B = localB
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &bodyA.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_local_A) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &bodyB.content) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_local_B) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_make_pin, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_pin_joint_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pin_joint_set_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 810685294)!
            }
            
        }
        
    }()
    
    /// Sets a pin_joint parameter (see ``PhysicsServer3D/PinJointParam`` constants).
    public static func pinJointSetParam (joint: RID, param: PhysicsServer3D.PinJointParam, value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_pin_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_pin_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_pin_joint_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pin_joint_get_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2817972347)!
            }
            
        }
        
    }()
    
    /// Gets a pin_joint parameter (see ``PhysicsServer3D/PinJointParam`` constants).
    public static func pinJointGetParam (joint: RID, param: PhysicsServer3D.PinJointParam)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_pin_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_pin_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_pin_joint_set_local_a: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pin_joint_set_local_a")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets position of the joint in the local space of body a of the joint.
    public static func pinJointSetLocalA (joint: RID, localA: Vector3) {
        #if false
        
        var copy_local_A = localA
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_pin_joint_set_local_a, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_local_A)
        
        #else
        
        var copy_local_A = localA
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_local_A) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_pin_joint_set_local_a, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_pin_joint_get_local_a: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pin_joint_get_local_a")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns position of the joint in the local space of body a of the joint.
    public static func pinJointGetLocalA (joint: RID)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_pin_joint_get_local_a, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_pin_joint_get_local_a, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_pin_joint_set_local_b: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pin_joint_set_local_b")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets position of the joint in the local space of body b of the joint.
    public static func pinJointSetLocalB (joint: RID, localB: Vector3) {
        #if false
        
        var copy_local_B = localB
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_pin_joint_set_local_b, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_local_B)
        
        #else
        
        var copy_local_B = localB
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_local_B) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_pin_joint_set_local_b, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_pin_joint_get_local_b: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pin_joint_get_local_b")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns position of the joint in the local space of body b of the joint.
    public static func pinJointGetLocalB (joint: RID)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_pin_joint_get_local_b, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_pin_joint_get_local_b, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_joint_make_hinge: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_make_hinge")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1684107643)!
            }
            
        }
        
    }()
    
    /// 
    public static func jointMakeHinge (joint: RID, bodyA: RID, hingeA: Transform3D, bodyB: RID, hingeB: Transform3D) {
        #if false
        
        var copy_hinge_A = hingeA
        var copy_hinge_B = hingeB
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_make_hinge, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &bodyA.content, &copy_hinge_A, &bodyB.content, &copy_hinge_B)
        
        #else
        
        var copy_hinge_A = hingeA
        var copy_hinge_B = hingeB
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &bodyA.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_hinge_A) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &bodyB.content) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_hinge_B) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_make_hinge, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_hinge_joint_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("hinge_joint_set_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3165502333)!
            }
            
        }
        
    }()
    
    /// Sets a hinge_joint parameter (see ``PhysicsServer3D/HingeJointParam`` constants).
    public static func hingeJointSetParam (joint: RID, param: PhysicsServer3D.HingeJointParam, value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_hinge_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_hinge_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_hinge_joint_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("hinge_joint_get_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2129207581)!
            }
            
        }
        
    }()
    
    /// Gets a hinge_joint parameter (see ``PhysicsServer3D/HingeJointParam``).
    public static func hingeJointGetParam (joint: RID, param: PhysicsServer3D.HingeJointParam)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_hinge_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_hinge_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_hinge_joint_set_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("hinge_joint_set_flag")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1601626188)!
            }
            
        }
        
    }()
    
    /// Sets a hinge_joint flag (see ``PhysicsServer3D/HingeJointFlag`` constants).
    public static func hingeJointSetFlag (joint: RID, flag: PhysicsServer3D.HingeJointFlag, enabled: Bool) {
        #if false
        
        var copy_flag = Int64 (flag.rawValue)
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_hinge_joint_set_flag, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_flag, &copy_enabled)
        
        #else
        
        var copy_flag = Int64 (flag.rawValue)
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_flag) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_enabled) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_hinge_joint_set_flag, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_hinge_joint_get_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("hinge_joint_get_flag")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4165147865)!
            }
            
        }
        
    }()
    
    /// Gets a hinge_joint flag (see ``PhysicsServer3D/HingeJointFlag`` constants).
    public static func hingeJointGetFlag (joint: RID, flag: PhysicsServer3D.HingeJointFlag)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_flag = Int64 (flag.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_hinge_joint_get_flag, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_flag)
        return _result
        #else
        
        var copy_flag = Int64 (flag.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_flag) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_hinge_joint_get_flag, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_make_slider: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_make_slider")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1684107643)!
            }
            
        }
        
    }()
    
    /// 
    public static func jointMakeSlider (joint: RID, bodyA: RID, localRefA: Transform3D, bodyB: RID, localRefB: Transform3D) {
        #if false
        
        var copy_local_ref_A = localRefA
        var copy_local_ref_B = localRefB
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_make_slider, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &bodyA.content, &copy_local_ref_A, &bodyB.content, &copy_local_ref_B)
        
        #else
        
        var copy_local_ref_A = localRefA
        var copy_local_ref_B = localRefB
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &bodyA.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_local_ref_A) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &bodyB.content) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_local_ref_B) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_make_slider, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_slider_joint_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("slider_joint_set_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2264833593)!
            }
            
        }
        
    }()
    
    /// Gets a slider_joint parameter (see ``PhysicsServer3D/SliderJointParam`` constants).
    public static func sliderJointSetParam (joint: RID, param: PhysicsServer3D.SliderJointParam, value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_slider_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_slider_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_slider_joint_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("slider_joint_get_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3498644957)!
            }
            
        }
        
    }()
    
    /// Gets a slider_joint parameter (see ``PhysicsServer3D/SliderJointParam`` constants).
    public static func sliderJointGetParam (joint: RID, param: PhysicsServer3D.SliderJointParam)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_slider_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_slider_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_make_cone_twist: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_make_cone_twist")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1684107643)!
            }
            
        }
        
    }()
    
    /// 
    public static func jointMakeConeTwist (joint: RID, bodyA: RID, localRefA: Transform3D, bodyB: RID, localRefB: Transform3D) {
        #if false
        
        var copy_local_ref_A = localRefA
        var copy_local_ref_B = localRefB
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_make_cone_twist, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &bodyA.content, &copy_local_ref_A, &bodyB.content, &copy_local_ref_B)
        
        #else
        
        var copy_local_ref_A = localRefA
        var copy_local_ref_B = localRefB
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &bodyA.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_local_ref_A) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &bodyB.content) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_local_ref_B) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_make_cone_twist, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_cone_twist_joint_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("cone_twist_joint_set_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 808587618)!
            }
            
        }
        
    }()
    
    /// Sets a cone_twist_joint parameter (see ``PhysicsServer3D/ConeTwistJointParam`` constants).
    public static func coneTwistJointSetParam (joint: RID, param: PhysicsServer3D.ConeTwistJointParam, value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_cone_twist_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_cone_twist_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_cone_twist_joint_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("cone_twist_joint_get_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1134789658)!
            }
            
        }
        
    }()
    
    /// Gets a cone_twist_joint parameter (see ``PhysicsServer3D/ConeTwistJointParam`` constants).
    public static func coneTwistJointGetParam (joint: RID, param: PhysicsServer3D.ConeTwistJointParam)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_cone_twist_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_param) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_cone_twist_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_get_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_get_type")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4290791900)!
            }
            
        }
        
    }()
    
    /// Returns the type of the Joint3D.
    public static func jointGetType (joint: RID)-> PhysicsServer3D.JointType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_get_type, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content)
        return PhysicsServer3D.JointType (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_get_type, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return PhysicsServer3D.JointType (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_joint_set_solver_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_set_solver_priority")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets the priority value of the Joint3D.
    public static func jointSetSolverPriority (joint: RID, priority: Int32) {
        #if false
        
        var copy_priority: Int = Int (priority)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_set_solver_priority, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_priority)
        
        #else
        
        var copy_priority: Int = Int (priority)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_priority) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_set_solver_priority, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_get_solver_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_get_solver_priority")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Gets the priority value of the Joint3D.
    public static func jointGetSolverPriority (joint: RID)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_get_solver_priority, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_get_solver_priority, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_joint_disable_collisions_between_bodies: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_disable_collisions_between_bodies")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets whether the bodies attached to the ``Joint3D`` will collide with each other.
    public static func jointDisableCollisionsBetweenBodies (joint: RID, disable: Bool) {
        #if false
        
        var copy_disable = disable
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_disable_collisions_between_bodies, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_disable)
        
        #else
        
        var copy_disable = disable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_disable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_disable_collisions_between_bodies, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_joint_is_disabled_collisions_between_bodies: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_is_disabled_collisions_between_bodies")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns whether the bodies attached to the ``Joint3D`` will collide with each other.
    public static func jointIsDisabledCollisionsBetweenBodies (joint: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_is_disabled_collisions_between_bodies, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_is_disabled_collisions_between_bodies, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_joint_make_generic_6dof: GDExtensionMethodBindPtr = {
        let methodName = StringName ("joint_make_generic_6dof")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1684107643)!
            }
            
        }
        
    }()
    
    /// 
    public static func jointMakeGeneric6dof (joint: RID, bodyA: RID, localRefA: Transform3D, bodyB: RID, localRefB: Transform3D) {
        #if false
        
        var copy_local_ref_A = localRefA
        var copy_local_ref_B = localRefB
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_joint_make_generic_6dof, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &bodyA.content, &copy_local_ref_A, &bodyB.content, &copy_local_ref_B)
        
        #else
        
        var copy_local_ref_A = localRefA
        var copy_local_ref_B = localRefB
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &bodyA.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_local_ref_A) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &bodyB.content) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_local_ref_B) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (PhysicsServer3D.method_joint_make_generic_6dof, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_generic_6dof_joint_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("generic_6dof_joint_set_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2600081391)!
            }
            
        }
        
    }()
    
    /// Sets a generic_6_DOF_joint parameter (see ``PhysicsServer3D/G6DOFJointAxisParam`` constants).
    public static func generic6dofJointSetParam (joint: RID, axis: Vector3.Axis, param: PhysicsServer3D.G6DOFJointAxisParam, value: Double) {
        #if false
        
        var copy_axis = Int64 (axis.rawValue)
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_generic_6dof_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_axis, &copy_param, &copy_value)
        
        #else
        
        var copy_axis = Int64 (axis.rawValue)
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_axis) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_param) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_value) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (PhysicsServer3D.method_generic_6dof_joint_set_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_generic_6dof_joint_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("generic_6dof_joint_get_param")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 467122058)!
            }
            
        }
        
    }()
    
    /// Gets a generic_6_DOF_joint parameter (see ``PhysicsServer3D/G6DOFJointAxisParam`` constants).
    public static func generic6dofJointGetParam (joint: RID, axis: Vector3.Axis, param: PhysicsServer3D.G6DOFJointAxisParam)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_axis = Int64 (axis.rawValue)
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_generic_6dof_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_axis, &copy_param)
        return _result
        #else
        
        var copy_axis = Int64 (axis.rawValue)
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_axis) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_param) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_generic_6dof_joint_get_param, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_generic_6dof_joint_set_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("generic_6dof_joint_set_flag")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3570926903)!
            }
            
        }
        
    }()
    
    /// Sets a generic_6_DOF_joint flag (see ``PhysicsServer3D/G6DOFJointAxisFlag`` constants).
    public static func generic6dofJointSetFlag (joint: RID, axis: Vector3.Axis, flag: PhysicsServer3D.G6DOFJointAxisFlag, enable: Bool) {
        #if false
        
        var copy_axis = Int64 (axis.rawValue)
        var copy_flag = Int64 (flag.rawValue)
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_generic_6dof_joint_set_flag, UnsafeMutableRawPointer (mutating: shared.handle), nil, &joint.content, &copy_axis, &copy_flag, &copy_enable)
        
        #else
        
        var copy_axis = Int64 (axis.rawValue)
        var copy_flag = Int64 (flag.rawValue)
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_axis) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_flag) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_enable) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (PhysicsServer3D.method_generic_6dof_joint_set_flag, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_generic_6dof_joint_get_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("generic_6dof_joint_get_flag")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4158090196)!
            }
            
        }
        
    }()
    
    /// Gets a generic_6_DOF_joint flag (see ``PhysicsServer3D/G6DOFJointAxisFlag`` constants).
    public static func generic6dofJointGetFlag (joint: RID, axis: Vector3.Axis, flag: PhysicsServer3D.G6DOFJointAxisFlag)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_axis = Int64 (axis.rawValue)
        var copy_flag = Int64 (flag.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_generic_6dof_joint_get_flag, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &joint.content, &copy_axis, &copy_flag)
        return _result
        #else
        
        var copy_axis = Int64 (axis.rawValue)
        var copy_flag = Int64 (flag.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &joint.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_axis) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_flag) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PhysicsServer3D.method_generic_6dof_joint_get_flag, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_free_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("free_rid")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Destroys any of the objects created by PhysicsServer3D. If the ``RID`` passed is not one of the objects that can be created by PhysicsServer3D, an error will be sent to the console.
    public static func freeRid (_ rid: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_free_rid, UnsafeMutableRawPointer (mutating: shared.handle), nil, &rid.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &rid.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_free_rid, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_active")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// Activates or deactivates the 3D physics engine.
    public static func setActive (_ active: Bool) {
        #if false
        
        var copy_active = active
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_set_active, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_active)
        
        #else
        
        var copy_active = active
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_active) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_set_active, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_process_info: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_process_info")
        return withUnsafePointer (to: &PhysicsServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1332958745)!
            }
            
        }
        
    }()
    
    /// Returns information about the current state of the 3D physics engine. See ``PhysicsServer3D/ProcessInfo`` for a list of available states.
    public static func getProcessInfo (_ processInfo: PhysicsServer3D.ProcessInfo)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_process_info = Int64 (processInfo.rawValue)
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3D.method_get_process_info, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_process_info)
        return _result
        #else
        
        var copy_process_info = Int64 (processInfo.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_process_info) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3D.method_get_process_info, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

