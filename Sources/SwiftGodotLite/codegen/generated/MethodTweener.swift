// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Interpolates an abstract value and supplies it to a method called over time.
/// 
/// ``MethodTweener`` is similar to a combination of ``CallbackTweener`` and ``PropertyTweener``. It calls a method providing an interpolated value as a parameter. See ``Tween/tweenMethod(_:from:to:duration:)`` for more usage information.
/// 
/// The tweener will finish automatically if the callback's target object is freed.
/// 
/// > Note: ``Tween/tweenMethod(_:from:to:duration:)`` is the only correct way to create ``MethodTweener``. Any ``MethodTweener`` created manually will not function correctly.
/// 
open class MethodTweener: Tweener {
    override open class var godotClassName: StringName { "MethodTweener" }
    /* Methods */
    fileprivate static var method_set_delay: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_delay")
        return withUnsafePointer (to: &MethodTweener.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 266477812)!
            }
            
        }
        
    }()
    
    /// Sets the time in seconds after which the ``MethodTweener`` will start interpolating. By default there's no delay.
    public final func setDelay (_ delay: Double)-> MethodTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_delay = delay
        
        gi.object_method_bind_ptrcall_v (MethodTweener.method_set_delay, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_delay)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_delay = delay
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_delay) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MethodTweener.method_set_delay, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_trans: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_trans")
        return withUnsafePointer (to: &MethodTweener.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3740975367)!
            }
            
        }
        
    }()
    
    /// Sets the type of used transition from ``Tween.TransitionType``. If not set, the default transition is used from the ``Tween`` that contains this Tweener.
    public final func setTrans (_ trans: Tween.TransitionType)-> MethodTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_trans = Int64 (trans.rawValue)
        
        gi.object_method_bind_ptrcall_v (MethodTweener.method_set_trans, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_trans)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_trans = Int64 (trans.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_trans) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MethodTweener.method_set_trans, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_ease: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ease")
        return withUnsafePointer (to: &MethodTweener.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 315540545)!
            }
            
        }
        
    }()
    
    /// Sets the type of used easing from ``Tween.EaseType``. If not set, the default easing is used from the ``Tween`` that contains this Tweener.
    public final func setEase (_ ease: Tween.EaseType)-> MethodTweener? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_ease = Int64 (ease.rawValue)
        
        gi.object_method_bind_ptrcall_v (MethodTweener.method_set_ease, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_ease)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_ease = Int64 (ease.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_ease) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MethodTweener.method_set_ease, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
}

