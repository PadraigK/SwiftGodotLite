// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Resource for environment nodes (like ``WorldEnvironment``) that define multiple rendering options.
/// 
/// Resource for environment nodes (like ``WorldEnvironment``) that define multiple environment operations (such as background ``Sky`` or ``Color``, ambient light, fog, depth-of-field...). These parameters affect the final render of the scene. The order of these operations is:
/// 
/// - Depth of Field Blur
/// 
/// - Glow
/// 
/// - Tonemap (Auto Exposure)
/// 
/// - Adjustments
/// 
open class Environment: Resource {
    override open class var godotClassName: StringName { "Environment" }
    public enum BGMode: Int64 {
        /// Clears the background using the clear color defined in ``ProjectSettings/rendering/environment/defaults/defaultClearColor``.
        case clearColor = 0 // BG_CLEAR_COLOR
        /// Clears the background using a custom clear color.
        case color = 1 // BG_COLOR
        /// Displays a user-defined sky in the background.
        case sky = 2 // BG_SKY
        /// Displays a ``CanvasLayer`` in the background.
        case canvas = 3 // BG_CANVAS
        /// Keeps on screen every pixel drawn in the background. This is the fastest background mode, but it can only be safely used in fully-interior scenes (no visible sky or sky reflections). If enabled in a scene where the background is visible, "ghost trail" artifacts will be visible when moving the camera.
        case keep = 4 // BG_KEEP
        /// Displays a camera feed in the background.
        case cameraFeed = 5 // BG_CAMERA_FEED
        /// Represents the size of the ``Environment/BGMode`` enum.
        case max = 6 // BG_MAX
    }
    
    public enum AmbientSource: Int64 {
        /// Gather ambient light from whichever source is specified as the background.
        case bg = 0 // AMBIENT_SOURCE_BG
        /// Disable ambient light. This provides a slight performance boost over .sky.
        case disabled = 1 // AMBIENT_SOURCE_DISABLED
        /// Specify a specific ``Color`` for ambient light. This provides a slight performance boost over .sky.
        case color = 2 // AMBIENT_SOURCE_COLOR
        /// Gather ambient light from the ``Sky`` regardless of what the background is.
        case sky = 3 // AMBIENT_SOURCE_SKY
    }
    
    public enum ReflectionSource: Int64 {
        /// Use the background for reflections.
        case bg = 0 // REFLECTION_SOURCE_BG
        /// Disable reflections. This provides a slight performance boost over other options.
        case disabled = 1 // REFLECTION_SOURCE_DISABLED
        /// Use the ``Sky`` for reflections regardless of what the background is.
        case sky = 2 // REFLECTION_SOURCE_SKY
    }
    
    public enum ToneMapper: Int64 {
        /// Linear tonemapper operator. Reads the linear data and passes it on unmodified. This can cause bright lighting to look blown out, with noticeable clipping in the output colors.
        case linear = 0 // TONE_MAPPER_LINEAR
        /// Reinhardt tonemapper operator. Performs a variation on rendered pixels' colors by this formula: `color = color / (1 + color)`. This avoids clipping bright highlights, but the resulting image can look a bit dull.
        case reinhardt = 1 // TONE_MAPPER_REINHARDT
        /// Filmic tonemapper operator. This avoids clipping bright highlights, with a resulting image that usually looks more vivid than .reinhardt.
        case filmic = 2 // TONE_MAPPER_FILMIC
        /// Use the Academy Color Encoding System tonemapper. ACES is slightly more expensive than other options, but it handles bright lighting in a more realistic fashion by desaturating it as it becomes brighter. ACES typically has a more contrasted output compared to .reinhardt and .filmic.
        /// 
        /// > Note: This tonemapping operator is called "ACES Fitted" in Godot 3.x.
        /// 
        case aces = 3 // TONE_MAPPER_ACES
    }
    
    public enum GlowBlendMode: Int64 {
        /// Additive glow blending mode. Mostly used for particles, glows (bloom), lens flare, bright sources.
        case additive = 0 // GLOW_BLEND_MODE_ADDITIVE
        /// Screen glow blending mode. Increases brightness, used frequently with bloom.
        case screen = 1 // GLOW_BLEND_MODE_SCREEN
        /// Soft light glow blending mode. Modifies contrast, exposes shadows and highlights (vivid bloom).
        case softlight = 2 // GLOW_BLEND_MODE_SOFTLIGHT
        /// Replace glow blending mode. Replaces all pixels' color by the glow value. This can be used to simulate a full-screen blur effect by tweaking the glow parameters to match the original image's brightness.
        case replace = 3 // GLOW_BLEND_MODE_REPLACE
        /// Mixes the glow with the underlying color to avoid increasing brightness as much while still maintaining a glow effect.
        case mix = 4 // GLOW_BLEND_MODE_MIX
    }
    
    public enum SDFGIYScale: Int64 {
        /// Use 50% scale for SDFGI on the Y (vertical) axis. SDFGI cells will be twice as short as they are wide. This allows providing increased GI detail and reduced light leaking with thin floors and ceilings. This is usually the best choice for scenes that don't feature much verticality.
        case sdfgiYScale50Percent = 0 // SDFGI_Y_SCALE_50_PERCENT
        /// Use 75% scale for SDFGI on the Y (vertical) axis. This is a balance between the 50% and 100% SDFGI Y scales.
        case sdfgiYScale75Percent = 1 // SDFGI_Y_SCALE_75_PERCENT
        /// Use 100% scale for SDFGI on the Y (vertical) axis. SDFGI cells will be as tall as they are wide. This is usually the best choice for highly vertical scenes. The downside is that light leaking may become more noticeable with thin floors and ceilings.
        case sdfgiYScale100Percent = 2 // SDFGI_Y_SCALE_100_PERCENT
    }
    
    
    /* Properties */
    
    /// The background mode. See ``Environment/BGMode`` for possible values.
    final public var backgroundMode: Environment.BGMode {
        get {
            return get_background ()
        }
        
        set {
            set_background (newValue)
        }
        
    }
    
    /// The ``Color`` displayed for clear areas of the scene. Only effective when using the .bgColor background mode.
    final public var backgroundColor: Color {
        get {
            return get_bg_color ()
        }
        
        set {
            set_bg_color (newValue)
        }
        
    }
    
    /// Multiplier for background energy. Increase to make background brighter, decrease to make background dimmer.
    final public var backgroundEnergyMultiplier: Double {
        get {
            return get_bg_energy_multiplier ()
        }
        
        set {
            set_bg_energy_multiplier (newValue)
        }
        
    }
    
    /// Luminance of background measured in nits (candela per square meter). Only used when ``ProjectSettings/rendering/lightsAndShadows/usePhysicalLightUnits`` is enabled. The default value is roughly equivalent to the sky at midday.
    final public var backgroundIntensity: Double {
        get {
            return get_bg_intensity ()
        }
        
        set {
            set_bg_intensity (newValue)
        }
        
    }
    
    /// The maximum layer ID to display. Only effective when using the .bgCanvas background mode.
    final public var backgroundCanvasMaxLayer: Int32 {
        get {
            return get_canvas_max_layer ()
        }
        
        set {
            set_canvas_max_layer (newValue)
        }
        
    }
    
    /// The ID of the camera feed to show in the background.
    final public var backgroundCameraFeedId: Int32 {
        get {
            return get_camera_feed_id ()
        }
        
        set {
            set_camera_feed_id (newValue)
        }
        
    }
    
    /// The ``Sky`` resource used for this ``Environment``.
    final public var sky: Sky? {
        get {
            return get_sky ()
        }
        
        set {
            set_sky (newValue)
        }
        
    }
    
    /// If set to a value greater than `0.0`, overrides the field of view to use for sky rendering. If set to `0.0`, the same FOV as the current ``Camera3D`` is used for sky rendering.
    final public var skyCustomFov: Double {
        get {
            return get_sky_custom_fov ()
        }
        
        set {
            set_sky_custom_fov (newValue)
        }
        
    }
    
    /// The rotation to use for sky rendering.
    final public var skyRotation: Vector3 {
        get {
            return get_sky_rotation ()
        }
        
        set {
            set_sky_rotation (newValue)
        }
        
    }
    
    /// The ambient light source to use for rendering materials and global illumination.
    final public var ambientLightSource: Environment.AmbientSource {
        get {
            return get_ambient_source ()
        }
        
        set {
            set_ambient_source (newValue)
        }
        
    }
    
    /// The ambient light's ``Color``. Only effective if ``ambientLightSkyContribution`` is lower than `1.0` (exclusive).
    final public var ambientLightColor: Color {
        get {
            return get_ambient_light_color ()
        }
        
        set {
            set_ambient_light_color (newValue)
        }
        
    }
    
    /// Defines the amount of light that the sky brings on the scene. A value of `0.0` means that the sky's light emission has no effect on the scene illumination, thus all ambient illumination is provided by the ambient light. On the contrary, a value of `1.0` means that _all_ the light that affects the scene is provided by the sky, thus the ambient light parameter has no effect on the scene.
    /// 
    /// > Note: ``ambientLightSkyContribution`` is internally clamped between `0.0` and `1.0` (inclusive).
    /// 
    final public var ambientLightSkyContribution: Double {
        get {
            return get_ambient_light_sky_contribution ()
        }
        
        set {
            set_ambient_light_sky_contribution (newValue)
        }
        
    }
    
    /// The ambient light's energy. The higher the value, the stronger the light. Only effective if ``ambientLightSkyContribution`` is lower than `1.0` (exclusive).
    final public var ambientLightEnergy: Double {
        get {
            return get_ambient_light_energy ()
        }
        
        set {
            set_ambient_light_energy (newValue)
        }
        
    }
    
    /// The reflected (specular) light source.
    final public var reflectedLightSource: Environment.ReflectionSource {
        get {
            return get_reflection_source ()
        }
        
        set {
            set_reflection_source (newValue)
        }
        
    }
    
    /// The tonemapping mode to use. Tonemapping is the process that "converts" HDR values to be suitable for rendering on a LDR display. (Godot doesn't support rendering on HDR displays yet.)
    final public var tonemapMode: Environment.ToneMapper {
        get {
            return get_tonemapper ()
        }
        
        set {
            set_tonemapper (newValue)
        }
        
    }
    
    /// The default exposure used for tonemapping. Higher values result in a brighter image. See also ``tonemapWhite``.
    final public var tonemapExposure: Double {
        get {
            return get_tonemap_exposure ()
        }
        
        set {
            set_tonemap_exposure (newValue)
        }
        
    }
    
    /// The white reference value for tonemapping (also called "whitepoint"). Higher values can make highlights look less blown out, and will also slightly darken the whole scene as a result. Only effective if the ``tonemapMode`` isn't set to .linear. See also ``tonemapExposure``.
    final public var tonemapWhite: Double {
        get {
            return get_tonemap_white ()
        }
        
        set {
            set_tonemap_white (newValue)
        }
        
    }
    
    /// If `true`, screen-space reflections are enabled. Screen-space reflections are more accurate than reflections from ``VoxelGI``s or ``ReflectionProbe``s, but are slower and can't reflect surfaces occluded by others.
    /// 
    /// > Note: SSR is only supported in the Forward+ rendering method, not Mobile or Compatibility.
    /// 
    final public var ssrEnabled: Bool {
        get {
            return is_ssr_enabled ()
        }
        
        set {
            set_ssr_enabled (newValue)
        }
        
    }
    
    /// The maximum number of steps for screen-space reflections. Higher values are slower.
    final public var ssrMaxSteps: Int32 {
        get {
            return get_ssr_max_steps ()
        }
        
        set {
            set_ssr_max_steps (newValue)
        }
        
    }
    
    /// The fade-in distance for screen-space reflections. Affects the area from the reflected material to the screen-space reflection. Only positive values are valid (negative values will be clamped to `0.0`).
    final public var ssrFadeIn: Double {
        get {
            return get_ssr_fade_in ()
        }
        
        set {
            set_ssr_fade_in (newValue)
        }
        
    }
    
    /// The fade-out distance for screen-space reflections. Affects the area from the screen-space reflection to the "global" reflection. Only positive values are valid (negative values will be clamped to `0.0`).
    final public var ssrFadeOut: Double {
        get {
            return get_ssr_fade_out ()
        }
        
        set {
            set_ssr_fade_out (newValue)
        }
        
    }
    
    /// The depth tolerance for screen-space reflections.
    final public var ssrDepthTolerance: Double {
        get {
            return get_ssr_depth_tolerance ()
        }
        
        set {
            set_ssr_depth_tolerance (newValue)
        }
        
    }
    
    /// If `true`, the screen-space ambient occlusion effect is enabled. This darkens objects' corners and cavities to simulate ambient light not reaching the entire object as in real life. This works well for small, dynamic objects, but baked lighting or ambient occlusion textures will do a better job at displaying ambient occlusion on large static objects. Godot uses a form of SSAO called Adaptive Screen Space Ambient Occlusion which is itself a form of Horizon Based Ambient Occlusion.
    /// 
    /// > Note: SSAO is only supported in the Forward+ rendering method, not Mobile or Compatibility.
    /// 
    final public var ssaoEnabled: Bool {
        get {
            return is_ssao_enabled ()
        }
        
        set {
            set_ssao_enabled (newValue)
        }
        
    }
    
    /// The distance at which objects can occlude each other when calculating screen-space ambient occlusion. Higher values will result in occlusion over a greater distance at the cost of performance and quality.
    final public var ssaoRadius: Double {
        get {
            return get_ssao_radius ()
        }
        
        set {
            set_ssao_radius (newValue)
        }
        
    }
    
    /// The primary screen-space ambient occlusion intensity. Acts as a multiplier for the screen-space ambient occlusion effect. A higher value results in darker occlusion.
    final public var ssaoIntensity: Double {
        get {
            return get_ssao_intensity ()
        }
        
        set {
            set_ssao_intensity (newValue)
        }
        
    }
    
    /// The distribution of occlusion. A higher value results in darker occlusion, similar to ``ssaoIntensity``, but with a sharper falloff.
    final public var ssaoPower: Double {
        get {
            return get_ssao_power ()
        }
        
        set {
            set_ssao_power (newValue)
        }
        
    }
    
    /// Sets the strength of the additional level of detail for the screen-space ambient occlusion effect. A high value makes the detail pass more prominent, but it may contribute to aliasing in your final image.
    final public var ssaoDetail: Double {
        get {
            return get_ssao_detail ()
        }
        
        set {
            set_ssao_detail (newValue)
        }
        
    }
    
    /// The threshold for considering whether a given point on a surface is occluded or not represented as an angle from the horizon mapped into the `0.0-1.0` range. A value of `1.0` results in no occlusion.
    final public var ssaoHorizon: Double {
        get {
            return get_ssao_horizon ()
        }
        
        set {
            set_ssao_horizon (newValue)
        }
        
    }
    
    /// The amount that the screen-space ambient occlusion effect is allowed to blur over the edges of objects. Setting too high will result in aliasing around the edges of objects. Setting too low will make object edges appear blurry.
    final public var ssaoSharpness: Double {
        get {
            return get_ssao_sharpness ()
        }
        
        set {
            set_ssao_sharpness (newValue)
        }
        
    }
    
    /// The screen-space ambient occlusion intensity in direct light. In real life, ambient occlusion only applies to indirect light, which means its effects can't be seen in direct light. Values higher than `0` will make the SSAO effect visible in direct light.
    final public var ssaoLightAffect: Double {
        get {
            return get_ssao_direct_light_affect ()
        }
        
        set {
            set_ssao_direct_light_affect (newValue)
        }
        
    }
    
    /// The screen-space ambient occlusion intensity on materials that have an AO texture defined. Values higher than `0` will make the SSAO effect visible in areas darkened by AO textures.
    final public var ssaoAoChannelAffect: Double {
        get {
            return get_ssao_ao_channel_affect ()
        }
        
        set {
            set_ssao_ao_channel_affect (newValue)
        }
        
    }
    
    /// If `true`, the screen-space indirect lighting effect is enabled. Screen space indirect lighting is a form of indirect lighting that allows diffuse light to bounce between nearby objects. Screen-space indirect lighting works very similarly to screen-space ambient occlusion, in that it only affects a limited range. It is intended to be used along with a form of proper global illumination like SDFGI or ``VoxelGI``. Screen-space indirect lighting is not affected by individual light's ``Light3D/lightIndirectEnergy``.
    /// 
    /// > Note: SSIL is only supported in the Forward+ rendering method, not Mobile or Compatibility.
    /// 
    final public var ssilEnabled: Bool {
        get {
            return is_ssil_enabled ()
        }
        
        set {
            set_ssil_enabled (newValue)
        }
        
    }
    
    /// The distance that bounced lighting can travel when using the screen space indirect lighting effect. A larger value will result in light bouncing further in a scene, but may result in under-sampling artifacts which look like long spikes surrounding light sources.
    final public var ssilRadius: Double {
        get {
            return get_ssil_radius ()
        }
        
        set {
            set_ssil_radius (newValue)
        }
        
    }
    
    /// The brightness multiplier for the screen-space indirect lighting effect. A higher value will result in brighter light.
    final public var ssilIntensity: Double {
        get {
            return get_ssil_intensity ()
        }
        
        set {
            set_ssil_intensity (newValue)
        }
        
    }
    
    /// The amount that the screen-space indirect lighting effect is allowed to blur over the edges of objects. Setting too high will result in aliasing around the edges of objects. Setting too low will make object edges appear blurry.
    final public var ssilSharpness: Double {
        get {
            return get_ssil_sharpness ()
        }
        
        set {
            set_ssil_sharpness (newValue)
        }
        
    }
    
    /// Amount of normal rejection used when calculating screen-space indirect lighting. Normal rejection uses the normal of a given sample point to reject samples that are facing away from the current pixel. Normal rejection is necessary to avoid light leaking when only one side of an object is illuminated. However, normal rejection can be disabled if light leaking is desirable, such as when the scene mostly contains emissive objects that emit light from faces that cannot be seen from the camera.
    final public var ssilNormalRejection: Double {
        get {
            return get_ssil_normal_rejection ()
        }
        
        set {
            set_ssil_normal_rejection (newValue)
        }
        
    }
    
    /// If `true`, enables signed distance field global illumination for meshes that have their ``GeometryInstance3D/giMode`` set to ``GeometryInstance3D/GIMode/`static```. SDFGI is a real-time global illumination technique that works well with procedurally generated and user-built levels, including in situations where geometry is created during gameplay. The signed distance field is automatically generated around the camera as it moves. Dynamic lights are supported, but dynamic occluders and emissive surfaces are not.
    /// 
    /// > Note: SDFGI is only supported in the Forward+ rendering method, not Mobile or Compatibility.
    /// 
    /// **Performance:** SDFGI is relatively demanding on the GPU and is not suited to low-end hardware such as integrated graphics (consider ``LightmapGI`` instead). To improve SDFGI performance, enable ``ProjectSettings/rendering/globalIllumination/gi/useHalfResolution`` in the Project Settings.
    /// 
    /// > Note: Meshes should have sufficiently thick walls to avoid light leaks (avoid one-sided walls). For interior levels, enclose your level geometry in a sufficiently large box and bridge the loops to close the mesh.
    /// 
    final public var sdfgiEnabled: Bool {
        get {
            return is_sdfgi_enabled ()
        }
        
        set {
            set_sdfgi_enabled (newValue)
        }
        
    }
    
    /// If `true`, SDFGI uses an occlusion detection approach to reduce light leaking. Occlusion may however introduce dark blotches in certain spots, which may be undesired in mostly outdoor scenes. ``sdfgiUseOcclusion`` has a performance impact and should only be enabled when needed.
    final public var sdfgiUseOcclusion: Bool {
        get {
            return is_sdfgi_using_occlusion ()
        }
        
        set {
            set_sdfgi_use_occlusion (newValue)
        }
        
    }
    
    /// If `true`, SDFGI takes the environment lighting into account. This should be set to `false` for interior scenes.
    final public var sdfgiReadSkyLight: Bool {
        get {
            return is_sdfgi_reading_sky_light ()
        }
        
        set {
            set_sdfgi_read_sky_light (newValue)
        }
        
    }
    
    /// The energy multiplier applied to light every time it bounces from a surface when using SDFGI. Values greater than `0.0` will simulate multiple bounces, resulting in a more realistic appearance. Increasing ``sdfgiBounceFeedback`` generally has no performance impact. See also ``sdfgiEnergy``.
    /// 
    /// > Note: Values greater than `0.5` can cause infinite feedback loops and should be avoided in scenes with bright materials.
    /// 
    /// > Note: If ``sdfgiBounceFeedback`` is `0.0`, indirect lighting will not be represented in reflections as light will only bounce one time.
    /// 
    final public var sdfgiBounceFeedback: Double {
        get {
            return get_sdfgi_bounce_feedback ()
        }
        
        set {
            set_sdfgi_bounce_feedback (newValue)
        }
        
    }
    
    /// The number of cascades to use for SDFGI (between 1 and 8). A higher number of cascades allows displaying SDFGI further away while preserving detail up close, at the cost of performance. When using SDFGI on small-scale levels, ``sdfgiCascades`` can often be decreased between `1` and `4` to improve performance.
    final public var sdfgiCascades: Int32 {
        get {
            return get_sdfgi_cascades ()
        }
        
        set {
            set_sdfgi_cascades (newValue)
        }
        
    }
    
    /// The cell size to use for the closest SDFGI cascade (in 3D units). Lower values allow SDFGI to be more precise up close, at the cost of making SDFGI updates more demanding. This can cause stuttering when the camera moves fast. Higher values allow SDFGI to cover more ground, while also reducing the performance impact of SDFGI updates.
    /// 
    /// > Note: This property is linked to ``sdfgiMaxDistance`` and ``sdfgiCascade0Distance``. Changing its value will automatically change those properties as well.
    /// 
    final public var sdfgiMinCellSize: Double {
        get {
            return get_sdfgi_min_cell_size ()
        }
        
        set {
            set_sdfgi_min_cell_size (newValue)
        }
        
    }
    
    /// > Note: This property is linked to ``sdfgiMinCellSize`` and ``sdfgiMaxDistance``. Changing its value will automatically change those properties as well.
    final public var sdfgiCascade0Distance: Double {
        get {
            return get_sdfgi_cascade0_distance ()
        }
        
        set {
            set_sdfgi_cascade0_distance (newValue)
        }
        
    }
    
    /// The maximum distance at which SDFGI is visible. Beyond this distance, environment lighting or other sources of GI such as ``ReflectionProbe`` will be used as a fallback.
    /// 
    /// > Note: This property is linked to ``sdfgiMinCellSize`` and ``sdfgiCascade0Distance``. Changing its value will automatically change those properties as well.
    /// 
    final public var sdfgiMaxDistance: Double {
        get {
            return get_sdfgi_max_distance ()
        }
        
        set {
            set_sdfgi_max_distance (newValue)
        }
        
    }
    
    /// The Y scale to use for SDFGI cells. Lower values will result in SDFGI cells being packed together more closely on the Y axis. This is used to balance between quality and covering a lot of vertical ground. ``sdfgiYScale`` should be set depending on how vertical your scene is (and how fast your camera may move on the Y axis).
    final public var sdfgiYScale: Environment.SDFGIYScale {
        get {
            return get_sdfgi_y_scale ()
        }
        
        set {
            set_sdfgi_y_scale (newValue)
        }
        
    }
    
    /// The energy multiplier to use for SDFGI. Higher values will result in brighter indirect lighting and reflections. See also ``sdfgiBounceFeedback``.
    final public var sdfgiEnergy: Double {
        get {
            return get_sdfgi_energy ()
        }
        
        set {
            set_sdfgi_energy (newValue)
        }
        
    }
    
    /// The normal bias to use for SDFGI probes. Increasing this value can reduce visible streaking artifacts on sloped surfaces, at the cost of increased light leaking.
    final public var sdfgiNormalBias: Double {
        get {
            return get_sdfgi_normal_bias ()
        }
        
        set {
            set_sdfgi_normal_bias (newValue)
        }
        
    }
    
    /// The constant bias to use for SDFGI probes. Increasing this value can reduce visible streaking artifacts on sloped surfaces, at the cost of increased light leaking.
    final public var sdfgiProbeBias: Double {
        get {
            return get_sdfgi_probe_bias ()
        }
        
        set {
            set_sdfgi_probe_bias (newValue)
        }
        
    }
    
    /// If `true`, the glow effect is enabled.
    /// 
    /// > Note: Glow is only supported in the Forward+ and Mobile rendering methods, not Compatibility. When using the Mobile rendering method, glow will look different due to the lower dynamic range available in the Mobile rendering method.
    /// 
    final public var glowEnabled: Bool {
        get {
            return is_glow_enabled ()
        }
        
        set {
            set_glow_enabled (newValue)
        }
        
    }
    
    /// If `true`, glow levels will be normalized so that summed together their intensities equal `1.0`.
    final public var glowNormalized: Bool {
        get {
            return is_glow_normalized ()
        }
        
        set {
            set_glow_normalized (newValue)
        }
        
    }
    
    /// The overall brightness multiplier of the glow effect. When using the Mobile rendering method (which only supports a lower dynamic range up to `2.0`), this should be increased to `1.5` to compensate.
    final public var glowIntensity: Double {
        get {
            return get_glow_intensity ()
        }
        
        set {
            set_glow_intensity (newValue)
        }
        
    }
    
    /// The strength of the glow effect. This applies as the glow is blurred across the screen and increases the distance and intensity of the blur. When using the Mobile rendering method, this should be increased to compensate for the lower dynamic range.
    final public var glowStrength: Double {
        get {
            return get_glow_strength ()
        }
        
        set {
            set_glow_strength (newValue)
        }
        
    }
    
    /// When using the .mix ``glowBlendMode``, this controls how much the source image is blended with the glow layer. A value of `0.0` makes the glow rendering invisible, while a value of `1.0` is equivalent to .replace.
    final public var glowMix: Double {
        get {
            return get_glow_mix ()
        }
        
        set {
            set_glow_mix (newValue)
        }
        
    }
    
    /// The bloom's intensity. If set to a value higher than `0`, this will make glow visible in areas darker than the ``glowHdrThreshold``.
    final public var glowBloom: Double {
        get {
            return get_glow_bloom ()
        }
        
        set {
            set_glow_bloom (newValue)
        }
        
    }
    
    /// The glow blending mode.
    final public var glowBlendMode: Environment.GlowBlendMode {
        get {
            return get_glow_blend_mode ()
        }
        
        set {
            set_glow_blend_mode (newValue)
        }
        
    }
    
    /// The lower threshold of the HDR glow. When using the Mobile rendering method (which only supports a lower dynamic range up to `2.0`), this may need to be below `1.0` for glow to be visible. A value of `0.9` works well in this case. This value also needs to be decreased below `1.0` when using glow in 2D, as 2D rendering is performed in SDR.
    final public var glowHdrThreshold: Double {
        get {
            return get_glow_hdr_bleed_threshold ()
        }
        
        set {
            set_glow_hdr_bleed_threshold (newValue)
        }
        
    }
    
    /// The bleed scale of the HDR glow.
    final public var glowHdrScale: Double {
        get {
            return get_glow_hdr_bleed_scale ()
        }
        
        set {
            set_glow_hdr_bleed_scale (newValue)
        }
        
    }
    
    /// The higher threshold of the HDR glow. Areas brighter than this threshold will be clamped for the purposes of the glow effect.
    final public var glowHdrLuminanceCap: Double {
        get {
            return get_glow_hdr_luminance_cap ()
        }
        
        set {
            set_glow_hdr_luminance_cap (newValue)
        }
        
    }
    
    /// How strong of an impact the ``glowMap`` should have on the overall glow effect. A strength of `0.0` means the glow map has no effect on the overall glow effect. A strength of `1.0` means the glow has a full effect on the overall glow effect (and can turn off glow entirely in specific areas of the screen if the glow map has black areas).
    final public var glowMapStrength: Double {
        get {
            return get_glow_map_strength ()
        }
        
        set {
            set_glow_map_strength (newValue)
        }
        
    }
    
    /// The texture that should be used as a glow map to _multiply_ the resulting glow color according to ``glowMapStrength``. This can be used to create a "lens dirt" effect. The texture's RGB color channels are used for modulation, but the alpha channel is ignored.
    /// 
    /// > Note: The texture will be stretched to fit the screen. Therefore, it's recommended to use a texture with an aspect ratio that matches your project's base aspect ratio (typically 16:9).
    /// 
    final public var glowMap: Texture? {
        get {
            return get_glow_map ()
        }
        
        set {
            set_glow_map (newValue)
        }
        
    }
    
    /// If `true`, fog effects are enabled.
    final public var fogEnabled: Bool {
        get {
            return is_fog_enabled ()
        }
        
        set {
            set_fog_enabled (newValue)
        }
        
    }
    
    /// The fog's color.
    final public var fogLightColor: Color {
        get {
            return get_fog_light_color ()
        }
        
        set {
            set_fog_light_color (newValue)
        }
        
    }
    
    /// The fog's brightness. Higher values result in brighter fog.
    final public var fogLightEnergy: Double {
        get {
            return get_fog_light_energy ()
        }
        
        set {
            set_fog_light_energy (newValue)
        }
        
    }
    
    /// If set above `0.0`, renders the scene's directional light(s) in the fog color depending on the view angle. This can be used to give the impression that the sun is "piercing" through the fog.
    final public var fogSunScatter: Double {
        get {
            return get_fog_sun_scatter ()
        }
        
        set {
            set_fog_sun_scatter (newValue)
        }
        
    }
    
    /// The _exponential_ fog density to use. Higher values result in a more dense fog. Fog rendering is exponential as in real life.
    final public var fogDensity: Double {
        get {
            return get_fog_density ()
        }
        
        set {
            set_fog_density (newValue)
        }
        
    }
    
    /// If set above `0.0` (exclusive), blends between the fog's color and the color of the background ``Sky``. This has a small performance cost when set above `0.0`. Must have ``backgroundMode`` set to .bgSky.
    /// 
    /// This is useful to simulate [url=https://en.wikipedia.org/wiki/Aerial_perspective]aerial perspective[/url] in large scenes with low density fog. However, it is not very useful for high-density fog, as the sky will shine through. When set to `1.0`, the fog color comes completely from the ``Sky``. If set to `0.0`, aerial perspective is disabled.
    /// 
    final public var fogAerialPerspective: Double {
        get {
            return get_fog_aerial_perspective ()
        }
        
        set {
            set_fog_aerial_perspective (newValue)
        }
        
    }
    
    /// The factor to use when affecting the sky with non-volumetric fog. `1.0` means that fog can fully obscure the sky. Lower values reduce the impact of fog on sky rendering, with `0.0` not affecting sky rendering at all.
    /// 
    /// > Note: ``fogSkyAffect`` has no visual effect if ``fogAerialPerspective`` is `1.0`.
    /// 
    final public var fogSkyAffect: Double {
        get {
            return get_fog_sky_affect ()
        }
        
        set {
            set_fog_sky_affect (newValue)
        }
        
    }
    
    /// The height at which the height fog effect begins.
    final public var fogHeight: Double {
        get {
            return get_fog_height ()
        }
        
        set {
            set_fog_height (newValue)
        }
        
    }
    
    /// The density used to increase fog as height decreases. To make fog increase as height increases, use a negative value.
    final public var fogHeightDensity: Double {
        get {
            return get_fog_height_density ()
        }
        
        set {
            set_fog_height_density (newValue)
        }
        
    }
    
    /// Enables the volumetric fog effect. Volumetric fog uses a screen-aligned froxel buffer to calculate accurate volumetric scattering in the short to medium range. Volumetric fog interacts with ``FogVolume``s and lights to calculate localized and global fog. Volumetric fog uses a PBR single-scattering model based on extinction, scattering, and emission which it exposes to users as density, albedo, and emission.
    /// 
    /// > Note: Volumetric fog is only supported in the Forward+ rendering method, not Mobile or Compatibility.
    /// 
    final public var volumetricFogEnabled: Bool {
        get {
            return is_volumetric_fog_enabled ()
        }
        
        set {
            set_volumetric_fog_enabled (newValue)
        }
        
    }
    
    /// The base _exponential_ density of the volumetric fog. Set this to the lowest density you want to have globally. ``FogVolume``s can be used to add to or subtract from this density in specific areas. Fog rendering is exponential as in real life.
    /// 
    /// A value of `0.0` disables global volumetric fog while allowing ``FogVolume``s to display volumetric fog in specific areas.
    /// 
    /// To make volumetric fog work as a volumetric _lighting_ solution, set ``volumetricFogDensity`` to the lowest non-zero value (`0.0001`) then increase lights' ``Light3D/lightVolumetricFogEnergy`` to values between `10000` and `100000` to compensate for the very low density.
    /// 
    final public var volumetricFogDensity: Double {
        get {
            return get_volumetric_fog_density ()
        }
        
        set {
            set_volumetric_fog_density (newValue)
        }
        
    }
    
    /// The ``Color`` of the volumetric fog when interacting with lights. Mist and fog have an albedo close to `Color(1, 1, 1, 1)` while smoke has a darker albedo.
    final public var volumetricFogAlbedo: Color {
        get {
            return get_volumetric_fog_albedo ()
        }
        
        set {
            set_volumetric_fog_albedo (newValue)
        }
        
    }
    
    /// The emitted light from the volumetric fog. Even with emission, volumetric fog will not cast light onto other surfaces. Emission is useful to establish an ambient color. As the volumetric fog effect uses single-scattering only, fog tends to need a little bit of emission to soften the harsh shadows.
    final public var volumetricFogEmission: Color {
        get {
            return get_volumetric_fog_emission ()
        }
        
        set {
            set_volumetric_fog_emission (newValue)
        }
        
    }
    
    /// The brightness of the emitted light from the volumetric fog.
    final public var volumetricFogEmissionEnergy: Double {
        get {
            return get_volumetric_fog_emission_energy ()
        }
        
        set {
            set_volumetric_fog_emission_energy (newValue)
        }
        
    }
    
    /// Scales the strength of Global Illumination used in the volumetric fog's albedo color. A value of `0.0` means that Global Illumination will not impact the volumetric fog. ``volumetricFogGiInject`` has a small performance cost when set above `0.0`.
    /// 
    /// > Note: This has no visible effect if ``volumetricFogDensity`` is `0.0` or if ``volumetricFogAlbedo`` is a fully black color.
    /// 
    /// > Note: Only ``VoxelGI`` and SDFGI (``Environment/sdfgiEnabled``) are taken into account when using ``volumetricFogGiInject``. Global illumination from ``LightmapGI``, ``ReflectionProbe`` and SSIL (see ``ssilEnabled``) will be ignored by volumetric fog.
    /// 
    final public var volumetricFogGiInject: Double {
        get {
            return get_volumetric_fog_gi_inject ()
        }
        
        set {
            set_volumetric_fog_gi_inject (newValue)
        }
        
    }
    
    /// The direction of scattered light as it goes through the volumetric fog. A value close to `1.0` means almost all light is scattered forward. A value close to `0.0` means light is scattered equally in all directions. A value close to `-1.0` means light is scattered mostly backward. Fog and mist scatter light slightly forward, while smoke scatters light equally in all directions.
    final public var volumetricFogAnisotropy: Double {
        get {
            return get_volumetric_fog_anisotropy ()
        }
        
        set {
            set_volumetric_fog_anisotropy (newValue)
        }
        
    }
    
    /// The distance over which the volumetric fog is computed. Increase to compute fog over a greater range, decrease to add more detail when a long range is not needed. For best quality fog, keep this as low as possible. See also ``ProjectSettings/rendering/environment/volumetricFog/volumeDepth``.
    final public var volumetricFogLength: Double {
        get {
            return get_volumetric_fog_length ()
        }
        
        set {
            set_volumetric_fog_length (newValue)
        }
        
    }
    
    /// The distribution of size down the length of the froxel buffer. A higher value compresses the froxels closer to the camera and places more detail closer to the camera.
    final public var volumetricFogDetailSpread: Double {
        get {
            return get_volumetric_fog_detail_spread ()
        }
        
        set {
            set_volumetric_fog_detail_spread (newValue)
        }
        
    }
    
    /// Scales the strength of ambient light used in the volumetric fog. A value of `0.0` means that ambient light will not impact the volumetric fog. ``volumetricFogAmbientInject`` has a small performance cost when set above `0.0`.
    /// 
    /// > Note: This has no visible effect if ``volumetricFogDensity`` is `0.0` or if ``volumetricFogAlbedo`` is a fully black color.
    /// 
    final public var volumetricFogAmbientInject: Double {
        get {
            return get_volumetric_fog_ambient_inject ()
        }
        
        set {
            set_volumetric_fog_ambient_inject (newValue)
        }
        
    }
    
    /// The factor to use when affecting the sky with volumetric fog. `1.0` means that volumetric fog can fully obscure the sky. Lower values reduce the impact of volumetric fog on sky rendering, with `0.0` not affecting sky rendering at all.
    /// 
    /// > Note: ``volumetricFogSkyAffect`` also affects ``FogVolume``s, even if ``volumetricFogDensity`` is `0.0`. If you notice ``FogVolume``s are disappearing when looking towards the sky, set ``volumetricFogSkyAffect`` to `1.0`.
    /// 
    final public var volumetricFogSkyAffect: Double {
        get {
            return get_volumetric_fog_sky_affect ()
        }
        
        set {
            set_volumetric_fog_sky_affect (newValue)
        }
        
    }
    
    /// Enables temporal reprojection in the volumetric fog. Temporal reprojection blends the current frame's volumetric fog with the last frame's volumetric fog to smooth out jagged edges. The performance cost is minimal; however, it leads to moving ``FogVolume``s and ``Light3D``s "ghosting" and leaving a trail behind them. When temporal reprojection is enabled, try to avoid moving ``FogVolume``s or ``Light3D``s too fast. Short-lived dynamic lighting effects should have ``Light3D/lightVolumetricFogEnergy`` set to `0.0` to avoid ghosting.
    final public var volumetricFogTemporalReprojectionEnabled: Bool {
        get {
            return is_volumetric_fog_temporal_reprojection_enabled ()
        }
        
        set {
            set_volumetric_fog_temporal_reprojection_enabled (newValue)
        }
        
    }
    
    /// The amount by which to blend the last frame with the current frame. A higher number results in smoother volumetric fog, but makes "ghosting" much worse. A lower value reduces ghosting but can result in the per-frame temporal jitter becoming visible.
    final public var volumetricFogTemporalReprojectionAmount: Double {
        get {
            return get_volumetric_fog_temporal_reprojection_amount ()
        }
        
        set {
            set_volumetric_fog_temporal_reprojection_amount (newValue)
        }
        
    }
    
    /// If `true`, enables the `adjustment_*` properties provided by this resource. If `false`, modifications to the `adjustment_*` properties will have no effect on the rendered scene.
    /// 
    /// > Note: Adjustments are only supported in the Forward+ and Mobile rendering methods, not Compatibility.
    /// 
    final public var adjustmentEnabled: Bool {
        get {
            return is_adjustment_enabled ()
        }
        
        set {
            set_adjustment_enabled (newValue)
        }
        
    }
    
    /// The global brightness value of the rendered scene. Effective only if ``adjustmentEnabled`` is `true`.
    final public var adjustmentBrightness: Double {
        get {
            return get_adjustment_brightness ()
        }
        
        set {
            set_adjustment_brightness (newValue)
        }
        
    }
    
    /// The global contrast value of the rendered scene (default value is 1). Effective only if ``adjustmentEnabled`` is `true`.
    final public var adjustmentContrast: Double {
        get {
            return get_adjustment_contrast ()
        }
        
        set {
            set_adjustment_contrast (newValue)
        }
        
    }
    
    /// The global color saturation value of the rendered scene (default value is 1). Effective only if ``adjustmentEnabled`` is `true`.
    final public var adjustmentSaturation: Double {
        get {
            return get_adjustment_saturation ()
        }
        
        set {
            set_adjustment_saturation (newValue)
        }
        
    }
    
    /// The ``Texture2D`` or ``Texture3D`` lookup table (LUT) to use for the built-in post-process color grading. Can use a ``GradientTexture1D`` for a 1-dimensional LUT, or a ``Texture3D`` for a more complex LUT. Effective only if ``adjustmentEnabled`` is `true`.
    final public var adjustmentColorCorrection: Texture? {
        get {
            return get_adjustment_color_correction ()
        }
        
        set {
            set_adjustment_color_correction (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_background: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_background")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4071623990)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_background (_ mode: Environment.BGMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_background, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_background, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_background: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_background")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1843210413)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_background ()-> Environment.BGMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Environment.method_get_background, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Environment.BGMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_sky: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sky")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3336722921)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sky (_ sky: Sky?) {
        #if false
        
        var copy_sky_handle = sky?.handle
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sky, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sky_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: sky?.handle) { p0 in
        _args.append (sky == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sky, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sky: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sky")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1177136966)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sky ()-> Sky? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Environment.method_get_sky, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_sky_custom_fov: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sky_custom_fov")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sky_custom_fov (_ scale: Double) {
        #if false
        
        var copy_scale = scale
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sky_custom_fov, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scale)
        
        #else
        
        var copy_scale = scale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sky_custom_fov, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sky_custom_fov: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sky_custom_fov")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sky_custom_fov ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_sky_custom_fov, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sky_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sky_rotation")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sky_rotation (_ eulerRadians: Vector3) {
        #if false
        
        var copy_euler_radians = eulerRadians
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sky_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_euler_radians)
        
        #else
        
        var copy_euler_radians = eulerRadians
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_euler_radians) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sky_rotation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sky_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sky_rotation")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sky_rotation ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (Environment.method_get_sky_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bg_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bg_color")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bg_color (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_bg_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_bg_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bg_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bg_color")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bg_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Environment.method_get_bg_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bg_energy_multiplier: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bg_energy_multiplier")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bg_energy_multiplier (_ energy: Double) {
        #if false
        
        var copy_energy = energy
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_bg_energy_multiplier, UnsafeMutableRawPointer (mutating: handle), nil, &copy_energy)
        
        #else
        
        var copy_energy = energy
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_energy) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_bg_energy_multiplier, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bg_energy_multiplier: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bg_energy_multiplier")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bg_energy_multiplier ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_bg_energy_multiplier, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bg_intensity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bg_intensity")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bg_intensity (_ energy: Double) {
        #if false
        
        var copy_energy = energy
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_bg_intensity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_energy)
        
        #else
        
        var copy_energy = energy
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_energy) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_bg_intensity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bg_intensity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bg_intensity")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bg_intensity ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_bg_intensity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_canvas_max_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_canvas_max_layer")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_canvas_max_layer (_ layer: Int32) {
        #if false
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_canvas_max_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer)
        
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_canvas_max_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_canvas_max_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_canvas_max_layer")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_canvas_max_layer ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Environment.method_get_canvas_max_layer, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_camera_feed_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_camera_feed_id")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_camera_feed_id (_ id: Int32) {
        #if false
        
        var copy_id: Int = Int (id)
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_camera_feed_id, UnsafeMutableRawPointer (mutating: handle), nil, &copy_id)
        
        #else
        
        var copy_id: Int = Int (id)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_camera_feed_id, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_camera_feed_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_camera_feed_id")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_camera_feed_id ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Environment.method_get_camera_feed_id, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ambient_light_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ambient_light_color")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ambient_light_color (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ambient_light_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ambient_light_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ambient_light_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ambient_light_color")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ambient_light_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Environment.method_get_ambient_light_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ambient_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ambient_source")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2607780160)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ambient_source (_ source: Environment.AmbientSource) {
        #if false
        
        var copy_source = Int64 (source.rawValue)
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ambient_source, UnsafeMutableRawPointer (mutating: handle), nil, &copy_source)
        
        #else
        
        var copy_source = Int64 (source.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_source) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ambient_source, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ambient_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ambient_source")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 67453933)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ambient_source ()-> Environment.AmbientSource {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Environment.method_get_ambient_source, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Environment.AmbientSource (rawValue: _result)!
    }
    
    fileprivate static var method_set_ambient_light_energy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ambient_light_energy")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ambient_light_energy (_ energy: Double) {
        #if false
        
        var copy_energy = energy
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ambient_light_energy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_energy)
        
        #else
        
        var copy_energy = energy
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_energy) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ambient_light_energy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ambient_light_energy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ambient_light_energy")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ambient_light_energy ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ambient_light_energy, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ambient_light_sky_contribution: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ambient_light_sky_contribution")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ambient_light_sky_contribution (_ ratio: Double) {
        #if false
        
        var copy_ratio = ratio
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ambient_light_sky_contribution, UnsafeMutableRawPointer (mutating: handle), nil, &copy_ratio)
        
        #else
        
        var copy_ratio = ratio
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_ratio) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ambient_light_sky_contribution, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ambient_light_sky_contribution: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ambient_light_sky_contribution")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ambient_light_sky_contribution ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ambient_light_sky_contribution, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_reflection_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_reflection_source")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 299673197)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_reflection_source (_ source: Environment.ReflectionSource) {
        #if false
        
        var copy_source = Int64 (source.rawValue)
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_reflection_source, UnsafeMutableRawPointer (mutating: handle), nil, &copy_source)
        
        #else
        
        var copy_source = Int64 (source.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_source) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_reflection_source, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_reflection_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_reflection_source")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 777700713)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_reflection_source ()-> Environment.ReflectionSource {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Environment.method_get_reflection_source, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Environment.ReflectionSource (rawValue: _result)!
    }
    
    fileprivate static var method_set_tonemapper: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tonemapper")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1509116664)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tonemapper (_ mode: Environment.ToneMapper) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_tonemapper, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_tonemapper, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tonemapper: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tonemapper")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2908408137)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tonemapper ()-> Environment.ToneMapper {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Environment.method_get_tonemapper, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Environment.ToneMapper (rawValue: _result)!
    }
    
    fileprivate static var method_set_tonemap_exposure: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tonemap_exposure")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tonemap_exposure (_ exposure: Double) {
        #if false
        
        var copy_exposure = exposure
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_tonemap_exposure, UnsafeMutableRawPointer (mutating: handle), nil, &copy_exposure)
        
        #else
        
        var copy_exposure = exposure
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_exposure) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_tonemap_exposure, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tonemap_exposure: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tonemap_exposure")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tonemap_exposure ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_tonemap_exposure, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_tonemap_white: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tonemap_white")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tonemap_white (_ white: Double) {
        #if false
        
        var copy_white = white
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_tonemap_white, UnsafeMutableRawPointer (mutating: handle), nil, &copy_white)
        
        #else
        
        var copy_white = white
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_white) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_tonemap_white, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tonemap_white: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tonemap_white")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tonemap_white ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_tonemap_white, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssr_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssr_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssr_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssr_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssr_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_ssr_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_ssr_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_ssr_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_ssr_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssr_max_steps: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssr_max_steps")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssr_max_steps (_ maxSteps: Int32) {
        #if false
        
        var copy_max_steps: Int = Int (maxSteps)
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssr_max_steps, UnsafeMutableRawPointer (mutating: handle), nil, &copy_max_steps)
        
        #else
        
        var copy_max_steps: Int = Int (maxSteps)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_max_steps) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssr_max_steps, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssr_max_steps: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssr_max_steps")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssr_max_steps ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Environment.method_get_ssr_max_steps, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssr_fade_in: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssr_fade_in")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssr_fade_in (_ fadeIn: Double) {
        #if false
        
        var copy_fade_in = fadeIn
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssr_fade_in, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fade_in)
        
        #else
        
        var copy_fade_in = fadeIn
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fade_in) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssr_fade_in, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssr_fade_in: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssr_fade_in")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssr_fade_in ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssr_fade_in, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssr_fade_out: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssr_fade_out")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssr_fade_out (_ fadeOut: Double) {
        #if false
        
        var copy_fade_out = fadeOut
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssr_fade_out, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fade_out)
        
        #else
        
        var copy_fade_out = fadeOut
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fade_out) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssr_fade_out, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssr_fade_out: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssr_fade_out")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssr_fade_out ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssr_fade_out, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssr_depth_tolerance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssr_depth_tolerance")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssr_depth_tolerance (_ depthTolerance: Double) {
        #if false
        
        var copy_depth_tolerance = depthTolerance
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssr_depth_tolerance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_depth_tolerance)
        
        #else
        
        var copy_depth_tolerance = depthTolerance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_depth_tolerance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssr_depth_tolerance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssr_depth_tolerance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssr_depth_tolerance")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssr_depth_tolerance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssr_depth_tolerance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssao_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssao_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssao_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssao_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssao_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_ssao_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_ssao_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_ssao_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_ssao_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssao_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssao_radius")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssao_radius (_ radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssao_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssao_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssao_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssao_radius")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssao_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssao_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssao_intensity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssao_intensity")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssao_intensity (_ intensity: Double) {
        #if false
        
        var copy_intensity = intensity
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssao_intensity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_intensity)
        
        #else
        
        var copy_intensity = intensity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_intensity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssao_intensity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssao_intensity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssao_intensity")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssao_intensity ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssao_intensity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssao_power: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssao_power")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssao_power (_ power: Double) {
        #if false
        
        var copy_power = power
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssao_power, UnsafeMutableRawPointer (mutating: handle), nil, &copy_power)
        
        #else
        
        var copy_power = power
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_power) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssao_power, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssao_power: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssao_power")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssao_power ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssao_power, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssao_detail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssao_detail")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssao_detail (_ detail: Double) {
        #if false
        
        var copy_detail = detail
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssao_detail, UnsafeMutableRawPointer (mutating: handle), nil, &copy_detail)
        
        #else
        
        var copy_detail = detail
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_detail) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssao_detail, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssao_detail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssao_detail")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssao_detail ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssao_detail, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssao_horizon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssao_horizon")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssao_horizon (_ horizon: Double) {
        #if false
        
        var copy_horizon = horizon
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssao_horizon, UnsafeMutableRawPointer (mutating: handle), nil, &copy_horizon)
        
        #else
        
        var copy_horizon = horizon
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_horizon) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssao_horizon, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssao_horizon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssao_horizon")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssao_horizon ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssao_horizon, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssao_sharpness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssao_sharpness")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssao_sharpness (_ sharpness: Double) {
        #if false
        
        var copy_sharpness = sharpness
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssao_sharpness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sharpness)
        
        #else
        
        var copy_sharpness = sharpness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_sharpness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssao_sharpness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssao_sharpness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssao_sharpness")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssao_sharpness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssao_sharpness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssao_direct_light_affect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssao_direct_light_affect")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssao_direct_light_affect (_ amount: Double) {
        #if false
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssao_direct_light_affect, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssao_direct_light_affect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssao_direct_light_affect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssao_direct_light_affect")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssao_direct_light_affect ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssao_direct_light_affect, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssao_ao_channel_affect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssao_ao_channel_affect")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssao_ao_channel_affect (_ amount: Double) {
        #if false
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssao_ao_channel_affect, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssao_ao_channel_affect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssao_ao_channel_affect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssao_ao_channel_affect")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssao_ao_channel_affect ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssao_ao_channel_affect, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssil_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssil_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssil_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssil_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssil_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_ssil_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_ssil_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_ssil_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_ssil_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssil_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssil_radius")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssil_radius (_ radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssil_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssil_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssil_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssil_radius")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssil_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssil_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssil_intensity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssil_intensity")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssil_intensity (_ intensity: Double) {
        #if false
        
        var copy_intensity = intensity
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssil_intensity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_intensity)
        
        #else
        
        var copy_intensity = intensity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_intensity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssil_intensity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssil_intensity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssil_intensity")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssil_intensity ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssil_intensity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssil_sharpness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssil_sharpness")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssil_sharpness (_ sharpness: Double) {
        #if false
        
        var copy_sharpness = sharpness
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssil_sharpness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sharpness)
        
        #else
        
        var copy_sharpness = sharpness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_sharpness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssil_sharpness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssil_sharpness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssil_sharpness")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssil_sharpness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssil_sharpness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ssil_normal_rejection: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ssil_normal_rejection")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ssil_normal_rejection (_ normalRejection: Double) {
        #if false
        
        var copy_normal_rejection = normalRejection
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_ssil_normal_rejection, UnsafeMutableRawPointer (mutating: handle), nil, &copy_normal_rejection)
        
        #else
        
        var copy_normal_rejection = normalRejection
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_normal_rejection) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_ssil_normal_rejection, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ssil_normal_rejection: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ssil_normal_rejection")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ssil_normal_rejection ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_ssil_normal_rejection, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_sdfgi_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_sdfgi_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_sdfgi_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_sdfgi_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_cascades: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_cascades")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_cascades (_ amount: Int32) {
        #if false
        
        var copy_amount: Int = Int (amount)
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_cascades, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount: Int = Int (amount)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_cascades, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sdfgi_cascades: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sdfgi_cascades")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sdfgi_cascades ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Environment.method_get_sdfgi_cascades, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_min_cell_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_min_cell_size")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_min_cell_size (_ size: Double) {
        #if false
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_min_cell_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_min_cell_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sdfgi_min_cell_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sdfgi_min_cell_size")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sdfgi_min_cell_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_sdfgi_min_cell_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_max_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_max_distance")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_max_distance (_ distance: Double) {
        #if false
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_max_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_max_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sdfgi_max_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sdfgi_max_distance")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sdfgi_max_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_sdfgi_max_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_cascade0_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_cascade0_distance")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_cascade0_distance (_ distance: Double) {
        #if false
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_cascade0_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_cascade0_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sdfgi_cascade0_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sdfgi_cascade0_distance")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sdfgi_cascade0_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_sdfgi_cascade0_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_y_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_y_scale")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3608608372)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_y_scale (_ scale: Environment.SDFGIYScale) {
        #if false
        
        var copy_scale = Int64 (scale.rawValue)
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_y_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scale)
        
        #else
        
        var copy_scale = Int64 (scale.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_y_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sdfgi_y_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sdfgi_y_scale")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2568002245)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sdfgi_y_scale ()-> Environment.SDFGIYScale {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Environment.method_get_sdfgi_y_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Environment.SDFGIYScale (rawValue: _result)!
    }
    
    fileprivate static var method_set_sdfgi_use_occlusion: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_use_occlusion")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_use_occlusion (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_use_occlusion, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_use_occlusion, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_sdfgi_using_occlusion: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_sdfgi_using_occlusion")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_sdfgi_using_occlusion ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_sdfgi_using_occlusion, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_bounce_feedback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_bounce_feedback")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_bounce_feedback (_ amount: Double) {
        #if false
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_bounce_feedback, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_bounce_feedback, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sdfgi_bounce_feedback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sdfgi_bounce_feedback")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sdfgi_bounce_feedback ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_sdfgi_bounce_feedback, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_read_sky_light: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_read_sky_light")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_read_sky_light (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_read_sky_light, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_read_sky_light, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_sdfgi_reading_sky_light: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_sdfgi_reading_sky_light")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_sdfgi_reading_sky_light ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_sdfgi_reading_sky_light, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_energy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_energy")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_energy (_ amount: Double) {
        #if false
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_energy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_energy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sdfgi_energy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sdfgi_energy")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sdfgi_energy ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_sdfgi_energy, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_normal_bias: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_normal_bias")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_normal_bias (_ bias: Double) {
        #if false
        
        var copy_bias = bias
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_normal_bias, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bias)
        
        #else
        
        var copy_bias = bias
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bias) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_normal_bias, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sdfgi_normal_bias: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sdfgi_normal_bias")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sdfgi_normal_bias ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_sdfgi_normal_bias, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sdfgi_probe_bias: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sdfgi_probe_bias")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sdfgi_probe_bias (_ bias: Double) {
        #if false
        
        var copy_bias = bias
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_sdfgi_probe_bias, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bias)
        
        #else
        
        var copy_bias = bias
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bias) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_sdfgi_probe_bias, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sdfgi_probe_bias: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sdfgi_probe_bias")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sdfgi_probe_bias ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_sdfgi_probe_bias, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_glow_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_glow_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_glow_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_glow_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_level: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_level")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Sets the intensity of the glow level `idx`. A value above `0.0` enables the level. Each level relies on the previous level. This means that enabling higher glow levels will slow down the glow effect rendering, even if previous levels aren't enabled.
    public final func setGlowLevel (idx: Int32, intensity: Double) {
        #if false
        
        var copy_idx: Int = Int (idx)
        var copy_intensity = intensity
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_level, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &copy_intensity)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_intensity = intensity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_intensity) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Environment.method_set_glow_level, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_level: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_level")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns the intensity of the glow level `idx`.
    public final func getGlowLevel (idx: Int32)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (Environment.method_get_glow_level, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_get_glow_level, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_glow_normalized: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_normalized")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_normalized (_ normalize: Bool) {
        #if false
        
        var copy_normalize = normalize
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_normalized, UnsafeMutableRawPointer (mutating: handle), nil, &copy_normalize)
        
        #else
        
        var copy_normalize = normalize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_normalize) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_normalized, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_glow_normalized: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_glow_normalized")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_glow_normalized ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_glow_normalized, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_intensity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_intensity")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_intensity (_ intensity: Double) {
        #if false
        
        var copy_intensity = intensity
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_intensity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_intensity)
        
        #else
        
        var copy_intensity = intensity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_intensity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_intensity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_intensity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_intensity")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glow_intensity ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_glow_intensity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_strength")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_strength (_ strength: Double) {
        #if false
        
        var copy_strength = strength
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_strength, UnsafeMutableRawPointer (mutating: handle), nil, &copy_strength)
        
        #else
        
        var copy_strength = strength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_strength) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_strength, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_strength")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glow_strength ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_glow_strength, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_mix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_mix")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_mix (_ mix: Double) {
        #if false
        
        var copy_mix = mix
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_mix, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mix)
        
        #else
        
        var copy_mix = mix
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mix) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_mix, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_mix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_mix")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glow_mix ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_glow_mix, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_bloom: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_bloom")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_bloom (_ amount: Double) {
        #if false
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_bloom, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_bloom, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_bloom: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_bloom")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glow_bloom ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_glow_bloom, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_blend_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_blend_mode")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2561587761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_blend_mode (_ mode: Environment.GlowBlendMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_blend_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_blend_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_blend_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_blend_mode")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1529667332)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glow_blend_mode ()-> Environment.GlowBlendMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Environment.method_get_glow_blend_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Environment.GlowBlendMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_glow_hdr_bleed_threshold: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_hdr_bleed_threshold")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_hdr_bleed_threshold (_ threshold: Double) {
        #if false
        
        var copy_threshold = threshold
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_hdr_bleed_threshold, UnsafeMutableRawPointer (mutating: handle), nil, &copy_threshold)
        
        #else
        
        var copy_threshold = threshold
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_threshold) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_hdr_bleed_threshold, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_hdr_bleed_threshold: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_hdr_bleed_threshold")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glow_hdr_bleed_threshold ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_glow_hdr_bleed_threshold, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_hdr_bleed_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_hdr_bleed_scale")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_hdr_bleed_scale (_ scale: Double) {
        #if false
        
        var copy_scale = scale
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_hdr_bleed_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scale)
        
        #else
        
        var copy_scale = scale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_hdr_bleed_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_hdr_bleed_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_hdr_bleed_scale")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glow_hdr_bleed_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_glow_hdr_bleed_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_hdr_luminance_cap: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_hdr_luminance_cap")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_hdr_luminance_cap (_ amount: Double) {
        #if false
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_hdr_luminance_cap, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_hdr_luminance_cap, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_hdr_luminance_cap: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_hdr_luminance_cap")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glow_hdr_luminance_cap ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_glow_hdr_luminance_cap, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_map_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_map_strength")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_map_strength (_ strength: Double) {
        #if false
        
        var copy_strength = strength
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_map_strength, UnsafeMutableRawPointer (mutating: handle), nil, &copy_strength)
        
        #else
        
        var copy_strength = strength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_strength) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_map_strength, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_map_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_map_strength")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glow_map_strength ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_glow_map_strength, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_glow_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glow_map")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1790811099)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glow_map (_ mode: Texture?) {
        #if false
        
        var copy_mode_handle = mode?.handle
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_glow_map, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: mode?.handle) { p0 in
        _args.append (mode == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_glow_map, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glow_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glow_map")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4037048985)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glow_map ()-> Texture? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Environment.method_get_glow_map, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_fog_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fog_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fog_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_fog_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_fog_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_fog_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_fog_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_fog_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_fog_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fog_light_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fog_light_color")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fog_light_color (_ lightColor: Color) {
        #if false
        
        var copy_light_color = lightColor
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_fog_light_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_light_color)
        
        #else
        
        var copy_light_color = lightColor
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_light_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_fog_light_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fog_light_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fog_light_color")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fog_light_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Environment.method_get_fog_light_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fog_light_energy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fog_light_energy")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fog_light_energy (_ lightEnergy: Double) {
        #if false
        
        var copy_light_energy = lightEnergy
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_fog_light_energy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_light_energy)
        
        #else
        
        var copy_light_energy = lightEnergy
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_light_energy) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_fog_light_energy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fog_light_energy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fog_light_energy")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fog_light_energy ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_fog_light_energy, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fog_sun_scatter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fog_sun_scatter")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fog_sun_scatter (_ sunScatter: Double) {
        #if false
        
        var copy_sun_scatter = sunScatter
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_fog_sun_scatter, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sun_scatter)
        
        #else
        
        var copy_sun_scatter = sunScatter
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_sun_scatter) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_fog_sun_scatter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fog_sun_scatter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fog_sun_scatter")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fog_sun_scatter ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_fog_sun_scatter, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fog_density: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fog_density")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fog_density (_ density: Double) {
        #if false
        
        var copy_density = density
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_fog_density, UnsafeMutableRawPointer (mutating: handle), nil, &copy_density)
        
        #else
        
        var copy_density = density
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_density) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_fog_density, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fog_density: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fog_density")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fog_density ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_fog_density, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fog_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fog_height")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fog_height (_ height: Double) {
        #if false
        
        var copy_height = height
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_fog_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_height)
        
        #else
        
        var copy_height = height
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_height) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_fog_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fog_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fog_height")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fog_height ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_fog_height, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fog_height_density: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fog_height_density")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fog_height_density (_ heightDensity: Double) {
        #if false
        
        var copy_height_density = heightDensity
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_fog_height_density, UnsafeMutableRawPointer (mutating: handle), nil, &copy_height_density)
        
        #else
        
        var copy_height_density = heightDensity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_height_density) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_fog_height_density, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fog_height_density: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fog_height_density")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fog_height_density ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_fog_height_density, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fog_aerial_perspective: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fog_aerial_perspective")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fog_aerial_perspective (_ aerialPerspective: Double) {
        #if false
        
        var copy_aerial_perspective = aerialPerspective
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_fog_aerial_perspective, UnsafeMutableRawPointer (mutating: handle), nil, &copy_aerial_perspective)
        
        #else
        
        var copy_aerial_perspective = aerialPerspective
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_aerial_perspective) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_fog_aerial_perspective, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fog_aerial_perspective: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fog_aerial_perspective")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fog_aerial_perspective ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_fog_aerial_perspective, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fog_sky_affect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fog_sky_affect")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fog_sky_affect (_ skyAffect: Double) {
        #if false
        
        var copy_sky_affect = skyAffect
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_fog_sky_affect, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sky_affect)
        
        #else
        
        var copy_sky_affect = skyAffect
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_sky_affect) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_fog_sky_affect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fog_sky_affect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fog_sky_affect")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fog_sky_affect ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_fog_sky_affect, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_volumetric_fog_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_volumetric_fog_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_volumetric_fog_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_volumetric_fog_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_emission: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_emission")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_emission (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_emission, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_emission, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_emission: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_emission")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_emission ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_emission, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_albedo: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_albedo")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_albedo (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_albedo, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_albedo, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_albedo: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_albedo")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_albedo ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_albedo, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_density: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_density")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_density (_ density: Double) {
        #if false
        
        var copy_density = density
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_density, UnsafeMutableRawPointer (mutating: handle), nil, &copy_density)
        
        #else
        
        var copy_density = density
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_density) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_density, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_density: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_density")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_density ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_density, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_emission_energy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_emission_energy")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_emission_energy (_ begin: Double) {
        #if false
        
        var copy_begin = begin
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_emission_energy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_begin)
        
        #else
        
        var copy_begin = begin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_begin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_emission_energy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_emission_energy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_emission_energy")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_emission_energy ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_emission_energy, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_anisotropy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_anisotropy")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_anisotropy (_ anisotropy: Double) {
        #if false
        
        var copy_anisotropy = anisotropy
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_anisotropy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_anisotropy)
        
        #else
        
        var copy_anisotropy = anisotropy
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_anisotropy) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_anisotropy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_anisotropy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_anisotropy")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_anisotropy ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_anisotropy, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_length")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_length (_ length: Double) {
        #if false
        
        var copy_length = length
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_length, UnsafeMutableRawPointer (mutating: handle), nil, &copy_length)
        
        #else
        
        var copy_length = length
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_length) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_length, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_length")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_length ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_detail_spread: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_detail_spread")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_detail_spread (_ detailSpread: Double) {
        #if false
        
        var copy_detail_spread = detailSpread
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_detail_spread, UnsafeMutableRawPointer (mutating: handle), nil, &copy_detail_spread)
        
        #else
        
        var copy_detail_spread = detailSpread
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_detail_spread) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_detail_spread, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_detail_spread: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_detail_spread")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_detail_spread ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_detail_spread, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_gi_inject: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_gi_inject")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_gi_inject (_ giInject: Double) {
        #if false
        
        var copy_gi_inject = giInject
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_gi_inject, UnsafeMutableRawPointer (mutating: handle), nil, &copy_gi_inject)
        
        #else
        
        var copy_gi_inject = giInject
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_gi_inject) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_gi_inject, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_gi_inject: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_gi_inject")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_gi_inject ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_gi_inject, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_ambient_inject: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_ambient_inject")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_ambient_inject (_ enabled: Double) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_ambient_inject, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_ambient_inject, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_ambient_inject: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_ambient_inject")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_ambient_inject ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_ambient_inject, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_sky_affect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_sky_affect")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_sky_affect (_ skyAffect: Double) {
        #if false
        
        var copy_sky_affect = skyAffect
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_sky_affect, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sky_affect)
        
        #else
        
        var copy_sky_affect = skyAffect
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_sky_affect) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_sky_affect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_sky_affect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_sky_affect")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_sky_affect ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_sky_affect, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_temporal_reprojection_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_temporal_reprojection_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_temporal_reprojection_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_temporal_reprojection_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_temporal_reprojection_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_volumetric_fog_temporal_reprojection_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_volumetric_fog_temporal_reprojection_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_volumetric_fog_temporal_reprojection_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_volumetric_fog_temporal_reprojection_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_volumetric_fog_temporal_reprojection_amount: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_volumetric_fog_temporal_reprojection_amount")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_volumetric_fog_temporal_reprojection_amount (_ temporalReprojectionAmount: Double) {
        #if false
        
        var copy_temporal_reprojection_amount = temporalReprojectionAmount
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_volumetric_fog_temporal_reprojection_amount, UnsafeMutableRawPointer (mutating: handle), nil, &copy_temporal_reprojection_amount)
        
        #else
        
        var copy_temporal_reprojection_amount = temporalReprojectionAmount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_temporal_reprojection_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_volumetric_fog_temporal_reprojection_amount, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_volumetric_fog_temporal_reprojection_amount: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_volumetric_fog_temporal_reprojection_amount")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_volumetric_fog_temporal_reprojection_amount ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_volumetric_fog_temporal_reprojection_amount, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_adjustment_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_adjustment_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_adjustment_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_adjustment_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_adjustment_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_adjustment_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_adjustment_enabled")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_adjustment_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Environment.method_is_adjustment_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_adjustment_brightness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_adjustment_brightness")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_adjustment_brightness (_ brightness: Double) {
        #if false
        
        var copy_brightness = brightness
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_adjustment_brightness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_brightness)
        
        #else
        
        var copy_brightness = brightness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_brightness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_adjustment_brightness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_adjustment_brightness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_adjustment_brightness")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_adjustment_brightness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_adjustment_brightness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_adjustment_contrast: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_adjustment_contrast")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_adjustment_contrast (_ contrast: Double) {
        #if false
        
        var copy_contrast = contrast
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_adjustment_contrast, UnsafeMutableRawPointer (mutating: handle), nil, &copy_contrast)
        
        #else
        
        var copy_contrast = contrast
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_contrast) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_adjustment_contrast, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_adjustment_contrast: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_adjustment_contrast")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_adjustment_contrast ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_adjustment_contrast, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_adjustment_saturation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_adjustment_saturation")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_adjustment_saturation (_ saturation: Double) {
        #if false
        
        var copy_saturation = saturation
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_adjustment_saturation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_saturation)
        
        #else
        
        var copy_saturation = saturation
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_saturation) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_adjustment_saturation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_adjustment_saturation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_adjustment_saturation")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_adjustment_saturation ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Environment.method_get_adjustment_saturation, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_adjustment_color_correction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_adjustment_color_correction")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1790811099)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_adjustment_color_correction (_ colorCorrection: Texture?) {
        #if false
        
        var copy_color_correction_handle = colorCorrection?.handle
        
        gi.object_method_bind_ptrcall_v (Environment.method_set_adjustment_color_correction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color_correction_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: colorCorrection?.handle) { p0 in
        _args.append (colorCorrection == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Environment.method_set_adjustment_color_correction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_adjustment_color_correction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_adjustment_color_correction")
        return withUnsafePointer (to: &Environment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4037048985)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_adjustment_color_correction ()-> Texture? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Environment.method_get_adjustment_color_correction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

