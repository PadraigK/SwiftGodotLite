// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A region of 3D space that detects other ``CollisionObject3D``s entering or exiting it.
/// 
/// ``Area3D`` is a region of 3D space defined by one or multiple ``CollisionShape3D`` or ``CollisionPolygon3D`` child nodes. It detects when other ``CollisionObject3D``s enter or exit it, and it also keeps track of which collision objects haven't exited it yet (i.e. which one are overlapping it).
/// 
/// This node can also locally alter or override physics parameters (gravity, damping) and route audio to custom audio buses.
/// 
/// > Warning: Using a ``ConcavePolygonShape3D`` inside a ``CollisionShape3D`` child of this node (created e.g. by using the **Create Trimesh Collision Sibling** option in the **Mesh** menu that appears when selecting a ``MeshInstance3D`` node) may give unexpected results, since this collision shape is hollow. If this is not desired, it has to be split into multiple ``ConvexPolygonShape3D``s or primitive shapes like ``BoxShape3D``, or in some cases it may be replaceable by a ``CollisionPolygon3D``.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``bodyShapeEntered``
/// - ``bodyShapeExited``
/// - ``bodyEntered``
/// - ``bodyExited``
/// - ``areaShapeEntered``
/// - ``areaShapeExited``
/// - ``areaEntered``
/// - ``areaExited``
open class Area3D: CollisionObject3D {
    override open class var godotClassName: StringName { "Area3D" }
    public enum SpaceOverride: Int64 {
        /// This area does not affect gravity/damping.
        case disabled = 0 // SPACE_OVERRIDE_DISABLED
        /// This area adds its gravity/damping values to whatever has been calculated so far (in ``priority`` order).
        case combine = 1 // SPACE_OVERRIDE_COMBINE
        /// This area adds its gravity/damping values to whatever has been calculated so far (in ``priority`` order), ignoring any lower priority areas.
        case combineReplace = 2 // SPACE_OVERRIDE_COMBINE_REPLACE
        /// This area replaces any gravity/damping, even the defaults, ignoring any lower priority areas.
        case replace = 3 // SPACE_OVERRIDE_REPLACE
        /// This area replaces any gravity/damping calculated so far (in ``priority`` order), but keeps calculating the rest of the areas.
        case replaceCombine = 4 // SPACE_OVERRIDE_REPLACE_COMBINE
    }
    
    
    /* Properties */
    
    /// If `true`, the area detects bodies or areas entering and exiting it.
    final public var monitoring: Bool {
        get {
            return is_monitoring ()
        }
        
        set {
            set_monitoring (newValue)
        }
        
    }
    
    /// If `true`, other monitoring areas can detect this area.
    final public var monitorable: Bool {
        get {
            return is_monitorable ()
        }
        
        set {
            set_monitorable (newValue)
        }
        
    }
    
    /// The area's priority. Higher priority areas are processed first. The ``World3D``'s physics is always processed last, after all areas.
    final public var priority: Int32 {
        get {
            return get_priority ()
        }
        
        set {
            set_priority (newValue)
        }
        
    }
    
    /// Override mode for gravity calculations within this area. See ``Area3D/SpaceOverride`` for possible values.
    final public var gravitySpaceOverride: Area3D.SpaceOverride {
        get {
            return get_gravity_space_override_mode ()
        }
        
        set {
            set_gravity_space_override_mode (newValue)
        }
        
    }
    
    /// If `true`, gravity is calculated from a point (set via ``gravityPointCenter``). See also ``gravitySpaceOverride``.
    final public var gravityPoint: Bool {
        get {
            return is_gravity_a_point ()
        }
        
        set {
            set_gravity_is_point (newValue)
        }
        
    }
    
    /// The distance at which the gravity strength is equal to ``gravity``. For example, on a planet 100 meters in radius with a surface gravity of 4.0 m/s², set the ``gravity`` to 4.0 and the unit distance to 100.0. The gravity will have falloff according to the inverse square law, so in the example, at 200 meters from the center the gravity will be 1.0 m/s² (twice the distance, 1/4th the gravity), at 50 meters it will be 16.0 m/s² (half the distance, 4x the gravity), and so on.
    /// 
    /// The above is true only when the unit distance is a positive number. When this is set to 0.0, the gravity will be constant regardless of distance.
    /// 
    final public var gravityPointUnitDistance: Double {
        get {
            return get_gravity_point_unit_distance ()
        }
        
        set {
            set_gravity_point_unit_distance (newValue)
        }
        
    }
    
    /// If gravity is a point (see ``gravityPoint``), this will be the point of attraction.
    final public var gravityPointCenter: Vector3 {
        get {
            return get_gravity_point_center ()
        }
        
        set {
            set_gravity_point_center (newValue)
        }
        
    }
    
    /// The area's gravity vector (not normalized).
    final public var gravityDirection: Vector3 {
        get {
            return get_gravity_direction ()
        }
        
        set {
            set_gravity_direction (newValue)
        }
        
    }
    
    /// The area's gravity intensity (in meters per second squared). This value multiplies the gravity direction. This is useful to alter the force of gravity without altering its direction.
    final public var gravity: Double {
        get {
            return get_gravity ()
        }
        
        set {
            set_gravity (newValue)
        }
        
    }
    
    /// Override mode for linear damping calculations within this area. See ``Area3D/SpaceOverride`` for possible values.
    final public var linearDampSpaceOverride: Area3D.SpaceOverride {
        get {
            return get_linear_damp_space_override_mode ()
        }
        
        set {
            set_linear_damp_space_override_mode (newValue)
        }
        
    }
    
    /// The rate at which objects stop moving in this area. Represents the linear velocity lost per second.
    /// 
    /// See ``ProjectSettings/physics/3d/defaultLinearDamp`` for more details about damping.
    /// 
    final public var linearDamp: Double {
        get {
            return get_linear_damp ()
        }
        
        set {
            set_linear_damp (newValue)
        }
        
    }
    
    /// Override mode for angular damping calculations within this area. See ``Area3D/SpaceOverride`` for possible values.
    final public var angularDampSpaceOverride: Area3D.SpaceOverride {
        get {
            return get_angular_damp_space_override_mode ()
        }
        
        set {
            set_angular_damp_space_override_mode (newValue)
        }
        
    }
    
    /// The rate at which objects stop spinning in this area. Represents the angular velocity lost per second.
    /// 
    /// See ``ProjectSettings/physics/3d/defaultAngularDamp`` for more details about damping.
    /// 
    final public var angularDamp: Double {
        get {
            return get_angular_damp ()
        }
        
        set {
            set_angular_damp (newValue)
        }
        
    }
    
    /// The magnitude of area-specific wind force.
    final public var windForceMagnitude: Double {
        get {
            return get_wind_force_magnitude ()
        }
        
        set {
            set_wind_force_magnitude (newValue)
        }
        
    }
    
    /// The exponential rate at which wind force decreases with distance from its origin.
    final public var windAttenuationFactor: Double {
        get {
            return get_wind_attenuation_factor ()
        }
        
        set {
            set_wind_attenuation_factor (newValue)
        }
        
    }
    
    /// The ``Node3D`` which is used to specify the direction and origin of an area-specific wind force. The direction is opposite to the z-axis of the ``Node3D``'s local transform, and its origin is the origin of the ``Node3D``'s local transform.
    final public var windSourcePath: NodePath {
        get {
            return get_wind_source_path ()
        }
        
        set {
            set_wind_source_path (newValue)
        }
        
    }
    
    /// If `true`, the area's audio bus overrides the default audio bus.
    final public var audioBusOverride: Bool {
        get {
            return is_overriding_audio_bus ()
        }
        
        set {
            set_audio_bus_override (newValue)
        }
        
    }
    
    /// The name of the area's audio bus.
    final public var audioBusName: StringName {
        get {
            return get_audio_bus_name ()
        }
        
        set {
            set_audio_bus_name (newValue)
        }
        
    }
    
    /// If `true`, the area applies reverb to its associated audio.
    final public var reverbBusEnabled: Bool {
        get {
            return is_using_reverb_bus ()
        }
        
        set {
            set_use_reverb_bus (newValue)
        }
        
    }
    
    /// The name of the reverb bus to use for this area's associated audio.
    final public var reverbBusName: StringName {
        get {
            return get_reverb_bus_name ()
        }
        
        set {
            set_reverb_bus_name (newValue)
        }
        
    }
    
    /// The degree to which this area applies reverb to its associated audio. Ranges from `0` to `1` with `0.1` precision.
    final public var reverbBusAmount: Double {
        get {
            return get_reverb_amount ()
        }
        
        set {
            set_reverb_amount (newValue)
        }
        
    }
    
    /// The degree to which this area's reverb is a uniform effect. Ranges from `0` to `1` with `0.1` precision.
    final public var reverbBusUniformity: Double {
        get {
            return get_reverb_uniformity ()
        }
        
        set {
            set_reverb_uniformity (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_gravity_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity_space_override_mode")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2311433571)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_space_override_mode (_ spaceOverrideMode: Area3D.SpaceOverride) {
        #if false
        
        var copy_space_override_mode = Int64 (spaceOverrideMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_gravity_space_override_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_space_override_mode)
        
        #else
        
        var copy_space_override_mode = Int64 (spaceOverrideMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_space_override_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_gravity_space_override_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gravity_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gravity_space_override_mode")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 958191869)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity_space_override_mode ()-> Area3D.SpaceOverride {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Area3D.method_get_gravity_space_override_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Area3D.SpaceOverride (rawValue: _result)!
    }
    
    fileprivate static var method_set_gravity_is_point: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity_is_point")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_is_point (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_gravity_is_point, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_gravity_is_point, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_gravity_a_point: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_gravity_a_point")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_gravity_a_point ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Area3D.method_is_gravity_a_point, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity_point_unit_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity_point_unit_distance")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_point_unit_distance (_ distanceScale: Double) {
        #if false
        
        var copy_distance_scale = distanceScale
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_gravity_point_unit_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance_scale)
        
        #else
        
        var copy_distance_scale = distanceScale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_gravity_point_unit_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gravity_point_unit_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gravity_point_unit_distance")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity_point_unit_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Area3D.method_get_gravity_point_unit_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity_point_center: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity_point_center")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_point_center (_ center: Vector3) {
        #if false
        
        var copy_center = center
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_gravity_point_center, UnsafeMutableRawPointer (mutating: handle), nil, &copy_center)
        
        #else
        
        var copy_center = center
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_center) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_gravity_point_center, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gravity_point_center: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gravity_point_center")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity_point_center ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (Area3D.method_get_gravity_point_center, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity_direction")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_direction (_ direction: Vector3) {
        #if false
        
        var copy_direction = direction
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_gravity_direction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_direction)
        
        #else
        
        var copy_direction = direction
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_direction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_gravity_direction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gravity_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gravity_direction")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity_direction ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (Area3D.method_get_gravity_direction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity (_ gravity: Double) {
        #if false
        
        var copy_gravity = gravity
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_gravity)
        
        #else
        
        var copy_gravity = gravity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_gravity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_gravity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gravity")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Area3D.method_get_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_damp_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_linear_damp_space_override_mode")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2311433571)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_damp_space_override_mode (_ spaceOverrideMode: Area3D.SpaceOverride) {
        #if false
        
        var copy_space_override_mode = Int64 (spaceOverrideMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_linear_damp_space_override_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_space_override_mode)
        
        #else
        
        var copy_space_override_mode = Int64 (spaceOverrideMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_space_override_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_linear_damp_space_override_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_linear_damp_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_linear_damp_space_override_mode")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 958191869)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_damp_space_override_mode ()-> Area3D.SpaceOverride {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Area3D.method_get_linear_damp_space_override_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Area3D.SpaceOverride (rawValue: _result)!
    }
    
    fileprivate static var method_set_angular_damp_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_damp_space_override_mode")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2311433571)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_damp_space_override_mode (_ spaceOverrideMode: Area3D.SpaceOverride) {
        #if false
        
        var copy_space_override_mode = Int64 (spaceOverrideMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_angular_damp_space_override_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_space_override_mode)
        
        #else
        
        var copy_space_override_mode = Int64 (spaceOverrideMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_space_override_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_angular_damp_space_override_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_damp_space_override_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_damp_space_override_mode")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 958191869)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_damp_space_override_mode ()-> Area3D.SpaceOverride {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Area3D.method_get_angular_damp_space_override_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Area3D.SpaceOverride (rawValue: _result)!
    }
    
    fileprivate static var method_set_angular_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_damp")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_damp (_ angularDamp: Double) {
        #if false
        
        var copy_angular_damp = angularDamp
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_angular_damp, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angular_damp)
        
        #else
        
        var copy_angular_damp = angularDamp
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angular_damp) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_angular_damp, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_damp")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_damp ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Area3D.method_get_angular_damp, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_linear_damp")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_damp (_ linearDamp: Double) {
        #if false
        
        var copy_linear_damp = linearDamp
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_linear_damp, UnsafeMutableRawPointer (mutating: handle), nil, &copy_linear_damp)
        
        #else
        
        var copy_linear_damp = linearDamp
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_linear_damp) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_linear_damp, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_linear_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_linear_damp")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_damp ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Area3D.method_get_linear_damp, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_priority")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_priority (_ priority: Int32) {
        #if false
        
        var copy_priority: Int = Int (priority)
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_priority, UnsafeMutableRawPointer (mutating: handle), nil, &copy_priority)
        
        #else
        
        var copy_priority: Int = Int (priority)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_priority) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_priority, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_priority")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_priority ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Area3D.method_get_priority, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_wind_force_magnitude: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_wind_force_magnitude")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_wind_force_magnitude (_ windForceMagnitude: Double) {
        #if false
        
        var copy_wind_force_magnitude = windForceMagnitude
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_wind_force_magnitude, UnsafeMutableRawPointer (mutating: handle), nil, &copy_wind_force_magnitude)
        
        #else
        
        var copy_wind_force_magnitude = windForceMagnitude
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_wind_force_magnitude) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_wind_force_magnitude, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_wind_force_magnitude: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_wind_force_magnitude")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_wind_force_magnitude ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Area3D.method_get_wind_force_magnitude, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_wind_attenuation_factor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_wind_attenuation_factor")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_wind_attenuation_factor (_ windAttenuationFactor: Double) {
        #if false
        
        var copy_wind_attenuation_factor = windAttenuationFactor
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_wind_attenuation_factor, UnsafeMutableRawPointer (mutating: handle), nil, &copy_wind_attenuation_factor)
        
        #else
        
        var copy_wind_attenuation_factor = windAttenuationFactor
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_wind_attenuation_factor) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_wind_attenuation_factor, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_wind_attenuation_factor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_wind_attenuation_factor")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_wind_attenuation_factor ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Area3D.method_get_wind_attenuation_factor, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_wind_source_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_wind_source_path")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_wind_source_path (_ windSourcePath: NodePath) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_wind_source_path, UnsafeMutableRawPointer (mutating: handle), nil, &windSourcePath.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &windSourcePath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_wind_source_path, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_wind_source_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_wind_source_path")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_wind_source_path ()-> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall (Area3D.method_get_wind_source_path, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_monitorable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_monitorable")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_monitorable (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_monitorable, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_monitorable, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_monitorable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_monitorable")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_monitorable ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Area3D.method_is_monitorable, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_monitoring: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_monitoring")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_monitoring (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_monitoring, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_monitoring, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_monitoring: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_monitoring")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_monitoring ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Area3D.method_is_monitoring, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_overlapping_bodies: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_overlapping_bodies")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns a list of intersecting ``PhysicsBody3D``s and ``GridMap``s. The overlapping body's ``CollisionObject3D/collisionLayer`` must be part of this area's ``CollisionObject3D/collisionMask`` in order to be detected.
    /// 
    /// For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
    /// 
    public final func getOverlappingBodies ()-> ObjectCollection<Node3D> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Area3D.method_get_overlapping_bodies, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<Node3D>(content: _result)
    }
    
    fileprivate static var method_get_overlapping_areas: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_overlapping_areas")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns a list of intersecting ``Area3D``s. The overlapping area's ``CollisionObject3D/collisionLayer`` must be part of this area's ``CollisionObject3D/collisionMask`` in order to be detected.
    /// 
    /// For performance reasons (collisions are all processed at the same time) this list is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
    /// 
    public final func getOverlappingAreas ()-> ObjectCollection<Area3D> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Area3D.method_get_overlapping_areas, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<Area3D>(content: _result)
    }
    
    fileprivate static var method_has_overlapping_bodies: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_overlapping_bodies")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if intersecting any ``PhysicsBody3D``s or ``GridMap``s, otherwise returns `false`. The overlapping body's ``CollisionObject3D/collisionLayer`` must be part of this area's ``CollisionObject3D/collisionMask`` in order to be detected.
    /// 
    /// For performance reasons (collisions are all processed at the same time) the list of overlapping bodies is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
    /// 
    public final func hasOverlappingBodies ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Area3D.method_has_overlapping_bodies, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_has_overlapping_areas: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_overlapping_areas")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if intersecting any ``Area3D``s, otherwise returns `false`. The overlapping area's ``CollisionObject3D/collisionLayer`` must be part of this area's ``CollisionObject3D/collisionMask`` in order to be detected.
    /// 
    /// For performance reasons (collisions are all processed at the same time) the list of overlapping areas is modified once during the physics step, not immediately after objects are moved. Consider using signals instead.
    /// 
    public final func hasOverlappingAreas ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Area3D.method_has_overlapping_areas, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_overlaps_body: GDExtensionMethodBindPtr = {
        let methodName = StringName ("overlaps_body")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3093956946)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given physics body intersects or overlaps this ``Area3D``, `false` otherwise.
    /// 
    /// > Note: The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
    /// 
    /// The `body` argument can either be a ``PhysicsBody3D`` or a ``GridMap`` instance. While GridMaps are not physics body themselves, they register their tiles with collision shapes as a virtual physics body.
    /// 
    public final func overlapsBody (_ body: Node?)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_body_handle = body?.handle
        
        gi.object_method_bind_ptrcall_v (Area3D.method_overlaps_body, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_body_handle)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: body?.handle) { p0 in
        _args.append (body == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_overlaps_body, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_overlaps_area: GDExtensionMethodBindPtr = {
        let methodName = StringName ("overlaps_area")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3093956946)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given ``Area3D`` intersects or overlaps this ``Area3D``, `false` otherwise.
    /// 
    /// > Note: The result of this test is not immediate after moving objects. For performance, list of overlaps is updated once per frame and before the physics step. Consider using signals instead.
    /// 
    public final func overlapsArea (_ area: Node?)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_area_handle = area?.handle
        
        gi.object_method_bind_ptrcall_v (Area3D.method_overlaps_area, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_area_handle)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: area?.handle) { p0 in
        _args.append (area == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_overlaps_area, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_audio_bus_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_audio_bus_override")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_audio_bus_override (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_audio_bus_override, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_audio_bus_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_overriding_audio_bus: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_overriding_audio_bus")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_overriding_audio_bus ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Area3D.method_is_overriding_audio_bus, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_audio_bus_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_audio_bus_name")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_audio_bus_name (_ name: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_audio_bus_name, UnsafeMutableRawPointer (mutating: handle), nil, &name.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_audio_bus_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_audio_bus_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_audio_bus_name")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_audio_bus_name ()-> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall (Area3D.method_get_audio_bus_name, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_use_reverb_bus: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_reverb_bus")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_reverb_bus (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_use_reverb_bus, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_use_reverb_bus, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_using_reverb_bus: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_using_reverb_bus")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_using_reverb_bus ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Area3D.method_is_using_reverb_bus, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_reverb_bus_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_reverb_bus_name")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_reverb_bus_name (_ name: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_reverb_bus_name, UnsafeMutableRawPointer (mutating: handle), nil, &name.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_reverb_bus_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_reverb_bus_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_reverb_bus_name")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_reverb_bus_name ()-> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall (Area3D.method_get_reverb_bus_name, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_reverb_amount: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_reverb_amount")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_reverb_amount (_ amount: Double) {
        #if false
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_reverb_amount, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_reverb_amount, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_reverb_amount: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_reverb_amount")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_reverb_amount ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Area3D.method_get_reverb_amount, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_reverb_uniformity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_reverb_uniformity")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_reverb_uniformity (_ amount: Double) {
        #if false
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (Area3D.method_set_reverb_uniformity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Area3D.method_set_reverb_uniformity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_reverb_uniformity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_reverb_uniformity")
        return withUnsafePointer (to: &Area3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_reverb_uniformity ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Area3D.method_get_reverb_uniformity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ bodyRid: RID, _ body: Node3D, _ bodyShapeIndex: Int64, _ localShapeIndex: Int64) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = RID (args [0])!
                var ptr_1: UnsafeMutableRawPointer?
                args [1].toType (Variant.GType.object, dest: &ptr_1)
                let arg_1 = lookupLiveObject (handleAddress: ptr_1!) as? Node3D ?? Node3D (nativeHandle: ptr_1!)
                let arg_2 = Int64 (args [2])!
                let arg_3 = Int64 (args [3])!
                
                callback (arg_0, arg_1, arg_2, arg_3)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _, _, _, _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when a ``Shape3D`` of the received `body` enters a shape of this area. `body` can be a ``PhysicsBody3D`` or a ``GridMap``. ``GridMap``s are detected if their ``MeshLibrary`` has collision shapes configured. Requires ``monitoring`` to be set to `true`.
    /// 
    /// `localShapeIndex` and `bodyShapeIndex` contain indices of the interacting shapes from this area and the interacting body, respectively. `bodyRid` contains the ``RID`` of the body. These values can be used with the ``PhysicsServer3D``.
    /// 
    /// **Example of getting the** ``CollisionShape3D`` **node from the shape index:**
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyShapeEntered.connect { bodyRid, body, bodyShapeIndex, localShapeIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyShapeEntered: Signal1 { Signal1 (target: self, signalName: "body_shape_entered") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal2/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal2/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal2/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal2 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal2 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ bodyRid: RID, _ body: Node3D, _ bodyShapeIndex: Int64, _ localShapeIndex: Int64) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = RID (args [0])!
                var ptr_1: UnsafeMutableRawPointer?
                args [1].toType (Variant.GType.object, dest: &ptr_1)
                let arg_1 = lookupLiveObject (handleAddress: ptr_1!) as? Node3D ?? Node3D (nativeHandle: ptr_1!)
                let arg_2 = Int64 (args [2])!
                let arg_3 = Int64 (args [3])!
                
                callback (arg_0, arg_1, arg_2, arg_3)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _, _, _, _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when a ``Shape3D`` of the received `body` exits a shape of this area. `body` can be a ``PhysicsBody3D`` or a ``GridMap``. ``GridMap``s are detected if their ``MeshLibrary`` has collision shapes configured. Requires ``monitoring`` to be set to `true`.
    /// 
    /// See also [signal body_shape_entered].
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyShapeExited.connect { bodyRid, body, bodyShapeIndex, localShapeIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyShapeExited: Signal2 { Signal2 (target: self, signalName: "body_shape_exited") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal3/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal3/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal3/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal3 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal3 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ body: Node3D) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                var ptr_0: UnsafeMutableRawPointer?
                args [0].toType (Variant.GType.object, dest: &ptr_0)
                let arg_0 = lookupLiveObject (handleAddress: ptr_0!) as? Node3D ?? Node3D (nativeHandle: ptr_0!)
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the received `body` enters this area. `body` can be a ``PhysicsBody3D`` or a ``GridMap``. ``GridMap``s are detected if their ``MeshLibrary`` has collision shapes configured. Requires ``monitoring`` to be set to `true`.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyEntered.connect { body in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyEntered: Signal3 { Signal3 (target: self, signalName: "body_entered") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal4/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal4/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal4/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal4 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal4 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ body: Node3D) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                var ptr_0: UnsafeMutableRawPointer?
                args [0].toType (Variant.GType.object, dest: &ptr_0)
                let arg_0 = lookupLiveObject (handleAddress: ptr_0!) as? Node3D ?? Node3D (nativeHandle: ptr_0!)
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the received `body` exits this area. `body` can be a ``PhysicsBody3D`` or a ``GridMap``. ``GridMap``s are detected if their ``MeshLibrary`` has collision shapes configured. Requires ``monitoring`` to be set to `true`.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyExited.connect { body in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyExited: Signal4 { Signal4 (target: self, signalName: "body_exited") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal5/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal5/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal5/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal5 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal5 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ areaRid: RID, _ area: Area3D, _ areaShapeIndex: Int64, _ localShapeIndex: Int64) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = RID (args [0])!
                var ptr_1: UnsafeMutableRawPointer?
                args [1].toType (Variant.GType.object, dest: &ptr_1)
                let arg_1 = lookupLiveObject (handleAddress: ptr_1!) as? Area3D ?? Area3D (nativeHandle: ptr_1!)
                let arg_2 = Int64 (args [2])!
                let arg_3 = Int64 (args [3])!
                
                callback (arg_0, arg_1, arg_2, arg_3)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _, _, _, _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when a ``Shape3D`` of the received `area` enters a shape of this area. Requires ``monitoring`` to be set to `true`.
    /// 
    /// `localShapeIndex` and `areaShapeIndex` contain indices of the interacting shapes from this area and the other area, respectively. `areaRid` contains the ``RID`` of the other area. These values can be used with the ``PhysicsServer3D``.
    /// 
    /// **Example of getting the** ``CollisionShape3D`` **node from the shape index:**
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.areaShapeEntered.connect { areaRid, area, areaShapeIndex, localShapeIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var areaShapeEntered: Signal5 { Signal5 (target: self, signalName: "area_shape_entered") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal6/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal6/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal6/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal6 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal6 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ areaRid: RID, _ area: Area3D, _ areaShapeIndex: Int64, _ localShapeIndex: Int64) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = RID (args [0])!
                var ptr_1: UnsafeMutableRawPointer?
                args [1].toType (Variant.GType.object, dest: &ptr_1)
                let arg_1 = lookupLiveObject (handleAddress: ptr_1!) as? Area3D ?? Area3D (nativeHandle: ptr_1!)
                let arg_2 = Int64 (args [2])!
                let arg_3 = Int64 (args [3])!
                
                callback (arg_0, arg_1, arg_2, arg_3)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _, _, _, _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when a ``Shape3D`` of the received `area` exits a shape of this area. Requires ``monitoring`` to be set to `true`.
    /// 
    /// See also [signal area_shape_entered].
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.areaShapeExited.connect { areaRid, area, areaShapeIndex, localShapeIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var areaShapeExited: Signal6 { Signal6 (target: self, signalName: "area_shape_exited") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal7/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal7/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal7/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal7 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal7 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ area: Area3D) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                var ptr_0: UnsafeMutableRawPointer?
                args [0].toType (Variant.GType.object, dest: &ptr_0)
                let arg_0 = lookupLiveObject (handleAddress: ptr_0!) as? Area3D ?? Area3D (nativeHandle: ptr_0!)
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the received `area` enters this area. Requires ``monitoring`` to be set to `true`.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.areaEntered.connect { area in
    ///    print ("caught signal")
    /// }
    /// ```
    public var areaEntered: Signal7 { Signal7 (target: self, signalName: "area_entered") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal8/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal8/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal8/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal8 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal8 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ area: Area3D) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                var ptr_0: UnsafeMutableRawPointer?
                args [0].toType (Variant.GType.object, dest: &ptr_0)
                let arg_0 = lookupLiveObject (handleAddress: ptr_0!) as? Area3D ?? Area3D (nativeHandle: ptr_0!)
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the received `area` exits this area. Requires ``monitoring`` to be set to `true`.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.areaExited.connect { area in
    ///    print ("caught signal")
    /// }
    /// ```
    public var areaExited: Signal8 { Signal8 (target: self, signalName: "area_exited") }
    
}

