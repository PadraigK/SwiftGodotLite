// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A ``Transform3D`` operator to be used within the visual shader graph.
/// 
/// Applies ```operator``` to two transform (4x4 matrices) inputs.
open class VisualShaderNodeTransformOp: VisualShaderNode {
    override open class var godotClassName: StringName { "VisualShaderNodeTransformOp" }
    public enum Operator: Int64 {
        /// Multiplies transform `a` by the transform `b`.
        case axb = 0 // OP_AxB
        /// Multiplies transform `b` by the transform `a`.
        case bxa = 1 // OP_BxA
        /// Performs a component-wise multiplication of transform `a` by the transform `b`.
        case axbComp = 2 // OP_AxB_COMP
        /// Performs a component-wise multiplication of transform `b` by the transform `a`.
        case bxaComp = 3 // OP_BxA_COMP
        /// Adds two transforms.
        case add = 4 // OP_ADD
        /// Subtracts the transform `a` from the transform `b`.
        case aMinusB = 5 // OP_A_MINUS_B
        /// Subtracts the transform `b` from the transform `a`.
        case bMinusA = 6 // OP_B_MINUS_A
        /// Divides the transform `a` by the transform `b`.
        case aDivB = 7 // OP_A_DIV_B
        /// Divides the transform `b` by the transform `a`.
        case bDivA = 8 // OP_B_DIV_A
        /// Represents the size of the ``VisualShaderNodeTransformOp/Operator`` enum.
        case max = 9 // OP_MAX
    }
    
    
    /* Properties */
    
    /// The type of the operation to be performed on the transforms. See ``VisualShaderNodeTransformOp/Operator`` for options.
    final public var `operator`: VisualShaderNodeTransformOp.Operator {
        get {
            return get_operator ()
        }
        
        set {
            set_operator (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_operator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_operator")
        return withUnsafePointer (to: &VisualShaderNodeTransformOp.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2287310733)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_operator (_ op: VisualShaderNodeTransformOp.Operator) {
        #if false
        
        var copy_op = Int64 (op.rawValue)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeTransformOp.method_set_operator, UnsafeMutableRawPointer (mutating: handle), nil, &copy_op)
        
        #else
        
        var copy_op = Int64 (op.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_op) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeTransformOp.method_set_operator, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_operator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_operator")
        return withUnsafePointer (to: &VisualShaderNodeTransformOp.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1238663601)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_operator ()-> VisualShaderNodeTransformOp.Operator {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (VisualShaderNodeTransformOp.method_get_operator, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VisualShaderNodeTransformOp.Operator (rawValue: _result)!
    }
    
}

