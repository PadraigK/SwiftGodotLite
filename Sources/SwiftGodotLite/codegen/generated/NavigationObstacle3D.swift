// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// 3D Obstacle used in navigation to constrain avoidance controlled agents outside or inside an area.
/// 
/// 3D Obstacle used in navigation to constrain avoidance controlled agents outside or inside an area. The obstacle needs a navigation map and outline vertices defined to work correctly.
/// 
/// If the obstacle's vertices are winded in clockwise order, avoidance agents will be pushed in by the obstacle, otherwise, avoidance agents will be pushed out. Outlines must not cross or overlap.
/// 
/// Obstacles are **not** a replacement for a (re)baked navigation mesh. Obstacles **don't** change the resulting path from the pathfinding, obstacles only affect the navigation avoidance agent movement by altering the suggested velocity of the avoidance agent.
/// 
/// Obstacles using vertices can warp to a new position but should not moved every frame as each move requires a rebuild of the avoidance map.
/// 
open class NavigationObstacle3D: Node3D {
    override open class var godotClassName: StringName { "NavigationObstacle3D" }
    
    /* Properties */
    
    /// If `true` the obstacle affects avoidance using agents.
    final public var avoidanceEnabled: Bool {
        get {
            return get_avoidance_enabled ()
        }
        
        set {
            set_avoidance_enabled (newValue)
        }
        
    }
    
    /// Sets the wanted velocity for the obstacle so other agent's can better predict the obstacle if it is moved with a velocity regularly (every frame) instead of warped to a new position. Does only affect avoidance for the obstacles ``radius``. Does nothing for the obstacles static vertices.
    final public var velocity: Vector3 {
        get {
            return get_velocity ()
        }
        
        set {
            set_velocity (newValue)
        }
        
    }
    
    /// Sets the avoidance radius for the obstacle.
    final public var radius: Double {
        get {
            return get_radius ()
        }
        
        set {
            set_radius (newValue)
        }
        
    }
    
    /// Sets the obstacle height used in 2D avoidance. 2D avoidance using agent's ignore obstacles that are below or above them.
    final public var height: Double {
        get {
            return get_height ()
        }
        
        set {
            set_height (newValue)
        }
        
    }
    
    /// The outline vertices of the obstacle. If the vertices are winded in clockwise order agents will be pushed in by the obstacle, else they will be pushed out. Outlines can not be crossed or overlap. Should the vertices using obstacle be warped to a new position agent's can not predict this movement and may get trapped inside the obstacle.
    final public var vertices: PackedVector3Array {
        get {
            return get_vertices ()
        }
        
        set {
            set_vertices (newValue)
        }
        
    }
    
    /// A bitfield determining the avoidance layers for this obstacle. Agents with a matching bit on the their avoidance mask will avoid this obstacle.
    final public var avoidanceLayers: UInt32 {
        get {
            return get_avoidance_layers ()
        }
        
        set {
            set_avoidance_layers (newValue)
        }
        
    }
    
    /// If `true` the obstacle affects 3D avoidance using agent's with obstacle ``radius``.
    /// 
    /// If `false` the obstacle affects 2D avoidance using agent's with both obstacle ``vertices`` as well as obstacle ``radius``.
    /// 
    final public var use3dAvoidance: Bool {
        get {
            return get_use_3d_avoidance ()
        }
        
        set {
            set_use_3d_avoidance (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rid")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of this obstacle on the ``NavigationServer3D``.
    public final func getRid ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (NavigationObstacle3D.method_get_rid, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_avoidance_enabled")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_avoidance_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationObstacle3D.method_set_avoidance_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationObstacle3D.method_set_avoidance_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_avoidance_enabled")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_avoidance_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationObstacle3D.method_get_avoidance_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_navigation_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_navigation_map")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Sets the ``RID`` of the navigation map this NavigationObstacle node should use and also updates the `obstacle` on the NavigationServer.
    public final func setNavigationMap (_ navigationMap: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationObstacle3D.method_set_navigation_map, UnsafeMutableRawPointer (mutating: handle), nil, &navigationMap.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &navigationMap.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationObstacle3D.method_set_navigation_map, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_navigation_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_navigation_map")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the navigation map for this NavigationObstacle node. This function returns always the map set on the NavigationObstacle node and not the map of the abstract obstacle on the NavigationServer. If the obstacle map is changed directly with the NavigationServer API the NavigationObstacle node will not be aware of the map change. Use ``setNavigationMap(_:)`` to change the navigation map for the NavigationObstacle and also update the obstacle on the NavigationServer.
    public final func getNavigationMap ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (NavigationObstacle3D.method_get_navigation_map, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_radius")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_radius (_ radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (NavigationObstacle3D.method_set_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationObstacle3D.method_set_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_radius")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationObstacle3D.method_get_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_height")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_height (_ height: Double) {
        #if false
        
        var copy_height = height
        
        gi.object_method_bind_ptrcall_v (NavigationObstacle3D.method_set_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_height)
        
        #else
        
        var copy_height = height
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_height) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationObstacle3D.method_set_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_height")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_height ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationObstacle3D.method_get_height, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_velocity")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_velocity (_ velocity: Vector3) {
        #if false
        
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (NavigationObstacle3D.method_set_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_velocity)
        
        #else
        
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationObstacle3D.method_set_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_velocity")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_velocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (NavigationObstacle3D.method_get_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_vertices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertices")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 334873810)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_vertices (_ vertices: PackedVector3Array) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationObstacle3D.method_set_vertices, UnsafeMutableRawPointer (mutating: handle), nil, &vertices.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &vertices.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationObstacle3D.method_set_vertices, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertices")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 497664490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_vertices ()-> PackedVector3Array {
        let _result: PackedVector3Array = PackedVector3Array ()
        gi.object_method_bind_ptrcall (NavigationObstacle3D.method_get_vertices, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_avoidance_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_avoidance_layers")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_avoidance_layers (_ layers: UInt32) {
        #if false
        
        var copy_layers: Int = Int (layers)
        
        gi.object_method_bind_ptrcall_v (NavigationObstacle3D.method_set_avoidance_layers, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layers)
        
        #else
        
        var copy_layers: Int = Int (layers)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layers) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationObstacle3D.method_set_avoidance_layers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_avoidance_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_avoidance_layers")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_avoidance_layers ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (NavigationObstacle3D.method_get_avoidance_layers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_avoidance_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_avoidance_layer_value")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``avoidanceLayers`` bitmask, given a `layerNumber` between 1 and 32.
    public final func setAvoidanceLayerValue (layerNumber: Int32, value: Bool) {
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (NavigationObstacle3D.method_set_avoidance_layer_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_number, &copy_value)
        
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationObstacle3D.method_set_avoidance_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_avoidance_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_avoidance_layer_value")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``avoidanceLayers`` bitmask is enabled, given a `layerNumber` between 1 and 32.
    public final func getAvoidanceLayerValue (layerNumber: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        
        gi.object_method_bind_ptrcall_v (NavigationObstacle3D.method_get_avoidance_layer_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_number)
        return _result
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationObstacle3D.method_get_avoidance_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_use_3d_avoidance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_3d_avoidance")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_3d_avoidance (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationObstacle3D.method_set_use_3d_avoidance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationObstacle3D.method_set_use_3d_avoidance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_use_3d_avoidance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_use_3d_avoidance")
        return withUnsafePointer (to: &NavigationObstacle3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_use_3d_avoidance ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationObstacle3D.method_get_use_3d_avoidance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

