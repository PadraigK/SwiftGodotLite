// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Base class for ``SyntaxHighlighter`` used by the ``ScriptEditor``.
/// 
/// Base class that all ``SyntaxHighlighter``s used by the ``ScriptEditor`` extend from.
/// 
/// Add a syntax highlighter to an individual script by calling ``ScriptEditorBase/addSyntaxHighlighter(_:)``. To apply to all scripts on open, call ``ScriptEditor/registerSyntaxHighlighter(_:)``.
/// 
open class EditorSyntaxHighlighter: SyntaxHighlighter {
    override open class var godotClassName: StringName { "EditorSyntaxHighlighter" }
    /* Methods */
    /// Virtual method which can be overridden to return the syntax highlighter name.
    @_documentation(visibility: public)
    open func _getName ()-> String {
        return String ()
    }
    
    /// Virtual method which can be overridden to return the supported language names.
    @_documentation(visibility: public)
    open func _getSupportedLanguages ()-> PackedStringArray {
        return PackedStringArray ()
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_get_name":
                return _EditorSyntaxHighlighter_proxy_get_name
            case "_get_supported_languages":
                return _EditorSyntaxHighlighter_proxy_get_supported_languages
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _EditorSyntaxHighlighter_proxy_get_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorSyntaxHighlighter>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getName ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _EditorSyntaxHighlighter_proxy_get_supported_languages (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorSyntaxHighlighter>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getSupportedLanguages ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

