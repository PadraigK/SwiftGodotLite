// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Helper tool to access and edit ``Mesh`` data.
/// 
/// MeshDataTool provides access to individual vertices in a ``Mesh``. It allows users to read and edit vertex data of meshes. It also creates an array of faces and edges.
/// 
/// To use MeshDataTool, load a mesh with ``createFromSurface(mesh:surface:)``. When you are finished editing the data commit the data to a mesh with ``commitToSurface(mesh:compressionFlags:)``.
/// 
/// Below is an example of how MeshDataTool may be used.
/// 
/// See also ``ArrayMesh``, ``ImmediateMesh`` and ``SurfaceTool`` for procedural geometry generation.
/// 
/// > Note: Godot uses clockwise [url=https://learnopengl.com/Advanced-OpenGL/Face-culling]winding order[/url] for front faces of triangle primitive modes.
/// 
open class MeshDataTool: RefCounted {
    override open class var godotClassName: StringName { "MeshDataTool" }
    /* Methods */
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears all data currently in MeshDataTool.
    public final func clear () {
        gi.object_method_bind_ptrcall (MeshDataTool.method_clear, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_create_from_surface: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_from_surface")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2727020678)!
            }
            
        }
        
    }()
    
    /// Uses specified surface of given ``Mesh`` to populate data for MeshDataTool.
    /// 
    /// Requires ``Mesh`` with primitive type ``Mesh/PrimitiveType/primitiveTriangles``.
    /// 
    public final func createFromSurface (mesh: ArrayMesh?, surface: Int32)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        var copy_surface: Int = Int (surface)
        var copy_mesh_handle = mesh?.handle
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_create_from_surface, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_mesh_handle, &copy_surface)
        return GodotError (rawValue: _result)!
        #else
        
        var copy_surface: Int = Int (surface)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: mesh?.handle) { p0 in
        _args.append (mesh == nil ? nil : p0)
            return withUnsafePointer (to: &copy_surface) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_create_from_surface, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_commit_to_surface: GDExtensionMethodBindPtr = {
        let methodName = StringName ("commit_to_surface")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2021686445)!
            }
            
        }
        
    }()
    
    /// Adds a new surface to specified ``Mesh`` with edited data.
    public final func commitToSurface (mesh: ArrayMesh?, compressionFlags: UInt = 0)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        var copy_compression_flags = compressionFlags
        var copy_mesh_handle = mesh?.handle
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_commit_to_surface, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_mesh_handle, &copy_compression_flags)
        return GodotError (rawValue: _result)!
        #else
        
        var copy_compression_flags = compressionFlags
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: mesh?.handle) { p0 in
        _args.append (mesh == nil ? nil : p0)
            return withUnsafePointer (to: &copy_compression_flags) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_commit_to_surface, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_format: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_format")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the ``Mesh``'s format. Format is an integer made up of ``Mesh`` format flags combined together. For example, a mesh containing both vertices and normals would return a format of `3` because ``Mesh/ArrayFormat/vertex`` is `1` and ``Mesh/ArrayFormat/normal`` is `2`.
    /// 
    /// See ``Mesh.ArrayFormat`` for a list of format flags.
    /// 
    public final func getFormat ()-> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall (MeshDataTool.method_get_format, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_vertex_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_count")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the total number of vertices in ``Mesh``.
    public final func getVertexCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_edge_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_edge_count")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of edges in this ``Mesh``.
    public final func getEdgeCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (MeshDataTool.method_get_edge_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_face_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_face_count")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of faces in this ``Mesh``.
    public final func getFaceCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (MeshDataTool.method_get_face_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_vertex: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertex")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1530502735)!
            }
            
        }
        
    }()
    
    /// Sets the position of the given vertex.
    public final func setVertex (idx: Int32, vertex: Vector3) {
        #if true
        
        var copy_idx: Int = Int (idx)
        var copy_vertex = vertex
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_vertex, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &copy_vertex)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_vertex = vertex
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_vertex) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_vertex, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 711720468)!
            }
            
        }
        
    }()
    
    /// Returns the position of the given vertex.
    public final func getVertex (idx: Int32)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_vertex_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertex_normal")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1530502735)!
            }
            
        }
        
    }()
    
    /// Sets the normal of the given vertex.
    public final func setVertexNormal (idx: Int32, normal: Vector3) {
        #if true
        
        var copy_idx: Int = Int (idx)
        var copy_normal = normal
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_vertex_normal, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &copy_normal)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_normal = normal
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_normal) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_vertex_normal, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_normal")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 711720468)!
            }
            
        }
        
    }()
    
    /// Returns the normal of the given vertex.
    public final func getVertexNormal (idx: Int32)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex_normal, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_normal, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_vertex_tangent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertex_tangent")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1104099133)!
            }
            
        }
        
    }()
    
    /// Sets the tangent of the given vertex.
    public final func setVertexTangent (idx: Int32, tangent: Plane) {
        #if true
        
        var copy_idx: Int = Int (idx)
        var copy_tangent = tangent
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_vertex_tangent, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &copy_tangent)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_tangent = tangent
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_tangent) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_vertex_tangent, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex_tangent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_tangent")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1372055458)!
            }
            
        }
        
    }()
    
    /// Returns the tangent of the given vertex.
    public final func getVertexTangent (idx: Int32)-> Plane {
        var _result: Plane = Plane ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex_tangent, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_tangent, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_vertex_uv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertex_uv")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 163021252)!
            }
            
        }
        
    }()
    
    /// Sets the UV of the given vertex.
    public final func setVertexUv (idx: Int32, uv: Vector2) {
        #if true
        
        var copy_idx: Int = Int (idx)
        var copy_uv = uv
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_vertex_uv, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &copy_uv)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_uv = uv
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_uv) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_vertex_uv, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex_uv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_uv")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the UV of the given vertex.
    public final func getVertexUv (idx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex_uv, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_uv, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_vertex_uv2: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertex_uv2")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 163021252)!
            }
            
        }
        
    }()
    
    /// Sets the UV2 of the given vertex.
    public final func setVertexUv2 (idx: Int32, uv2: Vector2) {
        #if true
        
        var copy_idx: Int = Int (idx)
        var copy_uv2 = uv2
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_vertex_uv2, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &copy_uv2)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_uv2 = uv2
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_uv2) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_vertex_uv2, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex_uv2: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_uv2")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the UV2 of the given vertex.
    public final func getVertexUv2 (idx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex_uv2, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_uv2, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_vertex_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertex_color")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2878471219)!
            }
            
        }
        
    }()
    
    /// Sets the color of the given vertex.
    public final func setVertexColor (idx: Int32, color: Color) {
        #if true
        
        var copy_idx: Int = Int (idx)
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_vertex_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &copy_color)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_color) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_vertex_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_color")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3457211756)!
            }
            
        }
        
    }()
    
    /// Returns the color of the given vertex.
    public final func getVertexColor (idx: Int32)-> Color {
        var _result: Color = Color ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex_color, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_color, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_vertex_bones: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertex_bones")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3500328261)!
            }
            
        }
        
    }()
    
    /// Sets the bones of the given vertex.
    public final func setVertexBones (idx: Int32, bones: PackedInt32Array) {
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_vertex_bones, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &bones.content)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &bones.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_vertex_bones, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex_bones: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_bones")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1706082319)!
            }
            
        }
        
    }()
    
    /// Returns the bones of the given vertex.
    public final func getVertexBones (idx: Int32)-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex_bones, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_bones, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_vertex_weights: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertex_weights")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1345852415)!
            }
            
        }
        
    }()
    
    /// Sets the bone weights of the given vertex.
    public final func setVertexWeights (idx: Int32, weights: PackedFloat32Array) {
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_vertex_weights, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &weights.content)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &weights.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_vertex_weights, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex_weights: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_weights")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1542882410)!
            }
            
        }
        
    }()
    
    /// Returns bone weights of the given vertex.
    public final func getVertexWeights (idx: Int32)-> PackedFloat32Array {
        let _result: PackedFloat32Array = PackedFloat32Array ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex_weights, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_weights, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_vertex_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertex_meta")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2152698145)!
            }
            
        }
        
    }()
    
    /// Sets the metadata associated with the given vertex.
    public final func setVertexMeta (idx: Int32, meta: Variant) {
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_vertex_meta, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &meta.content)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &meta.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_vertex_meta, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_meta")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4227898402)!
            }
            
        }
        
    }()
    
    /// Returns the metadata associated with the given vertex.
    public final func getVertexMeta (idx: Int32)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex_meta, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_meta, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex_edges: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_edges")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1706082319)!
            }
            
        }
        
    }()
    
    /// Returns an array of edges that share the given vertex.
    public final func getVertexEdges (idx: Int32)-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex_edges, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_edges, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertex_faces: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertex_faces")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1706082319)!
            }
            
        }
        
    }()
    
    /// Returns an array of faces that share the given vertex.
    public final func getVertexFaces (idx: Int32)-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_vertex_faces, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_vertex_faces, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_edge_vertex: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_edge_vertex")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3175239445)!
            }
            
        }
        
    }()
    
    /// Returns index of specified vertex connected to given edge.
    /// 
    /// Vertex argument can only be 0 or 1 because edges are comprised of two vertices.
    /// 
    public final func getEdgeVertex (idx: Int32, vertex: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_idx: Int = Int (idx)
        var copy_vertex: Int = Int (vertex)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_edge_vertex, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx, &copy_vertex)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_vertex: Int = Int (vertex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_vertex) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_get_edge_vertex, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_edge_faces: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_edge_faces")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1706082319)!
            }
            
        }
        
    }()
    
    /// Returns array of faces that touch given edge.
    public final func getEdgeFaces (idx: Int32)-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_edge_faces, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_edge_faces, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_edge_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_edge_meta")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2152698145)!
            }
            
        }
        
    }()
    
    /// Sets the metadata of the given edge.
    public final func setEdgeMeta (idx: Int32, meta: Variant) {
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_edge_meta, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &meta.content)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &meta.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_edge_meta, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_edge_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_edge_meta")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4227898402)!
            }
            
        }
        
    }()
    
    /// Returns meta information assigned to given edge.
    public final func getEdgeMeta (idx: Int32)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_edge_meta, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_edge_meta, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_face_vertex: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_face_vertex")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3175239445)!
            }
            
        }
        
    }()
    
    /// Returns the specified vertex index of the given face.
    /// 
    /// Vertex argument must be either 0, 1, or 2 because faces contain three vertices.
    /// 
    /// **Example:**
    /// 
    public final func getFaceVertex (idx: Int32, vertex: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_idx: Int = Int (idx)
        var copy_vertex: Int = Int (vertex)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_face_vertex, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx, &copy_vertex)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_vertex: Int = Int (vertex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_vertex) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_get_face_vertex, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_face_edge: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_face_edge")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3175239445)!
            }
            
        }
        
    }()
    
    /// Returns specified edge associated with given face.
    /// 
    /// Edge argument must be either 0, 1, or 2 because a face only has three edges.
    /// 
    public final func getFaceEdge (idx: Int32, edge: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_idx: Int = Int (idx)
        var copy_edge: Int = Int (edge)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_face_edge, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx, &copy_edge)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_edge: Int = Int (edge)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_edge) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_get_face_edge, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_face_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_face_meta")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2152698145)!
            }
            
        }
        
    }()
    
    /// Sets the metadata of the given face.
    public final func setFaceMeta (idx: Int32, meta: Variant) {
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_face_meta, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx, &meta.content)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &meta.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (MeshDataTool.method_set_face_meta, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_face_meta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_face_meta")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4227898402)!
            }
            
        }
        
    }()
    
    /// Returns the metadata associated with the given face.
    public final func getFaceMeta (idx: Int32)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_face_meta, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_face_meta, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_face_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_face_normal")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 711720468)!
            }
            
        }
        
    }()
    
    /// Calculates and returns the face normal of the given face.
    public final func getFaceNormal (idx: Int32)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_get_face_normal, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_get_face_normal, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_material: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_material")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2757459619)!
            }
            
        }
        
    }()
    
    /// Sets the material to be used by newly-constructed ``Mesh``.
    public final func setMaterial (_ material: Material?) {
        #if true
        
        var copy_material_handle = material?.handle
        
        gi.object_method_bind_ptrcall_v (MeshDataTool.method_set_material, UnsafeMutableRawPointer (mutating: handle), nil, &copy_material_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: material?.handle) { p0 in
        _args.append (material == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (MeshDataTool.method_set_material, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_material: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_material")
        return withUnsafePointer (to: &MeshDataTool.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 5934680)!
            }
            
        }
        
    }()
    
    /// Returns the material assigned to the ``Mesh``.
    public final func getMaterial ()-> Material? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (MeshDataTool.method_get_material, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

