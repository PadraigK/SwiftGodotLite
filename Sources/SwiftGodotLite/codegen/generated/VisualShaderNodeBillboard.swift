// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A node that controls how the object faces the camera to be used within the visual shader graph.
/// 
/// The output port of this node needs to be connected to `Model View Matrix` port of ``VisualShaderNodeOutput``.
open class VisualShaderNodeBillboard: VisualShaderNode {
    override open class var godotClassName: StringName { "VisualShaderNodeBillboard" }
    public enum BillboardType: Int64 {
        /// Billboarding is disabled and the node does nothing.
        case disabled = 0 // BILLBOARD_TYPE_DISABLED
        /// A standard billboarding algorithm is enabled.
        case enabled = 1 // BILLBOARD_TYPE_ENABLED
        /// A billboarding algorithm to rotate around Y-axis is enabled.
        case fixedY = 2 // BILLBOARD_TYPE_FIXED_Y
        /// A billboarding algorithm designed to use on particles is enabled.
        case particles = 3 // BILLBOARD_TYPE_PARTICLES
        /// Represents the size of the ``VisualShaderNodeBillboard/BillboardType`` enum.
        case max = 4 // BILLBOARD_TYPE_MAX
    }
    
    
    /* Properties */
    
    /// Controls how the object faces the camera. See ``VisualShaderNodeBillboard/BillboardType``.
    final public var billboardType: VisualShaderNodeBillboard.BillboardType {
        get {
            return get_billboard_type ()
        }
        
        set {
            set_billboard_type (newValue)
        }
        
    }
    
    /// If `true`, the shader will keep the scale set for the mesh. Otherwise, the scale is lost when billboarding.
    final public var keepScale: Bool {
        get {
            return is_keep_scale_enabled ()
        }
        
        set {
            set_keep_scale_enabled (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_billboard_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_billboard_type")
        return withUnsafePointer (to: &VisualShaderNodeBillboard.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1227463289)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_billboard_type (_ billboardType: VisualShaderNodeBillboard.BillboardType) {
        #if true
        
        var copy_billboard_type = Int64 (billboardType.rawValue)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeBillboard.method_set_billboard_type, UnsafeMutableRawPointer (mutating: handle), nil, &copy_billboard_type)
        
        #else
        
        var copy_billboard_type = Int64 (billboardType.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_billboard_type) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeBillboard.method_set_billboard_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_billboard_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_billboard_type")
        return withUnsafePointer (to: &VisualShaderNodeBillboard.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3724188517)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_billboard_type ()-> VisualShaderNodeBillboard.BillboardType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (VisualShaderNodeBillboard.method_get_billboard_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VisualShaderNodeBillboard.BillboardType (rawValue: _result)!
    }
    
    fileprivate static var method_set_keep_scale_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_keep_scale_enabled")
        return withUnsafePointer (to: &VisualShaderNodeBillboard.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_keep_scale_enabled (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeBillboard.method_set_keep_scale_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeBillboard.method_set_keep_scale_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_keep_scale_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_keep_scale_enabled")
        return withUnsafePointer (to: &VisualShaderNodeBillboard.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_keep_scale_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (VisualShaderNodeBillboard.method_is_keep_scale_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

