// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 2D physics body that is moved by a physics simulation.
/// 
/// ``RigidBody2D`` implements full 2D physics. It cannot be controlled directly, instead, you must apply forces to it (gravity, impulses, etc.), and the physics simulation will calculate the resulting movement, rotation, react to collisions, and affect other physics bodies in its path.
/// 
/// The body's behavior can be adjusted via ``lockRotation``, ``freeze``, and ``freezeMode``. By changing various properties of the object, such as ``mass``, you can control how the physics simulation acts on it.
/// 
/// A rigid body will always maintain its shape and size, even when forces are applied to it. It is useful for objects that can be interacted with in an environment, such as a tree that can be knocked over or a stack of crates that can be pushed around.
/// 
/// If you need to override the default physics behavior, you can write a custom force integration function. See ``customIntegrator``.
/// 
/// > Note: Changing the 2D transform or ``linearVelocity`` of a ``RigidBody2D`` very often may lead to some unpredictable behaviors. If you need to directly affect the body, prefer ``_integrateForces(state:)`` as it allows you to directly access the physics state.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``bodyShapeEntered``
/// - ``bodyShapeExited``
/// - ``bodyEntered``
/// - ``bodyExited``
/// - ``sleepingStateChanged``
open class RigidBody2D: PhysicsBody2D {
    override open class var godotClassName: StringName { "RigidBody2D" }
    public enum FreezeMode: Int64 {
        /// Static body freeze mode (default). The body is not affected by gravity and forces. It can be only moved by user code and doesn't collide with other bodies along its path.
        case `static` = 0 // FREEZE_MODE_STATIC
        /// Kinematic body freeze mode. Similar to .`static`, but collides with other bodies along its path when moved. Useful for a frozen body that needs to be animated.
        case kinematic = 1 // FREEZE_MODE_KINEMATIC
    }
    
    public enum CenterOfMassMode: Int64 {
        /// In this mode, the body's center of mass is calculated automatically based on its shapes. This assumes that the shapes' origins are also their center of mass.
        case auto = 0 // CENTER_OF_MASS_MODE_AUTO
        /// In this mode, the body's center of mass is set through ``centerOfMass``. Defaults to the body's origin position.
        case custom = 1 // CENTER_OF_MASS_MODE_CUSTOM
    }
    
    public enum DampMode: Int64 {
        /// In this mode, the body's damping value is added to any value set in areas or the default value.
        case combine = 0 // DAMP_MODE_COMBINE
        /// In this mode, the body's damping value replaces any value set in areas or the default value.
        case replace = 1 // DAMP_MODE_REPLACE
    }
    
    public enum CCDMode: Int64 {
        /// Continuous collision detection disabled. This is the fastest way to detect body collisions, but can miss small, fast-moving objects.
        case disabled = 0 // CCD_MODE_DISABLED
        /// Continuous collision detection enabled using raycasting. This is faster than shapecasting but less precise.
        case castRay = 1 // CCD_MODE_CAST_RAY
        /// Continuous collision detection enabled using shapecasting. This is the slowest CCD method and the most precise.
        case castShape = 2 // CCD_MODE_CAST_SHAPE
    }
    
    
    /* Properties */
    
    /// The body's mass.
    final public var mass: Double {
        get {
            return get_mass ()
        }
        
        set {
            set_mass (newValue)
        }
        
    }
    
    /// The physics material override for the body.
    /// 
    /// If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.
    /// 
    final public var physicsMaterialOverride: PhysicsMaterial? {
        get {
            return get_physics_material_override ()
        }
        
        set {
            set_physics_material_override (newValue)
        }
        
    }
    
    /// Multiplies the gravity applied to the body. The body's gravity is calculated from the **Default Gravity** value in **Project > Project Settings > Physics > 2d** and/or any additional gravity vector applied by ``Area2D``s.
    final public var gravityScale: Double {
        get {
            return get_gravity_scale ()
        }
        
        set {
            set_gravity_scale (newValue)
        }
        
    }
    
    /// Defines the way the body's center of mass is set. See ``RigidBody2D/CenterOfMassMode`` for possible values.
    final public var centerOfMassMode: RigidBody2D.CenterOfMassMode {
        get {
            return get_center_of_mass_mode ()
        }
        
        set {
            set_center_of_mass_mode (newValue)
        }
        
    }
    
    /// The body's custom center of mass, relative to the body's origin position, when ``centerOfMassMode`` is set to .custom. This is the balanced point of the body, where applied forces only cause linear acceleration. Applying forces outside of the center of mass causes angular acceleration.
    /// 
    /// When ``centerOfMassMode`` is set to .auto (default value), the center of mass is automatically computed.
    /// 
    final public var centerOfMass: Vector2 {
        get {
            return get_center_of_mass ()
        }
        
        set {
            set_center_of_mass (newValue)
        }
        
    }
    
    /// The body's moment of inertia. This is like mass, but for rotation: it determines how much torque it takes to rotate the body. The moment of inertia is usually computed automatically from the mass and the shapes, but this property allows you to set a custom value.
    /// 
    /// If set to `0`, inertia is automatically computed (default value).
    /// 
    /// > Note: This value does not change when inertia is automatically computed. Use ``PhysicsServer2D`` to get the computed inertia.
    /// 
    final public var inertia: Double {
        get {
            return get_inertia ()
        }
        
        set {
            set_inertia (newValue)
        }
        
    }
    
    /// If `true`, the body will not move and will not calculate forces until woken up by another body through, for example, a collision, or by using the ``applyImpulse(_:position:)`` or ``applyForce(_:position:)`` methods.
    final public var sleeping: Bool {
        get {
            return is_sleeping ()
        }
        
        set {
            set_sleeping (newValue)
        }
        
    }
    
    /// If `true`, the body can enter sleep mode when there is no movement. See ``sleeping``.
    final public var canSleep: Bool {
        get {
            return is_able_to_sleep ()
        }
        
        set {
            set_can_sleep (newValue)
        }
        
    }
    
    /// If `true`, the body cannot rotate. Gravity and forces only apply linear movement.
    final public var lockRotation: Bool {
        get {
            return is_lock_rotation_enabled ()
        }
        
        set {
            set_lock_rotation_enabled (newValue)
        }
        
    }
    
    /// If `true`, the body is frozen. Gravity and forces are not applied anymore.
    /// 
    /// See ``freezeMode`` to set the body's behavior when frozen.
    /// 
    /// For a body that is always frozen, use ``StaticBody2D`` or ``AnimatableBody2D`` instead.
    /// 
    final public var freeze: Bool {
        get {
            return is_freeze_enabled ()
        }
        
        set {
            set_freeze_enabled (newValue)
        }
        
    }
    
    /// The body's freeze mode. Can be used to set the body's behavior when ``freeze`` is enabled. See ``RigidBody2D/FreezeMode`` for possible values.
    /// 
    /// For a body that is always frozen, use ``StaticBody2D`` or ``AnimatableBody2D`` instead.
    /// 
    final public var freezeMode: RigidBody2D.FreezeMode {
        get {
            return get_freeze_mode ()
        }
        
        set {
            set_freeze_mode (newValue)
        }
        
    }
    
    /// If `true`, internal force integration is disabled for this body. Aside from collision response, the body will only move as determined by the ``_integrateForces(state:)`` function.
    final public var customIntegrator: Bool {
        get {
            return is_using_custom_integrator ()
        }
        
        set {
            set_use_custom_integrator (newValue)
        }
        
    }
    
    /// Continuous collision detection mode.
    /// 
    /// Continuous collision detection tries to predict where a moving body will collide instead of moving it and correcting its movement after collision. Continuous collision detection is slower, but more precise and misses fewer collisions with small, fast-moving objects. Raycasting and shapecasting methods are available. See ``RigidBody2D/CCDMode`` for details.
    /// 
    final public var continuousCd: RigidBody2D.CCDMode {
        get {
            return get_continuous_collision_detection_mode ()
        }
        
        set {
            set_continuous_collision_detection_mode (newValue)
        }
        
    }
    
    /// The maximum number of contacts that will be recorded. Requires a value greater than 0 and ``contactMonitor`` to be set to `true` to start to register contacts. Use ``getContactCount()`` to retrieve the count or ``getCollidingBodies()`` to retrieve bodies that have been collided with.
    /// 
    /// > Note: The number of contacts is different from the number of collisions. Collisions between parallel edges will result in two contacts (one at each end), and collisions between parallel faces will result in four contacts (one at each corner).
    /// 
    final public var maxContactsReported: Int32 {
        get {
            return get_max_contacts_reported ()
        }
        
        set {
            set_max_contacts_reported (newValue)
        }
        
    }
    
    /// If `true`, the RigidBody2D will emit signals when it collides with another body.
    /// 
    /// > Note: By default the maximum contacts reported is set to 0, meaning nothing will be recorded, see ``maxContactsReported``.
    /// 
    final public var contactMonitor: Bool {
        get {
            return is_contact_monitor_enabled ()
        }
        
        set {
            set_contact_monitor (newValue)
        }
        
    }
    
    /// The body's linear velocity in pixels per second. Can be used sporadically, but **don't set this every frame**, because physics may run in another thread and runs at a different granularity. Use ``_integrateForces(state:)`` as your process loop for precise control of the body state.
    final public var linearVelocity: Vector2 {
        get {
            return get_linear_velocity ()
        }
        
        set {
            set_linear_velocity (newValue)
        }
        
    }
    
    /// Defines how ``linearDamp`` is applied. See ``RigidBody2D/DampMode`` for possible values.
    final public var linearDampMode: RigidBody2D.DampMode {
        get {
            return get_linear_damp_mode ()
        }
        
        set {
            set_linear_damp_mode (newValue)
        }
        
    }
    
    /// Damps the body's movement. By default, the body will use the **Default Linear Damp** in **Project > Project Settings > Physics > 2d** or any value override set by an ``Area2D`` the body is in. Depending on ``linearDampMode``, you can set ``linearDamp`` to be added to or to replace the body's damping value.
    /// 
    /// See ``ProjectSettings/physics/2d/defaultLinearDamp`` for more details about damping.
    /// 
    final public var linearDamp: Double {
        get {
            return get_linear_damp ()
        }
        
        set {
            set_linear_damp (newValue)
        }
        
    }
    
    /// The body's rotational velocity in _radians_ per second.
    final public var angularVelocity: Double {
        get {
            return get_angular_velocity ()
        }
        
        set {
            set_angular_velocity (newValue)
        }
        
    }
    
    /// Defines how ``angularDamp`` is applied. See ``RigidBody2D/DampMode`` for possible values.
    final public var angularDampMode: RigidBody2D.DampMode {
        get {
            return get_angular_damp_mode ()
        }
        
        set {
            set_angular_damp_mode (newValue)
        }
        
    }
    
    /// Damps the body's rotation. By default, the body will use the **Default Angular Damp** in **Project > Project Settings > Physics > 2d** or any value override set by an ``Area2D`` the body is in. Depending on ``angularDampMode``, you can set ``angularDamp`` to be added to or to replace the body's damping value.
    /// 
    /// See ``ProjectSettings/physics/2d/defaultAngularDamp`` for more details about damping.
    /// 
    final public var angularDamp: Double {
        get {
            return get_angular_damp ()
        }
        
        set {
            set_angular_damp (newValue)
        }
        
    }
    
    /// The body's total constant positional forces applied during each physics update.
    /// 
    /// See ``addConstantForce(_:position:)`` and ``addConstantCentralForce(_:)``.
    /// 
    final public var constantForce: Vector2 {
        get {
            return get_constant_force ()
        }
        
        set {
            set_constant_force (newValue)
        }
        
    }
    
    /// The body's total constant rotational forces applied during each physics update.
    /// 
    /// See ``addConstantTorque(_:)``.
    /// 
    final public var constantTorque: Double {
        get {
            return get_constant_torque ()
        }
        
        set {
            set_constant_torque (newValue)
        }
        
    }
    
    /* Methods */
    /// Allows you to read and safely modify the simulation state for the object. Use this instead of ``Node/_physicsProcess(delta:)`` if you need to directly change the body's `position` or other physics properties. By default, it works in addition to the usual physics behavior, but ``customIntegrator`` allows you to disable the default behavior and write custom force integration for a body.
    @_documentation(visibility: public)
    open func _integrateForces (state: PhysicsDirectBodyState2D?) {
    }
    
    fileprivate static var method_set_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mass")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mass (_ mass: Double) {
        #if true
        
        var copy_mass = mass
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_mass, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mass)
        
        #else
        
        var copy_mass = mass
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mass) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_mass, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mass")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mass ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_mass, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_inertia: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_inertia")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_inertia ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_inertia, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_inertia: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_inertia")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_inertia (_ inertia: Double) {
        #if true
        
        var copy_inertia = inertia
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_inertia, UnsafeMutableRawPointer (mutating: handle), nil, &copy_inertia)
        
        #else
        
        var copy_inertia = inertia
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_inertia) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_inertia, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_center_of_mass_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_center_of_mass_mode")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1757235706)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_center_of_mass_mode (_ mode: RigidBody2D.CenterOfMassMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_center_of_mass_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_center_of_mass_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_center_of_mass_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_center_of_mass_mode")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3277132817)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_center_of_mass_mode ()-> RigidBody2D.CenterOfMassMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_center_of_mass_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RigidBody2D.CenterOfMassMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_center_of_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_center_of_mass")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_center_of_mass (_ centerOfMass: Vector2) {
        #if true
        
        var copy_center_of_mass = centerOfMass
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_center_of_mass, UnsafeMutableRawPointer (mutating: handle), nil, &copy_center_of_mass)
        
        #else
        
        var copy_center_of_mass = centerOfMass
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_center_of_mass) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_center_of_mass, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_center_of_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_center_of_mass")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_center_of_mass ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_center_of_mass, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_physics_material_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_physics_material_override")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1784508650)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_physics_material_override (_ physicsMaterialOverride: PhysicsMaterial?) {
        #if true
        
        var copy_physics_material_override_handle = physicsMaterialOverride?.handle
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_physics_material_override, UnsafeMutableRawPointer (mutating: handle), nil, &copy_physics_material_override_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: physicsMaterialOverride?.handle) { p0 in
        _args.append (physicsMaterialOverride == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_physics_material_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_physics_material_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_physics_material_override")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2521850424)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_physics_material_override ()-> PhysicsMaterial? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_physics_material_override, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_gravity_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity_scale")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity_scale (_ gravityScale: Double) {
        #if true
        
        var copy_gravity_scale = gravityScale
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_gravity_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_gravity_scale)
        
        #else
        
        var copy_gravity_scale = gravityScale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_gravity_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_gravity_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gravity_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gravity_scale")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_gravity_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_damp_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_linear_damp_mode")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3406533708)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_damp_mode (_ linearDampMode: RigidBody2D.DampMode) {
        #if true
        
        var copy_linear_damp_mode = Int64 (linearDampMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_linear_damp_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_linear_damp_mode)
        
        #else
        
        var copy_linear_damp_mode = Int64 (linearDampMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_linear_damp_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_linear_damp_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_linear_damp_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_linear_damp_mode")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2970511462)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_damp_mode ()-> RigidBody2D.DampMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_linear_damp_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RigidBody2D.DampMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_angular_damp_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_damp_mode")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3406533708)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_damp_mode (_ angularDampMode: RigidBody2D.DampMode) {
        #if true
        
        var copy_angular_damp_mode = Int64 (angularDampMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_angular_damp_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angular_damp_mode)
        
        #else
        
        var copy_angular_damp_mode = Int64 (angularDampMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angular_damp_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_angular_damp_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_damp_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_damp_mode")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2970511462)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_damp_mode ()-> RigidBody2D.DampMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_angular_damp_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RigidBody2D.DampMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_linear_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_linear_damp")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_damp (_ linearDamp: Double) {
        #if true
        
        var copy_linear_damp = linearDamp
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_linear_damp, UnsafeMutableRawPointer (mutating: handle), nil, &copy_linear_damp)
        
        #else
        
        var copy_linear_damp = linearDamp
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_linear_damp) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_linear_damp, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_linear_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_linear_damp")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_damp ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_linear_damp, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_damp")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_damp (_ angularDamp: Double) {
        #if true
        
        var copy_angular_damp = angularDamp
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_angular_damp, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angular_damp)
        
        #else
        
        var copy_angular_damp = angularDamp
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angular_damp) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_angular_damp, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_damp")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_damp ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_angular_damp, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_linear_velocity")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_velocity (_ linearVelocity: Vector2) {
        #if true
        
        var copy_linear_velocity = linearVelocity
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_linear_velocity)
        
        #else
        
        var copy_linear_velocity = linearVelocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_linear_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_linear_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_linear_velocity")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_velocity ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_velocity")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_velocity (_ angularVelocity: Double) {
        #if true
        
        var copy_angular_velocity = angularVelocity
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angular_velocity)
        
        #else
        
        var copy_angular_velocity = angularVelocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angular_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_angular_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_velocity")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_velocity ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_max_contacts_reported: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_max_contacts_reported")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_max_contacts_reported (_ amount: Int32) {
        #if true
        
        var copy_amount: Int = Int (amount)
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_max_contacts_reported, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount: Int = Int (amount)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_max_contacts_reported, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_max_contacts_reported: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_max_contacts_reported")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_max_contacts_reported ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_max_contacts_reported, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_contact_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_count")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of contacts this body has with other bodies. By default, this returns 0 unless bodies are configured to monitor contacts (see ``contactMonitor``).
    /// 
    /// > Note: To retrieve the colliding bodies, use ``getCollidingBodies()``.
    /// 
    public final func getContactCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_contact_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_use_custom_integrator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_custom_integrator")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_custom_integrator (_ enable: Bool) {
        #if true
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_use_custom_integrator, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_use_custom_integrator, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_using_custom_integrator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_using_custom_integrator")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_using_custom_integrator ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RigidBody2D.method_is_using_custom_integrator, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_contact_monitor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_contact_monitor")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_contact_monitor (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_contact_monitor, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_contact_monitor, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_contact_monitor_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_contact_monitor_enabled")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_contact_monitor_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RigidBody2D.method_is_contact_monitor_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_continuous_collision_detection_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_continuous_collision_detection_mode")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1000241384)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_continuous_collision_detection_mode (_ mode: RigidBody2D.CCDMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_continuous_collision_detection_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_continuous_collision_detection_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_continuous_collision_detection_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_continuous_collision_detection_mode")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 815214376)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_continuous_collision_detection_mode ()-> RigidBody2D.CCDMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_continuous_collision_detection_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RigidBody2D.CCDMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_axis_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_axis_velocity")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Sets the body's velocity on the given axis. The velocity in the given vector axis will be set as the given vector length. This is useful for jumping behavior.
    public final func setAxisVelocity (_ axisVelocity: Vector2) {
        #if true
        
        var copy_axis_velocity = axisVelocity
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_axis_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_axis_velocity)
        
        #else
        
        var copy_axis_velocity = axisVelocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_axis_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_axis_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_apply_central_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_central_impulse")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3862383994)!
            }
            
        }
        
    }()
    
    /// Applies a directional impulse without affecting rotation.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    /// This is equivalent to using ``applyImpulse(_:position:)`` at the body's center of mass.
    /// 
    public final func applyCentralImpulse (_ impulse: Vector2 = Vector2 (x: 0, y: 0)) {
        #if true
        
        var copy_impulse = impulse
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_apply_central_impulse, UnsafeMutableRawPointer (mutating: handle), nil, &copy_impulse)
        
        #else
        
        var copy_impulse = impulse
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_impulse) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_apply_central_impulse, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_apply_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_impulse")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4288681949)!
            }
            
        }
        
    }()
    
    /// Applies a positioned impulse to the body.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public final func applyImpulse (_ impulse: Vector2, position: Vector2 = Vector2 (x: 0, y: 0)) {
        #if true
        
        var copy_impulse = impulse
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_apply_impulse, UnsafeMutableRawPointer (mutating: handle), nil, &copy_impulse, &copy_position)
        
        #else
        
        var copy_impulse = impulse
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_impulse) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (RigidBody2D.method_apply_impulse, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_apply_torque_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_torque_impulse")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Applies a rotational impulse to the body without affecting the position.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    /// > Note: ``inertia`` is required for this to work. To have ``inertia``, an active ``CollisionShape2D`` must be a child of the node, or you can manually set ``inertia``.
    /// 
    public final func applyTorqueImpulse (torque: Double) {
        #if true
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_apply_torque_impulse, UnsafeMutableRawPointer (mutating: handle), nil, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_torque) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_apply_torque_impulse, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_apply_central_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_central_force")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Applies a directional force without affecting rotation. A force is time dependent and meant to be applied every physics update.
    /// 
    /// This is equivalent to using ``applyForce(_:position:)`` at the body's center of mass.
    /// 
    public final func applyCentralForce (_ force: Vector2) {
        #if true
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_apply_central_force, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_apply_central_force, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_apply_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_force")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4288681949)!
            }
            
        }
        
    }()
    
    /// Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update.
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public final func applyForce (_ force: Vector2, position: Vector2 = Vector2 (x: 0, y: 0)) {
        #if true
        
        var copy_force = force
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_apply_force, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force, &copy_position)
        
        #else
        
        var copy_force = force
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (RigidBody2D.method_apply_force, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_apply_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_torque")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Applies a rotational force without affecting position. A force is time dependent and meant to be applied every physics update.
    /// 
    /// > Note: ``inertia`` is required for this to work. To have ``inertia``, an active ``CollisionShape2D`` must be a child of the node, or you can manually set ``inertia``.
    /// 
    public final func applyTorque (_ torque: Double) {
        #if true
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_apply_torque, UnsafeMutableRawPointer (mutating: handle), nil, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_torque) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_apply_torque, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_constant_central_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_constant_central_force")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Adds a constant directional force without affecting rotation that keeps being applied over time until cleared with `constant_force = Vector2(0, 0)`.
    /// 
    /// This is equivalent to using ``addConstantForce(_:position:)`` at the body's center of mass.
    /// 
    public final func addConstantCentralForce (_ force: Vector2) {
        #if true
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_add_constant_central_force, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_add_constant_central_force, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_constant_force")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4288681949)!
            }
            
        }
        
    }()
    
    /// Adds a constant positioned force to the body that keeps being applied over time until cleared with `constant_force = Vector2(0, 0)`.
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public final func addConstantForce (_ force: Vector2, position: Vector2 = Vector2 (x: 0, y: 0)) {
        #if true
        
        var copy_force = force
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_add_constant_force, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force, &copy_position)
        
        #else
        
        var copy_force = force
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (RigidBody2D.method_add_constant_force, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_constant_torque")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Adds a constant rotational force without affecting position that keeps being applied over time until cleared with `constant_torque = 0`.
    public final func addConstantTorque (_ torque: Double) {
        #if true
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_add_constant_torque, UnsafeMutableRawPointer (mutating: handle), nil, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_torque) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_add_constant_torque, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constant_force")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_constant_force (_ force: Vector2) {
        #if true
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_constant_force, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_constant_force, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constant_force")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_constant_force ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_constant_force, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constant_torque")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_constant_torque (_ torque: Double) {
        #if true
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_constant_torque, UnsafeMutableRawPointer (mutating: handle), nil, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_torque) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_constant_torque, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constant_torque")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_constant_torque ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_constant_torque, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sleeping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sleeping")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sleeping (_ sleeping: Bool) {
        #if true
        
        var copy_sleeping = sleeping
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_sleeping, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sleeping)
        
        #else
        
        var copy_sleeping = sleeping
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_sleeping) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_sleeping, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_sleeping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_sleeping")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_sleeping ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RigidBody2D.method_is_sleeping, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_can_sleep: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_can_sleep")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_can_sleep (_ ableToSleep: Bool) {
        #if true
        
        var copy_able_to_sleep = ableToSleep
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_can_sleep, UnsafeMutableRawPointer (mutating: handle), nil, &copy_able_to_sleep)
        
        #else
        
        var copy_able_to_sleep = ableToSleep
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_able_to_sleep) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_can_sleep, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_able_to_sleep: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_able_to_sleep")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_able_to_sleep ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RigidBody2D.method_is_able_to_sleep, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_lock_rotation_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_lock_rotation_enabled")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_lock_rotation_enabled (_ lockRotation: Bool) {
        #if true
        
        var copy_lock_rotation = lockRotation
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_lock_rotation_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_lock_rotation)
        
        #else
        
        var copy_lock_rotation = lockRotation
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_lock_rotation) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_lock_rotation_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_lock_rotation_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_lock_rotation_enabled")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_lock_rotation_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RigidBody2D.method_is_lock_rotation_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_freeze_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_freeze_enabled")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_freeze_enabled (_ freezeMode: Bool) {
        #if true
        
        var copy_freeze_mode = freezeMode
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_freeze_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_freeze_mode)
        
        #else
        
        var copy_freeze_mode = freezeMode
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_freeze_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_freeze_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_freeze_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_freeze_enabled")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_freeze_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RigidBody2D.method_is_freeze_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_freeze_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_freeze_mode")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1705112154)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_freeze_mode (_ freezeMode: RigidBody2D.FreezeMode) {
        #if true
        
        var copy_freeze_mode = Int64 (freezeMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (RigidBody2D.method_set_freeze_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_freeze_mode)
        
        #else
        
        var copy_freeze_mode = Int64 (freezeMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_freeze_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RigidBody2D.method_set_freeze_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_freeze_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_freeze_mode")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2016872314)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_freeze_mode ()-> RigidBody2D.FreezeMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_freeze_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RigidBody2D.FreezeMode (rawValue: _result)!
    }
    
    fileprivate static var method_get_colliding_bodies: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_colliding_bodies")
        return withUnsafePointer (to: &RigidBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns a list of the bodies colliding with this one. Requires ``contactMonitor`` to be set to `true` and ``maxContactsReported`` to be set high enough to detect all the collisions.
    /// 
    /// > Note: The result of this test is not immediate after moving objects. For performance, list of collisions is updated once per frame and before the physics step. Consider using signals instead.
    /// 
    public final func getCollidingBodies ()-> ObjectCollection<Node2D> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (RigidBody2D.method_get_colliding_bodies, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<Node2D>(content: _result)
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_integrate_forces":
                return _RigidBody2D_proxy_integrate_forces
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ bodyRid: RID, _ body: Node, _ bodyShapeIndex: Int64, _ localShapeIndex: Int64) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = RID (args [0])!
                var ptr_1: UnsafeMutableRawPointer?
                args [1].toType (Variant.GType.object, dest: &ptr_1)
                let arg_1 = lookupLiveObject (handleAddress: ptr_1!) as? Node ?? Node (nativeHandle: ptr_1!)
                let arg_2 = Int64 (args [2])!
                let arg_3 = Int64 (args [3])!
                
                callback (arg_0, arg_1, arg_2, arg_3)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _, _, _, _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when one of this RigidBody2D's ``Shape2D``s collides with another ``PhysicsBody2D`` or ``TileMap``'s ``Shape2D``s. Requires ``contactMonitor`` to be set to `true` and ``maxContactsReported`` to be set high enough to detect all the collisions. ``TileMap``s are detected if the ``TileSet`` has Collision ``Shape2D``s.
    /// 
    /// `bodyRid` the ``RID`` of the other ``PhysicsBody2D`` or ``TileSet``'s ``CollisionObject2D`` used by the ``PhysicsServer2D``.
    /// 
    /// `body` the ``Node``, if it exists in the tree, of the other ``PhysicsBody2D`` or ``TileMap``.
    /// 
    /// `bodyShapeIndex` the index of the ``Shape2D`` of the other ``PhysicsBody2D`` or ``TileMap`` used by the ``PhysicsServer2D``. Get the ``CollisionShape2D`` node with `body.shape_owner_get_owner(body.shape_find_owner(body_shape_index))`.
    /// 
    /// `localShapeIndex` the index of the ``Shape2D`` of this RigidBody2D used by the ``PhysicsServer2D``. Get the ``CollisionShape2D`` node with `self.shape_owner_get_owner(self.shape_find_owner(local_shape_index))`.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyShapeEntered.connect { bodyRid, body, bodyShapeIndex, localShapeIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyShapeEntered: Signal1 { Signal1 (target: self, signalName: "body_shape_entered") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal2/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal2/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal2/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal2 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal2 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ bodyRid: RID, _ body: Node, _ bodyShapeIndex: Int64, _ localShapeIndex: Int64) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = RID (args [0])!
                var ptr_1: UnsafeMutableRawPointer?
                args [1].toType (Variant.GType.object, dest: &ptr_1)
                let arg_1 = lookupLiveObject (handleAddress: ptr_1!) as? Node ?? Node (nativeHandle: ptr_1!)
                let arg_2 = Int64 (args [2])!
                let arg_3 = Int64 (args [3])!
                
                callback (arg_0, arg_1, arg_2, arg_3)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _, _, _, _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the collision between one of this RigidBody2D's ``Shape2D``s and another ``PhysicsBody2D`` or ``TileMap``'s ``Shape2D``s ends. Requires ``contactMonitor`` to be set to `true` and ``maxContactsReported`` to be set high enough to detect all the collisions. ``TileMap``s are detected if the ``TileSet`` has Collision ``Shape2D``s.
    /// 
    /// `bodyRid` the ``RID`` of the other ``PhysicsBody2D`` or ``TileSet``'s ``CollisionObject2D`` used by the ``PhysicsServer2D``.
    /// 
    /// `body` the ``Node``, if it exists in the tree, of the other ``PhysicsBody2D`` or ``TileMap``.
    /// 
    /// `bodyShapeIndex` the index of the ``Shape2D`` of the other ``PhysicsBody2D`` or ``TileMap`` used by the ``PhysicsServer2D``. Get the ``CollisionShape2D`` node with `body.shape_owner_get_owner(body.shape_find_owner(body_shape_index))`.
    /// 
    /// `localShapeIndex` the index of the ``Shape2D`` of this RigidBody2D used by the ``PhysicsServer2D``. Get the ``CollisionShape2D`` node with `self.shape_owner_get_owner(self.shape_find_owner(local_shape_index))`.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyShapeExited.connect { bodyRid, body, bodyShapeIndex, localShapeIndex in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyShapeExited: Signal2 { Signal2 (target: self, signalName: "body_shape_exited") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal3/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal3/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal3/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal3 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal3 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ body: Node) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                var ptr_0: UnsafeMutableRawPointer?
                args [0].toType (Variant.GType.object, dest: &ptr_0)
                let arg_0 = lookupLiveObject (handleAddress: ptr_0!) as? Node ?? Node (nativeHandle: ptr_0!)
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when a collision with another ``PhysicsBody2D`` or ``TileMap`` occurs. Requires ``contactMonitor`` to be set to `true` and ``maxContactsReported`` to be set high enough to detect all the collisions. ``TileMap``s are detected if the ``TileSet`` has Collision ``Shape2D``s.
    /// 
    /// `body` the ``Node``, if it exists in the tree, of the other ``PhysicsBody2D`` or ``TileMap``.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyEntered.connect { body in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyEntered: Signal3 { Signal3 (target: self, signalName: "body_entered") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal4/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal4/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal4/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal4 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal4 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ body: Node) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                var ptr_0: UnsafeMutableRawPointer?
                args [0].toType (Variant.GType.object, dest: &ptr_0)
                let arg_0 = lookupLiveObject (handleAddress: ptr_0!) as? Node ?? Node (nativeHandle: ptr_0!)
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the collision with another ``PhysicsBody2D`` or ``TileMap`` ends. Requires ``contactMonitor`` to be set to `true` and ``maxContactsReported`` to be set high enough to detect all the collisions. ``TileMap``s are detected if the ``TileSet`` has Collision ``Shape2D``s.
    /// 
    /// `body` the ``Node``, if it exists in the tree, of the other ``PhysicsBody2D`` or ``TileMap``.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bodyExited.connect { body in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bodyExited: Signal4 { Signal4 (target: self, signalName: "body_exited") }
    
    /// Emitted when the physics engine changes the body's sleeping state.
    /// 
    /// > Note: Changing the value ``sleeping`` will not trigger this signal. It is only emitted if the sleeping state is changed by the physics engine or `emit_signal("sleeping_state_changed")` is used.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.sleepingStateChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var sleepingStateChanged: SimpleSignal { SimpleSignal (target: self, signalName: "sleeping_state_changed") }
    
}

// Support methods for proxies
func _RigidBody2D_proxy_integrate_forces (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<RigidBody2D>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._integrateForces (state: lookupLiveObject (handleAddress: resolved_0) as? PhysicsDirectBodyState2D ?? lookupObject (nativeHandle: resolved_0)!)
}

