// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Universal Plug and Play (UPnP) device.
/// 
/// Universal Plug and Play (UPnP) device. See ``UPNP`` for UPnP discovery and utility functions. Provides low-level access to UPNP control commands. Allows to manage port mappings (port forwarding) and to query network information of the device (like local and external IP address and status). Note that methods on this class are synchronous and block the calling thread.
open class UPNPDevice: RefCounted {
    override open class var godotClassName: StringName { "UPNPDevice" }
    public enum IGDStatus: Int64 {
        /// OK.
        case ok = 0 // IGD_STATUS_OK
        /// HTTP error.
        case httpError = 1 // IGD_STATUS_HTTP_ERROR
        /// Empty HTTP response.
        case httpEmpty = 2 // IGD_STATUS_HTTP_EMPTY
        /// Returned response contained no URLs.
        case noUrls = 3 // IGD_STATUS_NO_URLS
        /// Not a valid IGD.
        case noIgd = 4 // IGD_STATUS_NO_IGD
        /// Disconnected.
        case disconnected = 5 // IGD_STATUS_DISCONNECTED
        /// Unknown device.
        case unknownDevice = 6 // IGD_STATUS_UNKNOWN_DEVICE
        /// Invalid control.
        case invalidControl = 7 // IGD_STATUS_INVALID_CONTROL
        /// Memory allocation error.
        case mallocError = 8 // IGD_STATUS_MALLOC_ERROR
        /// Unknown error.
        case unknownError = 9 // IGD_STATUS_UNKNOWN_ERROR
    }
    
    
    /* Properties */
    
    /// URL to the device description.
    final public var descriptionUrl: String {
        get {
            return get_description_url ()
        }
        
        set {
            set_description_url (newValue)
        }
        
    }
    
    /// Service type.
    final public var serviceType: String {
        get {
            return get_service_type ()
        }
        
        set {
            set_service_type (newValue)
        }
        
    }
    
    /// IDG control URL.
    final public var igdControlUrl: String {
        get {
            return get_igd_control_url ()
        }
        
        set {
            set_igd_control_url (newValue)
        }
        
    }
    
    /// IGD service type.
    final public var igdServiceType: String {
        get {
            return get_igd_service_type ()
        }
        
        set {
            set_igd_service_type (newValue)
        }
        
    }
    
    /// Address of the local machine in the network connecting it to this ``UPNPDevice``.
    final public var igdOurAddr: String {
        get {
            return get_igd_our_addr ()
        }
        
        set {
            set_igd_our_addr (newValue)
        }
        
    }
    
    /// IGD status. See ``UPNPDevice/IGDStatus``.
    final public var igdStatus: UPNPDevice.IGDStatus {
        get {
            return get_igd_status ()
        }
        
        set {
            set_igd_status (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_is_valid_gateway: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_valid_gateway")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if this is a valid IGD (InternetGatewayDevice) which potentially supports port forwarding.
    public final func isValidGateway ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (UPNPDevice.method_is_valid_gateway, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_query_external_address: GDExtensionMethodBindPtr = {
        let methodName = StringName ("query_external_address")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the external IP address of this ``UPNPDevice`` or an empty string.
    public final func queryExternalAddress ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (UPNPDevice.method_query_external_address, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_add_port_mapping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_port_mapping")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 818314583)!
            }
            
        }
        
    }()
    
    /// Adds a port mapping to forward the given external port on this ``UPNPDevice`` for the given protocol to the local machine. See ``UPNP/addPortMapping(port:portInternal:desc:proto:duration:)``.
    public final func addPortMapping (port: Int32, portInternal: Int32 = 0, desc: String = "", proto: String = "UDP", duration: Int32 = 0)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_port: Int = Int (port)
        var copy_port_internal: Int = Int (portInternal)
        let gstr_desc = GString (desc)
        let gstr_proto = GString (proto)
        var copy_duration: Int = Int (duration)
        
        gi.object_method_bind_ptrcall_v (UPNPDevice.method_add_port_mapping, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port, &copy_port_internal, &gstr_desc.content, &gstr_proto.content, &copy_duration)
        return _result
        #else
        
        var copy_port: Int = Int (port)
        var copy_port_internal: Int = Int (portInternal)
        let gstr_desc = GString (desc)
        let gstr_proto = GString (proto)
        var copy_duration: Int = Int (duration)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_port_internal) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &gstr_desc.content) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &gstr_proto.content) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_duration) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (UPNPDevice.method_add_port_mapping, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                            return _result
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_delete_port_mapping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("delete_port_mapping")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444187325)!
            }
            
        }
        
    }()
    
    /// Deletes the port mapping identified by the given port and protocol combination on this device. See ``UPNP/deletePortMapping(port:proto:)``.
    public final func deletePortMapping (port: Int32, proto: String = "UDP")-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_port: Int = Int (port)
        let gstr_proto = GString (proto)
        
        gi.object_method_bind_ptrcall_v (UPNPDevice.method_delete_port_mapping, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port, &gstr_proto.content)
        return _result
        #else
        
        var copy_port: Int = Int (port)
        let gstr_proto = GString (proto)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_proto.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (UPNPDevice.method_delete_port_mapping, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_description_url: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_description_url")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_description_url (_ url: String) {
        #if false
        
        let gstr_url = GString (url)
        
        gi.object_method_bind_ptrcall_v (UPNPDevice.method_set_description_url, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_url.content)
        
        #else
        
        let gstr_url = GString (url)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_url.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (UPNPDevice.method_set_description_url, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_description_url: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_description_url")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_description_url ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (UPNPDevice.method_get_description_url, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_service_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_service_type")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_service_type (_ type: String) {
        #if false
        
        let gstr_type = GString (type)
        
        gi.object_method_bind_ptrcall_v (UPNPDevice.method_set_service_type, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_type.content)
        
        #else
        
        let gstr_type = GString (type)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_type.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (UPNPDevice.method_set_service_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_service_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_service_type")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_service_type ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (UPNPDevice.method_get_service_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_igd_control_url: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_igd_control_url")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_igd_control_url (_ url: String) {
        #if false
        
        let gstr_url = GString (url)
        
        gi.object_method_bind_ptrcall_v (UPNPDevice.method_set_igd_control_url, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_url.content)
        
        #else
        
        let gstr_url = GString (url)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_url.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (UPNPDevice.method_set_igd_control_url, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_igd_control_url: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_igd_control_url")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_igd_control_url ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (UPNPDevice.method_get_igd_control_url, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_igd_service_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_igd_service_type")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_igd_service_type (_ type: String) {
        #if false
        
        let gstr_type = GString (type)
        
        gi.object_method_bind_ptrcall_v (UPNPDevice.method_set_igd_service_type, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_type.content)
        
        #else
        
        let gstr_type = GString (type)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_type.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (UPNPDevice.method_set_igd_service_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_igd_service_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_igd_service_type")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_igd_service_type ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (UPNPDevice.method_get_igd_service_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_igd_our_addr: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_igd_our_addr")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_igd_our_addr (_ addr: String) {
        #if false
        
        let gstr_addr = GString (addr)
        
        gi.object_method_bind_ptrcall_v (UPNPDevice.method_set_igd_our_addr, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_addr.content)
        
        #else
        
        let gstr_addr = GString (addr)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_addr.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (UPNPDevice.method_set_igd_our_addr, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_igd_our_addr: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_igd_our_addr")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_igd_our_addr ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (UPNPDevice.method_get_igd_our_addr, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_igd_status: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_igd_status")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 519504122)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_igd_status (_ status: UPNPDevice.IGDStatus) {
        #if false
        
        var copy_status = Int64 (status.rawValue)
        
        gi.object_method_bind_ptrcall_v (UPNPDevice.method_set_igd_status, UnsafeMutableRawPointer (mutating: handle), nil, &copy_status)
        
        #else
        
        var copy_status = Int64 (status.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_status) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (UPNPDevice.method_set_igd_status, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_igd_status: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_igd_status")
        return withUnsafePointer (to: &UPNPDevice.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 180887011)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_igd_status ()-> UPNPDevice.IGDStatus {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (UPNPDevice.method_get_igd_status, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return UPNPDevice.IGDStatus (rawValue: _result)!
    }
    
}

