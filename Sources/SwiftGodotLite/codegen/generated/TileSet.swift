// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Tile library for tilemaps.
/// 
/// A TileSet is a library of tiles for a ``TileMap``. A TileSet handles a list of ``TileSetSource``, each of them storing a set of tiles.
/// 
/// Tiles can either be from a ``TileSetAtlasSource``, which renders tiles out of a texture with support for physics, navigation, etc., or from a ``TileSetScenesCollectionSource``, which exposes scene-based tiles.
/// 
/// Tiles are referenced by using three IDs: their source ID, their atlas coordinates ID, and their alternative tile ID.
/// 
/// A TileSet can be configured so that its tiles expose more or fewer properties. To do so, the TileSet resources use property layers, which you can add or remove depending on your needs.
/// 
/// For example, adding a physics layer allows giving collision shapes to your tiles. Each layer has dedicated properties (physics layer and mask), so you may add several TileSet physics layers for each type of collision you need.
/// 
/// See the functions to add new layers for more information.
/// 
open class TileSet: Resource {
    override open class var godotClassName: StringName { "TileSet" }
    public enum TileShape: Int64 {
        /// Rectangular tile shape.
        case square = 0 // TILE_SHAPE_SQUARE
        /// Diamond tile shape (for isometric look).
        /// 
        /// > Note: Isometric ``TileSet`` works best if ``TileMap`` and all its layers have Y-sort enabled.
        /// 
        case isometric = 1 // TILE_SHAPE_ISOMETRIC
        /// Rectangular tile shape with one row/column out of two offset by half a tile.
        case halfOffsetSquare = 2 // TILE_SHAPE_HALF_OFFSET_SQUARE
        /// Hexagonal tile shape.
        case hexagon = 3 // TILE_SHAPE_HEXAGON
    }
    
    public enum TileLayout: Int64 {
        /// Tile coordinates layout where both axis stay consistent with their respective local horizontal and vertical axis.
        case stacked = 0 // TILE_LAYOUT_STACKED
        /// Same as .stacked, but the first half-offset is negative instead of positive.
        case stackedOffset = 1 // TILE_LAYOUT_STACKED_OFFSET
        /// Tile coordinates layout where the horizontal axis stay horizontal, and the vertical one goes down-right.
        case stairsRight = 2 // TILE_LAYOUT_STAIRS_RIGHT
        /// Tile coordinates layout where the vertical axis stay vertical, and the horizontal one goes down-right.
        case stairsDown = 3 // TILE_LAYOUT_STAIRS_DOWN
        /// Tile coordinates layout where the horizontal axis goes up-right, and the vertical one goes down-right.
        case diamondRight = 4 // TILE_LAYOUT_DIAMOND_RIGHT
        /// Tile coordinates layout where the horizontal axis goes down-right, and the vertical one goes down-left.
        case diamondDown = 5 // TILE_LAYOUT_DIAMOND_DOWN
    }
    
    public enum TileOffsetAxis: Int64 {
        /// Horizontal half-offset.
        case horizontal = 0 // TILE_OFFSET_AXIS_HORIZONTAL
        /// Vertical half-offset.
        case vertical = 1 // TILE_OFFSET_AXIS_VERTICAL
    }
    
    public enum CellNeighbor: Int64 {
        /// Neighbor on the right side.
        case rightSide = 0 // CELL_NEIGHBOR_RIGHT_SIDE
        /// Neighbor in the right corner.
        case rightCorner = 1 // CELL_NEIGHBOR_RIGHT_CORNER
        /// Neighbor on the bottom right side.
        case bottomRightSide = 2 // CELL_NEIGHBOR_BOTTOM_RIGHT_SIDE
        /// Neighbor in the bottom right corner.
        case bottomRightCorner = 3 // CELL_NEIGHBOR_BOTTOM_RIGHT_CORNER
        /// Neighbor on the bottom side.
        case bottomSide = 4 // CELL_NEIGHBOR_BOTTOM_SIDE
        /// Neighbor in the bottom corner.
        case bottomCorner = 5 // CELL_NEIGHBOR_BOTTOM_CORNER
        /// Neighbor on the bottom left side.
        case bottomLeftSide = 6 // CELL_NEIGHBOR_BOTTOM_LEFT_SIDE
        /// Neighbor in the bottom left corner.
        case bottomLeftCorner = 7 // CELL_NEIGHBOR_BOTTOM_LEFT_CORNER
        /// Neighbor on the left side.
        case leftSide = 8 // CELL_NEIGHBOR_LEFT_SIDE
        /// Neighbor in the left corner.
        case leftCorner = 9 // CELL_NEIGHBOR_LEFT_CORNER
        /// Neighbor on the top left side.
        case topLeftSide = 10 // CELL_NEIGHBOR_TOP_LEFT_SIDE
        /// Neighbor in the top left corner.
        case topLeftCorner = 11 // CELL_NEIGHBOR_TOP_LEFT_CORNER
        /// Neighbor on the top side.
        case topSide = 12 // CELL_NEIGHBOR_TOP_SIDE
        /// Neighbor in the top corner.
        case topCorner = 13 // CELL_NEIGHBOR_TOP_CORNER
        /// Neighbor on the top right side.
        case topRightSide = 14 // CELL_NEIGHBOR_TOP_RIGHT_SIDE
        /// Neighbor in the top right corner.
        case topRightCorner = 15 // CELL_NEIGHBOR_TOP_RIGHT_CORNER
    }
    
    public enum TerrainMode: Int64 {
        /// Requires both corners and side to match with neighboring tiles' terrains.
        case cornersAndSides = 0 // TERRAIN_MODE_MATCH_CORNERS_AND_SIDES
        /// Requires corners to match with neighboring tiles' terrains.
        case corners = 1 // TERRAIN_MODE_MATCH_CORNERS
        /// Requires sides to match with neighboring tiles' terrains.
        case sides = 2 // TERRAIN_MODE_MATCH_SIDES
    }
    
    
    /* Properties */
    
    /// The tile shape.
    final public var tileShape: TileSet.TileShape {
        get {
            return get_tile_shape ()
        }
        
        set {
            set_tile_shape (newValue)
        }
        
    }
    
    /// For all half-offset shapes (Isometric, Hexagonal and Half-Offset square), changes the way tiles are indexed in the TileMap grid.
    final public var tileLayout: TileSet.TileLayout {
        get {
            return get_tile_layout ()
        }
        
        set {
            set_tile_layout (newValue)
        }
        
    }
    
    /// For all half-offset shapes (Isometric, Hexagonal and Half-Offset square), determines the offset axis.
    final public var tileOffsetAxis: TileSet.TileOffsetAxis {
        get {
            return get_tile_offset_axis ()
        }
        
        set {
            set_tile_offset_axis (newValue)
        }
        
    }
    
    /// The tile size, in pixels. For all tile shapes, this size corresponds to the encompassing rectangle of the tile shape. This is thus the minimal cell size required in an atlas.
    final public var tileSize: Vector2i {
        get {
            return get_tile_size ()
        }
        
        set {
            set_tile_size (newValue)
        }
        
    }
    
    /// Enables/Disable uv clipping when rendering the tiles.
    final public var uvClipping: Bool {
        get {
            return is_uv_clipping ()
        }
        
        set {
            set_uv_clipping (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_next_source_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_next_source_id")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns a new unused source ID. This generated ID is the same that a call to ``addSource(_:atlasSourceIdOverride:)`` would return.
    public final func getNextSourceId ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileSet.method_get_next_source_id, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_source")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1059186179)!
            }
            
        }
        
    }()
    
    /// Adds a ``TileSetSource`` to the TileSet. If `atlasSourceIdOverride` is not -1, also set its source ID. Otherwise, a unique identifier is automatically generated.
    /// 
    /// The function returns the added source ID or -1 if the source could not be added.
    /// 
    /// > Warning: A source cannot belong to two TileSets at the same time. If the added source was attached to another ``TileSet``, it will be removed from that one.
    /// 
    public final func addSource (_ source: TileSetSource?, atlasSourceIdOverride: Int32 = -1)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_atlas_source_id_override: Int = Int (atlasSourceIdOverride)
        var copy_source_handle = source?.handle
        
        gi.object_method_bind_ptrcall_v (TileSet.method_add_source, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_source_handle, &copy_atlas_source_id_override)
        return _result
        #else
        
        var copy_atlas_source_id_override: Int = Int (atlasSourceIdOverride)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: source?.handle) { p0 in
        _args.append (source == nil ? nil : p0)
            return withUnsafePointer (to: &copy_atlas_source_id_override) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_add_source, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_source")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes the source with the given source ID.
    public final func removeSource (sourceId: Int32) {
        #if true
        
        var copy_source_id: Int = Int (sourceId)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_source, UnsafeMutableRawPointer (mutating: handle), nil, &copy_source_id)
        
        #else
        
        var copy_source_id: Int = Int (sourceId)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_source_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_remove_source, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_source_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_source_id")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Changes a source's ID.
    public final func setSourceId (_ sourceId: Int32, newSourceId: Int32) {
        #if true
        
        var copy_source_id: Int = Int (sourceId)
        var copy_new_source_id: Int = Int (newSourceId)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_source_id, UnsafeMutableRawPointer (mutating: handle), nil, &copy_source_id, &copy_new_source_id)
        
        #else
        
        var copy_source_id: Int = Int (sourceId)
        var copy_new_source_id: Int = Int (newSourceId)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_source_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_new_source_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_source_id, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_source_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_source_count")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of ``TileSetSource`` in this TileSet.
    public final func getSourceCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileSet.method_get_source_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_source_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_source_id")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the source ID for source with index `index`.
    public final func getSourceId (index: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_index: Int = Int (index)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_source_id, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_index)
        return _result
        #else
        
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_source_id, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_has_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_source")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns if this TileSet has a source for the given source ID.
    public final func hasSource (sourceId: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_source_id: Int = Int (sourceId)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_has_source, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_source_id)
        return _result
        #else
        
        var copy_source_id: Int = Int (sourceId)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_source_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_has_source, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_source")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1763540252)!
            }
            
        }
        
    }()
    
    /// Returns the ``TileSetSource`` with ID `sourceId`.
    public final func getSource (sourceId: Int32)-> TileSetSource? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_source_id: Int = Int (sourceId)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_source, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_source_id)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_source_id: Int = Int (sourceId)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_source_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_source, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_tile_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tile_shape")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2131427112)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tile_shape (_ shape: TileSet.TileShape) {
        #if true
        
        var copy_shape = Int64 (shape.rawValue)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_tile_shape, UnsafeMutableRawPointer (mutating: handle), nil, &copy_shape)
        
        #else
        
        var copy_shape = Int64 (shape.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_shape) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_set_tile_shape, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tile_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tile_shape")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 716918169)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tile_shape ()-> TileSet.TileShape {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TileSet.method_get_tile_shape, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TileSet.TileShape (rawValue: _result)!
    }
    
    fileprivate static var method_set_tile_layout: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tile_layout")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1071216679)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tile_layout (_ layout: TileSet.TileLayout) {
        #if true
        
        var copy_layout = Int64 (layout.rawValue)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_tile_layout, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layout)
        
        #else
        
        var copy_layout = Int64 (layout.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layout) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_set_tile_layout, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tile_layout: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tile_layout")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 194628839)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tile_layout ()-> TileSet.TileLayout {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TileSet.method_get_tile_layout, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TileSet.TileLayout (rawValue: _result)!
    }
    
    fileprivate static var method_set_tile_offset_axis: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tile_offset_axis")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3300198521)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tile_offset_axis (_ alignment: TileSet.TileOffsetAxis) {
        #if true
        
        var copy_alignment = Int64 (alignment.rawValue)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_tile_offset_axis, UnsafeMutableRawPointer (mutating: handle), nil, &copy_alignment)
        
        #else
        
        var copy_alignment = Int64 (alignment.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_alignment) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_set_tile_offset_axis, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tile_offset_axis: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tile_offset_axis")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 762494114)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tile_offset_axis ()-> TileSet.TileOffsetAxis {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TileSet.method_get_tile_offset_axis, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TileSet.TileOffsetAxis (rawValue: _result)!
    }
    
    fileprivate static var method_set_tile_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tile_size")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130785943)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tile_size (_ size: Vector2i) {
        #if true
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_tile_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_set_tile_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tile_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tile_size")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tile_size ()-> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall (TileSet.method_get_tile_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_uv_clipping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_uv_clipping")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_uv_clipping (_ uvClipping: Bool) {
        #if true
        
        var copy_uv_clipping = uvClipping
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_uv_clipping, UnsafeMutableRawPointer (mutating: handle), nil, &copy_uv_clipping)
        
        #else
        
        var copy_uv_clipping = uvClipping
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_uv_clipping) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_set_uv_clipping, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_uv_clipping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_uv_clipping")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_uv_clipping ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TileSet.method_is_uv_clipping, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_occlusion_layers_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_occlusion_layers_count")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the occlusion layers count.
    public final func getOcclusionLayersCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileSet.method_get_occlusion_layers_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_occlusion_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_occlusion_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1025054187)!
            }
            
        }
        
    }()
    
    /// Adds an occlusion layer to the TileSet at the given position `toPosition` in the array. If `toPosition` is -1, adds it at the end of the array.
    /// 
    /// Occlusion layers allow assigning occlusion polygons to atlas tiles.
    /// 
    public final func addOcclusionLayer (toPosition: Int32 = -1) {
        #if true
        
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_add_occlusion_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_to_position)
        
        #else
        
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_to_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_add_occlusion_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_move_occlusion_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("move_occlusion_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Moves the occlusion layer at index `layerIndex` to the given position `toPosition` in the array. Also updates the atlas tiles accordingly.
    public final func moveOcclusionLayer (layerIndex: Int32, toPosition: Int32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_move_occlusion_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_to_position)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_to_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_move_occlusion_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_occlusion_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_occlusion_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes the occlusion layer at index `layerIndex`. Also updates the atlas tiles accordingly.
    public final func removeOcclusionLayer (layerIndex: Int32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_occlusion_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_remove_occlusion_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_occlusion_layer_light_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_occlusion_layer_light_mask")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the occlusion layer (as in the rendering server) for occluders in the given TileSet occlusion layer.
    public final func setOcclusionLayerLightMask (layerIndex: Int32, lightMask: Int32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_light_mask: Int = Int (lightMask)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_occlusion_layer_light_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_light_mask)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_light_mask: Int = Int (lightMask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_light_mask) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_occlusion_layer_light_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_occlusion_layer_light_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_occlusion_layer_light_mask")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the light mask of the occlusion layer.
    public final func getOcclusionLayerLightMask (layerIndex: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_occlusion_layer_light_mask, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_index)
        return _result
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_occlusion_layer_light_mask, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_occlusion_layer_sdf_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_occlusion_layer_sdf_collision")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Enables or disables SDF collision for occluders in the given TileSet occlusion layer.
    public final func setOcclusionLayerSdfCollision (layerIndex: Int32, sdfCollision: Bool) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_sdf_collision = sdfCollision
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_occlusion_layer_sdf_collision, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_sdf_collision)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_sdf_collision = sdfCollision
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_sdf_collision) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_occlusion_layer_sdf_collision, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_occlusion_layer_sdf_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_occlusion_layer_sdf_collision")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns if the occluders from this layer use `sdf_collision`.
    public final func getOcclusionLayerSdfCollision (layerIndex: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_occlusion_layer_sdf_collision, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_index)
        return _result
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_occlusion_layer_sdf_collision, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_physics_layers_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_physics_layers_count")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the physics layers count.
    public final func getPhysicsLayersCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileSet.method_get_physics_layers_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_physics_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_physics_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1025054187)!
            }
            
        }
        
    }()
    
    /// Adds a physics layer to the TileSet at the given position `toPosition` in the array. If `toPosition` is -1, adds it at the end of the array.
    /// 
    /// Physics layers allow assigning collision polygons to atlas tiles.
    /// 
    public final func addPhysicsLayer (toPosition: Int32 = -1) {
        #if true
        
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_add_physics_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_to_position)
        
        #else
        
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_to_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_add_physics_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_move_physics_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("move_physics_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Moves the physics layer at index `layerIndex` to the given position `toPosition` in the array. Also updates the atlas tiles accordingly.
    public final func movePhysicsLayer (layerIndex: Int32, toPosition: Int32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_move_physics_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_to_position)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_to_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_move_physics_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_physics_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_physics_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes the physics layer at index `layerIndex`. Also updates the atlas tiles accordingly.
    public final func removePhysicsLayer (layerIndex: Int32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_physics_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_remove_physics_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_physics_layer_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_physics_layer_collision_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the physics layer (as in the physics server) for bodies in the given TileSet physics layer.
    public final func setPhysicsLayerCollisionLayer (layerIndex: Int32, layer: UInt32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_physics_layer_collision_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_layer)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_layer) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_physics_layer_collision_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_physics_layer_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_physics_layer_collision_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the collision layer (as in the physics server) bodies on the given TileSet's physics layer are in.
    public final func getPhysicsLayerCollisionLayer (layerIndex: Int32)-> UInt32 {
        var _result: UInt32 = 0
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_physics_layer_collision_layer, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_index)
        return _result
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_physics_layer_collision_layer, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_physics_layer_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_physics_layer_collision_mask")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the physics layer (as in the physics server) for bodies in the given TileSet physics layer.
    public final func setPhysicsLayerCollisionMask (layerIndex: Int32, mask: UInt32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_physics_layer_collision_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_mask)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mask) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_physics_layer_collision_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_physics_layer_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_physics_layer_collision_mask")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the collision mask of bodies on the given TileSet's physics layer.
    public final func getPhysicsLayerCollisionMask (layerIndex: Int32)-> UInt32 {
        var _result: UInt32 = 0
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_physics_layer_collision_mask, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_index)
        return _result
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_physics_layer_collision_mask, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_physics_layer_physics_material: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_physics_layer_physics_material")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1018687357)!
            }
            
        }
        
    }()
    
    /// Sets the physics material for bodies in the given TileSet physics layer.
    public final func setPhysicsLayerPhysicsMaterial (layerIndex: Int32, physicsMaterial: PhysicsMaterial?) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_physics_material_handle = physicsMaterial?.handle
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_physics_layer_physics_material, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_physics_material_handle)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: physicsMaterial?.handle) { p1 in
            _args.append (physicsMaterial == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_physics_layer_physics_material, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_physics_layer_physics_material: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_physics_layer_physics_material")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 788318639)!
            }
            
        }
        
    }()
    
    /// Returns the physics material of bodies on the given TileSet's physics layer.
    public final func getPhysicsLayerPhysicsMaterial (layerIndex: Int32)-> PhysicsMaterial? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_physics_layer_physics_material, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_index)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_physics_layer_physics_material, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_terrain_sets_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_terrain_sets_count")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the terrain sets count.
    public final func getTerrainSetsCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileSet.method_get_terrain_sets_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_terrain_set: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_terrain_set")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1025054187)!
            }
            
        }
        
    }()
    
    /// Adds a new terrain set at the given position `toPosition` in the array. If `toPosition` is -1, adds it at the end of the array.
    public final func addTerrainSet (toPosition: Int32 = -1) {
        #if true
        
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_add_terrain_set, UnsafeMutableRawPointer (mutating: handle), nil, &copy_to_position)
        
        #else
        
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_to_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_add_terrain_set, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_move_terrain_set: GDExtensionMethodBindPtr = {
        let methodName = StringName ("move_terrain_set")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Moves the terrain set at index `terrainSet` to the given position `toPosition` in the array. Also updates the atlas tiles accordingly.
    public final func moveTerrainSet (_ terrainSet: Int32, toPosition: Int32) {
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_move_terrain_set, UnsafeMutableRawPointer (mutating: handle), nil, &copy_terrain_set, &copy_to_position)
        
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_to_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_move_terrain_set, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_terrain_set: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_terrain_set")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes the terrain set at index `terrainSet`. Also updates the atlas tiles accordingly.
    public final func removeTerrainSet (_ terrainSet: Int32) {
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_terrain_set, UnsafeMutableRawPointer (mutating: handle), nil, &copy_terrain_set)
        
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_remove_terrain_set, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_terrain_set_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_terrain_set_mode")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3943003916)!
            }
            
        }
        
    }()
    
    /// Sets a terrain mode. Each mode determines which bits of a tile shape is used to match the neighboring tiles' terrains.
    public final func setTerrainSetMode (terrainSet: Int32, mode: TileSet.TerrainMode) {
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_terrain_set_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_terrain_set, &copy_mode)
        
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mode) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_terrain_set_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_terrain_set_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_terrain_set_mode")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2084469411)!
            }
            
        }
        
    }()
    
    /// Returns a terrain set mode.
    public final func getTerrainSetMode (terrainSet: Int32)-> TileSet.TerrainMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_terrain_set_mode, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_terrain_set)
        return TileSet.TerrainMode (rawValue: _result)!
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_terrain_set_mode, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return TileSet.TerrainMode (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_terrains_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_terrains_count")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the number of terrains in the given terrain set.
    public final func getTerrainsCount (terrainSet: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_terrains_count, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_terrain_set)
        return _result
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_terrains_count, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_add_terrain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_terrain")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1230568737)!
            }
            
        }
        
    }()
    
    /// Adds a new terrain to the given terrain set `terrainSet` at the given position `toPosition` in the array. If `toPosition` is -1, adds it at the end of the array.
    public final func addTerrain (terrainSet: Int32, toPosition: Int32 = -1) {
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_add_terrain, UnsafeMutableRawPointer (mutating: handle), nil, &copy_terrain_set, &copy_to_position)
        
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_to_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_add_terrain, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_move_terrain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("move_terrain")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1649997291)!
            }
            
        }
        
    }()
    
    /// Moves the terrain at index `terrainIndex` for terrain set `terrainSet` to the given position `toPosition` in the array. Also updates the atlas tiles accordingly.
    public final func moveTerrain (terrainSet: Int32, terrainIndex: Int32, toPosition: Int32) {
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_move_terrain, UnsafeMutableRawPointer (mutating: handle), nil, &copy_terrain_set, &copy_terrain_index, &copy_to_position)
        
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_terrain_index) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_to_position) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileSet.method_move_terrain, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_terrain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_terrain")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Removes the terrain at index `terrainIndex` in the given terrain set `terrainSet`. Also updates the atlas tiles accordingly.
    public final func removeTerrain (terrainSet: Int32, terrainIndex: Int32) {
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_terrain, UnsafeMutableRawPointer (mutating: handle), nil, &copy_terrain_set, &copy_terrain_index)
        
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_terrain_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_remove_terrain, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_terrain_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_terrain_name")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2285447957)!
            }
            
        }
        
    }()
    
    /// Sets a terrain's name.
    public final func setTerrainName (terrainSet: Int32, terrainIndex: Int32, name: String) {
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_terrain_name, UnsafeMutableRawPointer (mutating: handle), nil, &copy_terrain_set, &copy_terrain_index, &gstr_name.content)
        
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_terrain_index) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &gstr_name.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileSet.method_set_terrain_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_terrain_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_terrain_name")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1391810591)!
            }
            
        }
        
    }()
    
    /// Returns a terrain's name.
    public final func getTerrainName (terrainSet: Int32, terrainIndex: Int32)-> String {
        let _result = GString ()
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_terrain_name, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_terrain_set, &copy_terrain_index)
        return _result.description
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_terrain_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_get_terrain_name, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                return _result.description
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_terrain_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_terrain_color")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3733378741)!
            }
            
        }
        
    }()
    
    /// Sets a terrain's color. This color is used for identifying the different terrains in the TileSet editor.
    public final func setTerrainColor (terrainSet: Int32, terrainIndex: Int32, color: Color) {
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_terrain_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_terrain_set, &copy_terrain_index, &copy_color)
        
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_terrain_index) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_color) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileSet.method_set_terrain_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_terrain_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_terrain_color")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2165839948)!
            }
            
        }
        
    }()
    
    /// Returns a terrain's color.
    public final func getTerrainColor (terrainSet: Int32, terrainIndex: Int32)-> Color {
        var _result: Color = Color ()
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_terrain_color, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_terrain_set, &copy_terrain_index)
        return _result
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var copy_terrain_index: Int = Int (terrainIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_terrain_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_get_terrain_color, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_navigation_layers_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_navigation_layers_count")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the navigation layers count.
    public final func getNavigationLayersCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileSet.method_get_navigation_layers_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_navigation_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_navigation_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1025054187)!
            }
            
        }
        
    }()
    
    /// Adds a navigation layer to the TileSet at the given position `toPosition` in the array. If `toPosition` is -1, adds it at the end of the array.
    /// 
    /// Navigation layers allow assigning a navigable area to atlas tiles.
    /// 
    public final func addNavigationLayer (toPosition: Int32 = -1) {
        #if true
        
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_add_navigation_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_to_position)
        
        #else
        
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_to_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_add_navigation_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_move_navigation_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("move_navigation_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Moves the navigation layer at index `layerIndex` to the given position `toPosition` in the array. Also updates the atlas tiles accordingly.
    public final func moveNavigationLayer (layerIndex: Int32, toPosition: Int32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_move_navigation_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_to_position)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_to_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_move_navigation_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_navigation_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_navigation_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes the navigation layer at index `layerIndex`. Also updates the atlas tiles accordingly.
    public final func removeNavigationLayer (layerIndex: Int32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_navigation_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_remove_navigation_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_navigation_layer_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_navigation_layer_layers")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the navigation layers (as in the navigation server) for navigation regions in the given TileSet navigation layer.
    public final func setNavigationLayerLayers (layerIndex: Int32, layers: UInt32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_layers: Int = Int (layers)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_navigation_layer_layers, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_layers)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_layers: Int = Int (layers)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_layers) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_navigation_layer_layers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_navigation_layer_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_navigation_layer_layers")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the navigation layers (as in the Navigation server) of the given TileSet navigation layer.
    public final func getNavigationLayerLayers (layerIndex: Int32)-> UInt32 {
        var _result: UInt32 = 0
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_navigation_layer_layers, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_index)
        return _result
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_navigation_layer_layers, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_navigation_layer_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_navigation_layer_layer_value")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1383440665)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified navigation layer of the TileSet navigation data layer identified by the given `layerIndex`, given a navigation_layers `layerNumber` between 1 and 32.
    public final func setNavigationLayerLayerValue (layerIndex: Int32, layerNumber: Int32, value: Bool) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_navigation_layer_layer_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_layer_number, &copy_value)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_layer_number) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileSet.method_set_navigation_layer_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_navigation_layer_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_navigation_layer_layer_value")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2522259332)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified navigation layer of the TileSet navigation data layer identified by the given `layerIndex` is enabled, given a navigation_layers `layerNumber` between 1 and 32.
    public final func getNavigationLayerLayerValue (layerIndex: Int32, layerNumber: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_layer_number: Int = Int (layerNumber)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_navigation_layer_layer_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_index, &copy_layer_number)
        return _result
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_layer_number: Int = Int (layerNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_layer_number) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_get_navigation_layer_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_data_layers_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_data_layers_count")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the custom data layers count.
    public final func getCustomDataLayersCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileSet.method_get_custom_data_layers_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_custom_data_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_custom_data_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1025054187)!
            }
            
        }
        
    }()
    
    /// Adds a custom data layer to the TileSet at the given position `toPosition` in the array. If `toPosition` is -1, adds it at the end of the array.
    /// 
    /// Custom data layers allow assigning custom properties to atlas tiles.
    /// 
    public final func addCustomDataLayer (toPosition: Int32 = -1) {
        #if true
        
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_add_custom_data_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_to_position)
        
        #else
        
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_to_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_add_custom_data_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_move_custom_data_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("move_custom_data_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Moves the custom data layer at index `layerIndex` to the given position `toPosition` in the array. Also updates the atlas tiles accordingly.
    public final func moveCustomDataLayer (layerIndex: Int32, toPosition: Int32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_to_position: Int = Int (toPosition)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_move_custom_data_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_to_position)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_to_position: Int = Int (toPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_to_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_move_custom_data_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_custom_data_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_custom_data_layer")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes the custom data layer at index `layerIndex`. Also updates the atlas tiles accordingly.
    public final func removeCustomDataLayer (layerIndex: Int32) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_custom_data_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_remove_custom_data_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_data_layer_by_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_data_layer_by_name")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1321353865)!
            }
            
        }
        
    }()
    
    /// Returns the index of the custom data layer identified by the given name.
    public final func getCustomDataLayerByName (layerName: String)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        let gstr_layer_name = GString (layerName)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_custom_data_layer_by_name, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_layer_name.content)
        return _result
        #else
        
        let gstr_layer_name = GString (layerName)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_layer_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_custom_data_layer_by_name, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_custom_data_layer_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_data_layer_name")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 501894301)!
            }
            
        }
        
    }()
    
    /// Sets the name of the custom data layer identified by the given index. Names are identifiers of the layer therefore if the name is already taken it will fail and raise an error.
    public final func setCustomDataLayerName (layerIndex: Int32, layerName: String) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        let gstr_layer_name = GString (layerName)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_custom_data_layer_name, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &gstr_layer_name.content)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        let gstr_layer_name = GString (layerName)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_layer_name.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_custom_data_layer_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_data_layer_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_data_layer_name")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 844755477)!
            }
            
        }
        
    }()
    
    /// Returns the name of the custom data layer identified by the given index.
    public final func getCustomDataLayerName (layerIndex: Int32)-> String {
        let _result = GString ()
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_custom_data_layer_name, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_layer_index)
        return _result.description
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_custom_data_layer_name, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_set_custom_data_layer_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_data_layer_type")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3492912874)!
            }
            
        }
        
    }()
    
    /// Sets the type of the custom data layer identified by the given index.
    public final func setCustomDataLayerType (layerIndex: Int32, layerType: Variant.GType) {
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_layer_type = Int64 (layerType.rawValue)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_custom_data_layer_type, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_index, &copy_layer_type)
        
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var copy_layer_type = Int64 (layerType.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_layer_type) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_custom_data_layer_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_data_layer_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_data_layer_type")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2990820875)!
            }
            
        }
        
    }()
    
    /// Returns the type of the custom data layer identified by the given index.
    public final func getCustomDataLayerType (layerIndex: Int32)-> Variant.GType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        var copy_layer_index: Int = Int (layerIndex)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_custom_data_layer_type, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_index)
        return Variant.GType (rawValue: _result)!
        #else
        
        var copy_layer_index: Int = Int (layerIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_custom_data_layer_type, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return Variant.GType (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_source_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_source_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Creates a source-level proxy for the given source ID. A proxy will map set of tile identifiers to another set of identifiers. Both the atlas coordinates ID and the alternative tile ID are kept the same when using source-level proxies.
    /// 
    /// This can be used to replace a source in all TileMaps using this TileSet, as TileMap nodes will find and use the proxy's target source when one is available.
    /// 
    /// Proxied tiles can be automatically replaced in TileMap nodes using the editor.
    /// 
    public final func setSourceLevelTileProxy (sourceFrom: Int32, sourceTo: Int32) {
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_source_to: Int = Int (sourceTo)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_source_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_source_from, &copy_source_to)
        
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_source_to: Int = Int (sourceTo)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_source_to) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_set_source_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_source_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_source_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3744713108)!
            }
            
        }
        
    }()
    
    /// Returns the source-level proxy for the given source identifier.
    /// 
    /// If the TileSet has no proxy for the given identifier, returns -1.
    /// 
    public final func getSourceLevelTileProxy (sourceFrom: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_source_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_source_from)
        return _result
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_source_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_has_source_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_source_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3067735520)!
            }
            
        }
        
    }()
    
    /// Returns if there is a source-level proxy for the given source ID.
    public final func hasSourceLevelTileProxy (sourceFrom: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_has_source_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_source_from)
        return _result
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_has_source_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_remove_source_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_source_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes a source-level tile proxy.
    public final func removeSourceLevelTileProxy (sourceFrom: Int32) {
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_source_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_source_from)
        
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_remove_source_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_coords_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_coords_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1769939278)!
            }
            
        }
        
    }()
    
    /// Creates a coordinates-level proxy for the given identifiers. A proxy will map set of tile identifiers to another set of identifiers. The alternative tile ID is kept the same when using coordinates-level proxies.
    /// 
    /// This can be used to replace a tile in all TileMaps using this TileSet, as TileMap nodes will find and use the proxy's target tile when one is available.
    /// 
    /// Proxied tiles can be automatically replaced in TileMap nodes using the editor.
    /// 
    public final func setCoordsLevelTileProxy (pSourceFrom: Int32, coordsFrom: Vector2i, sourceTo: Int32, coordsTo: Vector2i) {
        #if true
        
        var copy_p_source_from: Int = Int (pSourceFrom)
        var copy_coords_from = coordsFrom
        var copy_source_to: Int = Int (sourceTo)
        var copy_coords_to = coordsTo
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_coords_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_source_from, &copy_coords_from, &copy_source_to, &copy_coords_to)
        
        #else
        
        var copy_p_source_from: Int = Int (pSourceFrom)
        var copy_coords_from = coordsFrom
        var copy_source_to: Int = Int (sourceTo)
        var copy_coords_to = coordsTo
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_source_from) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_coords_from) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_source_to) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_coords_to) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (TileSet.method_set_coords_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_coords_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_coords_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2856536371)!
            }
            
        }
        
    }()
    
    /// Returns the coordinate-level proxy for the given identifiers. The returned array contains the two target identifiers of the proxy (source ID and atlas coordinates ID).
    /// 
    /// If the TileSet has no proxy for the given identifiers, returns an empty Array.
    /// 
    public final func getCoordsLevelTileProxy (sourceFrom: Int32, coordsFrom: Vector2i)-> GArray {
        let _result: GArray = GArray ()
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_coords_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_source_from, &copy_coords_from)
        return _result
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_coords_from) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_get_coords_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_has_coords_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_coords_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3957903770)!
            }
            
        }
        
    }()
    
    /// Returns if there is a coodinates-level proxy for the given identifiers.
    public final func hasCoordsLevelTileProxy (sourceFrom: Int32, coordsFrom: Vector2i)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        
        gi.object_method_bind_ptrcall_v (TileSet.method_has_coords_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_source_from, &copy_coords_from)
        return _result
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_coords_from) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_has_coords_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_coords_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_coords_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2311374912)!
            }
            
        }
        
    }()
    
    /// Removes a coordinates-level proxy for the given identifiers.
    public final func removeCoordsLevelTileProxy (sourceFrom: Int32, coordsFrom: Vector2i) {
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_coords_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_source_from, &copy_coords_from)
        
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_coords_from) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_remove_coords_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_alternative_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alternative_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3862385460)!
            }
            
        }
        
    }()
    
    /// Create an alternative-level proxy for the given identifiers. A proxy will map set of tile identifiers to another set of identifiers.
    /// 
    /// This can be used to replace a tile in all TileMaps using this TileSet, as TileMap nodes will find and use the proxy's target tile when one is available.
    /// 
    /// Proxied tiles can be automatically replaced in TileMap nodes using the editor.
    /// 
    public final func setAlternativeLevelTileProxy (sourceFrom: Int32, coordsFrom: Vector2i, alternativeFrom: Int32, sourceTo: Int32, coordsTo: Vector2i, alternativeTo: Int32) {
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var copy_alternative_from: Int = Int (alternativeFrom)
        var copy_source_to: Int = Int (sourceTo)
        var copy_coords_to = coordsTo
        var copy_alternative_to: Int = Int (alternativeTo)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_set_alternative_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_source_from, &copy_coords_from, &copy_alternative_from, &copy_source_to, &copy_coords_to, &copy_alternative_to)
        
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var copy_alternative_from: Int = Int (alternativeFrom)
        var copy_source_to: Int = Int (sourceTo)
        var copy_coords_to = coordsTo
        var copy_alternative_to: Int = Int (alternativeTo)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_coords_from) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_alternative_from) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_source_to) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_coords_to) { p4 in
                            _args.append (p4)
                            withUnsafePointer (to: &copy_alternative_to) { p5 in
                                _args.append (p5)
        
                                gi.object_method_bind_ptrcall (TileSet.method_set_alternative_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_alternative_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alternative_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2303761075)!
            }
            
        }
        
    }()
    
    /// Returns the alternative-level proxy for the given identifiers. The returned array contains the three proxie's target identifiers (source ID, atlas coords ID and alternative tile ID).
    /// 
    /// If the TileSet has no proxy for the given identifiers, returns an empty Array.
    /// 
    public final func getAlternativeLevelTileProxy (sourceFrom: Int32, coordsFrom: Vector2i, alternativeFrom: Int32)-> GArray {
        let _result: GArray = GArray ()
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var copy_alternative_from: Int = Int (alternativeFrom)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_alternative_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_source_from, &copy_coords_from, &copy_alternative_from)
        return _result
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var copy_alternative_from: Int = Int (alternativeFrom)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_coords_from) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_alternative_from) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileSet.method_get_alternative_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_has_alternative_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_alternative_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 180086755)!
            }
            
        }
        
    }()
    
    /// Returns if there is an alternative-level proxy for the given identifiers.
    public final func hasAlternativeLevelTileProxy (sourceFrom: Int32, coordsFrom: Vector2i, alternativeFrom: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var copy_alternative_from: Int = Int (alternativeFrom)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_has_alternative_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_source_from, &copy_coords_from, &copy_alternative_from)
        return _result
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var copy_alternative_from: Int = Int (alternativeFrom)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_coords_from) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_alternative_from) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileSet.method_has_alternative_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_alternative_level_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_alternative_level_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2328951467)!
            }
            
        }
        
    }()
    
    /// Removes an alternative-level proxy for the given identifiers.
    public final func removeAlternativeLevelTileProxy (sourceFrom: Int32, coordsFrom: Vector2i, alternativeFrom: Int32) {
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var copy_alternative_from: Int = Int (alternativeFrom)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_alternative_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_source_from, &copy_coords_from, &copy_alternative_from)
        
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var copy_alternative_from: Int = Int (alternativeFrom)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_coords_from) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_alternative_from) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileSet.method_remove_alternative_level_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_tile_proxy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_tile_proxy")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4267935328)!
            }
            
        }
        
    }()
    
    /// According to the configured proxies, maps the provided identifiers to a new set of identifiers. The source ID, atlas coordinates ID and alternative tile ID are returned as a 3 elements Array.
    /// 
    /// This function first look for matching alternative-level proxies, then coordinates-level proxies, then source-level proxies.
    /// 
    /// If no proxy corresponding to provided identifiers are found, returns the same values the ones used as arguments.
    /// 
    public final func mapTileProxy (sourceFrom: Int32, coordsFrom: Vector2i, alternativeFrom: Int32)-> GArray {
        let _result: GArray = GArray ()
        #if true
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var copy_alternative_from: Int = Int (alternativeFrom)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_map_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_source_from, &copy_coords_from, &copy_alternative_from)
        return _result
        #else
        
        var copy_source_from: Int = Int (sourceFrom)
        var copy_coords_from = coordsFrom
        var copy_alternative_from: Int = Int (alternativeFrom)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_source_from) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_coords_from) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_alternative_from) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileSet.method_map_tile_proxy, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_cleanup_invalid_tile_proxies: GDExtensionMethodBindPtr = {
        let methodName = StringName ("cleanup_invalid_tile_proxies")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears tile proxies pointing to invalid tiles.
    public final func cleanupInvalidTileProxies () {
        gi.object_method_bind_ptrcall (TileSet.method_cleanup_invalid_tile_proxies, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_clear_tile_proxies: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_tile_proxies")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears all tile proxies.
    public final func clearTileProxies () {
        gi.object_method_bind_ptrcall (TileSet.method_clear_tile_proxies, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_add_pattern: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_pattern")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 763712015)!
            }
            
        }
        
    }()
    
    /// Adds a ``TileMapPattern`` to be stored in the TileSet resource. If provided, insert it at the given `index`.
    public final func addPattern (_ pattern: TileMapPattern?, index: Int32 = -1)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_index: Int = Int (index)
        var copy_pattern_handle = pattern?.handle
        
        gi.object_method_bind_ptrcall_v (TileSet.method_add_pattern, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_pattern_handle, &copy_index)
        return _result
        #else
        
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: pattern?.handle) { p0 in
        _args.append (pattern == nil ? nil : p0)
            return withUnsafePointer (to: &copy_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileSet.method_add_pattern, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_pattern: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pattern")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4207737510)!
            }
            
        }
        
    }()
    
    /// Returns the ``TileMapPattern`` at the given `index`.
    public final func getPattern (index: Int32 = -1)-> TileMapPattern? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_index: Int = Int (index)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_get_pattern, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_index)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_get_pattern, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_remove_pattern: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_pattern")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Remove the ``TileMapPattern`` at the given index.
    public final func removePattern (index: Int32) {
        #if true
        
        var copy_index: Int = Int (index)
        
        gi.object_method_bind_ptrcall_v (TileSet.method_remove_pattern, UnsafeMutableRawPointer (mutating: handle), nil, &copy_index)
        
        #else
        
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileSet.method_remove_pattern, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_patterns_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_patterns_count")
        return withUnsafePointer (to: &TileSet.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the number of ``TileMapPattern`` this tile set handles.
    public final func getPatternsCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileSet.method_get_patterns_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

