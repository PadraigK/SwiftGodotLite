// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Godot editor's control for editing numeric values.
/// 
/// This ``Control`` node is used in the editor's Inspector dock to allow editing of numeric values. Can be used with ``EditorInspectorPlugin`` to recreate the same behavior.
/// 
/// If the ``Range/step`` value is `1`, the ``EditorSpinSlider`` will display up/down arrows, similar to ``SpinBox``. If the ``Range/step`` value is not `1`, a slider will be displayed instead.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``grabbed``
/// - ``ungrabbed``
/// - ``valueFocusEntered``
/// - ``valueFocusExited``
open class EditorSpinSlider: Range {
    override open class var godotClassName: StringName { "EditorSpinSlider" }
    
    /* Properties */
    
    /// The text that displays to the left of the value.
    final public var label: String {
        get {
            return get_label ()
        }
        
        set {
            set_label (newValue)
        }
        
    }
    
    /// The suffix to display after the value (in a faded color). This should generally be a plural word. You may have to use an abbreviation if the suffix is too long to be displayed.
    final public var suffix: String {
        get {
            return get_suffix ()
        }
        
        set {
            set_suffix (newValue)
        }
        
    }
    
    /// If `true`, the slider can't be interacted with.
    final public var readOnly: Bool {
        get {
            return is_read_only ()
        }
        
        set {
            set_read_only (newValue)
        }
        
    }
    
    /// If `true`, the slider will not draw background.
    final public var flat: Bool {
        get {
            return is_flat ()
        }
        
        set {
            set_flat (newValue)
        }
        
    }
    
    /// If `true`, the slider and up/down arrows are hidden.
    final public var hideSlider: Bool {
        get {
            return is_hiding_slider ()
        }
        
        set {
            set_hide_slider (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_label: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_label")
        return withUnsafePointer (to: &EditorSpinSlider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_label (_ label: String) {
        #if false
        
        let gstr_label = GString (label)
        
        gi.object_method_bind_ptrcall_v (EditorSpinSlider.method_set_label, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_label.content)
        
        #else
        
        let gstr_label = GString (label)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_label.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSpinSlider.method_set_label, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_label: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_label")
        return withUnsafePointer (to: &EditorSpinSlider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_label ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (EditorSpinSlider.method_get_label, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_suffix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_suffix")
        return withUnsafePointer (to: &EditorSpinSlider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_suffix (_ suffix: String) {
        #if false
        
        let gstr_suffix = GString (suffix)
        
        gi.object_method_bind_ptrcall_v (EditorSpinSlider.method_set_suffix, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_suffix.content)
        
        #else
        
        let gstr_suffix = GString (suffix)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_suffix.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSpinSlider.method_set_suffix, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_suffix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_suffix")
        return withUnsafePointer (to: &EditorSpinSlider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_suffix ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (EditorSpinSlider.method_get_suffix, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_read_only: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_read_only")
        return withUnsafePointer (to: &EditorSpinSlider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_read_only (_ readOnly: Bool) {
        #if false
        
        var copy_read_only = readOnly
        
        gi.object_method_bind_ptrcall_v (EditorSpinSlider.method_set_read_only, UnsafeMutableRawPointer (mutating: handle), nil, &copy_read_only)
        
        #else
        
        var copy_read_only = readOnly
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_read_only) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSpinSlider.method_set_read_only, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_read_only: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_read_only")
        return withUnsafePointer (to: &EditorSpinSlider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_read_only ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EditorSpinSlider.method_is_read_only, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_flat: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_flat")
        return withUnsafePointer (to: &EditorSpinSlider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_flat (_ flat: Bool) {
        #if false
        
        var copy_flat = flat
        
        gi.object_method_bind_ptrcall_v (EditorSpinSlider.method_set_flat, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flat)
        
        #else
        
        var copy_flat = flat
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flat) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSpinSlider.method_set_flat, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_flat: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_flat")
        return withUnsafePointer (to: &EditorSpinSlider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_flat ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EditorSpinSlider.method_is_flat, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_hide_slider: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_hide_slider")
        return withUnsafePointer (to: &EditorSpinSlider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_hide_slider (_ hideSlider: Bool) {
        #if false
        
        var copy_hide_slider = hideSlider
        
        gi.object_method_bind_ptrcall_v (EditorSpinSlider.method_set_hide_slider, UnsafeMutableRawPointer (mutating: handle), nil, &copy_hide_slider)
        
        #else
        
        var copy_hide_slider = hideSlider
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_hide_slider) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSpinSlider.method_set_hide_slider, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_hiding_slider: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_hiding_slider")
        return withUnsafePointer (to: &EditorSpinSlider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_hiding_slider ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EditorSpinSlider.method_is_hiding_slider, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when the spinner/slider is grabbed.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.grabbed.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var grabbed: SimpleSignal { SimpleSignal (target: self, signalName: "grabbed") }
    
    /// Emitted when the spinner/slider is ungrabbed.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.ungrabbed.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var ungrabbed: SimpleSignal { SimpleSignal (target: self, signalName: "ungrabbed") }
    
    /// Emitted when the value form gains focus.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.valueFocusEntered.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var valueFocusEntered: SimpleSignal { SimpleSignal (target: self, signalName: "value_focus_entered") }
    
    /// Emitted when the value form loses focus.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.valueFocusExited.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var valueFocusExited: SimpleSignal { SimpleSignal (target: self, signalName: "value_focus_exited") }
    
}

