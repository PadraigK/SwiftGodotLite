// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Contains the results of a ``RegEx`` search.
/// 
/// Contains the results of a single ``RegEx`` match returned by ``RegEx/search(subject:offset:end:)`` and ``RegEx/searchAll(subject:offset:end:)``. It can be used to find the position and range of the match and its capturing groups, and it can extract its substring for you.
open class RegExMatch: RefCounted {
    override open class var godotClassName: StringName { "RegExMatch" }
    
    /* Properties */
    
    /// The source string used with the search pattern to find this matching result.
    final public var subject: String {
        get {
            return get_subject ()
        }
        
    }
    
    /// A dictionary of named groups and its corresponding group number. Only groups that were matched are included. If multiple groups have the same name, that name would refer to the first matching one.
    final public var names: GDictionary {
        get {
            return get_names ()
        }
        
    }
    
    /// An ``GArray`` of the match and its capturing groups.
    final public var strings: PackedStringArray {
        get {
            return get_strings ()
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_subject: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_subject")
        return withUnsafePointer (to: &RegExMatch.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_subject ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (RegExMatch.method_get_subject, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_group_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_group_count")
        return withUnsafePointer (to: &RegExMatch.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of capturing groups.
    public final func getGroupCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (RegExMatch.method_get_group_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_names: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_names")
        return withUnsafePointer (to: &RegExMatch.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_names ()-> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall (RegExMatch.method_get_names, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_strings: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_strings")
        return withUnsafePointer (to: &RegExMatch.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_strings ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (RegExMatch.method_get_strings, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_string: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_string")
        return withUnsafePointer (to: &RegExMatch.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 687115856)!
            }
            
        }
        
    }()
    
    /// Returns the substring of the match from the source string. Capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.
    /// 
    /// Returns an empty string if the group did not match or doesn't exist.
    /// 
    public final func getString (name: Variant)-> String {
        let _result = GString ()
        #if true
        
        
        gi.object_method_bind_ptrcall_v (RegExMatch.method_get_string, UnsafeMutableRawPointer (mutating: handle), &_result.content, &name.content)
        return _result.description
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RegExMatch.method_get_string, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_get_start: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_start")
        return withUnsafePointer (to: &RegExMatch.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 490464691)!
            }
            
        }
        
    }()
    
    /// Returns the starting position of the match within the source string. The starting position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.
    /// 
    /// Returns -1 if the group did not match or doesn't exist.
    /// 
    public final func getStart (name: Variant)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        
        gi.object_method_bind_ptrcall_v (RegExMatch.method_get_start, UnsafeMutableRawPointer (mutating: handle), &_result, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RegExMatch.method_get_start, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_end: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_end")
        return withUnsafePointer (to: &RegExMatch.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 490464691)!
            }
            
        }
        
    }()
    
    /// Returns the end position of the match within the source string. The end position of capturing groups can be retrieved by providing its group number as an integer or its string name (if it's a named group). The default value of 0 refers to the whole pattern.
    /// 
    /// Returns -1 if the group did not match or doesn't exist.
    /// 
    public final func getEnd (name: Variant)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        
        gi.object_method_bind_ptrcall_v (RegExMatch.method_get_end, UnsafeMutableRawPointer (mutating: handle), &_result, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RegExMatch.method_get_end, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

