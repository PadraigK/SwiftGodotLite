// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// 2D sprite node in 3D environment.
/// 
/// A node that displays 2D texture information in a 3D environment. See also ``Sprite3D`` where many other properties are defined.
open class SpriteBase3D: GeometryInstance3D {
    override open class var godotClassName: StringName { "SpriteBase3D" }
    public enum DrawFlags: Int64 {
        /// If set, the texture's transparency and the opacity are used to make those parts of the sprite invisible.
        case transparent = 0 // FLAG_TRANSPARENT
        /// If set, lights in the environment affect the sprite.
        case shaded = 1 // FLAG_SHADED
        /// If set, texture can be seen from the back as well. If not, the texture is invisible when looking at it from behind.
        case doubleSided = 2 // FLAG_DOUBLE_SIDED
        /// Disables the depth test, so this object is drawn on top of all others. However, objects drawn after it in the draw order may cover it.
        case disableDepthTest = 3 // FLAG_DISABLE_DEPTH_TEST
        /// Label is scaled by depth so that it always appears the same size on screen.
        case fixedSize = 4 // FLAG_FIXED_SIZE
        /// Represents the size of the ``SpriteBase3D/DrawFlags`` enum.
        case max = 5 // FLAG_MAX
    }
    
    public enum AlphaCutMode: Int64 {
        /// This mode performs standard alpha blending. It can display translucent areas, but transparency sorting issues may be visible when multiple transparent materials are overlapping.
        case disabled = 0 // ALPHA_CUT_DISABLED
        /// This mode only allows fully transparent or fully opaque pixels. Harsh edges will be visible unless some form of screen-space antialiasing is enabled (see ``ProjectSettings/rendering/antiAliasing/quality/screenSpaceAa``). On the bright side, this mode doesn't suffer from transparency sorting issues when multiple transparent materials are overlapping. This mode is also known as _alpha testing_ or _1-bit transparency_.
        case discard = 1 // ALPHA_CUT_DISCARD
        /// This mode draws fully opaque pixels in the depth prepass. This is slower than .alphaCutDisabled or .alphaCutDiscard, but it allows displaying translucent areas and smooth edges while using proper sorting.
        case opaquePrepass = 2 // ALPHA_CUT_OPAQUE_PREPASS
        /// This mode draws cuts off all values below a spatially-deterministic threshold, the rest will remain opaque.
        case hash = 3 // ALPHA_CUT_HASH
    }
    
    
    /* Properties */
    
    /// If `true`, texture will be centered.
    final public var centered: Bool {
        get {
            return is_centered ()
        }
        
        set {
            set_centered (newValue)
        }
        
    }
    
    /// The texture's drawing offset.
    final public var offset: Vector2 {
        get {
            return get_offset ()
        }
        
        set {
            set_offset (newValue)
        }
        
    }
    
    /// If `true`, texture is flipped horizontally.
    final public var flipH: Bool {
        get {
            return is_flipped_h ()
        }
        
        set {
            set_flip_h (newValue)
        }
        
    }
    
    /// If `true`, texture is flipped vertically.
    final public var flipV: Bool {
        get {
            return is_flipped_v ()
        }
        
        set {
            set_flip_v (newValue)
        }
        
    }
    
    /// A color value used to _multiply_ the texture's colors. Can be used for mood-coloring or to simulate the color of light.
    /// 
    /// > Note: If a ``GeometryInstance3D/materialOverride`` is defined on the ``SpriteBase3D``, the material override must be configured to take vertex colors into account for albedo. Otherwise, the color defined in ``modulate`` will be ignored. For a ``BaseMaterial3D``, ``BaseMaterial3D/vertexColorUseAsAlbedo`` must be `true`. For a ``ShaderMaterial``, `ALBEDO *= COLOR.rgb;` must be inserted in the shader's `fragment()` function.
    /// 
    final public var modulate: Color {
        get {
            return get_modulate ()
        }
        
        set {
            set_modulate (newValue)
        }
        
    }
    
    /// The size of one pixel's width on the sprite to scale it in 3D.
    final public var pixelSize: Double {
        get {
            return get_pixel_size ()
        }
        
        set {
            set_pixel_size (newValue)
        }
        
    }
    
    /// The direction in which the front of the texture faces.
    final public var axis: Vector3.Axis {
        get {
            return get_axis ()
        }
        
        set {
            set_axis (newValue)
        }
        
    }
    
    /// The billboard mode to use for the sprite. See ``BaseMaterial3D.BillboardMode`` for possible values.
    final public var billboard: BaseMaterial3D.BillboardMode {
        get {
            return get_billboard_mode ()
        }
        
        set {
            set_billboard_mode (newValue)
        }
        
    }
    
    /// If `true`, the texture's transparency and the opacity are used to make those parts of the sprite invisible.
    final public var transparent: Bool {
        get {
            return get_draw_flag (SpriteBase3D.DrawFlags (rawValue: 0)!)
        }
        
        set {
            set_draw_flag (SpriteBase3D.DrawFlags (rawValue: 0)!, newValue)
        }
        
    }
    
    /// If `true`, the ``Light3D`` in the ``Environment`` has effects on the sprite.
    final public var shaded: Bool {
        get {
            return get_draw_flag (SpriteBase3D.DrawFlags (rawValue: 1)!)
        }
        
        set {
            set_draw_flag (SpriteBase3D.DrawFlags (rawValue: 1)!, newValue)
        }
        
    }
    
    /// If `true`, texture can be seen from the back as well, if `false`, it is invisible when looking at it from behind.
    final public var doubleSided: Bool {
        get {
            return get_draw_flag (SpriteBase3D.DrawFlags (rawValue: 2)!)
        }
        
        set {
            set_draw_flag (SpriteBase3D.DrawFlags (rawValue: 2)!, newValue)
        }
        
    }
    
    /// If `true`, depth testing is disabled and the object will be drawn in render order.
    final public var noDepthTest: Bool {
        get {
            return get_draw_flag (SpriteBase3D.DrawFlags (rawValue: 3)!)
        }
        
        set {
            set_draw_flag (SpriteBase3D.DrawFlags (rawValue: 3)!, newValue)
        }
        
    }
    
    /// If `true`, the label is rendered at the same size regardless of distance.
    final public var fixedSize: Bool {
        get {
            return get_draw_flag (SpriteBase3D.DrawFlags (rawValue: 4)!)
        }
        
        set {
            set_draw_flag (SpriteBase3D.DrawFlags (rawValue: 4)!, newValue)
        }
        
    }
    
    /// The alpha cutting mode to use for the sprite. See ``SpriteBase3D/AlphaCutMode`` for possible values.
    final public var alphaCut: SpriteBase3D.AlphaCutMode {
        get {
            return get_alpha_cut_mode ()
        }
        
        set {
            set_alpha_cut_mode (newValue)
        }
        
    }
    
    /// Threshold at which the alpha scissor will discard values.
    final public var alphaScissorThreshold: Double {
        get {
            return get_alpha_scissor_threshold ()
        }
        
        set {
            set_alpha_scissor_threshold (newValue)
        }
        
    }
    
    /// The hashing scale for Alpha Hash. Recommended values between `0` and `2`.
    final public var alphaHashScale: Double {
        get {
            return get_alpha_hash_scale ()
        }
        
        set {
            set_alpha_hash_scale (newValue)
        }
        
    }
    
    /// The type of alpha antialiasing to apply. See ``BaseMaterial3D.AlphaAntiAliasing``.
    final public var alphaAntialiasingMode: BaseMaterial3D.AlphaAntiAliasing {
        get {
            return get_alpha_antialiasing ()
        }
        
        set {
            set_alpha_antialiasing (newValue)
        }
        
    }
    
    /// Threshold at which antialiasing will be applied on the alpha channel.
    final public var alphaAntialiasingEdge: Double {
        get {
            return get_alpha_antialiasing_edge ()
        }
        
        set {
            set_alpha_antialiasing_edge (newValue)
        }
        
    }
    
    /// Filter flags for the texture. See ``BaseMaterial3D.TextureFilter`` for options.
    final public var textureFilter: BaseMaterial3D.TextureFilter {
        get {
            return get_texture_filter ()
        }
        
        set {
            set_texture_filter (newValue)
        }
        
    }
    
    /// Sets the render priority for the sprite. Higher priority objects will be sorted in front of lower priority objects.
    /// 
    /// > Note: This only applies if ``alphaCut`` is set to .alphaCutDisabled (default value).
    /// 
    /// > Note: This only applies to sorting of transparent objects. This will not impact how transparent objects are sorted relative to opaque objects. This is because opaque objects are not sorted, while transparent objects are sorted from back to front (subject to priority).
    /// 
    final public var renderPriority: Int32 {
        get {
            return get_render_priority ()
        }
        
        set {
            set_render_priority (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_centered: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_centered")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_centered (_ centered: Bool) {
        #if false
        
        var copy_centered = centered
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_centered, UnsafeMutableRawPointer (mutating: handle), nil, &copy_centered)
        
        #else
        
        var copy_centered = centered
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_centered) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_centered, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_centered: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_centered")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_centered ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SpriteBase3D.method_is_centered, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_offset")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_offset (_ offset: Vector2) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_offset")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_flip_h: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_flip_h")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_flip_h (_ flipH: Bool) {
        #if false
        
        var copy_flip_h = flipH
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_flip_h, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flip_h)
        
        #else
        
        var copy_flip_h = flipH
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flip_h) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_flip_h, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_flipped_h: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_flipped_h")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_flipped_h ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SpriteBase3D.method_is_flipped_h, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_flip_v: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_flip_v")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_flip_v (_ flipV: Bool) {
        #if false
        
        var copy_flip_v = flipV
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_flip_v, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flip_v)
        
        #else
        
        var copy_flip_v = flipV
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flip_v) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_flip_v, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_flipped_v: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_flipped_v")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_flipped_v ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SpriteBase3D.method_is_flipped_v, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_modulate")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_modulate (_ modulate: Color) {
        #if false
        
        var copy_modulate = modulate
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &copy_modulate)
        
        #else
        
        var copy_modulate = modulate
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_modulate) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_modulate, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_modulate")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_modulate ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_render_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_render_priority")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_render_priority (_ priority: Int32) {
        #if false
        
        var copy_priority: Int = Int (priority)
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_render_priority, UnsafeMutableRawPointer (mutating: handle), nil, &copy_priority)
        
        #else
        
        var copy_priority: Int = Int (priority)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_priority) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_render_priority, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_render_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_render_priority")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_render_priority ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_render_priority, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_pixel_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pixel_size")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pixel_size (_ pixelSize: Double) {
        #if false
        
        var copy_pixel_size = pixelSize
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_pixel_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pixel_size)
        
        #else
        
        var copy_pixel_size = pixelSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pixel_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_pixel_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_pixel_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pixel_size")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pixel_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_pixel_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_axis: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_axis")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1144690656)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_axis (_ axis: Vector3.Axis) {
        #if false
        
        var copy_axis = Int64 (axis.rawValue)
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_axis, UnsafeMutableRawPointer (mutating: handle), nil, &copy_axis)
        
        #else
        
        var copy_axis = Int64 (axis.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_axis) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_axis, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_axis: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_axis")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3050976882)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_axis ()-> Vector3.Axis {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_axis, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Vector3.Axis (rawValue: _result)!
    }
    
    fileprivate static var method_set_draw_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_draw_flag")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1135633219)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// If `true`, the specified flag will be enabled. See ``SpriteBase3D.DrawFlags`` for a list of flags.
    fileprivate final func set_draw_flag (_ flag: SpriteBase3D.DrawFlags, _ enabled: Bool) {
        #if false
        
        var copy_flag = Int64 (flag.rawValue)
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_draw_flag, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flag, &copy_enabled)
        
        #else
        
        var copy_flag = Int64 (flag.rawValue)
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flag) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SpriteBase3D.method_set_draw_flag, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_draw_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_draw_flag")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1733036628)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the value of the specified flag.
    fileprivate final func get_draw_flag (_ flag: SpriteBase3D.DrawFlags)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_flag = Int64 (flag.rawValue)
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_get_draw_flag, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_flag)
        return _result
        #else
        
        var copy_flag = Int64 (flag.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_flag) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_get_draw_flag, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_alpha_cut_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_cut_mode")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 227561226)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_cut_mode (_ mode: SpriteBase3D.AlphaCutMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_alpha_cut_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_alpha_cut_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_cut_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_cut_mode")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 336003791)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_cut_mode ()-> SpriteBase3D.AlphaCutMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_alpha_cut_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return SpriteBase3D.AlphaCutMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_alpha_scissor_threshold: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_scissor_threshold")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_scissor_threshold (_ threshold: Double) {
        #if false
        
        var copy_threshold = threshold
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_alpha_scissor_threshold, UnsafeMutableRawPointer (mutating: handle), nil, &copy_threshold)
        
        #else
        
        var copy_threshold = threshold
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_threshold) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_alpha_scissor_threshold, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_scissor_threshold: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_scissor_threshold")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_scissor_threshold ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_alpha_scissor_threshold, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_alpha_hash_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_hash_scale")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_hash_scale (_ threshold: Double) {
        #if false
        
        var copy_threshold = threshold
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_alpha_hash_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_threshold)
        
        #else
        
        var copy_threshold = threshold
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_threshold) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_alpha_hash_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_hash_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_hash_scale")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_hash_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_alpha_hash_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_alpha_antialiasing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_antialiasing")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3212649852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_antialiasing (_ alphaAa: BaseMaterial3D.AlphaAntiAliasing) {
        #if false
        
        var copy_alpha_aa = Int64 (alphaAa.rawValue)
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_alpha_antialiasing, UnsafeMutableRawPointer (mutating: handle), nil, &copy_alpha_aa)
        
        #else
        
        var copy_alpha_aa = Int64 (alphaAa.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_alpha_aa) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_alpha_antialiasing, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_antialiasing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_antialiasing")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2889939400)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_antialiasing ()-> BaseMaterial3D.AlphaAntiAliasing {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_alpha_antialiasing, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.AlphaAntiAliasing (rawValue: _result)!
    }
    
    fileprivate static var method_set_alpha_antialiasing_edge: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_antialiasing_edge")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_antialiasing_edge (_ edge: Double) {
        #if false
        
        var copy_edge = edge
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_alpha_antialiasing_edge, UnsafeMutableRawPointer (mutating: handle), nil, &copy_edge)
        
        #else
        
        var copy_edge = edge
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_edge) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_alpha_antialiasing_edge, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_antialiasing_edge: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_antialiasing_edge")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_antialiasing_edge ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_alpha_antialiasing_edge, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_billboard_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_billboard_mode")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4202036497)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_billboard_mode (_ mode: BaseMaterial3D.BillboardMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_billboard_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_billboard_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_billboard_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_billboard_mode")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1283840139)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_billboard_mode ()-> BaseMaterial3D.BillboardMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_billboard_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.BillboardMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_texture_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_filter")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 22904437)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_filter (_ mode: BaseMaterial3D.TextureFilter) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (SpriteBase3D.method_set_texture_filter, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteBase3D.method_set_texture_filter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_filter")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3289213076)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_filter ()-> BaseMaterial3D.TextureFilter {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_texture_filter, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.TextureFilter (rawValue: _result)!
    }
    
    fileprivate static var method_get_item_rect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_item_rect")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1639390495)!
            }
            
        }
        
    }()
    
    /// Returns the rectangle representing this sprite.
    public final func getItemRect ()-> Rect2 {
        var _result: Rect2 = Rect2 ()
        gi.object_method_bind_ptrcall (SpriteBase3D.method_get_item_rect, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_generate_triangle_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("generate_triangle_mesh")
        return withUnsafePointer (to: &SpriteBase3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3476533166)!
            }
            
        }
        
    }()
    
    /// Returns a ``TriangleMesh`` with the sprite's vertices following its current configuration (such as its ``axis`` and ``pixelSize``).
    public final func generateTriangleMesh ()-> TriangleMesh? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (SpriteBase3D.method_generate_triangle_mesh, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

