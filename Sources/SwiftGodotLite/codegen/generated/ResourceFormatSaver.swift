// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Saves a specific resource type to a file.
/// 
/// The engine can save resources when you do it from the editor, or when you use the ``ResourceSaver`` singleton. This is accomplished thanks to multiple ``ResourceFormatSaver``s, each handling its own format and called automatically by the engine.
/// 
/// By default, Godot saves resources as `.tres` (text-based), `.res` (binary) or another built-in format, but you can choose to create your own format by extending this class. Be sure to respect the documented return types and values. You should give it a global class name with `class_name` for it to be registered. Like built-in ResourceFormatSavers, it will be called automatically when saving resources of its recognized type(s). You may also implement a ``ResourceFormatLoader``.
/// 
open class ResourceFormatSaver: RefCounted {
    override open class var godotClassName: StringName { "ResourceFormatSaver" }
    /* Methods */
    /// Saves the given resource object to a file at the target `path`. `flags` is a bitmask composed with ``ResourceSaver.SaverFlags`` constants.
    /// 
    /// Returns ``GodotError/ok`` on success, or an ``GodotError`` constant in case of failure.
    /// 
    @_documentation(visibility: public)
    open func _save (resource: Resource?, path: String, flags: UInt32)-> GodotError {
        return .ok
    }
    
    /// Sets a new UID for the resource at the given `path`. Returns ``GodotError/ok`` on success, or an ``GodotError`` constant in case of failure.
    @_documentation(visibility: public)
    open func _setUid (path: String, uid: Int)-> GodotError {
        return .ok
    }
    
    /// Returns whether the given resource object can be saved by this saver.
    @_documentation(visibility: public)
    open func _recognize (resource: Resource?)-> Bool {
        return false
    }
    
    /// Returns the list of extensions available for saving the resource object, provided it is recognized (see ``_recognize(resource:)``).
    @_documentation(visibility: public)
    open func _getRecognizedExtensions (resource: Resource?)-> PackedStringArray {
        return PackedStringArray ()
    }
    
    /// Returns `true` if this saver handles a given save path and `false` otherwise.
    /// 
    /// If this method is not implemented, the default behavior returns whether the path's extension is within the ones provided by ``_getRecognizedExtensions(resource:)``.
    /// 
    @_documentation(visibility: public)
    open func _recognizePath (resource: Resource?, path: String)-> Bool {
        return false
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_get_recognized_extensions":
                return _ResourceFormatSaver_proxy_get_recognized_extensions
            case "_recognize":
                return _ResourceFormatSaver_proxy_recognize
            case "_recognize_path":
                return _ResourceFormatSaver_proxy_recognize_path
            case "_save":
                return _ResourceFormatSaver_proxy_save
            case "_set_uid":
                return _ResourceFormatSaver_proxy_set_uid
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _ResourceFormatSaver_proxy_get_recognized_extensions (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ResourceFormatSaver>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._getRecognizedExtensions (resource: lookupLiveObject (handleAddress: resolved_0) as? Resource ?? Resource (nativeHandle: resolved_0))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

func _ResourceFormatSaver_proxy_recognize (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ResourceFormatSaver>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._recognize (resource: lookupLiveObject (handleAddress: resolved_0) as? Resource ?? Resource (nativeHandle: resolved_0))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ResourceFormatSaver_proxy_recognize_path (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ResourceFormatSaver>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._recognizePath (resource: lookupLiveObject (handleAddress: resolved_0) as? Resource ?? Resource (nativeHandle: resolved_0), path: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ResourceFormatSaver_proxy_save (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ResourceFormatSaver>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._save (resource: lookupLiveObject (handleAddress: resolved_0) as? Resource ?? Resource (nativeHandle: resolved_0), path: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", flags: args [2]!.assumingMemoryBound (to: UInt32.self).pointee)
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _ResourceFormatSaver_proxy_set_uid (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ResourceFormatSaver>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._setUid (path: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", uid: args [1]!.assumingMemoryBound (to: Int.self).pointee)
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

