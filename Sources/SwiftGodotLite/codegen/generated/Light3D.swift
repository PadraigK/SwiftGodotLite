// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Provides a base class for different kinds of light nodes.
/// 
/// Light3D is the _abstract_ base class for light nodes. As it can't be instantiated, it shouldn't be used directly. Other types of light nodes inherit from it. Light3D contains the common variables and parameters used for lighting.
open class Light3D: VisualInstance3D {
    override open class var godotClassName: StringName { "Light3D" }
    public enum Param: Int64 {
        /// Constant for accessing ``lightEnergy``.
        case energy = 0 // PARAM_ENERGY
        /// Constant for accessing ``lightIndirectEnergy``.
        case indirectEnergy = 1 // PARAM_INDIRECT_ENERGY
        /// Constant for accessing ``lightVolumetricFogEnergy``.
        case volumetricFogEnergy = 2 // PARAM_VOLUMETRIC_FOG_ENERGY
        /// Constant for accessing ``lightSpecular``.
        case specular = 3 // PARAM_SPECULAR
        /// Constant for accessing ``OmniLight3D/omniRange`` or ``SpotLight3D/spotRange``.
        case range = 4 // PARAM_RANGE
        /// Constant for accessing ``lightSize``.
        case size = 5 // PARAM_SIZE
        /// Constant for accessing ``OmniLight3D/omniAttenuation`` or ``SpotLight3D/spotAttenuation``.
        case attenuation = 6 // PARAM_ATTENUATION
        /// Constant for accessing ``SpotLight3D/spotAngle``.
        case spotAngle = 7 // PARAM_SPOT_ANGLE
        /// Constant for accessing ``SpotLight3D/spotAngleAttenuation``.
        case spotAttenuation = 8 // PARAM_SPOT_ATTENUATION
        /// Constant for accessing ``DirectionalLight3D/directionalShadowMaxDistance``.
        case shadowMaxDistance = 9 // PARAM_SHADOW_MAX_DISTANCE
        /// Constant for accessing ``DirectionalLight3D/directionalShadowSplit1``.
        case shadowSplit1Offset = 10 // PARAM_SHADOW_SPLIT_1_OFFSET
        /// Constant for accessing ``DirectionalLight3D/directionalShadowSplit2``.
        case shadowSplit2Offset = 11 // PARAM_SHADOW_SPLIT_2_OFFSET
        /// Constant for accessing ``DirectionalLight3D/directionalShadowSplit3``.
        case shadowSplit3Offset = 12 // PARAM_SHADOW_SPLIT_3_OFFSET
        /// Constant for accessing ``DirectionalLight3D/directionalShadowFadeStart``.
        case shadowFadeStart = 13 // PARAM_SHADOW_FADE_START
        /// Constant for accessing ``shadowNormalBias``.
        case shadowNormalBias = 14 // PARAM_SHADOW_NORMAL_BIAS
        /// Constant for accessing ``shadowBias``.
        case shadowBias = 15 // PARAM_SHADOW_BIAS
        /// Constant for accessing ``DirectionalLight3D/directionalShadowPancakeSize``.
        case shadowPancakeSize = 16 // PARAM_SHADOW_PANCAKE_SIZE
        /// Constant for accessing ``shadowOpacity``.
        case shadowOpacity = 17 // PARAM_SHADOW_OPACITY
        /// Constant for accessing ``shadowBlur``.
        case shadowBlur = 18 // PARAM_SHADOW_BLUR
        /// Constant for accessing ``shadowTransmittanceBias``.
        case transmittanceBias = 19 // PARAM_TRANSMITTANCE_BIAS
        /// Constant for accessing ``lightIntensityLumens`` and ``lightIntensityLux``. Only used when ``ProjectSettings/rendering/lightsAndShadows/usePhysicalLightUnits`` is `true`.
        case intensity = 20 // PARAM_INTENSITY
        /// Represents the size of the ``Light3D/Param`` enum.
        case max = 21 // PARAM_MAX
    }
    
    public enum BakeMode: Int64 {
        /// Light is ignored when baking. This is the fastest mode, but the light will be taken into account when baking global illumination. This mode should generally be used for dynamic lights that change quickly, as the effect of global illumination is less noticeable on those lights.
        /// 
        /// > Note: Hiding a light does _not_ affect baking ``LightmapGI``. Hiding a light will still affect baking ``VoxelGI`` and SDFGI (see [member Environment.sdfgi_enabled).
        /// 
        case disabled = 0 // BAKE_DISABLED
        /// Light is taken into account in static baking (``VoxelGI``, ``LightmapGI``, SDFGI (``Environment/sdfgiEnabled``)). The light can be moved around or modified, but its global illumination will not update in real-time. This is suitable for subtle changes (such as flickering torches), but generally not large changes such as toggling a light on and off.
        /// 
        /// > Note: The light is not baked in ``LightmapGI`` if ``editorOnly`` is `true`.
        /// 
        case `static` = 1 // BAKE_STATIC
        /// Light is taken into account in dynamic baking (``VoxelGI`` and SDFGI (``Environment/sdfgiEnabled``) only). The light can be moved around or modified with global illumination updating in real-time. The light's global illumination appearance will be slightly different compared to .bakeStatic. This has a greater performance cost compared to .bakeStatic. When using SDFGI, the update speed of dynamic lights is affected by ``ProjectSettings/rendering/globalIllumination/sdfgi/framesToUpdateLights``.
        case dynamic = 2 // BAKE_DYNAMIC
    }
    
    
    /* Properties */
    
    /// Used by positional lights (``OmniLight3D`` and ``SpotLight3D``) when ``ProjectSettings/rendering/lightsAndShadows/usePhysicalLightUnits`` is `true`. Sets the intensity of the light source measured in Lumens. Lumens are a measure of luminous flux, which is the total amount of visible light emitted by a light source per unit of time.
    /// 
    /// For ``SpotLight3D``s, we assume that the area outside the visible cone is surrounded by a perfect light absorbing material. Accordingly, the apparent brightness of the cone area does not change as the cone increases and decreases in size.
    /// 
    /// A typical household lightbulb can range from around 600 lumens to 1,200 lumens, a candle is about 13 lumens, while a streetlight can be approximately 60,000 lumens.
    /// 
    final public var lightIntensityLumens: Double {
        get {
            return get_param (Light3D.Param (rawValue: 20)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 20)!, newValue)
        }
        
    }
    
    /// Used by ``DirectionalLight3D``s when ``ProjectSettings/rendering/lightsAndShadows/usePhysicalLightUnits`` is `true`. Sets the intensity of the light source measured in Lux. Lux is a measure of luminous flux per unit area, it is equal to one lumen per square meter. Lux is the measure of how much light hits a surface at a given time.
    /// 
    /// On a clear sunny day a surface in direct sunlight may be approximately 100,000 lux, a typical room in a home may be approximately 50 lux, while the moonlit ground may be approximately 0.1 lux.
    /// 
    final public var lightIntensityLux: Double {
        get {
            return get_param (Light3D.Param (rawValue: 20)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 20)!, newValue)
        }
        
    }
    
    /// Sets the color temperature of the light source, measured in Kelvin. This is used to calculate a correlated color temperature which tints the ``lightColor``.
    /// 
    /// The sun on a cloudy day is approximately 6500 Kelvin, on a clear day it is between 5500 to 6000 Kelvin, and on a clear day at sunrise or sunset it ranges to around 1850 Kelvin.
    /// 
    final public var lightTemperature: Double {
        get {
            return get_temperature ()
        }
        
        set {
            set_temperature (newValue)
        }
        
    }
    
    /// The light's color. An _overbright_ color can be used to achieve a result equivalent to increasing the light's ``lightEnergy``.
    final public var lightColor: Color {
        get {
            return get_color ()
        }
        
        set {
            set_color (newValue)
        }
        
    }
    
    /// The light's strength multiplier (this is not a physical unit). For ``OmniLight3D`` and ``SpotLight3D``, changing this value will only change the light color's intensity, not the light's radius.
    final public var lightEnergy: Double {
        get {
            return get_param (Light3D.Param (rawValue: 0)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 0)!, newValue)
        }
        
    }
    
    /// Secondary multiplier used with indirect light (light bounces). Used with ``VoxelGI`` and SDFGI (see ``Environment/sdfgiEnabled``).
    /// 
    /// > Note: This property is ignored if ``lightEnergy`` is equal to `0.0`, as the light won't be present at all in the GI shader.
    /// 
    final public var lightIndirectEnergy: Double {
        get {
            return get_param (Light3D.Param (rawValue: 1)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Secondary multiplier multiplied with ``lightEnergy`` then used with the ``Environment``'s volumetric fog (if enabled). If set to `0.0`, computing volumetric fog will be skipped for this light, which can improve performance for large amounts of lights when volumetric fog is enabled.
    /// 
    /// > Note: To prevent short-lived dynamic light effects from poorly interacting with volumetric fog, lights used in those effects should have ``lightVolumetricFogEnergy`` set to `0.0` unless ``Environment/volumetricFogTemporalReprojectionEnabled`` is disabled (or unless the reprojection amount is significantly lowered).
    /// 
    final public var lightVolumetricFogEnergy: Double {
        get {
            return get_param (Light3D.Param (rawValue: 2)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 2)!, newValue)
        }
        
    }
    
    /// ``Texture2D`` projected by light. ``shadowEnabled`` must be on for the projector to work. Light projectors make the light appear as if it is shining through a colored but transparent object, almost like light shining through stained-glass.
    /// 
    /// > Note: Unlike ``BaseMaterial3D`` whose filter mode can be adjusted on a per-material basis, the filter mode for light projector textures is set globally with ``ProjectSettings/rendering/textures/lightProjectors/filter``.
    /// 
    /// > Note: Light projector textures are only supported in the Forward+ and Mobile rendering methods, not Compatibility.
    /// 
    final public var lightProjector: Texture2D? {
        get {
            return get_projector ()
        }
        
        set {
            set_projector (newValue)
        }
        
    }
    
    /// The size of the light in Godot units. Only available for ``OmniLight3D``s and ``SpotLight3D``s. Increasing this value will make the light fade out slower and shadows appear blurrier (also called percentage-closer soft shadows, or PCSS). This can be used to simulate area lights to an extent. Increasing this value above `0.0` for lights with shadows enabled will have a noticeable performance cost due to PCSS.
    /// 
    /// > Note: ``lightSize`` is not affected by ``Node3D/scale`` (the light's scale or its parent's scale).
    /// 
    /// > Note: PCSS for positional lights is only supported in the Forward+ and Mobile rendering methods, not Compatibility.
    /// 
    final public var lightSize: Double {
        get {
            return get_param (Light3D.Param (rawValue: 5)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 5)!, newValue)
        }
        
    }
    
    /// The light's angular size in degrees. Increasing this will make shadows softer at greater distances (also called percentage-closer soft shadows, or PCSS). Only available for ``DirectionalLight3D``s. For reference, the Sun from the Earth is approximately `0.5`. Increasing this value above `0.0` for lights with shadows enabled will have a noticeable performance cost due to PCSS.
    /// 
    /// > Note: ``lightAngularDistance`` is not affected by ``Node3D/scale`` (the light's scale or its parent's scale).
    /// 
    /// > Note: PCSS for directional lights is only supported in the Forward+ rendering method, not Mobile or Compatibility.
    /// 
    final public var lightAngularDistance: Double {
        get {
            return get_param (Light3D.Param (rawValue: 5)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 5)!, newValue)
        }
        
    }
    
    /// If `true`, the light's effect is reversed, darkening areas and casting bright shadows.
    final public var lightNegative: Bool {
        get {
            return is_negative ()
        }
        
        set {
            set_negative (newValue)
        }
        
    }
    
    /// The intensity of the specular blob in objects affected by the light. At `0`, the light becomes a pure diffuse light. When not baking emission, this can be used to avoid unrealistic reflections when placing lights above an emissive surface.
    final public var lightSpecular: Double {
        get {
            return get_param (Light3D.Param (rawValue: 3)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 3)!, newValue)
        }
        
    }
    
    /// The light's bake mode. This will affect the global illumination techniques that have an effect on the light's rendering. See ``Light3D/BakeMode``.
    /// 
    /// > Note: Meshes' global illumination mode will also affect the global illumination rendering. See ``GeometryInstance3D/giMode``.
    /// 
    final public var lightBakeMode: Light3D.BakeMode {
        get {
            return get_bake_mode ()
        }
        
        set {
            set_bake_mode (newValue)
        }
        
    }
    
    /// The light will affect objects in the selected layers.
    final public var lightCullMask: UInt32 {
        get {
            return get_cull_mask ()
        }
        
        set {
            set_cull_mask (newValue)
        }
        
    }
    
    /// If `true`, the light will cast real-time shadows. This has a significant performance cost. Only enable shadow rendering when it makes a noticeable difference in the scene's appearance, and consider using ``distanceFadeEnabled`` to hide the light when far away from the ``Camera3D``.
    final public var shadowEnabled: Bool {
        get {
            return has_shadow ()
        }
        
        set {
            set_shadow (newValue)
        }
        
    }
    
    /// Used to adjust shadow appearance. Too small a value results in self-shadowing ("shadow acne"), while too large a value causes shadows to separate from casters ("peter-panning"). Adjust as needed.
    final public var shadowBias: Double {
        get {
            return get_param (Light3D.Param (rawValue: 15)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 15)!, newValue)
        }
        
    }
    
    /// Offsets the lookup into the shadow map by the object's normal. This can be used to reduce self-shadowing artifacts without using ``shadowBias``. In practice, this value should be tweaked along with ``shadowBias`` to reduce artifacts as much as possible.
    final public var shadowNormalBias: Double {
        get {
            return get_param (Light3D.Param (rawValue: 14)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 14)!, newValue)
        }
        
    }
    
    /// If `true`, reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double-sided shadows with ``GeometryInstance3D/ShadowCastingSetting/doubleSided``.
    final public var shadowReverseCullFace: Bool {
        get {
            return get_shadow_reverse_cull_face ()
        }
        
        set {
            set_shadow_reverse_cull_face (newValue)
        }
        
    }
    
    final public var shadowTransmittanceBias: Double {
        get {
            return get_param (Light3D.Param (rawValue: 19)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 19)!, newValue)
        }
        
    }
    
    /// The opacity to use when rendering the light's shadow map. Values lower than `1.0` make the light appear through shadows. This can be used to fake global illumination at a low performance cost.
    final public var shadowOpacity: Double {
        get {
            return get_param (Light3D.Param (rawValue: 17)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 17)!, newValue)
        }
        
    }
    
    /// Blurs the edges of the shadow. Can be used to hide pixel artifacts in low-resolution shadow maps. A high value can impact performance, make shadows appear grainy and can cause other unwanted artifacts. Try to keep as near default as possible.
    final public var shadowBlur: Double {
        get {
            return get_param (Light3D.Param (rawValue: 18)!)
        }
        
        set {
            set_param (Light3D.Param (rawValue: 18)!, newValue)
        }
        
    }
    
    /// If `true`, the light will smoothly fade away when far from the active ``Camera3D`` starting at ``distanceFadeBegin``. This acts as a form of level of detail (LOD). The light will fade out over ``distanceFadeBegin`` + ``distanceFadeLength``, after which it will be culled and not sent to the shader at all. Use this to reduce the number of active lights in a scene and thus improve performance.
    /// 
    /// > Note: Only effective for ``OmniLight3D`` and ``SpotLight3D``.
    /// 
    final public var distanceFadeEnabled: Bool {
        get {
            return is_distance_fade_enabled ()
        }
        
        set {
            set_enable_distance_fade (newValue)
        }
        
    }
    
    /// The distance from the camera at which the light begins to fade away (in 3D units).
    /// 
    /// > Note: Only effective for ``OmniLight3D`` and ``SpotLight3D``.
    /// 
    final public var distanceFadeBegin: Double {
        get {
            return get_distance_fade_begin ()
        }
        
        set {
            set_distance_fade_begin (newValue)
        }
        
    }
    
    /// The distance from the camera at which the light's shadow cuts off (in 3D units). Set this to a value lower than ``distanceFadeBegin`` + ``distanceFadeLength`` to further improve performance, as shadow rendering is often more expensive than light rendering itself.
    /// 
    /// > Note: Only effective for ``OmniLight3D`` and ``SpotLight3D``, and only when ``shadowEnabled`` is `true`.
    /// 
    final public var distanceFadeShadow: Double {
        get {
            return get_distance_fade_shadow ()
        }
        
        set {
            set_distance_fade_shadow (newValue)
        }
        
    }
    
    /// Distance over which the light and its shadow fades. The light's energy and shadow's opacity is progressively reduced over this distance and is completely invisible at the end.
    /// 
    /// > Note: Only effective for ``OmniLight3D`` and ``SpotLight3D``.
    /// 
    final public var distanceFadeLength: Double {
        get {
            return get_distance_fade_length ()
        }
        
        set {
            set_distance_fade_length (newValue)
        }
        
    }
    
    /// If `true`, the light only appears in the editor and will not be visible at runtime. If `true`, the light will never be baked in ``LightmapGI`` regardless of its ``lightBakeMode``.
    final public var editorOnly: Bool {
        get {
            return is_editor_only ()
        }
        
        set {
            set_editor_only (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_editor_only: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_editor_only")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_editor_only (_ editorOnly: Bool) {
        #if false
        
        var copy_editor_only = editorOnly
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_editor_only, UnsafeMutableRawPointer (mutating: handle), nil, &copy_editor_only)
        
        #else
        
        var copy_editor_only = editorOnly
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_editor_only) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_editor_only, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_editor_only: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_editor_only")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_editor_only ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Light3D.method_is_editor_only, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_param")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1722734213)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the value of the specified ``Light3D.Param`` parameter.
    internal final func set_param (_ param: Light3D.Param, _ value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_param, UnsafeMutableRawPointer (mutating: handle), nil, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Light3D.method_set_param, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_param")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1844084987)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the value of the specified ``Light3D.Param`` parameter.
    internal final func get_param (_ param: Light3D.Param)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (Light3D.method_get_param, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_get_param, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_shadow: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shadow")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shadow (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_shadow, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_shadow, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_has_shadow: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_shadow")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func has_shadow ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Light3D.method_has_shadow, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_negative: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_negative")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_negative (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_negative, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_negative, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_negative: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_negative")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_negative ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Light3D.method_is_negative, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_cull_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cull_mask")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cull_mask (_ cullMask: UInt32) {
        #if false
        
        var copy_cull_mask: Int = Int (cullMask)
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_cull_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cull_mask)
        
        #else
        
        var copy_cull_mask: Int = Int (cullMask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cull_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_cull_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_cull_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cull_mask")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_cull_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (Light3D.method_get_cull_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_enable_distance_fade: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_distance_fade")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_distance_fade (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_enable_distance_fade, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_enable_distance_fade, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_distance_fade_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_distance_fade_enabled")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_distance_fade_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Light3D.method_is_distance_fade_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_distance_fade_begin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_distance_fade_begin")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_distance_fade_begin (_ distance: Double) {
        #if false
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_distance_fade_begin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_distance_fade_begin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_distance_fade_begin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_distance_fade_begin")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_distance_fade_begin ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Light3D.method_get_distance_fade_begin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_distance_fade_shadow: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_distance_fade_shadow")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_distance_fade_shadow (_ distance: Double) {
        #if false
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_distance_fade_shadow, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_distance_fade_shadow, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_distance_fade_shadow: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_distance_fade_shadow")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_distance_fade_shadow ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Light3D.method_get_distance_fade_shadow, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_distance_fade_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_distance_fade_length")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_distance_fade_length (_ distance: Double) {
        #if false
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_distance_fade_length, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_distance_fade_length, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_distance_fade_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_distance_fade_length")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_distance_fade_length ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Light3D.method_get_distance_fade_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_color")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_color (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_color")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Light3D.method_get_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shadow_reverse_cull_face: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shadow_reverse_cull_face")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shadow_reverse_cull_face (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_shadow_reverse_cull_face, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_shadow_reverse_cull_face, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shadow_reverse_cull_face: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shadow_reverse_cull_face")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shadow_reverse_cull_face ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Light3D.method_get_shadow_reverse_cull_face, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bake_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bake_mode")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 37739303)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bake_mode (_ bakeMode: Light3D.BakeMode) {
        #if false
        
        var copy_bake_mode = Int64 (bakeMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_bake_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bake_mode)
        
        #else
        
        var copy_bake_mode = Int64 (bakeMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bake_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_bake_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bake_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bake_mode")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 371737608)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bake_mode ()-> Light3D.BakeMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Light3D.method_get_bake_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Light3D.BakeMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_projector: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_projector")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_projector (_ projector: Texture2D?) {
        #if false
        
        var copy_projector_handle = projector?.handle
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_projector, UnsafeMutableRawPointer (mutating: handle), nil, &copy_projector_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: projector?.handle) { p0 in
        _args.append (projector == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_projector, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_projector: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_projector")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_projector ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Light3D.method_get_projector, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_temperature: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_temperature")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_temperature (_ temperature: Double) {
        #if false
        
        var copy_temperature = temperature
        
        gi.object_method_bind_ptrcall_v (Light3D.method_set_temperature, UnsafeMutableRawPointer (mutating: handle), nil, &copy_temperature)
        
        #else
        
        var copy_temperature = temperature
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_temperature) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Light3D.method_set_temperature, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_temperature: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_temperature")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_temperature ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Light3D.method_get_temperature, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_correlated_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_correlated_color")
        return withUnsafePointer (to: &Light3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    /// Returns the ``Color`` of an idealized blackbody at the given ``lightTemperature``. This value is calculated internally based on the ``lightTemperature``. This ``Color`` is multiplied by ``lightColor`` before being sent to the ``RenderingServer``.
    public final func getCorrelatedColor ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Light3D.method_get_correlated_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

