// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// GLTF node class.
/// 
/// Represents a GLTF node. GLTF nodes may have names, transforms, children (other GLTF nodes), and more specialized properties (represented by their own classes).
/// 
/// GLTF nodes generally exist inside of ``GLTFState`` which represents all data of a GLTF file. Most of GLTFNode's properties are indices of other data in the GLTF file. You can extend a GLTF node with additional properties by using ``getAdditionalData(extensionName:)`` and ``setAdditionalData(extensionName:additionalData:)``.
/// 
open class GLTFNode: Resource {
    override open class var godotClassName: StringName { "GLTFNode" }
    
    /* Properties */
    
    /// The index of the parent node in the ``GLTFState``. If -1, this node is a root node.
    final public var parent: Int32 {
        get {
            return get_parent ()
        }
        
        set {
            set_parent (newValue)
        }
        
    }
    
    /// How deep into the node hierarchy this node is. A root node will have a height of 0, its children will have a height of 1, and so on. If -1, the height has not been calculated.
    final public var height: Int32 {
        get {
            return get_height ()
        }
        
        set {
            set_height (newValue)
        }
        
    }
    
    /// The transform of the GLTF node relative to its parent. This property is usually unused since the position, rotation, and scale properties are preferred.
    final public var xform: Transform3D {
        get {
            return get_xform ()
        }
        
        set {
            set_xform (newValue)
        }
        
    }
    
    /// If this GLTF node is a mesh, the index of the ``GLTFMesh`` in the ``GLTFState`` that describes the mesh's properties. If -1, this node is not a mesh.
    final public var mesh: Int32 {
        get {
            return get_mesh ()
        }
        
        set {
            set_mesh (newValue)
        }
        
    }
    
    /// If this GLTF node is a camera, the index of the ``GLTFCamera`` in the ``GLTFState`` that describes the camera's properties. If -1, this node is not a camera.
    final public var camera: Int32 {
        get {
            return get_camera ()
        }
        
        set {
            set_camera (newValue)
        }
        
    }
    
    /// If this GLTF node has a skin, the index of the ``GLTFSkin`` in the ``GLTFState`` that describes the skin's properties. If -1, this node does not have a skin.
    final public var skin: Int32 {
        get {
            return get_skin ()
        }
        
        set {
            set_skin (newValue)
        }
        
    }
    
    /// If this GLTF node has a skeleton, the index of the ``GLTFSkeleton`` in the ``GLTFState`` that describes the skeleton's properties. If -1, this node does not have a skeleton.
    final public var skeleton: Int32 {
        get {
            return get_skeleton ()
        }
        
        set {
            set_skeleton (newValue)
        }
        
    }
    
    /// The position of the GLTF node relative to its parent.
    final public var position: Vector3 {
        get {
            return get_position ()
        }
        
        set {
            set_position (newValue)
        }
        
    }
    
    /// The rotation of the GLTF node relative to its parent.
    final public var rotation: Quaternion {
        get {
            return get_rotation ()
        }
        
        set {
            set_rotation (newValue)
        }
        
    }
    
    /// The scale of the GLTF node relative to its parent.
    final public var scale: Vector3 {
        get {
            return get_scale ()
        }
        
        set {
            set_scale (newValue)
        }
        
    }
    
    /// The indices of the children nodes in the ``GLTFState``. If this GLTF node has no children, this will be an empty array.
    final public var children: PackedInt32Array {
        get {
            return get_children ()
        }
        
        set {
            set_children (newValue)
        }
        
    }
    
    /// If this GLTF node is a light, the index of the ``GLTFLight`` in the ``GLTFState`` that describes the light's properties. If -1, this node is not a light.
    final public var light: Int32 {
        get {
            return get_light ()
        }
        
        set {
            set_light (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_parent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_parent")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_parent ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFNode.method_get_parent, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_parent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_parent")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_parent (_ parent: Int32) {
        #if true
        
        var copy_parent: Int = Int (parent)
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_parent, UnsafeMutableRawPointer (mutating: handle), nil, &copy_parent)
        
        #else
        
        var copy_parent: Int = Int (parent)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_parent) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_parent, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_height")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_height ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFNode.method_get_height, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_height")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_height (_ height: Int32) {
        #if true
        
        var copy_height: Int = Int (height)
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_height)
        
        #else
        
        var copy_height: Int = Int (height)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_height) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_xform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_xform")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4183770049)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_xform ()-> Transform3D {
        var _result: Transform3D = Transform3D ()
        gi.object_method_bind_ptrcall (GLTFNode.method_get_xform, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_xform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_xform")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2952846383)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_xform (_ xform: Transform3D) {
        #if true
        
        var copy_xform = xform
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_xform, UnsafeMutableRawPointer (mutating: handle), nil, &copy_xform)
        
        #else
        
        var copy_xform = xform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_xform) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_xform, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mesh")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mesh ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFNode.method_get_mesh, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mesh")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mesh (_ mesh: Int32) {
        #if true
        
        var copy_mesh: Int = Int (mesh)
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_mesh, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mesh)
        
        #else
        
        var copy_mesh: Int = Int (mesh)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mesh) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_mesh, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_camera: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_camera")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_camera ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFNode.method_get_camera, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_camera: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_camera")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_camera (_ camera: Int32) {
        #if true
        
        var copy_camera: Int = Int (camera)
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_camera, UnsafeMutableRawPointer (mutating: handle), nil, &copy_camera)
        
        #else
        
        var copy_camera: Int = Int (camera)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_camera) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_camera, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_skin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_skin")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_skin ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFNode.method_get_skin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_skin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_skin")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_skin (_ skin: Int32) {
        #if true
        
        var copy_skin: Int = Int (skin)
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_skin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_skin)
        
        #else
        
        var copy_skin: Int = Int (skin)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_skin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_skin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_skeleton: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_skeleton")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_skeleton ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFNode.method_get_skeleton, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_skeleton: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_skeleton")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_skeleton (_ skeleton: Int32) {
        #if true
        
        var copy_skeleton: Int = Int (skeleton)
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_skeleton, UnsafeMutableRawPointer (mutating: handle), nil, &copy_skeleton)
        
        #else
        
        var copy_skeleton: Int = Int (skeleton)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_skeleton) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_skeleton, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_position")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3783033775)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_position ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (GLTFNode.method_get_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_position")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_position (_ position: Vector3) {
        #if true
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rotation")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2916281908)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_rotation ()-> Quaternion {
        var _result: Quaternion = Quaternion ()
        gi.object_method_bind_ptrcall (GLTFNode.method_get_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_rotation")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1727505552)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rotation (_ rotation: Quaternion) {
        #if true
        
        var copy_rotation = rotation
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_rotation)
        
        #else
        
        var copy_rotation = rotation
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_rotation) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_rotation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_scale")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3783033775)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_scale ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (GLTFNode.method_get_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_scale")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_scale (_ scale: Vector3) {
        #if true
        
        var copy_scale = scale
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scale)
        
        #else
        
        var copy_scale = scale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_children: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_children")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 969006518)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_children ()-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        gi.object_method_bind_ptrcall (GLTFNode.method_get_children, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_children: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_children")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3614634198)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_children (_ children: PackedInt32Array) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_children, UnsafeMutableRawPointer (mutating: handle), nil, &children.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &children.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_children, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_light: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_light")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_light ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFNode.method_get_light, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_light: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_light")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_light (_ light: Int32) {
        #if true
        
        var copy_light: Int = Int (light)
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_light, UnsafeMutableRawPointer (mutating: handle), nil, &copy_light)
        
        #else
        
        var copy_light: Int = Int (light)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_light) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_set_light, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_additional_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_additional_data")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2138907829)!
            }
            
        }
        
    }()
    
    /// Gets additional arbitrary data in this ``GLTFNode`` instance. This can be used to keep per-node state data in ``GLTFDocumentExtension`` classes, which is important because they are stateless.
    /// 
    /// The argument should be the ``GLTFDocumentExtension`` name (does not have to match the extension name in the GLTF file), and the return value can be anything you set. If nothing was set, the return value is null.
    /// 
    public final func getAdditionalData (extensionName: StringName)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_get_additional_data, UnsafeMutableRawPointer (mutating: handle), &_result.content, &extensionName.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &extensionName.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFNode.method_get_additional_data, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_additional_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_additional_data")
        return withUnsafePointer (to: &GLTFNode.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3776071444)!
            }
            
        }
        
    }()
    
    /// Sets additional arbitrary data in this ``GLTFNode`` instance. This can be used to keep per-node state data in ``GLTFDocumentExtension`` classes, which is important because they are stateless.
    /// 
    /// The first argument should be the ``GLTFDocumentExtension`` name (does not have to match the extension name in the GLTF file), and the second argument can be anything you want.
    /// 
    public final func setAdditionalData (extensionName: StringName, additionalData: Variant) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (GLTFNode.method_set_additional_data, UnsafeMutableRawPointer (mutating: handle), nil, &extensionName.content, &additionalData.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &extensionName.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &additionalData.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GLTFNode.method_set_additional_data, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
}

