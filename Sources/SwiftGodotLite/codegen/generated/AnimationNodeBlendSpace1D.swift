// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A set of ``AnimationRootNode``s placed on a virtual axis, crossfading between the two adjacent ones. Used by ``AnimationTree``.
/// 
/// A resource used by ``AnimationNodeBlendTree``.
/// 
/// ``AnimationNodeBlendSpace1D`` represents a virtual axis on which any type of ``AnimationRootNode``s can be added using ``addBlendPoint(node:pos:atIndex:)``. Outputs the linear blend of the two ``AnimationRootNode``s adjacent to the current value.
/// 
/// You can set the extents of the axis with ``minSpace`` and ``maxSpace``.
/// 
open class AnimationNodeBlendSpace1D: AnimationRootNode {
    override open class var godotClassName: StringName { "AnimationNodeBlendSpace1D" }
    public enum BlendMode: Int64 {
        /// The interpolation between animations is linear.
        case interpolated = 0 // BLEND_MODE_INTERPOLATED
        /// The blend space plays the animation of the animation node which blending position is closest to. Useful for frame-by-frame 2D animations.
        case discrete = 1 // BLEND_MODE_DISCRETE
        /// Similar to .discrete, but starts the new animation at the last animation's playback position.
        case discreteCarry = 2 // BLEND_MODE_DISCRETE_CARRY
    }
    
    
    /* Properties */
    
    /// The blend space's axis's lower limit for the points' position. See ``addBlendPoint(node:pos:atIndex:)``.
    final public var minSpace: Double {
        get {
            return get_min_space ()
        }
        
        set {
            set_min_space (newValue)
        }
        
    }
    
    /// The blend space's axis's upper limit for the points' position. See ``addBlendPoint(node:pos:atIndex:)``.
    final public var maxSpace: Double {
        get {
            return get_max_space ()
        }
        
        set {
            set_max_space (newValue)
        }
        
    }
    
    /// Position increment to snap to when moving a point on the axis.
    final public var snap: Double {
        get {
            return get_snap ()
        }
        
        set {
            set_snap (newValue)
        }
        
    }
    
    /// Label of the virtual axis of the blend space.
    final public var valueLabel: String {
        get {
            return get_value_label ()
        }
        
        set {
            set_value_label (newValue)
        }
        
    }
    
    /// Controls the interpolation between animations. See ``AnimationNodeBlendSpace1D/BlendMode`` constants.
    final public var blendMode: AnimationNodeBlendSpace1D.BlendMode {
        get {
            return get_blend_mode ()
        }
        
        set {
            set_blend_mode (newValue)
        }
        
    }
    
    /// If `false`, the blended animations' frame are stopped when the blend value is `0`.
    /// 
    /// If `true`, forcing the blended animations to advance frame.
    /// 
    final public var sync: Bool {
        get {
            return is_using_sync ()
        }
        
        set {
            set_use_sync (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_add_blend_point: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_blend_point")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 285050433)!
            }
            
        }
        
    }()
    
    /// Adds a new point that represents a `node` on the virtual axis at a given position set by `pos`. You can insert it at a specific index using the `atIndex` argument. If you use the default value for `atIndex`, the point is inserted at the end of the blend points array.
    public final func addBlendPoint (node: AnimationRootNode?, pos: Double, atIndex: Int32 = -1) {
        #if true
        
        var copy_pos = pos
        var copy_at_index: Int = Int (atIndex)
        var copy_node_handle = node?.handle
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_add_blend_point, UnsafeMutableRawPointer (mutating: handle), nil, &copy_node_handle, &copy_pos, &copy_at_index)
        
        #else
        
        var copy_pos = pos
        var copy_at_index: Int = Int (atIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: node?.handle) { p0 in
        _args.append (node == nil ? nil : p0)
            withUnsafePointer (to: &copy_pos) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_at_index) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_add_blend_point, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_blend_point_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_blend_point_position")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Updates the position of the point at index `point` on the blend axis.
    public final func setBlendPointPosition (point: Int32, pos: Double) {
        #if true
        
        var copy_point: Int = Int (point)
        var copy_pos = pos
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_set_blend_point_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_point, &copy_pos)
        
        #else
        
        var copy_point: Int = Int (point)
        var copy_pos = pos
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_point) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_pos) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_set_blend_point_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_blend_point_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_blend_point_position")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns the position of the point at index `point`.
    public final func getBlendPointPosition (point: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_point: Int = Int (point)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_get_blend_point_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_point)
        return _result
        #else
        
        var copy_point: Int = Int (point)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_point) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_get_blend_point_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_blend_point_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_blend_point_node")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4240341528)!
            }
            
        }
        
    }()
    
    /// Changes the ``AnimationNode`` referenced by the point at index `point`.
    public final func setBlendPointNode (point: Int32, node: AnimationRootNode?) {
        #if true
        
        var copy_point: Int = Int (point)
        var copy_node_handle = node?.handle
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_set_blend_point_node, UnsafeMutableRawPointer (mutating: handle), nil, &copy_point, &copy_node_handle)
        
        #else
        
        var copy_point: Int = Int (point)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_point) { p0 in
            _args.append (p0)
            withUnsafePointer (to: node?.handle) { p1 in
            _args.append (node == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_set_blend_point_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_blend_point_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_blend_point_node")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 665599029)!
            }
            
        }
        
    }()
    
    /// Returns the ``AnimationNode`` referenced by the point at index `point`.
    public final func getBlendPointNode (point: Int32)-> AnimationRootNode? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_point: Int = Int (point)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_get_blend_point_node, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_point)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_point: Int = Int (point)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_point) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_get_blend_point_node, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_remove_blend_point: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_blend_point")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes the point at index `point` from the blend axis.
    public final func removeBlendPoint (_ point: Int32) {
        #if true
        
        var copy_point: Int = Int (point)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_remove_blend_point, UnsafeMutableRawPointer (mutating: handle), nil, &copy_point)
        
        #else
        
        var copy_point: Int = Int (point)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_point) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_remove_blend_point, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_blend_point_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_blend_point_count")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of points on the blend axis.
    public final func getBlendPointCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_get_blend_point_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_min_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_min_space")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_min_space (_ minSpace: Double) {
        #if true
        
        var copy_min_space = minSpace
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_set_min_space, UnsafeMutableRawPointer (mutating: handle), nil, &copy_min_space)
        
        #else
        
        var copy_min_space = minSpace
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_min_space) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_set_min_space, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_min_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_min_space")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_min_space ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_get_min_space, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_max_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_max_space")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_max_space (_ maxSpace: Double) {
        #if true
        
        var copy_max_space = maxSpace
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_set_max_space, UnsafeMutableRawPointer (mutating: handle), nil, &copy_max_space)
        
        #else
        
        var copy_max_space = maxSpace
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_max_space) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_set_max_space, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_max_space: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_max_space")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_max_space ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_get_max_space, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_snap: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_snap")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_snap (_ snap: Double) {
        #if true
        
        var copy_snap = snap
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_set_snap, UnsafeMutableRawPointer (mutating: handle), nil, &copy_snap)
        
        #else
        
        var copy_snap = snap
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_snap) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_set_snap, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_snap: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_snap")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_snap ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_get_snap, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_value_label: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_value_label")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_value_label (_ text: String) {
        #if true
        
        let gstr_text = GString (text)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_set_value_label, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_text.content)
        
        #else
        
        let gstr_text = GString (text)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_text.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_set_value_label, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_value_label: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_value_label")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_value_label ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_get_value_label, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_blend_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_blend_mode")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2600869457)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_blend_mode (_ mode: AnimationNodeBlendSpace1D.BlendMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_set_blend_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_set_blend_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_blend_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_blend_mode")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1547667849)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_blend_mode ()-> AnimationNodeBlendSpace1D.BlendMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_get_blend_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AnimationNodeBlendSpace1D.BlendMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_use_sync: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_sync")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_sync (_ enable: Bool) {
        #if true
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (AnimationNodeBlendSpace1D.method_set_use_sync, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_set_use_sync, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_using_sync: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_using_sync")
        return withUnsafePointer (to: &AnimationNodeBlendSpace1D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_using_sync ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (AnimationNodeBlendSpace1D.method_is_using_sync, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

