// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Sprite frame library for AnimatedSprite2D and AnimatedSprite3D.
/// 
/// Sprite frame library for an ``AnimatedSprite2D`` or ``AnimatedSprite3D`` node. Contains frames and animation data for playback.
open class SpriteFrames: Resource {
    override open class var godotClassName: StringName { "SpriteFrames" }
    
    /* Properties */
    
    /* Methods */
    fileprivate static var method_add_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_animation")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Adds a new `anim` animation to the library.
    public final func addAnimation (anim: StringName) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_add_animation, UnsafeMutableRawPointer (mutating: handle), nil, &anim.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteFrames.method_add_animation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_has_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_animation")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the `anim` animation exists.
    public final func hasAnimation (anim: StringName)-> Bool {
        var _result: Bool = false
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_has_animation, UnsafeMutableRawPointer (mutating: handle), &_result, &anim.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteFrames.method_has_animation, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_remove_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_animation")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Removes the `anim` animation.
    public final func removeAnimation (anim: StringName) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_remove_animation, UnsafeMutableRawPointer (mutating: handle), nil, &anim.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteFrames.method_remove_animation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_rename_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("rename_animation")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3740211285)!
            }
            
        }
        
    }()
    
    /// Changes the `anim` animation's name to `newname`.
    public final func renameAnimation (anim: StringName, newname: StringName) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_rename_animation, UnsafeMutableRawPointer (mutating: handle), nil, &anim.content, &newname.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &newname.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SpriteFrames.method_rename_animation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_animation_names: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_animation_names")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns an array containing the names associated to each animation. Values are placed in alphabetical order.
    public final func getAnimationNames ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (SpriteFrames.method_get_animation_names, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_animation_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_animation_speed")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4135858297)!
            }
            
        }
        
    }()
    
    /// Sets the speed for the `anim` animation in frames per second.
    public final func setAnimationSpeed (anim: StringName, fps: Double) {
        #if true
        
        var copy_fps = fps
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_set_animation_speed, UnsafeMutableRawPointer (mutating: handle), nil, &anim.content, &copy_fps)
        
        #else
        
        var copy_fps = fps
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_fps) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SpriteFrames.method_set_animation_speed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_animation_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_animation_speed")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2349060816)!
            }
            
        }
        
    }()
    
    /// Returns the speed in frames per second for the `anim` animation.
    public final func getAnimationSpeed (anim: StringName)-> Double {
        var _result: Double = 0.0
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_get_animation_speed, UnsafeMutableRawPointer (mutating: handle), &_result, &anim.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteFrames.method_get_animation_speed, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_animation_loop: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_animation_loop")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2524380260)!
            }
            
        }
        
    }()
    
    /// If `loop` is `true`, the `anim` animation will loop when it reaches the end, or the start if it is played in reverse.
    public final func setAnimationLoop (anim: StringName, loop: Bool) {
        #if true
        
        var copy_loop = loop
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_set_animation_loop, UnsafeMutableRawPointer (mutating: handle), nil, &anim.content, &copy_loop)
        
        #else
        
        var copy_loop = loop
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_loop) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SpriteFrames.method_set_animation_loop, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_animation_loop: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_animation_loop")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given animation is configured to loop when it finishes playing. Otherwise, returns `false`.
    public final func getAnimationLoop (anim: StringName)-> Bool {
        var _result: Bool = false
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_get_animation_loop, UnsafeMutableRawPointer (mutating: handle), &_result, &anim.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteFrames.method_get_animation_loop, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_add_frame: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_frame")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1351332740)!
            }
            
        }
        
    }()
    
    /// Adds a frame to the `anim` animation. If `atPosition` is `-1`, the frame will be added to the end of the animation.
    public final func addFrame (anim: StringName, texture: Texture2D?, duration: Double = 1.0, atPosition: Int32 = -1) {
        #if true
        
        var copy_duration = duration
        var copy_at_position: Int = Int (atPosition)
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_add_frame, UnsafeMutableRawPointer (mutating: handle), nil, &anim.content, &copy_texture_handle, &copy_duration, &copy_at_position)
        
        #else
        
        var copy_duration = duration
        var copy_at_position: Int = Int (atPosition)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: texture?.handle) { p1 in
            _args.append (texture == nil ? nil : p1)
                withUnsafePointer (to: &copy_duration) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_at_position) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (SpriteFrames.method_add_frame, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_frame: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_frame")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 56804795)!
            }
            
        }
        
    }()
    
    /// Sets the `texture` and the `duration` of the frame `idx` in the `anim` animation.
    public final func setFrame (anim: StringName, idx: Int32, texture: Texture2D?, duration: Double = 1.0) {
        #if true
        
        var copy_idx: Int = Int (idx)
        var copy_duration = duration
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_set_frame, UnsafeMutableRawPointer (mutating: handle), nil, &anim.content, &copy_idx, &copy_texture_handle, &copy_duration)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var copy_duration = duration
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_idx) { p1 in
                _args.append (p1)
                withUnsafePointer (to: texture?.handle) { p2 in
                _args.append (texture == nil ? nil : p2)
                    withUnsafePointer (to: &copy_duration) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (SpriteFrames.method_set_frame, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_frame: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_frame")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2415702435)!
            }
            
        }
        
    }()
    
    /// Removes the `anim` animation's frame `idx`.
    public final func removeFrame (anim: StringName, idx: Int32) {
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_remove_frame, UnsafeMutableRawPointer (mutating: handle), nil, &anim.content, &copy_idx)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SpriteFrames.method_remove_frame, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_frame_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_frame_count")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2458036349)!
            }
            
        }
        
    }()
    
    /// Returns the number of frames for the `anim` animation.
    public final func getFrameCount (anim: StringName)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_get_frame_count, UnsafeMutableRawPointer (mutating: handle), &_result, &anim.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteFrames.method_get_frame_count, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_frame_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_frame_texture")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2900517879)!
            }
            
        }
        
    }()
    
    /// Returns the texture of the frame `idx` in the `anim` animation.
    public final func getFrameTexture (anim: StringName, idx: Int32)-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_get_frame_texture, UnsafeMutableRawPointer (mutating: handle), &_result, &anim.content, &copy_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SpriteFrames.method_get_frame_texture, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_frame_duration: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_frame_duration")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1129309260)!
            }
            
        }
        
    }()
    
    /// Returns a relative duration of the frame `idx` in the `anim` animation (defaults to `1.0`). For example, a frame with a duration of `2.0` is displayed twice as long as a frame with a duration of `1.0`. You can calculate the absolute duration (in seconds) of a frame using the following formula:
    /// 
    /// In this example, `playing_speed` refers to either ``AnimatedSprite2D/getPlayingSpeed()`` or ``AnimatedSprite3D/getPlayingSpeed()``.
    /// 
    public final func getFrameDuration (anim: StringName, idx: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_get_frame_duration, UnsafeMutableRawPointer (mutating: handle), &_result, &anim.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SpriteFrames.method_get_frame_duration, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Removes all frames from the `anim` animation.
    public final func clear (anim: StringName) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SpriteFrames.method_clear, UnsafeMutableRawPointer (mutating: handle), nil, &anim.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &anim.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SpriteFrames.method_clear, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_clear_all: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_all")
        return withUnsafePointer (to: &SpriteFrames.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Removes all animations. An empty `default` animation will be created.
    public final func clearAll () {
        gi.object_method_bind_ptrcall (SpriteFrames.method_clear_all, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
}

