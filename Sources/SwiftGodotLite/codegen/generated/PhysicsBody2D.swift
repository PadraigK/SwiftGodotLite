// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract base class for 2D game objects affected by physics.
/// 
/// ``PhysicsBody2D`` is an abstract base class for 2D game objects affected by physics. All 2D physics bodies inherit from it.
open class PhysicsBody2D: CollisionObject2D {
    override open class var godotClassName: StringName { "PhysicsBody2D" }
    /* Methods */
    fileprivate static var method_move_and_collide: GDExtensionMethodBindPtr = {
        let methodName = StringName ("move_and_collide")
        return withUnsafePointer (to: &PhysicsBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3681923724)!
            }
            
        }
        
    }()
    
    /// Moves the body along the vector `motion`. In order to be frame rate independent in ``Node/_physicsProcess(delta:)`` or ``Node/_process(delta:)``, `motion` should be computed using `delta`.
    /// 
    /// Returns a ``KinematicCollision2D``, which contains information about the collision when stopped, or when touching another body along the motion.
    /// 
    /// If `testOnly` is `true`, the body does not move but the would-be collision information is given.
    /// 
    /// `safeMargin` is the extra margin used for collision recovery (see ``CharacterBody2D/safeMargin`` for more details).
    /// 
    /// If `recoveryAsCollision` is `true`, any depenetration from the recovery phase is also reported as a collision; this is used e.g. by ``CharacterBody2D`` for improving floor detection during floor snapping.
    /// 
    public final func moveAndCollide (motion: Vector2, testOnly: Bool = false, safeMargin: Double = 0.08, recoveryAsCollision: Bool = false)-> KinematicCollision2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_motion = motion
        var copy_test_only = testOnly
        var copy_safe_margin = safeMargin
        var copy_recovery_as_collision = recoveryAsCollision
        
        gi.object_method_bind_ptrcall_v (PhysicsBody2D.method_move_and_collide, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_motion, &copy_test_only, &copy_safe_margin, &copy_recovery_as_collision)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_motion = motion
        var copy_test_only = testOnly
        var copy_safe_margin = safeMargin
        var copy_recovery_as_collision = recoveryAsCollision
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_motion) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_test_only) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_safe_margin) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_recovery_as_collision) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (PhysicsBody2D.method_move_and_collide, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_test_move: GDExtensionMethodBindPtr = {
        let methodName = StringName ("test_move")
        return withUnsafePointer (to: &PhysicsBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3324464701)!
            }
            
        }
        
    }()
    
    /// Checks for collisions without moving the body. In order to be frame rate independent in ``Node/_physicsProcess(delta:)`` or ``Node/_process(delta:)``, `motion` should be computed using `delta`.
    /// 
    /// Virtually sets the node's position, scale and rotation to that of the given ``Transform2D``, then tries to move the body along the vector `motion`. Returns `true` if a collision would stop the body from moving along the whole path.
    /// 
    /// `collision` is an optional object of type ``KinematicCollision2D``, which contains additional information about the collision when stopped, or when touching another body along the motion.
    /// 
    /// `safeMargin` is the extra margin used for collision recovery (see ``CharacterBody2D/safeMargin`` for more details).
    /// 
    /// If `recoveryAsCollision` is `true`, any depenetration from the recovery phase is also reported as a collision; this is useful for checking whether the body would _touch_ any other bodies.
    /// 
    public final func testMove (from: Transform2D, motion: Vector2, collision: KinematicCollision2D? = nil, safeMargin: Double = 0.08, recoveryAsCollision: Bool = false)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_from = from
        var copy_motion = motion
        var copy_safe_margin = safeMargin
        var copy_recovery_as_collision = recoveryAsCollision
        var copy_collision_handle = collision?.handle
        
        gi.object_method_bind_ptrcall_v (PhysicsBody2D.method_test_move, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_from, &copy_motion, &copy_collision_handle, &copy_safe_margin, &copy_recovery_as_collision)
        return _result
        #else
        
        var copy_from = from
        var copy_motion = motion
        var copy_safe_margin = safeMargin
        var copy_recovery_as_collision = recoveryAsCollision
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_from) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_motion) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: collision?.handle) { p2 in
                _args.append (collision == nil ? nil : p2)
                    return withUnsafePointer (to: &copy_safe_margin) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_recovery_as_collision) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (PhysicsBody2D.method_test_move, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                            return _result
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_exceptions: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_exceptions")
        return withUnsafePointer (to: &PhysicsBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    /// Returns an array of nodes that were added as collision exceptions for this body.
    public final func getCollisionExceptions ()-> ObjectCollection<PhysicsBody2D> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (PhysicsBody2D.method_get_collision_exceptions, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<PhysicsBody2D>(content: _result)
    }
    
    fileprivate static var method_add_collision_exception_with: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_collision_exception_with")
        return withUnsafePointer (to: &PhysicsBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    /// Adds a body to the list of bodies that this body can't collide with.
    public final func addCollisionExceptionWith (body: Node?) {
        #if false
        
        var copy_body_handle = body?.handle
        
        gi.object_method_bind_ptrcall_v (PhysicsBody2D.method_add_collision_exception_with, UnsafeMutableRawPointer (mutating: handle), nil, &copy_body_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: body?.handle) { p0 in
        _args.append (body == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (PhysicsBody2D.method_add_collision_exception_with, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_collision_exception_with: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_collision_exception_with")
        return withUnsafePointer (to: &PhysicsBody2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    /// Removes a body from the list of bodies that this body can't collide with.
    public final func removeCollisionExceptionWith (body: Node?) {
        #if false
        
        var copy_body_handle = body?.handle
        
        gi.object_method_bind_ptrcall_v (PhysicsBody2D.method_remove_collision_exception_with, UnsafeMutableRawPointer (mutating: handle), nil, &copy_body_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: body?.handle) { p0 in
        _args.append (body == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (PhysicsBody2D.method_remove_collision_exception_with, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

