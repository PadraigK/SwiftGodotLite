// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// This class allows for a RenderSceneBuffer implementation to be made in GDExtension.
/// 
/// This class allows for a RenderSceneBuffer implementation to be made in GDExtension.
open class RenderSceneBuffersExtension: RenderSceneBuffers {
    override open class var godotClassName: StringName { "RenderSceneBuffersExtension" }
    /* Methods */
    /// Implement this in GDExtension to handle the (re)sizing of a viewport.
    @_documentation(visibility: public)
    open func _configure (config: RenderSceneBuffersConfiguration?) {
    }
    
    /// Implement this in GDExtension to record a new FSR sharpness value.
    @_documentation(visibility: public)
    open func _setFsrSharpness (_ fsrSharpness: Double) {
    }
    
    /// Implement this in GDExtension to change the texture mipmap bias.
    @_documentation(visibility: public)
    open func _setTextureMipmapBias (_ textureMipmapBias: Double) {
    }
    
    /// Implement this in GDExtension to react to the debanding flag changing.
    @_documentation(visibility: public)
    open func _setUseDebanding (_ useDebanding: Bool) {
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_configure":
                return _RenderSceneBuffersExtension_proxy_configure
            case "_set_fsr_sharpness":
                return _RenderSceneBuffersExtension_proxy_set_fsr_sharpness
            case "_set_texture_mipmap_bias":
                return _RenderSceneBuffersExtension_proxy_set_texture_mipmap_bias
            case "_set_use_debanding":
                return _RenderSceneBuffersExtension_proxy_set_use_debanding
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _RenderSceneBuffersExtension_proxy_configure (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<RenderSceneBuffersExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._configure (config: lookupLiveObject (handleAddress: resolved_0) as? RenderSceneBuffersConfiguration ?? RenderSceneBuffersConfiguration (nativeHandle: resolved_0))
}

func _RenderSceneBuffersExtension_proxy_set_fsr_sharpness (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<RenderSceneBuffersExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setFsrSharpness (args [0]!.assumingMemoryBound (to: Double.self).pointee)
}

func _RenderSceneBuffersExtension_proxy_set_texture_mipmap_bias (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<RenderSceneBuffersExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setTextureMipmapBias (args [0]!.assumingMemoryBound (to: Double.self).pointee)
}

func _RenderSceneBuffersExtension_proxy_set_use_debanding (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<RenderSceneBuffersExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setUseDebanding (args [0]!.assumingMemoryBound (to: Bool.self).pointee)
}

