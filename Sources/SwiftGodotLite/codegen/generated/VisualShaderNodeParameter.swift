// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A base type for the parameters within the visual shader graph.
/// 
/// A parameter represents a variable in the shader which is set externally, i.e. from the ``ShaderMaterial``. Parameters are exposed as properties in the ``ShaderMaterial`` and can be assigned from the Inspector or from a script.
open class VisualShaderNodeParameter: VisualShaderNode {
    override open class var godotClassName: StringName { "VisualShaderNodeParameter" }
    public enum Qualifier: Int64 {
        /// The parameter will be tied to the ``ShaderMaterial`` using this shader.
        case none = 0 // QUAL_NONE
        /// The parameter will use a global value, defined in Project Settings.
        case global = 1 // QUAL_GLOBAL
        /// The parameter will be tied to the node with attached ``ShaderMaterial`` using this shader.
        case instance = 2 // QUAL_INSTANCE
        /// Represents the size of the ``VisualShaderNodeParameter/Qualifier`` enum.
        case max = 3 // QUAL_MAX
    }
    
    
    /* Properties */
    
    /// Name of the parameter, by which it can be accessed through the ``ShaderMaterial`` properties.
    final public var parameterName: String {
        get {
            return get_parameter_name ()
        }
        
        set {
            set_parameter_name (newValue)
        }
        
    }
    
    /// Defines the scope of the parameter.
    final public var qualifier: VisualShaderNodeParameter.Qualifier {
        get {
            return get_qualifier ()
        }
        
        set {
            set_qualifier (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_parameter_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_parameter_name")
        return withUnsafePointer (to: &VisualShaderNodeParameter.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_parameter_name (_ name: String) {
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeParameter.method_set_parameter_name, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeParameter.method_set_parameter_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_parameter_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_parameter_name")
        return withUnsafePointer (to: &VisualShaderNodeParameter.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_parameter_name ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (VisualShaderNodeParameter.method_get_parameter_name, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_qualifier: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_qualifier")
        return withUnsafePointer (to: &VisualShaderNodeParameter.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1276489447)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_qualifier (_ qualifier: VisualShaderNodeParameter.Qualifier) {
        #if true
        
        var copy_qualifier = Int64 (qualifier.rawValue)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeParameter.method_set_qualifier, UnsafeMutableRawPointer (mutating: handle), nil, &copy_qualifier)
        
        #else
        
        var copy_qualifier = Int64 (qualifier.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_qualifier) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeParameter.method_set_qualifier, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_qualifier: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_qualifier")
        return withUnsafePointer (to: &VisualShaderNodeParameter.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3558406205)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_qualifier ()-> VisualShaderNodeParameter.Qualifier {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (VisualShaderNodeParameter.method_get_qualifier, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VisualShaderNodeParameter.Qualifier (rawValue: _result)!
    }
    
}

