// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A customizable ``StyleBox`` that doesn't use a texture.
/// 
/// By configuring various properties of this style box, you can achieve many common looks without the need of a texture. This includes optionally rounded borders, antialiasing, shadows, and skew.
/// 
/// Setting corner radius to high values is allowed. As soon as corners overlap, the stylebox will switch to a relative system.
/// 
/// **Example:**
/// 
/// The relative system now would take the 1:2 ratio of the two left corners to calculate the actual corner width. Both corners added will **never** be more than the height. Result:
/// 
open class StyleBoxFlat: StyleBox {
    override open class var godotClassName: StringName { "StyleBoxFlat" }
    
    /* Properties */
    
    /// The background color of the stylebox.
    final public var bgColor: Color {
        get {
            return get_bg_color ()
        }
        
        set {
            set_bg_color (newValue)
        }
        
    }
    
    /// Toggles drawing of the inner part of the stylebox.
    final public var drawCenter: Bool {
        get {
            return is_draw_center_enabled ()
        }
        
        set {
            set_draw_center (newValue)
        }
        
    }
    
    /// If set to a non-zero value on either axis, ``skew`` distorts the StyleBox horizontally and/or vertically. This can be used for "futuristic"-style UIs. Positive values skew the StyleBox towards the right (X axis) and upwards (Y axis), while negative values skew the StyleBox towards the left (X axis) and downwards (Y axis).
    /// 
    /// > Note: To ensure text does not touch the StyleBox's edges, consider increasing the ``StyleBox``'s content margin (see ``StyleBox/contentMarginBottom``). It is preferable to increase the content margin instead of the expand margin (see ``expandMarginBottom``), as increasing the expand margin does not increase the size of the clickable area for ``Control``s.
    /// 
    final public var skew: Vector2 {
        get {
            return get_skew ()
        }
        
        set {
            set_skew (newValue)
        }
        
    }
    
    /// Border width for the left border.
    final public var borderWidthLeft: Int32 {
        get {
            return get_border_width (Side (rawValue: 0)!)
        }
        
        set {
            set_border_width (Side (rawValue: 0)!, newValue)
        }
        
    }
    
    /// Border width for the top border.
    final public var borderWidthTop: Int32 {
        get {
            return get_border_width (Side (rawValue: 1)!)
        }
        
        set {
            set_border_width (Side (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Border width for the right border.
    final public var borderWidthRight: Int32 {
        get {
            return get_border_width (Side (rawValue: 2)!)
        }
        
        set {
            set_border_width (Side (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Border width for the bottom border.
    final public var borderWidthBottom: Int32 {
        get {
            return get_border_width (Side (rawValue: 3)!)
        }
        
        set {
            set_border_width (Side (rawValue: 3)!, newValue)
        }
        
    }
    
    /// Sets the color of the border.
    final public var borderColor: Color {
        get {
            return get_border_color ()
        }
        
        set {
            set_border_color (newValue)
        }
        
    }
    
    /// If `true`, the border will fade into the background color.
    final public var borderBlend: Bool {
        get {
            return get_border_blend ()
        }
        
        set {
            set_border_blend (newValue)
        }
        
    }
    
    /// The top-left corner's radius. If `0`, the corner is not rounded.
    final public var cornerRadiusTopLeft: Int32 {
        get {
            return get_corner_radius (Corner (rawValue: 0)!)
        }
        
        set {
            set_corner_radius (Corner (rawValue: 0)!, newValue)
        }
        
    }
    
    /// The top-right corner's radius. If `0`, the corner is not rounded.
    final public var cornerRadiusTopRight: Int32 {
        get {
            return get_corner_radius (Corner (rawValue: 1)!)
        }
        
        set {
            set_corner_radius (Corner (rawValue: 1)!, newValue)
        }
        
    }
    
    /// The bottom-right corner's radius. If `0`, the corner is not rounded.
    final public var cornerRadiusBottomRight: Int32 {
        get {
            return get_corner_radius (Corner (rawValue: 2)!)
        }
        
        set {
            set_corner_radius (Corner (rawValue: 2)!, newValue)
        }
        
    }
    
    /// The bottom-left corner's radius. If `0`, the corner is not rounded.
    final public var cornerRadiusBottomLeft: Int32 {
        get {
            return get_corner_radius (Corner (rawValue: 3)!)
        }
        
        set {
            set_corner_radius (Corner (rawValue: 3)!, newValue)
        }
        
    }
    
    /// This sets the number of vertices used for each corner. Higher values result in rounder corners but take more processing power to compute. When choosing a value, you should take the corner radius (``setCornerRadiusAll(radius:)``) into account.
    /// 
    /// For corner radii less than 10, `4` or `5` should be enough. For corner radii less than 30, values between `8` and `12` should be enough.
    /// 
    /// A corner detail of `1` will result in chamfered corners instead of rounded corners, which is useful for some artistic effects.
    /// 
    final public var cornerDetail: Int32 {
        get {
            return get_corner_detail ()
        }
        
        set {
            set_corner_detail (newValue)
        }
        
    }
    
    /// Expands the stylebox outside of the control rect on the left edge. Useful in combination with ``borderWidthLeft`` to draw a border outside the control rect.
    /// 
    /// > Note: Unlike ``StyleBox/contentMarginLeft``, ``expandMarginLeft`` does _not_ affect the size of the clickable area for ``Control``s. This can negatively impact usability if used wrong, as the user may try to click an area of the StyleBox that cannot actually receive clicks.
    /// 
    final public var expandMarginLeft: Double {
        get {
            return get_expand_margin (Side (rawValue: 0)!)
        }
        
        set {
            set_expand_margin (Side (rawValue: 0)!, newValue)
        }
        
    }
    
    /// Expands the stylebox outside of the control rect on the top edge. Useful in combination with ``borderWidthTop`` to draw a border outside the control rect.
    /// 
    /// > Note: Unlike ``StyleBox/contentMarginTop``, ``expandMarginTop`` does _not_ affect the size of the clickable area for ``Control``s. This can negatively impact usability if used wrong, as the user may try to click an area of the StyleBox that cannot actually receive clicks.
    /// 
    final public var expandMarginTop: Double {
        get {
            return get_expand_margin (Side (rawValue: 1)!)
        }
        
        set {
            set_expand_margin (Side (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Expands the stylebox outside of the control rect on the right edge. Useful in combination with ``borderWidthRight`` to draw a border outside the control rect.
    /// 
    /// > Note: Unlike ``StyleBox/contentMarginRight``, ``expandMarginRight`` does _not_ affect the size of the clickable area for ``Control``s. This can negatively impact usability if used wrong, as the user may try to click an area of the StyleBox that cannot actually receive clicks.
    /// 
    final public var expandMarginRight: Double {
        get {
            return get_expand_margin (Side (rawValue: 2)!)
        }
        
        set {
            set_expand_margin (Side (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Expands the stylebox outside of the control rect on the bottom edge. Useful in combination with ``borderWidthBottom`` to draw a border outside the control rect.
    /// 
    /// > Note: Unlike ``StyleBox/contentMarginBottom``, ``expandMarginBottom`` does _not_ affect the size of the clickable area for ``Control``s. This can negatively impact usability if used wrong, as the user may try to click an area of the StyleBox that cannot actually receive clicks.
    /// 
    final public var expandMarginBottom: Double {
        get {
            return get_expand_margin (Side (rawValue: 3)!)
        }
        
        set {
            set_expand_margin (Side (rawValue: 3)!, newValue)
        }
        
    }
    
    /// The color of the shadow. This has no effect if ``shadowSize`` is lower than 1.
    final public var shadowColor: Color {
        get {
            return get_shadow_color ()
        }
        
        set {
            set_shadow_color (newValue)
        }
        
    }
    
    /// The shadow size in pixels.
    final public var shadowSize: Int32 {
        get {
            return get_shadow_size ()
        }
        
        set {
            set_shadow_size (newValue)
        }
        
    }
    
    /// The shadow offset in pixels. Adjusts the position of the shadow relatively to the stylebox.
    final public var shadowOffset: Vector2 {
        get {
            return get_shadow_offset ()
        }
        
        set {
            set_shadow_offset (newValue)
        }
        
    }
    
    /// Antialiasing draws a small ring around the edges, which fades to transparency. As a result, edges look much smoother. This is only noticeable when using rounded corners or ``skew``.
    /// 
    /// > Note: When using beveled corners with 45-degree angles (``cornerDetail`` = 1), it is recommended to set ``antiAliasing`` to `false` to ensure crisp visuals and avoid possible visual glitches.
    /// 
    final public var antiAliasing: Bool {
        get {
            return is_anti_aliased ()
        }
        
        set {
            set_anti_aliased (newValue)
        }
        
    }
    
    /// This changes the size of the antialiasing effect. `1.0` is recommended for an optimal result at 100% scale, identical to how rounded rectangles are rendered in web browsers and most vector drawing software.
    /// 
    /// > Note: Higher values may produce a blur effect but can also create undesired artifacts on small boxes with large-radius corners.
    /// 
    final public var antiAliasingSize: Double {
        get {
            return get_aa_size ()
        }
        
        set {
            set_aa_size (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_bg_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bg_color")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bg_color (_ color: Color) {
        #if true
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_bg_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_bg_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bg_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bg_color")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bg_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_bg_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_border_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_border_color")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_border_color (_ color: Color) {
        #if true
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_border_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_border_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_border_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_border_color")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_border_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_border_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_border_width_all: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_border_width_all")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Sets the border width to `width` pixels for all sides.
    public final func setBorderWidthAll (width: Int32) {
        #if true
        
        var copy_width: Int = Int (width)
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_border_width_all, UnsafeMutableRawPointer (mutating: handle), nil, &copy_width)
        
        #else
        
        var copy_width: Int = Int (width)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_border_width_all, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_border_width_min: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_border_width_min")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the smallest border width out of all four borders.
    public final func getBorderWidthMin ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_border_width_min, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_border_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_border_width")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 437707142)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the specified ``Side``'s border width to `width` pixels.
    fileprivate final func set_border_width (_ margin: Side, _ width: Int32) {
        #if true
        
        var copy_margin = Int64 (margin.rawValue)
        var copy_width: Int = Int (width)
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_border_width, UnsafeMutableRawPointer (mutating: handle), nil, &copy_margin, &copy_width)
        
        #else
        
        var copy_margin = Int64 (margin.rawValue)
        var copy_width: Int = Int (width)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_width) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_border_width, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_border_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_border_width")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1983885014)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the specified ``Side``'s border width.
    fileprivate final func get_border_width (_ margin: Side)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_margin = Int64 (margin.rawValue)
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_get_border_width, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_margin)
        return _result
        #else
        
        var copy_margin = Int64 (margin.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_border_width, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_border_blend: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_border_blend")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_border_blend (_ blend: Bool) {
        #if true
        
        var copy_blend = blend
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_border_blend, UnsafeMutableRawPointer (mutating: handle), nil, &copy_blend)
        
        #else
        
        var copy_blend = blend
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_blend) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_border_blend, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_border_blend: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_border_blend")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_border_blend ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_border_blend, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_corner_radius_all: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_corner_radius_all")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Sets the corner radius to `radius` pixels for all corners.
    public final func setCornerRadiusAll (radius: Int32) {
        #if true
        
        var copy_radius: Int = Int (radius)
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_corner_radius_all, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius: Int = Int (radius)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_corner_radius_all, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_corner_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_corner_radius")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2696158768)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the corner radius to `radius` pixels for the given `corner`. See ``Corner`` for possible values.
    fileprivate final func set_corner_radius (_ corner: Corner, _ radius: Int32) {
        #if true
        
        var copy_corner = Int64 (corner.rawValue)
        var copy_radius: Int = Int (radius)
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_corner_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_corner, &copy_radius)
        
        #else
        
        var copy_corner = Int64 (corner.rawValue)
        var copy_radius: Int = Int (radius)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_corner) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_radius) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_corner_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_corner_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_corner_radius")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3982397690)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the given `corner`'s radius. See ``Corner`` for possible values.
    fileprivate final func get_corner_radius (_ corner: Corner)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_corner = Int64 (corner.rawValue)
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_get_corner_radius, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_corner)
        return _result
        #else
        
        var copy_corner = Int64 (corner.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_corner) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_corner_radius, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_expand_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_expand_margin")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4290182280)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the expand margin to `size` pixels for the specified ``Side``.
    fileprivate final func set_expand_margin (_ margin: Side, _ size: Double) {
        #if true
        
        var copy_margin = Int64 (margin.rawValue)
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_expand_margin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_margin, &copy_size)
        
        #else
        
        var copy_margin = Int64 (margin.rawValue)
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_expand_margin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_expand_margin_all: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_expand_margin_all")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Sets the expand margin to `size` pixels for all sides.
    public final func setExpandMarginAll (size: Double) {
        #if true
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_expand_margin_all, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_expand_margin_all, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_expand_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_expand_margin")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2869120046)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the size of the specified ``Side``'s expand margin.
    fileprivate final func get_expand_margin (_ margin: Side)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_margin = Int64 (margin.rawValue)
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_get_expand_margin, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_margin)
        return _result
        #else
        
        var copy_margin = Int64 (margin.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_expand_margin, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_draw_center: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_draw_center")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_draw_center (_ drawCenter: Bool) {
        #if true
        
        var copy_draw_center = drawCenter
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_draw_center, UnsafeMutableRawPointer (mutating: handle), nil, &copy_draw_center)
        
        #else
        
        var copy_draw_center = drawCenter
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_draw_center) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_draw_center, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_draw_center_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_draw_center_enabled")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_draw_center_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_is_draw_center_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_skew: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_skew")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_skew (_ skew: Vector2) {
        #if true
        
        var copy_skew = skew
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_skew, UnsafeMutableRawPointer (mutating: handle), nil, &copy_skew)
        
        #else
        
        var copy_skew = skew
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_skew) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_skew, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_skew: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_skew")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_skew ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_skew, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shadow_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shadow_color")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shadow_color (_ color: Color) {
        #if true
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_shadow_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_shadow_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shadow_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shadow_color")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shadow_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_shadow_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shadow_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shadow_size")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shadow_size (_ size: Int32) {
        #if true
        
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_shadow_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_shadow_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shadow_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shadow_size")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shadow_size ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_shadow_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shadow_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shadow_offset")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shadow_offset (_ offset: Vector2) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_shadow_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_shadow_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shadow_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shadow_offset")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shadow_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_shadow_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_anti_aliased: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_anti_aliased")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_anti_aliased (_ antiAliased: Bool) {
        #if true
        
        var copy_anti_aliased = antiAliased
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_anti_aliased, UnsafeMutableRawPointer (mutating: handle), nil, &copy_anti_aliased)
        
        #else
        
        var copy_anti_aliased = antiAliased
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_anti_aliased) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_anti_aliased, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_anti_aliased: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_anti_aliased")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_anti_aliased ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_is_anti_aliased, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_aa_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_aa_size")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_aa_size (_ size: Double) {
        #if true
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_aa_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_aa_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_aa_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_aa_size")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_aa_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_aa_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_corner_detail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_corner_detail")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_corner_detail (_ detail: Int32) {
        #if true
        
        var copy_detail: Int = Int (detail)
        
        gi.object_method_bind_ptrcall_v (StyleBoxFlat.method_set_corner_detail, UnsafeMutableRawPointer (mutating: handle), nil, &copy_detail)
        
        #else
        
        var copy_detail: Int = Int (detail)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_detail) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StyleBoxFlat.method_set_corner_detail, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_corner_detail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_corner_detail")
        return withUnsafePointer (to: &StyleBoxFlat.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_corner_detail ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (StyleBoxFlat.method_get_corner_detail, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

