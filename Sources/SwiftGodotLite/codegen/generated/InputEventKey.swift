// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Represents a key on a keyboard being pressed or released.
/// 
/// An input event for keys on a keyboard. Supports key presses, key releases and ``echo`` events. It can also be received in ``Node/_unhandledKeyInput(event:)``.
/// 
/// > Note: Events received from the keyboard usually have all properties set. Event mappings should have only one of the ``keycode``, ``physicalKeycode`` or ``unicode`` set.
/// 
/// When events are compared, properties are checked in the following priority - ``keycode``, ``physicalKeycode`` and ``unicode``. Events with the first matching value will be considered equal.
/// 
open class InputEventKey: InputEventWithModifiers {
    override open class var godotClassName: StringName { "InputEventKey" }
    
    /* Properties */
    
    /// If `true`, the key's state is pressed. If `false`, the key's state is released.
    final public var pressed: Bool {
        get {
            return isPressed ()
        }
        
        set {
            set_pressed (newValue)
        }
        
    }
    
    /// Latin label printed on the key in the current keyboard layout, which corresponds to one of the ``Key`` constants.
    /// 
    /// To get a human-readable representation of the ``InputEventKey``, use `OS.get_keycode_string(event.keycode)` where `event` is the ``InputEventKey``.
    /// 
    final public var keycode: Key {
        get {
            return get_keycode ()
        }
        
        set {
            set_keycode (newValue)
        }
        
    }
    
    /// Represents the physical location of a key on the 101/102-key US QWERTY keyboard, which corresponds to one of the ``Key`` constants.
    /// 
    /// To get a human-readable representation of the ``InputEventKey``, use ``OS/getKeycodeString(code:)`` in combination with ``DisplayServer/keyboardGetKeycodeFromPhysical(keycode:)``:
    /// 
    final public var physicalKeycode: Key {
        get {
            return get_physical_keycode ()
        }
        
        set {
            set_physical_keycode (newValue)
        }
        
    }
    
    /// Represents the localized label printed on the key in the current keyboard layout, which corresponds to one of the ``Key`` constants or any valid Unicode character.
    /// 
    /// For keyboard layouts with a single label on the key, it is equivalent to ``keycode``.
    /// 
    /// To get a human-readable representation of the ``InputEventKey``, use `OS.get_keycode_string(event.key_label)` where `event` is the ``InputEventKey``.
    /// 
    final public var keyLabel: Key {
        get {
            return get_key_label ()
        }
        
        set {
            set_key_label (newValue)
        }
        
    }
    
    /// The key Unicode character code (when relevant), shifted by modifier keys. Unicode character codes for composite characters and complex scripts may not be available unless IME input mode is active. See ``Window/setImeActive(_:)`` for more information.
    final public var unicode: Int64 {
        get {
            return get_unicode ()
        }
        
        set {
            set_unicode (newValue)
        }
        
    }
    
    /// If `true`, the key was already pressed before this event. It means the user is holding the key down.
    final public var echo: Bool {
        get {
            return isEcho ()
        }
        
        set {
            set_echo (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pressed")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pressed (_ pressed: Bool) {
        #if false
        
        var copy_pressed = pressed
        
        gi.object_method_bind_ptrcall_v (InputEventKey.method_set_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pressed)
        
        #else
        
        var copy_pressed = pressed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pressed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventKey.method_set_pressed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_keycode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_keycode")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 888074362)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_keycode (_ keycode: Key) {
        #if false
        
        var copy_keycode = Int64 (keycode.rawValue)
        
        gi.object_method_bind_ptrcall_v (InputEventKey.method_set_keycode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_keycode)
        
        #else
        
        var copy_keycode = Int64 (keycode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_keycode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventKey.method_set_keycode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_keycode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_keycode")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1585896689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_keycode ()-> Key {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (InputEventKey.method_get_keycode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Key (rawValue: _result)!
    }
    
    fileprivate static var method_set_physical_keycode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_physical_keycode")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 888074362)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_physical_keycode (_ physicalKeycode: Key) {
        #if false
        
        var copy_physical_keycode = Int64 (physicalKeycode.rawValue)
        
        gi.object_method_bind_ptrcall_v (InputEventKey.method_set_physical_keycode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_physical_keycode)
        
        #else
        
        var copy_physical_keycode = Int64 (physicalKeycode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_physical_keycode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventKey.method_set_physical_keycode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_physical_keycode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_physical_keycode")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1585896689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_physical_keycode ()-> Key {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (InputEventKey.method_get_physical_keycode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Key (rawValue: _result)!
    }
    
    fileprivate static var method_set_key_label: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_key_label")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 888074362)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_key_label (_ keyLabel: Key) {
        #if false
        
        var copy_key_label = Int64 (keyLabel.rawValue)
        
        gi.object_method_bind_ptrcall_v (InputEventKey.method_set_key_label, UnsafeMutableRawPointer (mutating: handle), nil, &copy_key_label)
        
        #else
        
        var copy_key_label = Int64 (keyLabel.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_key_label) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventKey.method_set_key_label, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_key_label: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_key_label")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1585896689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_key_label ()-> Key {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (InputEventKey.method_get_key_label, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Key (rawValue: _result)!
    }
    
    fileprivate static var method_set_unicode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_unicode")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_unicode (_ unicode: Int64) {
        #if false
        
        var copy_unicode = unicode
        
        gi.object_method_bind_ptrcall_v (InputEventKey.method_set_unicode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_unicode)
        
        #else
        
        var copy_unicode = unicode
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_unicode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventKey.method_set_unicode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_unicode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_unicode")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_unicode ()-> Int64 {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (InputEventKey.method_get_unicode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_echo: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_echo")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_echo (_ echo: Bool) {
        #if false
        
        var copy_echo = echo
        
        gi.object_method_bind_ptrcall_v (InputEventKey.method_set_echo, UnsafeMutableRawPointer (mutating: handle), nil, &copy_echo)
        
        #else
        
        var copy_echo = echo
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_echo) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventKey.method_set_echo, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_keycode_with_modifiers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_keycode_with_modifiers")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1585896689)!
            }
            
        }
        
    }()
    
    /// Returns the Latin keycode combined with modifier keys such as [kbd]Shift[/kbd] or [kbd]Alt[/kbd]. See also ``InputEventWithModifiers``.
    /// 
    /// To get a human-readable representation of the ``InputEventKey`` with modifiers, use `OS.get_keycode_string(event.get_keycode_with_modifiers())` where `event` is the ``InputEventKey``.
    /// 
    public final func getKeycodeWithModifiers ()-> Key {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (InputEventKey.method_get_keycode_with_modifiers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Key (rawValue: _result)!
    }
    
    fileprivate static var method_get_physical_keycode_with_modifiers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_physical_keycode_with_modifiers")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1585896689)!
            }
            
        }
        
    }()
    
    /// Returns the physical keycode combined with modifier keys such as [kbd]Shift[/kbd] or [kbd]Alt[/kbd]. See also ``InputEventWithModifiers``.
    /// 
    /// To get a human-readable representation of the ``InputEventKey`` with modifiers, use `OS.get_keycode_string(event.get_physical_keycode_with_modifiers())` where `event` is the ``InputEventKey``.
    /// 
    public final func getPhysicalKeycodeWithModifiers ()-> Key {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (InputEventKey.method_get_physical_keycode_with_modifiers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Key (rawValue: _result)!
    }
    
    fileprivate static var method_get_key_label_with_modifiers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_key_label_with_modifiers")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1585896689)!
            }
            
        }
        
    }()
    
    /// Returns the localized key label combined with modifier keys such as [kbd]Shift[/kbd] or [kbd]Alt[/kbd]. See also ``InputEventWithModifiers``.
    /// 
    /// To get a human-readable representation of the ``InputEventKey`` with modifiers, use `OS.get_keycode_string(event.get_key_label_with_modifiers())` where `event` is the ``InputEventKey``.
    /// 
    public final func getKeyLabelWithModifiers ()-> Key {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (InputEventKey.method_get_key_label_with_modifiers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Key (rawValue: _result)!
    }
    
    fileprivate static var method_as_text_keycode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("as_text_keycode")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns a ``String`` representation of the event's ``keycode`` and modifiers.
    public final func asTextKeycode ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (InputEventKey.method_as_text_keycode, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_as_text_physical_keycode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("as_text_physical_keycode")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns a ``String`` representation of the event's ``physicalKeycode`` and modifiers.
    public final func asTextPhysicalKeycode ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (InputEventKey.method_as_text_physical_keycode, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_as_text_key_label: GDExtensionMethodBindPtr = {
        let methodName = StringName ("as_text_key_label")
        return withUnsafePointer (to: &InputEventKey.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns a ``String`` representation of the event's ``keyLabel`` and modifiers.
    public final func asTextKeyLabel ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (InputEventKey.method_as_text_key_label, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
}

