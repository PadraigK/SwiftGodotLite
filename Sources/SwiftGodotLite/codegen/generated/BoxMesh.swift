// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Generate an axis-aligned box ``PrimitiveMesh``.
/// 
/// Generate an axis-aligned box ``PrimitiveMesh``.
/// 
/// The box's UV layout is arranged in a 3Ã—2 layout that allows texturing each face individually. To apply the same texture on all faces, change the material's UV property to `Vector3(3, 2, 1)`. This is equivalent to adding `UV *= vec2(3.0, 2.0)` in a vertex shader.
/// 
/// > Note: When using a large textured ``BoxMesh`` (e.g. as a floor), you may stumble upon UV jittering issues depending on the camera angle. To solve this, increase ``subdivideDepth``, ``subdivideHeight`` and ``subdivideWidth`` until you no longer notice UV jittering.
/// 
open class BoxMesh: PrimitiveMesh {
    override open class var godotClassName: StringName { "BoxMesh" }
    
    /* Properties */
    
    /// The box's width, height and depth.
    final public var size: Vector3 {
        get {
            return get_size ()
        }
        
        set {
            set_size (newValue)
        }
        
    }
    
    /// Number of extra edge loops inserted along the X axis.
    final public var subdivideWidth: Int32 {
        get {
            return get_subdivide_width ()
        }
        
        set {
            set_subdivide_width (newValue)
        }
        
    }
    
    /// Number of extra edge loops inserted along the Y axis.
    final public var subdivideHeight: Int32 {
        get {
            return get_subdivide_height ()
        }
        
        set {
            set_subdivide_height (newValue)
        }
        
    }
    
    /// Number of extra edge loops inserted along the Z axis.
    final public var subdivideDepth: Int32 {
        get {
            return get_subdivide_depth ()
        }
        
        set {
            set_subdivide_depth (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_size")
        return withUnsafePointer (to: &BoxMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_size (_ size: Vector3) {
        #if false
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (BoxMesh.method_set_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BoxMesh.method_set_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size")
        return withUnsafePointer (to: &BoxMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_size ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (BoxMesh.method_get_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_subdivide_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_subdivide_width")
        return withUnsafePointer (to: &BoxMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_subdivide_width (_ subdivide: Int32) {
        #if false
        
        var copy_subdivide: Int = Int (subdivide)
        
        gi.object_method_bind_ptrcall_v (BoxMesh.method_set_subdivide_width, UnsafeMutableRawPointer (mutating: handle), nil, &copy_subdivide)
        
        #else
        
        var copy_subdivide: Int = Int (subdivide)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_subdivide) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BoxMesh.method_set_subdivide_width, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_subdivide_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_subdivide_width")
        return withUnsafePointer (to: &BoxMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_subdivide_width ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (BoxMesh.method_get_subdivide_width, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_subdivide_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_subdivide_height")
        return withUnsafePointer (to: &BoxMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_subdivide_height (_ divisions: Int32) {
        #if false
        
        var copy_divisions: Int = Int (divisions)
        
        gi.object_method_bind_ptrcall_v (BoxMesh.method_set_subdivide_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_divisions)
        
        #else
        
        var copy_divisions: Int = Int (divisions)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_divisions) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BoxMesh.method_set_subdivide_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_subdivide_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_subdivide_height")
        return withUnsafePointer (to: &BoxMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_subdivide_height ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (BoxMesh.method_get_subdivide_height, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_subdivide_depth: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_subdivide_depth")
        return withUnsafePointer (to: &BoxMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_subdivide_depth (_ divisions: Int32) {
        #if false
        
        var copy_divisions: Int = Int (divisions)
        
        gi.object_method_bind_ptrcall_v (BoxMesh.method_set_subdivide_depth, UnsafeMutableRawPointer (mutating: handle), nil, &copy_divisions)
        
        #else
        
        var copy_divisions: Int = Int (divisions)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_divisions) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BoxMesh.method_set_subdivide_depth, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_subdivide_depth: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_subdivide_depth")
        return withUnsafePointer (to: &BoxMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_subdivide_depth ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (BoxMesh.method_get_subdivide_depth, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

