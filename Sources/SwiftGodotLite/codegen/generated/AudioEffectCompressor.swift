// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Adds a compressor audio effect to an audio bus.
/// 
/// Reduces sounds that exceed a certain threshold level, smooths out the dynamics and increases the overall volume.
/// 
/// 
/// Dynamic range compressor reduces the level of the sound when the amplitude goes over a certain threshold in Decibels. One of the main uses of a compressor is to increase the dynamic range by clipping as little as possible (when sound goes over 0dB).
/// 
/// Compressor has many uses in the mix:
/// 
/// - In the Master bus to compress the whole output (although an ``AudioEffectLimiter`` is probably better).
/// 
/// - In voice channels to ensure they sound as balanced as possible.
/// 
/// - Sidechained. This can reduce the sound level sidechained with another audio bus for threshold detection. This technique is common in video game mixing to the level of music and SFX while voices are being heard.
/// 
/// - Accentuates transients by using a wider attack, making effects sound more punchy.
/// 
open class AudioEffectCompressor: AudioEffect {
    override open class var godotClassName: StringName { "AudioEffectCompressor" }
    
    /* Properties */
    
    /// The level above which compression is applied to the audio. Value can range from -60 to 0.
    final public var threshold: Double {
        get {
            return get_threshold ()
        }
        
        set {
            set_threshold (newValue)
        }
        
    }
    
    /// Amount of compression applied to the audio once it passes the threshold level. The higher the ratio, the more the loud parts of the audio will be compressed. Value can range from 1 to 48.
    final public var ratio: Double {
        get {
            return get_ratio ()
        }
        
        set {
            set_ratio (newValue)
        }
        
    }
    
    /// Gain applied to the output signal.
    final public var gain: Double {
        get {
            return get_gain ()
        }
        
        set {
            set_gain (newValue)
        }
        
    }
    
    /// Compressor's reaction time when the signal exceeds the threshold, in microseconds. Value can range from 20 to 2000.
    final public var attackUs: Double {
        get {
            return get_attack_us ()
        }
        
        set {
            set_attack_us (newValue)
        }
        
    }
    
    /// Compressor's delay time to stop reducing the signal after the signal level falls below the threshold, in milliseconds. Value can range from 20 to 2000.
    final public var releaseMs: Double {
        get {
            return get_release_ms ()
        }
        
        set {
            set_release_ms (newValue)
        }
        
    }
    
    /// Balance between original signal and effect signal. Value can range from 0 (totally dry) to 1 (totally wet).
    final public var mix: Double {
        get {
            return get_mix ()
        }
        
        set {
            set_mix (newValue)
        }
        
    }
    
    /// Reduce the sound level using another audio bus for threshold detection.
    final public var sidechain: StringName {
        get {
            return get_sidechain ()
        }
        
        set {
            set_sidechain (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_threshold: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_threshold")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_threshold (_ threshold: Double) {
        #if false
        
        var copy_threshold = threshold
        
        gi.object_method_bind_ptrcall_v (AudioEffectCompressor.method_set_threshold, UnsafeMutableRawPointer (mutating: handle), nil, &copy_threshold)
        
        #else
        
        var copy_threshold = threshold
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_threshold) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectCompressor.method_set_threshold, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_threshold: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_threshold")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_threshold ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectCompressor.method_get_threshold, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ratio")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ratio (_ ratio: Double) {
        #if false
        
        var copy_ratio = ratio
        
        gi.object_method_bind_ptrcall_v (AudioEffectCompressor.method_set_ratio, UnsafeMutableRawPointer (mutating: handle), nil, &copy_ratio)
        
        #else
        
        var copy_ratio = ratio
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_ratio) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectCompressor.method_set_ratio, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ratio")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ratio ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectCompressor.method_get_ratio, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gain")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gain (_ gain: Double) {
        #if false
        
        var copy_gain = gain
        
        gi.object_method_bind_ptrcall_v (AudioEffectCompressor.method_set_gain, UnsafeMutableRawPointer (mutating: handle), nil, &copy_gain)
        
        #else
        
        var copy_gain = gain
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_gain) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectCompressor.method_set_gain, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gain")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gain ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectCompressor.method_get_gain, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_attack_us: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_attack_us")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_attack_us (_ attackUs: Double) {
        #if false
        
        var copy_attack_us = attackUs
        
        gi.object_method_bind_ptrcall_v (AudioEffectCompressor.method_set_attack_us, UnsafeMutableRawPointer (mutating: handle), nil, &copy_attack_us)
        
        #else
        
        var copy_attack_us = attackUs
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_attack_us) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectCompressor.method_set_attack_us, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_attack_us: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_attack_us")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_attack_us ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectCompressor.method_get_attack_us, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_release_ms: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_release_ms")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_release_ms (_ releaseMs: Double) {
        #if false
        
        var copy_release_ms = releaseMs
        
        gi.object_method_bind_ptrcall_v (AudioEffectCompressor.method_set_release_ms, UnsafeMutableRawPointer (mutating: handle), nil, &copy_release_ms)
        
        #else
        
        var copy_release_ms = releaseMs
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_release_ms) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectCompressor.method_set_release_ms, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_release_ms: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_release_ms")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_release_ms ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectCompressor.method_get_release_ms, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mix")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mix (_ mix: Double) {
        #if false
        
        var copy_mix = mix
        
        gi.object_method_bind_ptrcall_v (AudioEffectCompressor.method_set_mix, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mix)
        
        #else
        
        var copy_mix = mix
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mix) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectCompressor.method_set_mix, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mix")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mix ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectCompressor.method_get_mix, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sidechain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sidechain")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sidechain (_ sidechain: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (AudioEffectCompressor.method_set_sidechain, UnsafeMutableRawPointer (mutating: handle), nil, &sidechain.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &sidechain.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectCompressor.method_set_sidechain, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sidechain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sidechain")
        return withUnsafePointer (to: &AudioEffectCompressor.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sidechain ()-> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall (AudioEffectCompressor.method_get_sidechain, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
}

