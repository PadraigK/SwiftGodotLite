// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A material for ``CanvasItem``s.
/// 
/// ``CanvasItemMaterial``s provide a means of modifying the textures associated with a CanvasItem. They specialize in describing blend and lighting behaviors for textures. Use a ``ShaderMaterial`` to more fully customize a material's interactions with a ``CanvasItem``.
open class CanvasItemMaterial: Material {
    override open class var godotClassName: StringName { "CanvasItemMaterial" }
    public enum BlendMode: Int64 {
        /// Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value.
        case mix = 0 // BLEND_MODE_MIX
        /// Additive blending mode.
        case add = 1 // BLEND_MODE_ADD
        /// Subtractive blending mode.
        case sub = 2 // BLEND_MODE_SUB
        /// Multiplicative blending mode.
        case mul = 3 // BLEND_MODE_MUL
        /// Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value.
        case premultAlpha = 4 // BLEND_MODE_PREMULT_ALPHA
    }
    
    public enum LightMode: Int64 {
        /// Render the material using both light and non-light sensitive material properties.
        case normal = 0 // LIGHT_MODE_NORMAL
        /// Render the material as if there were no light.
        case unshaded = 1 // LIGHT_MODE_UNSHADED
        /// Render the material as if there were only light.
        case lightOnly = 2 // LIGHT_MODE_LIGHT_ONLY
    }
    
    
    /* Properties */
    
    /// The manner in which a material's rendering is applied to underlying textures.
    final public var blendMode: CanvasItemMaterial.BlendMode {
        get {
            return get_blend_mode ()
        }
        
        set {
            set_blend_mode (newValue)
        }
        
    }
    
    /// The manner in which material reacts to lighting.
    final public var lightMode: CanvasItemMaterial.LightMode {
        get {
            return get_light_mode ()
        }
        
        set {
            set_light_mode (newValue)
        }
        
    }
    
    /// If `true`, enable spritesheet-based animation features when assigned to ``GPUParticles2D`` and ``CPUParticles2D`` nodes. The ``ParticleProcessMaterial/animSpeedMax`` or ``CPUParticles2D/animSpeedMax`` should also be set to a positive value for the animation to play.
    /// 
    /// This property (and other `particles_anim_*` properties that depend on it) has no effect on other types of nodes.
    /// 
    final public var particlesAnimation: Bool {
        get {
            return get_particles_animation ()
        }
        
        set {
            set_particles_animation (newValue)
        }
        
    }
    
    /// The number of columns in the spritesheet assigned as ``Texture2D`` for a ``GPUParticles2D`` or ``CPUParticles2D``.
    /// 
    /// > Note: This property is only used and visible in the editor if ``particlesAnimation`` is `true`.
    /// 
    final public var particlesAnimHFrames: Int32 {
        get {
            return get_particles_anim_h_frames ()
        }
        
        set {
            set_particles_anim_h_frames (newValue)
        }
        
    }
    
    /// The number of rows in the spritesheet assigned as ``Texture2D`` for a ``GPUParticles2D`` or ``CPUParticles2D``.
    /// 
    /// > Note: This property is only used and visible in the editor if ``particlesAnimation`` is `true`.
    /// 
    final public var particlesAnimVFrames: Int32 {
        get {
            return get_particles_anim_v_frames ()
        }
        
        set {
            set_particles_anim_v_frames (newValue)
        }
        
    }
    
    /// If `true`, the particles animation will loop.
    /// 
    /// > Note: This property is only used and visible in the editor if ``particlesAnimation`` is `true`.
    /// 
    final public var particlesAnimLoop: Bool {
        get {
            return get_particles_anim_loop ()
        }
        
        set {
            set_particles_anim_loop (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_blend_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_blend_mode")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1786054936)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_blend_mode (_ blendMode: CanvasItemMaterial.BlendMode) {
        #if false
        
        var copy_blend_mode = Int64 (blendMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (CanvasItemMaterial.method_set_blend_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_blend_mode)
        
        #else
        
        var copy_blend_mode = Int64 (blendMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_blend_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CanvasItemMaterial.method_set_blend_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_blend_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_blend_mode")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3318684035)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_blend_mode ()-> CanvasItemMaterial.BlendMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (CanvasItemMaterial.method_get_blend_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return CanvasItemMaterial.BlendMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_light_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_light_mode")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 628074070)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_light_mode (_ lightMode: CanvasItemMaterial.LightMode) {
        #if false
        
        var copy_light_mode = Int64 (lightMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (CanvasItemMaterial.method_set_light_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_light_mode)
        
        #else
        
        var copy_light_mode = Int64 (lightMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_light_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CanvasItemMaterial.method_set_light_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_light_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_light_mode")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3863292382)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_light_mode ()-> CanvasItemMaterial.LightMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (CanvasItemMaterial.method_get_light_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return CanvasItemMaterial.LightMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_particles_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_particles_animation")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_particles_animation (_ particlesAnim: Bool) {
        #if false
        
        var copy_particles_anim = particlesAnim
        
        gi.object_method_bind_ptrcall_v (CanvasItemMaterial.method_set_particles_animation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_particles_anim)
        
        #else
        
        var copy_particles_anim = particlesAnim
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_particles_anim) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CanvasItemMaterial.method_set_particles_animation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_particles_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_particles_animation")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_particles_animation ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CanvasItemMaterial.method_get_particles_animation, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_particles_anim_h_frames: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_particles_anim_h_frames")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_particles_anim_h_frames (_ frames: Int32) {
        #if false
        
        var copy_frames: Int = Int (frames)
        
        gi.object_method_bind_ptrcall_v (CanvasItemMaterial.method_set_particles_anim_h_frames, UnsafeMutableRawPointer (mutating: handle), nil, &copy_frames)
        
        #else
        
        var copy_frames: Int = Int (frames)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_frames) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CanvasItemMaterial.method_set_particles_anim_h_frames, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_particles_anim_h_frames: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_particles_anim_h_frames")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_particles_anim_h_frames ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (CanvasItemMaterial.method_get_particles_anim_h_frames, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_particles_anim_v_frames: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_particles_anim_v_frames")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_particles_anim_v_frames (_ frames: Int32) {
        #if false
        
        var copy_frames: Int = Int (frames)
        
        gi.object_method_bind_ptrcall_v (CanvasItemMaterial.method_set_particles_anim_v_frames, UnsafeMutableRawPointer (mutating: handle), nil, &copy_frames)
        
        #else
        
        var copy_frames: Int = Int (frames)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_frames) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CanvasItemMaterial.method_set_particles_anim_v_frames, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_particles_anim_v_frames: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_particles_anim_v_frames")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_particles_anim_v_frames ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (CanvasItemMaterial.method_get_particles_anim_v_frames, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_particles_anim_loop: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_particles_anim_loop")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_particles_anim_loop (_ loop: Bool) {
        #if false
        
        var copy_loop = loop
        
        gi.object_method_bind_ptrcall_v (CanvasItemMaterial.method_set_particles_anim_loop, UnsafeMutableRawPointer (mutating: handle), nil, &copy_loop)
        
        #else
        
        var copy_loop = loop
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_loop) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CanvasItemMaterial.method_set_particles_anim_loop, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_particles_anim_loop: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_particles_anim_loop")
        return withUnsafePointer (to: &CanvasItemMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_particles_anim_loop ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CanvasItemMaterial.method_get_particles_anim_loop, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

