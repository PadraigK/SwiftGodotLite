// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Holds font source data and prerendered glyph cache, imported from a dynamic or a bitmap font.
/// 
/// ``FontFile`` contains a set of glyphs to represent Unicode characters imported from a font file, as well as a cache of rasterized glyphs, and a set of fallback ``Font``s to use.
/// 
/// Use ``FontVariation`` to access specific OpenType variation of the font, create simulated bold / slanted version, and draw lines of text.
/// 
/// For more complex text processing, use ``FontVariation`` in conjunction with ``TextLine`` or ``TextParagraph``.
/// 
/// Supported font formats:
/// 
/// - Dynamic font importer: TrueType (.ttf), TrueType collection (.ttc), OpenType (.otf), OpenType collection (.otc), WOFF (.woff), WOFF2 (.woff2), Type 1 (.pfb, .pfm).
/// 
/// - Bitmap font importer: AngelCode BMFont (.fnt, .font), text and binary (version 3) format variants.
/// 
/// - Monospace image font importer: All supported image formats.
/// 
/// > Note: A character is a symbol that represents an item (letter, digit etc.) in an abstract way.
/// 
/// > Note: A glyph is a bitmap or a shape used to draw one or more characters in a context-dependent manner. Glyph indices are bound to the specific font data source.
/// 
/// > Note: If none of the font data sources contain glyphs for a character used in a string, the character in question will be replaced with a box displaying its hexadecimal code.
/// 
open class FontFile: Font {
    override open class var godotClassName: StringName { "FontFile" }
    
    /* Properties */
    
    /// Contents of the dynamic font source file.
    final public var data: PackedByteArray {
        get {
            return get_data ()
        }
        
        set {
            set_data (newValue)
        }
        
    }
    
    /// If set to `true`, generate mipmaps for the font textures.
    final public var generateMipmaps: Bool {
        get {
            return get_generate_mipmaps ()
        }
        
        set {
            set_generate_mipmaps (newValue)
        }
        
    }
    
    /// Font anti-aliasing mode.
    final public var antialiasing: TextServer.FontAntialiasing {
        get {
            return get_antialiasing ()
        }
        
        set {
            set_antialiasing (newValue)
        }
        
    }
    
    /// Font family name.
    final public var fontName: String {
        get {
            return getFontName ()
        }
        
        set {
            set_font_name (newValue)
        }
        
    }
    
    /// Font style name.
    final public var styleName: String {
        get {
            return getFontStyleName ()
        }
        
        set {
            set_font_style_name (newValue)
        }
        
    }
    
    /// Font style flags, see ``TextServer.FontStyle``.
    final public var fontStyle: TextServer.FontStyle {
        get {
            return getFontStyle ()
        }
        
        set {
            set_font_style (newValue)
        }
        
    }
    
    /// Weight (boldness) of the font. A value in the `100...999` range, normal font weight is `400`, bold font weight is `700`.
    final public var fontWeight: Int32 {
        get {
            return getFontWeight ()
        }
        
        set {
            set_font_weight (newValue)
        }
        
    }
    
    /// Font stretch amount, compared to a normal width. A percentage value between `50%` and `200%`.
    final public var fontStretch: Int32 {
        get {
            return getFontStretch ()
        }
        
        set {
            set_font_stretch (newValue)
        }
        
    }
    
    /// Font glyph subpixel positioning mode. Subpixel positioning provides shaper text and better kerning for smaller font sizes, at the cost of higher memory usage and lower font rasterization speed. Use ``TextServer/SubpixelPositioning/auto`` to automatically enable it based on the font size.
    final public var subpixelPositioning: TextServer.SubpixelPositioning {
        get {
            return get_subpixel_positioning ()
        }
        
        set {
            set_subpixel_positioning (newValue)
        }
        
    }
    
    /// If set to `true`, glyphs of all sizes are rendered using single multichannel signed distance field (MSDF) generated from the dynamic font vector data. Since this approach does not rely on rasterizing the font every time its size changes, this allows for resizing the font in real-time without any performance penalty. Text will also not look grainy for ``Control``s that are scaled down (or for ``Label3D``s viewed from a long distance). As a downside, font hinting is not available with MSDF. The lack of font hinting may result in less crisp and less readable fonts at small sizes.
    /// 
    /// > Note: If using font outlines, ``msdfPixelRange`` must be set to at least _twice_ the size of the largest font outline.
    /// 
    /// > Note: MSDF font rendering does not render glyphs with overlapping shapes correctly. Overlapping shapes are not valid per the OpenType standard, but are still commonly found in many font files, especially those converted by Google Fonts. To avoid issues with overlapping glyphs, consider downloading the font file directly from the type foundry instead of relying on Google Fonts.
    /// 
    final public var multichannelSignedDistanceField: Bool {
        get {
            return is_multichannel_signed_distance_field ()
        }
        
        set {
            set_multichannel_signed_distance_field (newValue)
        }
        
    }
    
    /// The width of the range around the shape between the minimum and maximum representable signed distance. If using font outlines, ``msdfPixelRange`` must be set to at least _twice_ the size of the largest font outline. The default ``msdfPixelRange`` value of `16` allows outline sizes up to `8` to look correct.
    final public var msdfPixelRange: Int32 {
        get {
            return get_msdf_pixel_range ()
        }
        
        set {
            set_msdf_pixel_range (newValue)
        }
        
    }
    
    /// Source font size used to generate MSDF textures. Higher values allow for more precision, but are slower to render and require more memory. Only increase this value if you notice a visible lack of precision in glyph rendering.
    final public var msdfSize: Int32 {
        get {
            return get_msdf_size ()
        }
        
        set {
            set_msdf_size (newValue)
        }
        
    }
    
    /// If set to `true`, system fonts can be automatically used as fallbacks.
    final public var allowSystemFallback: Bool {
        get {
            return is_allow_system_fallback ()
        }
        
        set {
            set_allow_system_fallback (newValue)
        }
        
    }
    
    /// If set to `true`, auto-hinting is supported and preferred over font built-in hinting. Used by dynamic fonts only (MSDF fonts don't support hinting).
    final public var forceAutohinter: Bool {
        get {
            return is_force_autohinter ()
        }
        
        set {
            set_force_autohinter (newValue)
        }
        
    }
    
    /// Font hinting mode. Used by dynamic fonts only.
    final public var hinting: TextServer.Hinting {
        get {
            return get_hinting ()
        }
        
        set {
            set_hinting (newValue)
        }
        
    }
    
    /// Font oversampling factor. If set to `0.0`, the global oversampling factor is used instead. Used by dynamic fonts only (MSDF fonts ignore oversampling).
    final public var oversampling: Double {
        get {
            return get_oversampling ()
        }
        
        set {
            set_oversampling (newValue)
        }
        
    }
    
    /// Font size, used only for the bitmap fonts.
    final public var fixedSize: Int32 {
        get {
            return get_fixed_size ()
        }
        
        set {
            set_fixed_size (newValue)
        }
        
    }
    
    /// Scaling mode, used only for the bitmap fonts with ``fixedSize`` greater than zero.
    final public var fixedSizeScaleMode: TextServer.FixedSizeScaleMode {
        get {
            return get_fixed_size_scale_mode ()
        }
        
        set {
            set_fixed_size_scale_mode (newValue)
        }
        
    }
    
    /// Font OpenType feature set override.
    final public var opentypeFeatureOverrides: GDictionary {
        get {
            return get_opentype_feature_overrides ()
        }
        
        set {
            set_opentype_feature_overrides (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_load_bitmap_font: GDExtensionMethodBindPtr = {
        let methodName = StringName ("load_bitmap_font")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Loads an AngelCode BMFont (.fnt, .font) bitmap font from file `path`.
    /// 
    /// > Warning: This method should only be used in the editor or in cases when you need to load external fonts at run-time, such as fonts located at the `user://` directory.
    /// 
    public final func loadBitmapFont (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_load_bitmap_font, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_load_bitmap_font, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_load_dynamic_font: GDExtensionMethodBindPtr = {
        let methodName = StringName ("load_dynamic_font")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Loads a TrueType (.ttf), OpenType (.otf), WOFF (.woff), WOFF2 (.woff2) or Type 1 (.pfb, .pfm) dynamic font from file `path`.
    /// 
    /// > Warning: This method should only be used in the editor or in cases when you need to load external fonts at run-time, such as fonts located at the `user://` directory.
    /// 
    public final func loadDynamicFont (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_load_dynamic_font, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_load_dynamic_font, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_data")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2971499966)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_data (_ data: PackedByteArray) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_data, UnsafeMutableRawPointer (mutating: handle), nil, &data.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &data.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_data, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_data")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2362200018)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_data ()-> PackedByteArray {
        let _result: PackedByteArray = PackedByteArray ()
        gi.object_method_bind_ptrcall (FontFile.method_get_data, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_font_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_name")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_name (_ name: String) {
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_font_name, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_font_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_font_style_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_style_name")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_style_name (_ name: String) {
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_font_style_name, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_font_style_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_font_style: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_style")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 918070724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_style (_ style: TextServer.FontStyle) {
        #if true
        
        var copy_style = style
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_font_style, UnsafeMutableRawPointer (mutating: handle), nil, &copy_style)
        
        #else
        
        var copy_style = style
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_style) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_font_style, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_font_weight: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_weight")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_weight (_ weight: Int32) {
        #if true
        
        var copy_weight: Int = Int (weight)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_font_weight, UnsafeMutableRawPointer (mutating: handle), nil, &copy_weight)
        
        #else
        
        var copy_weight: Int = Int (weight)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_weight) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_font_weight, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_font_stretch: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_stretch")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_stretch (_ stretch: Int32) {
        #if true
        
        var copy_stretch: Int = Int (stretch)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_font_stretch, UnsafeMutableRawPointer (mutating: handle), nil, &copy_stretch)
        
        #else
        
        var copy_stretch: Int = Int (stretch)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_stretch) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_font_stretch, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_antialiasing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_antialiasing")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1669900)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_antialiasing (_ antialiasing: TextServer.FontAntialiasing) {
        #if true
        
        var copy_antialiasing = Int64 (antialiasing.rawValue)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_antialiasing, UnsafeMutableRawPointer (mutating: handle), nil, &copy_antialiasing)
        
        #else
        
        var copy_antialiasing = Int64 (antialiasing.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_antialiasing) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_antialiasing, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_antialiasing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_antialiasing")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4262718649)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_antialiasing ()-> TextServer.FontAntialiasing {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (FontFile.method_get_antialiasing, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.FontAntialiasing (rawValue: _result)!
    }
    
    fileprivate static var method_set_generate_mipmaps: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_generate_mipmaps")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_generate_mipmaps (_ generateMipmaps: Bool) {
        #if true
        
        var copy_generate_mipmaps = generateMipmaps
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_generate_mipmaps, UnsafeMutableRawPointer (mutating: handle), nil, &copy_generate_mipmaps)
        
        #else
        
        var copy_generate_mipmaps = generateMipmaps
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_generate_mipmaps) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_generate_mipmaps, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_generate_mipmaps: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_generate_mipmaps")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_generate_mipmaps ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (FontFile.method_get_generate_mipmaps, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_multichannel_signed_distance_field: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_multichannel_signed_distance_field")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_multichannel_signed_distance_field (_ msdf: Bool) {
        #if true
        
        var copy_msdf = msdf
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_multichannel_signed_distance_field, UnsafeMutableRawPointer (mutating: handle), nil, &copy_msdf)
        
        #else
        
        var copy_msdf = msdf
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_msdf) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_multichannel_signed_distance_field, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_multichannel_signed_distance_field: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_multichannel_signed_distance_field")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_multichannel_signed_distance_field ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (FontFile.method_is_multichannel_signed_distance_field, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_msdf_pixel_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_msdf_pixel_range")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_msdf_pixel_range (_ msdfPixelRange: Int32) {
        #if true
        
        var copy_msdf_pixel_range: Int = Int (msdfPixelRange)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_msdf_pixel_range, UnsafeMutableRawPointer (mutating: handle), nil, &copy_msdf_pixel_range)
        
        #else
        
        var copy_msdf_pixel_range: Int = Int (msdfPixelRange)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_msdf_pixel_range) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_msdf_pixel_range, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_msdf_pixel_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_msdf_pixel_range")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_msdf_pixel_range ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (FontFile.method_get_msdf_pixel_range, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_msdf_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_msdf_size")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_msdf_size (_ msdfSize: Int32) {
        #if true
        
        var copy_msdf_size: Int = Int (msdfSize)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_msdf_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_msdf_size)
        
        #else
        
        var copy_msdf_size: Int = Int (msdfSize)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_msdf_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_msdf_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_msdf_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_msdf_size")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_msdf_size ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (FontFile.method_get_msdf_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fixed_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fixed_size")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fixed_size (_ fixedSize: Int32) {
        #if true
        
        var copy_fixed_size: Int = Int (fixedSize)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_fixed_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fixed_size)
        
        #else
        
        var copy_fixed_size: Int = Int (fixedSize)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fixed_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_fixed_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fixed_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fixed_size")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fixed_size ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (FontFile.method_get_fixed_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fixed_size_scale_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fixed_size_scale_mode")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1660989956)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fixed_size_scale_mode (_ fixedSizeScaleMode: TextServer.FixedSizeScaleMode) {
        #if true
        
        var copy_fixed_size_scale_mode = Int64 (fixedSizeScaleMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_fixed_size_scale_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fixed_size_scale_mode)
        
        #else
        
        var copy_fixed_size_scale_mode = Int64 (fixedSizeScaleMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fixed_size_scale_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_fixed_size_scale_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fixed_size_scale_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fixed_size_scale_mode")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 753873478)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fixed_size_scale_mode ()-> TextServer.FixedSizeScaleMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (FontFile.method_get_fixed_size_scale_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.FixedSizeScaleMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_allow_system_fallback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_allow_system_fallback")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_allow_system_fallback (_ allowSystemFallback: Bool) {
        #if true
        
        var copy_allow_system_fallback = allowSystemFallback
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_allow_system_fallback, UnsafeMutableRawPointer (mutating: handle), nil, &copy_allow_system_fallback)
        
        #else
        
        var copy_allow_system_fallback = allowSystemFallback
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_allow_system_fallback) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_allow_system_fallback, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_allow_system_fallback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_allow_system_fallback")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_allow_system_fallback ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (FontFile.method_is_allow_system_fallback, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_force_autohinter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_force_autohinter")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_force_autohinter (_ forceAutohinter: Bool) {
        #if true
        
        var copy_force_autohinter = forceAutohinter
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_force_autohinter, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force_autohinter)
        
        #else
        
        var copy_force_autohinter = forceAutohinter
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force_autohinter) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_force_autohinter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_force_autohinter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_force_autohinter")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_force_autohinter ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (FontFile.method_is_force_autohinter, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_hinting: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_hinting")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1827459492)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_hinting (_ hinting: TextServer.Hinting) {
        #if true
        
        var copy_hinting = Int64 (hinting.rawValue)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_hinting, UnsafeMutableRawPointer (mutating: handle), nil, &copy_hinting)
        
        #else
        
        var copy_hinting = Int64 (hinting.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_hinting) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_hinting, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_hinting: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_hinting")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3683214614)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_hinting ()-> TextServer.Hinting {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (FontFile.method_get_hinting, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.Hinting (rawValue: _result)!
    }
    
    fileprivate static var method_set_subpixel_positioning: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_subpixel_positioning")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4225742182)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_subpixel_positioning (_ subpixelPositioning: TextServer.SubpixelPositioning) {
        #if true
        
        var copy_subpixel_positioning = Int64 (subpixelPositioning.rawValue)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_subpixel_positioning, UnsafeMutableRawPointer (mutating: handle), nil, &copy_subpixel_positioning)
        
        #else
        
        var copy_subpixel_positioning = Int64 (subpixelPositioning.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_subpixel_positioning) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_subpixel_positioning, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_subpixel_positioning: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_subpixel_positioning")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1069238588)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_subpixel_positioning ()-> TextServer.SubpixelPositioning {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (FontFile.method_get_subpixel_positioning, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.SubpixelPositioning (rawValue: _result)!
    }
    
    fileprivate static var method_set_oversampling: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_oversampling")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_oversampling (_ oversampling: Double) {
        #if true
        
        var copy_oversampling = oversampling
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_oversampling, UnsafeMutableRawPointer (mutating: handle), nil, &copy_oversampling)
        
        #else
        
        var copy_oversampling = oversampling
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_oversampling) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_oversampling, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_oversampling: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_oversampling")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_oversampling ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (FontFile.method_get_oversampling, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_cache_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cache_count")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns number of the font cache entries.
    public final func getCacheCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (FontFile.method_get_cache_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_clear_cache: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_cache")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Removes all font cache entries.
    public final func clearCache () {
        gi.object_method_bind_ptrcall (FontFile.method_clear_cache, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_remove_cache: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_cache")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes specified font cache entry.
    public final func removeCache (cacheIndex: Int32) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_remove_cache, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_remove_cache, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_size_cache_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size_cache_list")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 663333327)!
            }
            
        }
        
    }()
    
    /// Returns list of the font sizes in the cache. Each size is ``Vector2i`` with font size and outline size.
    public final func getSizeCacheList (cacheIndex: Int32)-> VariantCollection<Vector2i> {
        var _result: Int64 = 0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_size_cache_list, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index)
        return VariantCollection<Vector2i>(content: _result)
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_get_size_cache_list, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return VariantCollection<Vector2i>(content: _result)
        }
        
        #endif
    }
    
    fileprivate static var method_clear_size_cache: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_size_cache")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes all font sizes from the cache entry
    public final func clearSizeCache (cacheIndex: Int32) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_clear_size_cache, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_clear_size_cache, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_size_cache: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_size_cache")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2311374912)!
            }
            
        }
        
    }()
    
    /// Removes specified font size from the cache entry.
    public final func removeSizeCache (cacheIndex: Int32, size: Vector2i) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (FontFile.method_remove_size_cache, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_remove_size_cache, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_variation_coordinates: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_variation_coordinates")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 64545446)!
            }
            
        }
        
    }()
    
    /// Sets variation coordinates for the specified font cache entry. See ``Font/getSupportedVariationList()`` for more info.
    public final func setVariationCoordinates (cacheIndex: Int32, variationCoordinates: GDictionary) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_variation_coordinates, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &variationCoordinates.content)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &variationCoordinates.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_set_variation_coordinates, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_variation_coordinates: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_variation_coordinates")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3485342025)!
            }
            
        }
        
    }()
    
    /// Returns variation coordinates for the specified font cache entry. See ``Font/getSupportedVariationList()`` for more info.
    public final func getVariationCoordinates (cacheIndex: Int32)-> GDictionary {
        let _result: GDictionary = GDictionary ()
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_variation_coordinates, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_cache_index)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_get_variation_coordinates, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_embolden: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_embolden")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Sets embolden strength, if is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
    public final func setEmbolden (cacheIndex: Int32, strength: Double) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_strength = strength
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_embolden, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_strength)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_strength = strength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_strength) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_set_embolden, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_embolden: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_embolden")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns embolden strength, if is not equal to zero, emboldens the font outlines. Negative values reduce the outline thickness.
    public final func getEmbolden (cacheIndex: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_embolden, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_get_embolden, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_transform")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 30160968)!
            }
            
        }
        
    }()
    
    /// Sets 2D transform, applied to the font outlines, can be used for slanting, flipping and rotating glyphs.
    public final func setTransform (cacheIndex: Int32, transform: Transform2D) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_transform = transform
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_transform, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_transform)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_transform) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_set_transform, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transform")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3836996910)!
            }
            
        }
        
    }()
    
    /// Returns 2D transform, applied to the font outlines, can be used for slanting, flipping and rotating glyphs.
    public final func getTransform (cacheIndex: Int32)-> Transform2D {
        var _result: Transform2D = Transform2D ()
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_transform, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_get_transform, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_extra_spacing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_extra_spacing")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 62942285)!
            }
            
        }
        
    }()
    
    /// Sets the spacing for `spacing` (see ``TextServer.SpacingType``) to `value` in pixels (not relative to the font size).
    public final func setExtraSpacing (cacheIndex: Int32, spacing: TextServer.SpacingType, value: Int) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_spacing = Int64 (spacing.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_extra_spacing, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_spacing, &copy_value)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_spacing = Int64 (spacing.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_spacing) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_value) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_set_extra_spacing, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_extra_spacing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_extra_spacing")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1924257185)!
            }
            
        }
        
    }()
    
    /// Returns spacing for `spacing` (see ``TextServer.SpacingType``) in pixels (not relative to the font size).
    public final func getExtraSpacing (cacheIndex: Int32, spacing: TextServer.SpacingType)-> Int {
        var _result: Int = 0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_spacing = Int64 (spacing.rawValue)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_extra_spacing, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_spacing)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_spacing = Int64 (spacing.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_spacing) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_get_extra_spacing, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_face_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_face_index")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets an active face index in the TrueType / OpenType collection.
    public final func setFaceIndex (cacheIndex: Int32, faceIndex: Int) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_face_index = faceIndex
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_face_index, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_face_index)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_face_index = faceIndex
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_face_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_set_face_index, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_face_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_face_index")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns an active face index in the TrueType / OpenType collection.
    public final func getFaceIndex (cacheIndex: Int32)-> Int {
        var _result: Int = 0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_face_index, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_get_face_index, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_cache_ascent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cache_ascent")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3506521499)!
            }
            
        }
        
    }()
    
    /// Sets the font ascent (number of pixels above the baseline).
    public final func setCacheAscent (cacheIndex: Int32, size: Int32, ascent: Double) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_ascent = ascent
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_cache_ascent, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_ascent)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_ascent = ascent
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_ascent) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_set_cache_ascent, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_cache_ascent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cache_ascent")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3085491603)!
            }
            
        }
        
    }()
    
    /// Returns the font ascent (number of pixels above the baseline).
    public final func getCacheAscent (cacheIndex: Int32, size: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_cache_ascent, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_get_cache_ascent, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_cache_descent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cache_descent")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3506521499)!
            }
            
        }
        
    }()
    
    /// Sets the font descent (number of pixels below the baseline).
    public final func setCacheDescent (cacheIndex: Int32, size: Int32, descent: Double) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_descent = descent
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_cache_descent, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_descent)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_descent = descent
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_descent) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_set_cache_descent, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_cache_descent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cache_descent")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3085491603)!
            }
            
        }
        
    }()
    
    /// Returns the font descent (number of pixels below the baseline).
    public final func getCacheDescent (cacheIndex: Int32, size: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_cache_descent, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_get_cache_descent, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_cache_underline_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cache_underline_position")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3506521499)!
            }
            
        }
        
    }()
    
    /// Sets pixel offset of the underline below the baseline.
    public final func setCacheUnderlinePosition (cacheIndex: Int32, size: Int32, underlinePosition: Double) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_underline_position = underlinePosition
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_cache_underline_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_underline_position)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_underline_position = underlinePosition
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_underline_position) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_set_cache_underline_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_cache_underline_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cache_underline_position")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3085491603)!
            }
            
        }
        
    }()
    
    /// Returns pixel offset of the underline below the baseline.
    public final func getCacheUnderlinePosition (cacheIndex: Int32, size: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_cache_underline_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_get_cache_underline_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_cache_underline_thickness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cache_underline_thickness")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3506521499)!
            }
            
        }
        
    }()
    
    /// Sets thickness of the underline in pixels.
    public final func setCacheUnderlineThickness (cacheIndex: Int32, size: Int32, underlineThickness: Double) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_underline_thickness = underlineThickness
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_cache_underline_thickness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_underline_thickness)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_underline_thickness = underlineThickness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_underline_thickness) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_set_cache_underline_thickness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_cache_underline_thickness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cache_underline_thickness")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3085491603)!
            }
            
        }
        
    }()
    
    /// Returns thickness of the underline in pixels.
    public final func getCacheUnderlineThickness (cacheIndex: Int32, size: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_cache_underline_thickness, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_get_cache_underline_thickness, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_cache_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cache_scale")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3506521499)!
            }
            
        }
        
    }()
    
    /// Sets scaling factor of the color bitmap font.
    public final func setCacheScale (cacheIndex: Int32, size: Int32, scale: Double) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_scale = scale
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_cache_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_scale)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_scale = scale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_scale) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_set_cache_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_cache_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cache_scale")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3085491603)!
            }
            
        }
        
    }()
    
    /// Returns scaling factor of the color bitmap font.
    public final func getCacheScale (cacheIndex: Int32, size: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_cache_scale, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_get_cache_scale, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_count")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1987661582)!
            }
            
        }
        
    }()
    
    /// Returns number of textures used by font cache entry.
    public final func getTextureCount (cacheIndex: Int32, size: Vector2i)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_texture_count, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_get_texture_count, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_clear_textures: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_textures")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2311374912)!
            }
            
        }
        
    }()
    
    /// Removes all textures from font cache entry.
    /// 
    /// > Note: This function will not remove glyphs associated with the texture, use ``removeGlyph(cacheIndex:size:glyph:)`` to remove them manually.
    /// 
    public final func clearTextures (cacheIndex: Int32, size: Vector2i) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (FontFile.method_clear_textures, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_clear_textures, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_texture")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2328951467)!
            }
            
        }
        
    }()
    
    /// Removes specified texture from the cache entry.
    /// 
    /// > Note: This function will not remove glyphs associated with the texture. Remove them manually using ``removeGlyph(cacheIndex:size:glyph:)``.
    /// 
    public final func removeTexture (cacheIndex: Int32, size: Vector2i, textureIndex: Int32) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_texture_index: Int = Int (textureIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_remove_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_texture_index)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_texture_index: Int = Int (textureIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_texture_index) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_remove_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_texture_image: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_image")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4157974066)!
            }
            
        }
        
    }()
    
    /// Sets font cache texture image.
    public final func setTextureImage (cacheIndex: Int32, size: Vector2i, textureIndex: Int32, image: Image?) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_texture_index: Int = Int (textureIndex)
        var copy_image_handle = image?.handle
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_texture_image, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_texture_index, &copy_image_handle)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_texture_index: Int = Int (textureIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_texture_index) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: image?.handle) { p3 in
                    _args.append (image == nil ? nil : p3)
        
                        gi.object_method_bind_ptrcall (FontFile.method_set_texture_image, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_image: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_image")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3878418953)!
            }
            
        }
        
    }()
    
    /// Returns a copy of the font cache texture image.
    public final func getTextureImage (cacheIndex: Int32, size: Vector2i, textureIndex: Int32)-> Image? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_texture_index: Int = Int (textureIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_texture_image, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size, &copy_texture_index)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_texture_index: Int = Int (textureIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_texture_index) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_get_texture_image, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_texture_offsets: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_offsets")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2849993437)!
            }
            
        }
        
    }()
    
    /// Sets array containing glyph packing data.
    public final func setTextureOffsets (cacheIndex: Int32, size: Vector2i, textureIndex: Int32, offset: PackedInt32Array) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_texture_index: Int = Int (textureIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_texture_offsets, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_texture_index, &offset.content)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_texture_index: Int = Int (textureIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_texture_index) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &offset.content) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (FontFile.method_set_texture_offsets, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_offsets: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_offsets")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3703444828)!
            }
            
        }
        
    }()
    
    /// Returns a copy of the array containing glyph packing data.
    public final func getTextureOffsets (cacheIndex: Int32, size: Vector2i, textureIndex: Int32)-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_texture_index: Int = Int (textureIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_texture_offsets, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_cache_index, &copy_size, &copy_texture_index)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_texture_index: Int = Int (textureIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_texture_index) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_get_texture_offsets, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_glyph_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glyph_list")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 681709689)!
            }
            
        }
        
    }()
    
    /// Returns list of rendered glyphs in the cache entry.
    public final func getGlyphList (cacheIndex: Int32, size: Vector2i)-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_glyph_list, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_cache_index, &copy_size)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_get_glyph_list, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_clear_glyphs: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_glyphs")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2311374912)!
            }
            
        }
        
    }()
    
    /// Removes all rendered glyphs information from the cache entry.
    /// 
    /// > Note: This function will not remove textures associated with the glyphs, use ``removeTexture(cacheIndex:size:textureIndex:)`` to remove them manually.
    /// 
    public final func clearGlyphs (cacheIndex: Int32, size: Vector2i) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (FontFile.method_clear_glyphs, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_clear_glyphs, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_glyph: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_glyph")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2328951467)!
            }
            
        }
        
    }()
    
    /// Removes specified rendered glyph information from the cache entry.
    /// 
    /// > Note: This function will not remove textures associated with the glyphs, use ``removeTexture(cacheIndex:size:textureIndex:)`` to remove them manually.
    /// 
    public final func removeGlyph (cacheIndex: Int32, size: Vector2i, glyph: Int32) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_remove_glyph, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_glyph)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_remove_glyph, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_glyph_advance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glyph_advance")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 947991729)!
            }
            
        }
        
    }()
    
    /// Sets glyph advance (offset of the next glyph).
    /// 
    /// > Note: Advance for glyphs outlines is the same as the base glyph advance and is not saved.
    /// 
    public final func setGlyphAdvance (cacheIndex: Int32, size: Int32, glyph: Int32, advance: Vector2) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_glyph: Int = Int (glyph)
        var copy_advance = advance
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_glyph_advance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_glyph, &copy_advance)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_glyph: Int = Int (glyph)
        var copy_advance = advance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_advance) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (FontFile.method_set_glyph_advance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_glyph_advance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glyph_advance")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1601573536)!
            }
            
        }
        
    }()
    
    /// Returns glyph advance (offset of the next glyph).
    /// 
    /// > Note: Advance for glyphs outlines is the same as the base glyph advance and is not saved.
    /// 
    public final func getGlyphAdvance (cacheIndex: Int32, size: Int32, glyph: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_glyph: Int = Int (glyph)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_glyph_advance, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size, &copy_glyph)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_glyph: Int = Int (glyph)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_get_glyph_advance, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_glyph_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glyph_offset")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 921719850)!
            }
            
        }
        
    }()
    
    /// Sets glyph offset from the baseline.
    public final func setGlyphOffset (cacheIndex: Int32, size: Vector2i, glyph: Int32, offset: Vector2) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_glyph_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_glyph, &copy_offset)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_offset) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (FontFile.method_set_glyph_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_glyph_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glyph_offset")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3205412300)!
            }
            
        }
        
    }()
    
    /// Returns glyph offset from the baseline.
    public final func getGlyphOffset (cacheIndex: Int32, size: Vector2i, glyph: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_glyph_offset, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size, &copy_glyph)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_get_glyph_offset, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_glyph_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glyph_size")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 921719850)!
            }
            
        }
        
    }()
    
    /// Sets glyph size.
    public final func setGlyphSize (cacheIndex: Int32, size: Vector2i, glyph: Int32, glSize: Vector2) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var copy_gl_size = glSize
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_glyph_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_glyph, &copy_gl_size)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var copy_gl_size = glSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_gl_size) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (FontFile.method_set_glyph_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_glyph_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glyph_size")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3205412300)!
            }
            
        }
        
    }()
    
    /// Returns glyph size.
    public final func getGlyphSize (cacheIndex: Int32, size: Vector2i, glyph: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_glyph_size, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size, &copy_glyph)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_get_glyph_size, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_glyph_uv_rect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glyph_uv_rect")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3821620992)!
            }
            
        }
        
    }()
    
    /// Sets rectangle in the cache texture containing the glyph.
    public final func setGlyphUvRect (cacheIndex: Int32, size: Vector2i, glyph: Int32, uvRect: Rect2) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var copy_uv_rect = uvRect
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_glyph_uv_rect, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_glyph, &copy_uv_rect)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var copy_uv_rect = uvRect
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_uv_rect) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (FontFile.method_set_glyph_uv_rect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_glyph_uv_rect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glyph_uv_rect")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927917900)!
            }
            
        }
        
    }()
    
    /// Returns rectangle in the cache texture containing the glyph.
    public final func getGlyphUvRect (cacheIndex: Int32, size: Vector2i, glyph: Int32)-> Rect2 {
        var _result: Rect2 = Rect2 ()
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_glyph_uv_rect, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size, &copy_glyph)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_get_glyph_uv_rect, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_glyph_texture_idx: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glyph_texture_idx")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 355564111)!
            }
            
        }
        
    }()
    
    /// Sets index of the cache texture containing the glyph.
    public final func setGlyphTextureIdx (cacheIndex: Int32, size: Vector2i, glyph: Int32, textureIdx: Int32) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var copy_texture_idx: Int = Int (textureIdx)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_glyph_texture_idx, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_glyph, &copy_texture_idx)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var copy_texture_idx: Int = Int (textureIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_texture_idx) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (FontFile.method_set_glyph_texture_idx, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_glyph_texture_idx: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glyph_texture_idx")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1629411054)!
            }
            
        }
        
    }()
    
    /// Returns index of the cache texture containing the glyph.
    public final func getGlyphTextureIdx (cacheIndex: Int32, size: Vector2i, glyph: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_glyph_texture_idx, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size, &copy_glyph)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_glyph: Int = Int (glyph)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_glyph) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_get_glyph_texture_idx, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_kerning_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_kerning_list")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2345056839)!
            }
            
        }
        
    }()
    
    /// Returns list of the kerning overrides.
    public final func getKerningList (cacheIndex: Int32, size: Int32)-> VariantCollection<Vector2i> {
        var _result: Int64 = 0
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_kerning_list, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size)
        return VariantCollection<Vector2i>(content: _result)
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_get_kerning_list, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return VariantCollection<Vector2i>(content: _result)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_clear_kerning_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_kerning_map")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Removes all kerning overrides.
    public final func clearKerningMap (cacheIndex: Int32, size: Int32) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_clear_kerning_map, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_clear_kerning_map, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_kerning: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_kerning")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3930204747)!
            }
            
        }
        
    }()
    
    /// Removes kerning override for the pair of glyphs.
    public final func removeKerning (cacheIndex: Int32, size: Int32, glyphPair: Vector2i) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_glyph_pair = glyphPair
        
        gi.object_method_bind_ptrcall_v (FontFile.method_remove_kerning, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_glyph_pair)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_glyph_pair = glyphPair
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_glyph_pair) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_remove_kerning, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_kerning: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_kerning")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3182200918)!
            }
            
        }
        
    }()
    
    /// Sets kerning for the pair of glyphs.
    public final func setKerning (cacheIndex: Int32, size: Int32, glyphPair: Vector2i, kerning: Vector2) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_glyph_pair = glyphPair
        var copy_kerning = kerning
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_kerning, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_glyph_pair, &copy_kerning)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_glyph_pair = glyphPair
        var copy_kerning = kerning
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_glyph_pair) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_kerning) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (FontFile.method_set_kerning, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_kerning: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_kerning")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1611912865)!
            }
            
        }
        
    }()
    
    /// Returns kerning for the pair of glyphs.
    public final func getKerning (cacheIndex: Int32, size: Int32, glyphPair: Vector2i)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_glyph_pair = glyphPair
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_kerning, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_index, &copy_size, &copy_glyph_pair)
        return _result
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size: Int = Int (size)
        var copy_glyph_pair = glyphPair
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_glyph_pair) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_get_kerning, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_render_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("render_range")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 355564111)!
            }
            
        }
        
    }()
    
    /// Renders the range of characters to the font cache texture.
    public final func renderRange (cacheIndex: Int32, size: Vector2i, start: Int64, end: Int64) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_start = start
        var copy_end = end
        
        gi.object_method_bind_ptrcall_v (FontFile.method_render_range, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_start, &copy_end)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_start = start
        var copy_end = end
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_start) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_end) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (FontFile.method_render_range, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_render_glyph: GDExtensionMethodBindPtr = {
        let methodName = StringName ("render_glyph")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2328951467)!
            }
            
        }
        
    }()
    
    /// Renders specified glyph to the font cache texture.
    public final func renderGlyph (cacheIndex: Int32, size: Vector2i, index: Int32) {
        #if true
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_index: Int = Int (index)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_render_glyph, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cache_index, &copy_size, &copy_index)
        
        #else
        
        var copy_cache_index: Int = Int (cacheIndex)
        var copy_size = size
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cache_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_index) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_render_glyph, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_language_support_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_language_support_override")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2678287736)!
            }
            
        }
        
    }()
    
    /// Adds override for ``Font/isLanguageSupported(language:)``.
    public final func setLanguageSupportOverride (language: String, supported: Bool) {
        #if true
        
        let gstr_language = GString (language)
        var copy_supported = supported
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_language_support_override, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_language.content, &copy_supported)
        
        #else
        
        let gstr_language = GString (language)
        var copy_supported = supported
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_language.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_supported) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_set_language_support_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_language_support_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_language_support_override")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Returns `true` if support override is enabled for the `language`.
    public final func getLanguageSupportOverride (language: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_language = GString (language)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_language_support_override, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_language.content)
        return _result
        #else
        
        let gstr_language = GString (language)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_language.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_get_language_support_override, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_remove_language_support_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_language_support_override")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Remove language support override.
    public final func removeLanguageSupportOverride (language: String) {
        #if true
        
        let gstr_language = GString (language)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_remove_language_support_override, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_language.content)
        
        #else
        
        let gstr_language = GString (language)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_language.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_remove_language_support_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_language_support_overrides: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_language_support_overrides")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns list of language support overrides.
    public final func getLanguageSupportOverrides ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (FontFile.method_get_language_support_overrides, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_script_support_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_script_support_override")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2678287736)!
            }
            
        }
        
    }()
    
    /// Adds override for ``Font/isScriptSupported(script:)``.
    public final func setScriptSupportOverride (script: String, supported: Bool) {
        #if true
        
        let gstr_script = GString (script)
        var copy_supported = supported
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_script_support_override, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_script.content, &copy_supported)
        
        #else
        
        let gstr_script = GString (script)
        var copy_supported = supported
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_script.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_supported) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_set_script_support_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_script_support_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_script_support_override")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Returns `true` if support override is enabled for the `script`.
    public final func getScriptSupportOverride (script: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_script = GString (script)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_script_support_override, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_script.content)
        return _result
        #else
        
        let gstr_script = GString (script)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_script.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_get_script_support_override, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_remove_script_support_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_script_support_override")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Removes script support override.
    public final func removeScriptSupportOverride (script: String) {
        #if true
        
        let gstr_script = GString (script)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_remove_script_support_override, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_script.content)
        
        #else
        
        let gstr_script = GString (script)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_script.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_remove_script_support_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_script_support_overrides: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_script_support_overrides")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns list of script support overrides.
    public final func getScriptSupportOverrides ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (FontFile.method_get_script_support_overrides, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_opentype_feature_overrides: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_opentype_feature_overrides")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155329257)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_opentype_feature_overrides (_ overrides: GDictionary) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (FontFile.method_set_opentype_feature_overrides, UnsafeMutableRawPointer (mutating: handle), nil, &overrides.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &overrides.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FontFile.method_set_opentype_feature_overrides, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_opentype_feature_overrides: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_opentype_feature_overrides")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_opentype_feature_overrides ()-> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall (FontFile.method_get_opentype_feature_overrides, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_glyph_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glyph_index")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 864943070)!
            }
            
        }
        
    }()
    
    /// Returns the glyph index of a `char`, optionally modified by the `variationSelector`.
    public final func getGlyphIndex (size: Int32, char: Int64, variationSelector: Int64)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_size: Int = Int (size)
        var copy_char = char
        var copy_variation_selector = variationSelector
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_glyph_index, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_size, &copy_char, &copy_variation_selector)
        return _result
        #else
        
        var copy_size: Int = Int (size)
        var copy_char = char
        var copy_variation_selector = variationSelector
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_char) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_variation_selector) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (FontFile.method_get_glyph_index, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_char_from_glyph_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_char_from_glyph_index")
        return withUnsafePointer (to: &FontFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3175239445)!
            }
            
        }
        
    }()
    
    /// Returns character code associated with `glyphIndex`, or `0` if `glyphIndex` is invalid. See ``getGlyphIndex(size:char:variationSelector:)``.
    public final func getCharFromGlyphIndex (size: Int32, glyphIndex: Int32)-> Int64 {
        var _result: Int64 = 0
        #if true
        
        var copy_size: Int = Int (size)
        var copy_glyph_index: Int = Int (glyphIndex)
        
        gi.object_method_bind_ptrcall_v (FontFile.method_get_char_from_glyph_index, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_size, &copy_glyph_index)
        return _result
        #else
        
        var copy_size: Int = Int (size)
        var copy_glyph_index: Int = Int (glyphIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_glyph_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FontFile.method_get_char_from_glyph_index, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
}

