// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 2D agent used to pathfind to a position while avoiding obstacles.
/// 
/// A 2D agent used to pathfind to a position while avoiding static and dynamic obstacles. The calculation can be used by the parent node to dynamically move it along the path. Requires navigation data to work correctly.
/// 
/// Dynamic obstacles are avoided using RVO collision avoidance. Avoidance is computed before physics, so the pathfinding information can be used safely in the physics step.
/// 
/// > Note: After setting the ``targetPosition`` property, the ``getNextPathPosition()`` method must be used once every physics frame to update the internal path logic of the navigation agent. The vector position it returns should be used as the next movement position for the agent's parent node.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``pathChanged``
/// - ``targetReached``
/// - ``waypointReached``
/// - ``linkReached``
/// - ``navigationFinished``
/// - ``velocityComputed``
open class NavigationAgent2D: Node {
    override open class var godotClassName: StringName { "NavigationAgent2D" }
    
    /* Properties */
    
    /// If set, a new navigation path from the current agent position to the ``targetPosition`` is requested from the NavigationServer.
    final public var targetPosition: Vector2 {
        get {
            return get_target_position ()
        }
        
        set {
            set_target_position (newValue)
        }
        
    }
    
    /// The distance threshold before a path point is considered to be reached. This allows agents to not have to hit a path point on the path exactly, but only to reach its general area. If this value is set too high, the NavigationAgent will skip points on the path, which can lead to leaving the navigation mesh. If this value is set too low, the NavigationAgent will be stuck in a repath loop because it will constantly overshoot or undershoot the distance to the next point on each physics frame update.
    final public var pathDesiredDistance: Double {
        get {
            return get_path_desired_distance ()
        }
        
        set {
            set_path_desired_distance (newValue)
        }
        
    }
    
    /// The distance threshold before the final target point is considered to be reached. This allows agents to not have to hit the point of the final target exactly, but only to reach its general area. If this value is set too low, the NavigationAgent will be stuck in a repath loop because it will constantly overshoot or undershoot the distance to the final target point on each physics frame update.
    final public var targetDesiredDistance: Double {
        get {
            return get_target_desired_distance ()
        }
        
        set {
            set_target_desired_distance (newValue)
        }
        
    }
    
    /// The maximum distance the agent is allowed away from the ideal path to the final position. This can happen due to trying to avoid collisions. When the maximum distance is exceeded, it recalculates the ideal path.
    final public var pathMaxDistance: Double {
        get {
            return get_path_max_distance ()
        }
        
        set {
            set_path_max_distance (newValue)
        }
        
    }
    
    /// A bitfield determining which navigation layers of navigation regions this agent will use to calculate a path. Changing it during runtime will clear the current navigation path and generate a new one, according to the new navigation layers.
    final public var navigationLayers: UInt32 {
        get {
            return get_navigation_layers ()
        }
        
        set {
            set_navigation_layers (newValue)
        }
        
    }
    
    /// The pathfinding algorithm used in the path query.
    final public var pathfindingAlgorithm: NavigationPathQueryParameters2D.PathfindingAlgorithm {
        get {
            return get_pathfinding_algorithm ()
        }
        
        set {
            set_pathfinding_algorithm (newValue)
        }
        
    }
    
    /// The path postprocessing applied to the raw path corridor found by the ``pathfindingAlgorithm``.
    final public var pathPostprocessing: NavigationPathQueryParameters2D.PathPostProcessing {
        get {
            return get_path_postprocessing ()
        }
        
        set {
            set_path_postprocessing (newValue)
        }
        
    }
    
    /// Additional information to return with the navigation path.
    final public var pathMetadataFlags: NavigationPathQueryParameters2D.PathMetadataFlags {
        get {
            return get_path_metadata_flags ()
        }
        
        set {
            set_path_metadata_flags (newValue)
        }
        
    }
    
    /// If `true` the agent is registered for an RVO avoidance callback on the ``NavigationServer2D``. When ``velocity`` is used and the processing is completed a `safe_velocity` Vector2 is received with a signal connection to [signal velocity_computed]. Avoidance processing with many registered agents has a significant performance cost and should only be enabled on agents that currently require it.
    final public var avoidanceEnabled: Bool {
        get {
            return get_avoidance_enabled ()
        }
        
        set {
            set_avoidance_enabled (newValue)
        }
        
    }
    
    /// Sets the new wanted velocity for the agent. The avoidance simulation will try to fulfill this velocity if possible but will modify it to avoid collision with other agents and obstacles. When an agent is teleported to a new position, use ``setVelocityForced(velocity:)`` as well to reset the internal simulation velocity.
    final public var velocity: Vector2 {
        get {
            return get_velocity ()
        }
        
        set {
            set_velocity (newValue)
        }
        
    }
    
    /// The radius of the avoidance agent. This is the "body" of the avoidance agent and not the avoidance maneuver starting radius (which is controlled by ``neighborDistance``).
    /// 
    /// Does not affect normal pathfinding. To change an actor's pathfinding radius bake ``NavigationMesh`` resources with a different ``NavigationMesh/agentRadius`` property and use different navigation maps for each actor size.
    /// 
    final public var radius: Double {
        get {
            return get_radius ()
        }
        
        set {
            set_radius (newValue)
        }
        
    }
    
    /// The distance to search for other agents.
    final public var neighborDistance: Double {
        get {
            return get_neighbor_distance ()
        }
        
        set {
            set_neighbor_distance (newValue)
        }
        
    }
    
    /// The maximum number of neighbors for the agent to consider.
    final public var maxNeighbors: Int32 {
        get {
            return get_max_neighbors ()
        }
        
        set {
            set_max_neighbors (newValue)
        }
        
    }
    
    /// The minimal amount of time for which this agent's velocities, that are computed with the collision avoidance algorithm, are safe with respect to other agents. The larger the number, the sooner the agent will respond to other agents, but less freedom in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive.
    final public var timeHorizonAgents: Double {
        get {
            return get_time_horizon_agents ()
        }
        
        set {
            set_time_horizon_agents (newValue)
        }
        
    }
    
    /// The minimal amount of time for which this agent's velocities, that are computed with the collision avoidance algorithm, are safe with respect to static avoidance obstacles. The larger the number, the sooner the agent will respond to static avoidance obstacles, but less freedom in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive.
    final public var timeHorizonObstacles: Double {
        get {
            return get_time_horizon_obstacles ()
        }
        
        set {
            set_time_horizon_obstacles (newValue)
        }
        
    }
    
    /// The maximum speed that an agent can move.
    final public var maxSpeed: Double {
        get {
            return get_max_speed ()
        }
        
        set {
            set_max_speed (newValue)
        }
        
    }
    
    /// A bitfield determining the avoidance layers for this NavigationAgent. Other agents with a matching bit on the ``avoidanceMask`` will avoid this agent.
    final public var avoidanceLayers: UInt32 {
        get {
            return get_avoidance_layers ()
        }
        
        set {
            set_avoidance_layers (newValue)
        }
        
    }
    
    /// A bitfield determining what other avoidance agents and obstacles this NavigationAgent will avoid when a bit matches at least one of their ``avoidanceLayers``.
    final public var avoidanceMask: UInt32 {
        get {
            return get_avoidance_mask ()
        }
        
        set {
            set_avoidance_mask (newValue)
        }
        
    }
    
    /// The agent does not adjust the velocity for other agents that would match the ``avoidanceMask`` but have a lower ``avoidancePriority``. This in turn makes the other agents with lower priority adjust their velocities even more to avoid collision with this agent.
    final public var avoidancePriority: Double {
        get {
            return get_avoidance_priority ()
        }
        
        set {
            set_avoidance_priority (newValue)
        }
        
    }
    
    /// If `true` shows debug visuals for this agent.
    final public var debugEnabled: Bool {
        get {
            return get_debug_enabled ()
        }
        
        set {
            set_debug_enabled (newValue)
        }
        
    }
    
    /// If `true` uses the defined ``debugPathCustomColor`` for this agent instead of global color.
    final public var debugUseCustom: Bool {
        get {
            return get_debug_use_custom ()
        }
        
        set {
            set_debug_use_custom (newValue)
        }
        
    }
    
    /// If ``debugUseCustom`` is `true` uses this color for this agent instead of global color.
    final public var debugPathCustomColor: Color {
        get {
            return get_debug_path_custom_color ()
        }
        
        set {
            set_debug_path_custom_color (newValue)
        }
        
    }
    
    /// If ``debugUseCustom`` is `true` uses this rasterized point size for rendering path points for this agent instead of global point size.
    final public var debugPathCustomPointSize: Double {
        get {
            return get_debug_path_custom_point_size ()
        }
        
        set {
            set_debug_path_custom_point_size (newValue)
        }
        
    }
    
    /// If ``debugUseCustom`` is `true` uses this line width for rendering paths for this agent instead of global line width.
    final public var debugPathCustomLineWidth: Double {
        get {
            return get_debug_path_custom_line_width ()
        }
        
        set {
            set_debug_path_custom_line_width (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rid")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of this agent on the ``NavigationServer2D``.
    public final func getRid ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_rid, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_avoidance_enabled")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_avoidance_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_avoidance_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_avoidance_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_avoidance_enabled")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_avoidance_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_avoidance_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_path_desired_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_path_desired_distance")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_path_desired_distance (_ desiredDistance: Double) {
        #if false
        
        var copy_desired_distance = desiredDistance
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_path_desired_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_desired_distance)
        
        #else
        
        var copy_desired_distance = desiredDistance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_desired_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_path_desired_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_path_desired_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_path_desired_distance")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_path_desired_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_path_desired_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_target_desired_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_target_desired_distance")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_target_desired_distance (_ desiredDistance: Double) {
        #if false
        
        var copy_desired_distance = desiredDistance
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_target_desired_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_desired_distance)
        
        #else
        
        var copy_desired_distance = desiredDistance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_desired_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_target_desired_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_target_desired_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_target_desired_distance")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_target_desired_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_target_desired_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_radius")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_radius (_ radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_radius")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_neighbor_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_neighbor_distance")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_neighbor_distance (_ neighborDistance: Double) {
        #if false
        
        var copy_neighbor_distance = neighborDistance
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_neighbor_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_neighbor_distance)
        
        #else
        
        var copy_neighbor_distance = neighborDistance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_neighbor_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_neighbor_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_neighbor_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_neighbor_distance")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_neighbor_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_neighbor_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_max_neighbors: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_max_neighbors")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_max_neighbors (_ maxNeighbors: Int32) {
        #if false
        
        var copy_max_neighbors: Int = Int (maxNeighbors)
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_max_neighbors, UnsafeMutableRawPointer (mutating: handle), nil, &copy_max_neighbors)
        
        #else
        
        var copy_max_neighbors: Int = Int (maxNeighbors)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_max_neighbors) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_max_neighbors, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_max_neighbors: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_max_neighbors")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_max_neighbors ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_max_neighbors, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_time_horizon_agents: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_time_horizon_agents")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_time_horizon_agents (_ timeHorizon: Double) {
        #if false
        
        var copy_time_horizon = timeHorizon
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_time_horizon_agents, UnsafeMutableRawPointer (mutating: handle), nil, &copy_time_horizon)
        
        #else
        
        var copy_time_horizon = timeHorizon
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_time_horizon) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_time_horizon_agents, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_time_horizon_agents: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_time_horizon_agents")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_time_horizon_agents ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_time_horizon_agents, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_time_horizon_obstacles: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_time_horizon_obstacles")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_time_horizon_obstacles (_ timeHorizon: Double) {
        #if false
        
        var copy_time_horizon = timeHorizon
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_time_horizon_obstacles, UnsafeMutableRawPointer (mutating: handle), nil, &copy_time_horizon)
        
        #else
        
        var copy_time_horizon = timeHorizon
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_time_horizon) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_time_horizon_obstacles, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_time_horizon_obstacles: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_time_horizon_obstacles")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_time_horizon_obstacles ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_time_horizon_obstacles, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_max_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_max_speed")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_max_speed (_ maxSpeed: Double) {
        #if false
        
        var copy_max_speed = maxSpeed
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_max_speed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_max_speed)
        
        #else
        
        var copy_max_speed = maxSpeed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_max_speed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_max_speed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_max_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_max_speed")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_max_speed ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_max_speed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_path_max_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_path_max_distance")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_path_max_distance (_ maxSpeed: Double) {
        #if false
        
        var copy_max_speed = maxSpeed
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_path_max_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_max_speed)
        
        #else
        
        var copy_max_speed = maxSpeed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_max_speed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_path_max_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_path_max_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_path_max_distance")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_path_max_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_path_max_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_navigation_layers")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_navigation_layers (_ navigationLayers: UInt32) {
        #if false
        
        var copy_navigation_layers: Int = Int (navigationLayers)
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_navigation_layers, UnsafeMutableRawPointer (mutating: handle), nil, &copy_navigation_layers)
        
        #else
        
        var copy_navigation_layers: Int = Int (navigationLayers)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_navigation_layers) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_navigation_layers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_navigation_layers")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_navigation_layers ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_navigation_layers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_navigation_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_navigation_layer_value")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``navigationLayers`` bitmask, given a `layerNumber` between 1 and 32.
    public final func setNavigationLayerValue (layerNumber: Int32, value: Bool) {
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_navigation_layer_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_number, &copy_value)
        
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_navigation_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_navigation_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_navigation_layer_value")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``navigationLayers`` bitmask is enabled, given a `layerNumber` between 1 and 32.
    public final func getNavigationLayerValue (layerNumber: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_get_navigation_layer_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_number)
        return _result
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_navigation_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_pathfinding_algorithm: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pathfinding_algorithm")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2783519915)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pathfinding_algorithm (_ pathfindingAlgorithm: NavigationPathQueryParameters2D.PathfindingAlgorithm) {
        #if false
        
        var copy_pathfinding_algorithm = Int64 (pathfindingAlgorithm.rawValue)
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_pathfinding_algorithm, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pathfinding_algorithm)
        
        #else
        
        var copy_pathfinding_algorithm = Int64 (pathfindingAlgorithm.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pathfinding_algorithm) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_pathfinding_algorithm, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_pathfinding_algorithm: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pathfinding_algorithm")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3000421146)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pathfinding_algorithm ()-> NavigationPathQueryParameters2D.PathfindingAlgorithm {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_pathfinding_algorithm, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return NavigationPathQueryParameters2D.PathfindingAlgorithm (rawValue: _result)!
    }
    
    fileprivate static var method_set_path_postprocessing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_path_postprocessing")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2864409082)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_path_postprocessing (_ pathPostprocessing: NavigationPathQueryParameters2D.PathPostProcessing) {
        #if false
        
        var copy_path_postprocessing = Int64 (pathPostprocessing.rawValue)
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_path_postprocessing, UnsafeMutableRawPointer (mutating: handle), nil, &copy_path_postprocessing)
        
        #else
        
        var copy_path_postprocessing = Int64 (pathPostprocessing.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_path_postprocessing) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_path_postprocessing, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_path_postprocessing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_path_postprocessing")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3798118993)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_path_postprocessing ()-> NavigationPathQueryParameters2D.PathPostProcessing {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_path_postprocessing, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return NavigationPathQueryParameters2D.PathPostProcessing (rawValue: _result)!
    }
    
    fileprivate static var method_set_path_metadata_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_path_metadata_flags")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 24274129)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_path_metadata_flags (_ flags: NavigationPathQueryParameters2D.PathMetadataFlags) {
        #if false
        
        var copy_flags = flags
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_path_metadata_flags, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flags)
        
        #else
        
        var copy_flags = flags
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flags) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_path_metadata_flags, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_path_metadata_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_path_metadata_flags")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 488152976)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_path_metadata_flags ()-> NavigationPathQueryParameters2D.PathMetadataFlags {
        var _result: NavigationPathQueryParameters2D.PathMetadataFlags = NavigationPathQueryParameters2D.PathMetadataFlags ()
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_path_metadata_flags, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_navigation_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_navigation_map")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Sets the ``RID`` of the navigation map this NavigationAgent node should use and also updates the `agent` on the NavigationServer.
    public final func setNavigationMap (_ navigationMap: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_navigation_map, UnsafeMutableRawPointer (mutating: handle), nil, &navigationMap.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &navigationMap.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_navigation_map, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_navigation_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_navigation_map")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the ``RID`` of the navigation map for this NavigationAgent node. This function returns always the map set on the NavigationAgent node and not the map of the abstract agent on the NavigationServer. If the agent map is changed directly with the NavigationServer API the NavigationAgent node will not be aware of the map change. Use ``setNavigationMap(_:)`` to change the navigation map for the NavigationAgent and also update the agent on the NavigationServer.
    public final func getNavigationMap ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_navigation_map, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_target_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_target_position")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_target_position (_ position: Vector2) {
        #if false
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_target_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_target_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_target_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_target_position")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_target_position ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_target_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_next_path_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_next_path_position")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1497962370)!
            }
            
        }
        
    }()
    
    /// Returns the next position in global coordinates that can be moved to, making sure that there are no static objects in the way. If the agent does not have a navigation path, it will return the position of the agent's parent. The use of this function once every physics frame is required to update the internal path logic of the NavigationAgent.
    public final func getNextPathPosition ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_next_path_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_velocity_forced: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_velocity_forced")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Replaces the internal velocity in the collision avoidance simulation with `velocity`. When an agent is teleported to a new position this function should be used in the same frame. If called frequently this function can get agents stuck.
    public final func setVelocityForced (velocity: Vector2) {
        #if false
        
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_velocity_forced, UnsafeMutableRawPointer (mutating: handle), nil, &copy_velocity)
        
        #else
        
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_velocity_forced, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_velocity")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_velocity (_ velocity: Vector2) {
        #if false
        
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_velocity)
        
        #else
        
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_velocity")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1497962370)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_velocity ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_distance_to_target: GDExtensionMethodBindPtr = {
        let methodName = StringName ("distance_to_target")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the distance to the target position, using the agent's global position. The user must set ``targetPosition`` in order for this to be accurate.
    public final func distanceToTarget ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_distance_to_target, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_current_navigation_result: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_navigation_result")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166799483)!
            }
            
        }
        
    }()
    
    /// Returns the path query result for the path the agent is currently following.
    public final func getCurrentNavigationResult ()-> NavigationPathQueryResult2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_current_navigation_result, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_current_navigation_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_navigation_path")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2961356807)!
            }
            
        }
        
    }()
    
    /// Returns this agent's current path from start to finish in global coordinates. The path only updates when the target position is changed or the agent requires a repath. The path array is not intended to be used in direct path movement as the agent has its own internal path logic that would get corrupted by changing the path array manually. Use the intended ``getNextPathPosition()`` once every physics frame to receive the next path point for the agents movement as this function also updates the internal path logic.
    public final func getCurrentNavigationPath ()-> PackedVector2Array {
        let _result: PackedVector2Array = PackedVector2Array ()
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_current_navigation_path, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_current_navigation_path_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_navigation_path_index")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns which index the agent is currently on in the navigation path's ``PackedVector2Array``.
    public final func getCurrentNavigationPathIndex ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_current_navigation_path_index, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_target_reached: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_target_reached")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns true if ``targetPosition`` is reached. It may not always be possible to reach the target position. It should always be possible to reach the final position though. See ``getFinalPosition()``.
    public final func isTargetReached ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_is_target_reached, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_target_reachable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_target_reachable")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if ``getFinalPosition()`` is within ``targetDesiredDistance`` of the ``targetPosition``.
    public final func isTargetReachable ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_is_target_reachable, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_navigation_finished: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_navigation_finished")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the end of the currently loaded navigation path has been reached.
    /// 
    /// > Note: While true prefer to stop calling update functions like ``getNextPathPosition()``. This avoids jittering the standing agent due to calling repeated path updates.
    /// 
    public final func isNavigationFinished ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_is_navigation_finished, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_final_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_final_position")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1497962370)!
            }
            
        }
        
    }()
    
    /// Returns the reachable final position of the current navigation path in global coordinates. This position can change if the agent needs to update the navigation path which makes the agent emit the [signal path_changed] signal.
    public final func getFinalPosition ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_final_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_avoidance_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_avoidance_layers")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_avoidance_layers (_ layers: UInt32) {
        #if false
        
        var copy_layers: Int = Int (layers)
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_avoidance_layers, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layers)
        
        #else
        
        var copy_layers: Int = Int (layers)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layers) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_avoidance_layers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_avoidance_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_avoidance_layers")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_avoidance_layers ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_avoidance_layers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_avoidance_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_avoidance_mask")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_avoidance_mask (_ mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_avoidance_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_avoidance_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_avoidance_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_avoidance_mask")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_avoidance_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_avoidance_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_avoidance_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_avoidance_layer_value")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``avoidanceLayers`` bitmask, given a `layerNumber` between 1 and 32.
    public final func setAvoidanceLayerValue (layerNumber: Int32, value: Bool) {
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_avoidance_layer_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_number, &copy_value)
        
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_avoidance_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_avoidance_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_avoidance_layer_value")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``avoidanceLayers`` bitmask is enabled, given a `layerNumber` between 1 and 32.
    public final func getAvoidanceLayerValue (layerNumber: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_get_avoidance_layer_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_number)
        return _result
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_avoidance_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_avoidance_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_avoidance_mask_value")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified mask in the ``avoidanceMask`` bitmask, given a `maskNumber` between 1 and 32.
    public final func setAvoidanceMaskValue (maskNumber: Int32, value: Bool) {
        #if false
        
        var copy_mask_number: Int = Int (maskNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_avoidance_mask_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mask_number, &copy_value)
        
        #else
        
        var copy_mask_number: Int = Int (maskNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mask_number) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_avoidance_mask_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_avoidance_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_avoidance_mask_value")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified mask of the ``avoidanceMask`` bitmask is enabled, given a `maskNumber` between 1 and 32.
    public final func getAvoidanceMaskValue (maskNumber: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_mask_number: Int = Int (maskNumber)
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_get_avoidance_mask_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_mask_number)
        return _result
        #else
        
        var copy_mask_number: Int = Int (maskNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_mask_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_avoidance_mask_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_avoidance_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_avoidance_priority")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_avoidance_priority (_ priority: Double) {
        #if false
        
        var copy_priority = priority
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_avoidance_priority, UnsafeMutableRawPointer (mutating: handle), nil, &copy_priority)
        
        #else
        
        var copy_priority = priority
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_priority) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_avoidance_priority, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_avoidance_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_avoidance_priority")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_avoidance_priority ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_avoidance_priority, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_debug_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_debug_enabled")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_debug_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_debug_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_debug_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_debug_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_debug_enabled")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_debug_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_debug_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_debug_use_custom: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_debug_use_custom")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_debug_use_custom (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_debug_use_custom, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_debug_use_custom, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_debug_use_custom: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_debug_use_custom")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_debug_use_custom ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_debug_use_custom, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_debug_path_custom_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_debug_path_custom_color")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_debug_path_custom_color (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_debug_path_custom_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_debug_path_custom_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_debug_path_custom_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_debug_path_custom_color")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_debug_path_custom_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_debug_path_custom_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_debug_path_custom_point_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_debug_path_custom_point_size")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_debug_path_custom_point_size (_ pointSize: Double) {
        #if false
        
        var copy_point_size = pointSize
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_debug_path_custom_point_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_point_size)
        
        #else
        
        var copy_point_size = pointSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_point_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_debug_path_custom_point_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_debug_path_custom_point_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_debug_path_custom_point_size")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_debug_path_custom_point_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_debug_path_custom_point_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_debug_path_custom_line_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_debug_path_custom_line_width")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_debug_path_custom_line_width (_ lineWidth: Double) {
        #if false
        
        var copy_line_width = lineWidth
        
        gi.object_method_bind_ptrcall_v (NavigationAgent2D.method_set_debug_path_custom_line_width, UnsafeMutableRawPointer (mutating: handle), nil, &copy_line_width)
        
        #else
        
        var copy_line_width = lineWidth
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_line_width) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationAgent2D.method_set_debug_path_custom_line_width, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_debug_path_custom_line_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_debug_path_custom_line_width")
        return withUnsafePointer (to: &NavigationAgent2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_debug_path_custom_line_width ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationAgent2D.method_get_debug_path_custom_line_width, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when the agent had to update the loaded path:
    /// 
    /// - because path was previously empty.
    /// 
    /// - because navigation map has changed.
    /// 
    /// - because agent pushed further away from the current path segment than the ``pathMaxDistance``.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.pathChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var pathChanged: SimpleSignal { SimpleSignal (target: self, signalName: "path_changed") }
    
    /// Emitted once per loaded path when the agent's global position is the first time within ``targetDesiredDistance`` to the ``targetPosition``.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.targetReached.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var targetReached: SimpleSignal { SimpleSignal (target: self, signalName: "target_reached") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ details: GDictionary) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = GDictionary (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Notifies when a waypoint along the path has been reached.
    /// 
    /// The details dictionary may contain the following keys depending on the value of ``pathMetadataFlags``:
    /// 
    /// - `position`: The position of the waypoint that was reached.
    /// 
    /// - `type`: The type of navigation primitive (region or link) that contains this waypoint.
    /// 
    /// - `rid`: The ``RID`` of the containing navigation primitive (region or link).
    /// 
    /// - `owner`: The object which manages the containing navigation primitive (region or link).
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.waypointReached.connect { details in
    ///    print ("caught signal")
    /// }
    /// ```
    public var waypointReached: Signal1 { Signal1 (target: self, signalName: "waypoint_reached") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal2/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal2/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal2/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal2 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal2 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ details: GDictionary) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = GDictionary (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Notifies when a navigation link has been reached.
    /// 
    /// The details dictionary may contain the following keys depending on the value of ``pathMetadataFlags``:
    /// 
    /// - `position`: The start position of the link that was reached.
    /// 
    /// - `type`: Always ``NavigationPathQueryResult2D/PathSegmentType/link``.
    /// 
    /// - `rid`: The ``RID`` of the link.
    /// 
    /// - `owner`: The object which manages the link (usually ``NavigationLink2D``).
    /// 
    /// - `link_entry_position`: If `owner` is available and the owner is a ``NavigationLink2D``, it will contain the global position of the link's point the agent is entering.
    /// 
    /// - `link_exit_position`: If `owner` is available and the owner is a ``NavigationLink2D``, it will contain the global position of the link's point which the agent is exiting.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.linkReached.connect { details in
    ///    print ("caught signal")
    /// }
    /// ```
    public var linkReached: Signal2 { Signal2 (target: self, signalName: "link_reached") }
    
    /// Emitted once per loaded path when the agent internal navigation path index reaches the last index of the loaded path array. The agent internal navigation path index can be received with ``getCurrentNavigationPathIndex()``.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.navigationFinished.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var navigationFinished: SimpleSignal { SimpleSignal (target: self, signalName: "navigation_finished") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal3/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal3/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal3/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal3 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal3 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ safeVelocity: Vector2) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Vector2 (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Notifies when the collision avoidance velocity is calculated. Emitted when ``velocity`` is set. Only emitted when ``avoidanceEnabled`` is true.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.velocityComputed.connect { safeVelocity in
    ///    print ("caught signal")
    /// }
    /// ```
    public var velocityComputed: Signal3 { Signal3 (target: self, signalName: "velocity_computed") }
    
}

