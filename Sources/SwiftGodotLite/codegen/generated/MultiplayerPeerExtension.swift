// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Class that can be inherited to implement custom multiplayer API networking layers via GDExtension.
/// 
/// This class is designed to be inherited from a GDExtension plugin to implement custom networking layers for the multiplayer API (such as WebRTC). All the methods below **must** be implemented to have a working custom multiplayer implementation. See also ``MultiplayerAPI``.
open class MultiplayerPeerExtension: MultiplayerPeer {
    override open class var godotClassName: StringName { "MultiplayerPeerExtension" }
    /* Methods */
    /// Called when the available packet count is internally requested by the ``MultiplayerAPI``.
    @_documentation(visibility: public)
    open func _getAvailablePacketCount ()-> Int32 {
        return 0
    }
    
    /// Called when the maximum allowed packet size (in bytes) is requested by the ``MultiplayerAPI``.
    @_documentation(visibility: public)
    open func _getMaxPacketSize ()-> Int32 {
        return 0
    }
    
    /// Called when a packet needs to be received by the ``MultiplayerAPI``, if ``_getPacket(rBuffer:rBufferSize:)`` isn't implemented. Use this when extending this class via GDScript.
    @_documentation(visibility: public)
    open func _getPacketScript ()-> PackedByteArray {
        return PackedByteArray ()
    }
    
    /// Called when a packet needs to be sent by the ``MultiplayerAPI``, if ``_putPacket(pBuffer:pBufferSize:)`` isn't implemented. Use this when extending this class via GDScript.
    @_documentation(visibility: public)
    open func _putPacketScript (pBuffer: PackedByteArray)-> GodotError {
        return .ok
    }
    
    /// Called to get the channel over which the next available packet was received. See ``MultiplayerPeer/getPacketChannel()``.
    @_documentation(visibility: public)
    open func _getPacketChannel ()-> Int32 {
        return 0
    }
    
    /// Called to get the ``MultiplayerPeer.TransferMode`` the remote peer used to send the next available packet. See ``MultiplayerPeer/getPacketMode()``.
    @_documentation(visibility: public)
    open func _getPacketMode ()-> MultiplayerPeer.TransferMode {
        return MultiplayerPeer.TransferMode(rawValue: 0)!
    }
    
    /// Called when the channel to use is set for this ``MultiplayerPeer`` (see ``MultiplayerPeer/transferChannel``).
    @_documentation(visibility: public)
    open func _setTransferChannel (pChannel: Int32) {
    }
    
    /// Called when the transfer channel to use is read on this ``MultiplayerPeer`` (see ``MultiplayerPeer/transferChannel``).
    @_documentation(visibility: public)
    open func _getTransferChannel ()-> Int32 {
        return 0
    }
    
    /// Called when the transfer mode is set on this ``MultiplayerPeer`` (see ``MultiplayerPeer/transferMode``).
    @_documentation(visibility: public)
    open func _setTransferMode (pMode: MultiplayerPeer.TransferMode) {
    }
    
    /// Called when the transfer mode to use is read on this ``MultiplayerPeer`` (see ``MultiplayerPeer/transferMode``).
    @_documentation(visibility: public)
    open func _getTransferMode ()-> MultiplayerPeer.TransferMode {
        return MultiplayerPeer.TransferMode(rawValue: 0)!
    }
    
    /// Called when the target peer to use is set for this ``MultiplayerPeer`` (see ``MultiplayerPeer/setTargetPeer(id:)``).
    @_documentation(visibility: public)
    open func _setTargetPeer (pPeer: Int32) {
    }
    
    /// Called when the ID of the ``MultiplayerPeer`` who sent the most recent packet is requested (see ``MultiplayerPeer/getPacketPeer()``).
    @_documentation(visibility: public)
    open func _getPacketPeer ()-> Int32 {
        return 0
    }
    
    /// Called when the "is server" status is requested on the ``MultiplayerAPI``. See ``MultiplayerAPI/isServer()``.
    @_documentation(visibility: public)
    open func _isServer ()-> Bool {
        return false
    }
    
    /// Called when the ``MultiplayerAPI`` is polled. See ``MultiplayerAPI/poll()``.
    @_documentation(visibility: public)
    open func _poll () {
    }
    
    /// Called when the multiplayer peer should be immediately closed (see ``MultiplayerPeer/close()``).
    @_documentation(visibility: public)
    open func _close () {
    }
    
    /// Called when the connected `pPeer` should be forcibly disconnected (see ``MultiplayerPeer/disconnectPeer(_:force:)``).
    @_documentation(visibility: public)
    open func _disconnectPeer (pPeer: Int32, pForce: Bool) {
    }
    
    /// Called when the unique ID of this ``MultiplayerPeer`` is requested (see ``MultiplayerPeer/getUniqueId()``). The value must be between `1` and `2147483647`.
    @_documentation(visibility: public)
    open func _getUniqueId ()-> Int32 {
        return 0
    }
    
    /// Called when the "refuse new connections" status is set on this ``MultiplayerPeer`` (see ``MultiplayerPeer/refuseNewConnections``).
    @_documentation(visibility: public)
    open func _setRefuseNewConnections (pEnable: Bool) {
    }
    
    /// Called when the "refuse new connections" status is requested on this ``MultiplayerPeer`` (see ``MultiplayerPeer/refuseNewConnections``).
    @_documentation(visibility: public)
    open func _isRefusingNewConnections ()-> Bool {
        return false
    }
    
    /// Called to check if the server can act as a relay in the current configuration. See ``MultiplayerPeer/isServerRelaySupported()``.
    @_documentation(visibility: public)
    open func _isServerRelaySupported ()-> Bool {
        return false
    }
    
    /// Called when the connection status is requested on the ``MultiplayerPeer`` (see ``MultiplayerPeer/getConnectionStatus()``).
    @_documentation(visibility: public)
    open func _getConnectionStatus ()-> MultiplayerPeer.ConnectionStatus {
        return MultiplayerPeer.ConnectionStatus(rawValue: 0)!
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_close":
                return _MultiplayerPeerExtension_proxy_close
            case "_disconnect_peer":
                return _MultiplayerPeerExtension_proxy_disconnect_peer
            case "_get_available_packet_count":
                return _MultiplayerPeerExtension_proxy_get_available_packet_count
            case "_get_connection_status":
                return _MultiplayerPeerExtension_proxy_get_connection_status
            case "_get_max_packet_size":
                return _MultiplayerPeerExtension_proxy_get_max_packet_size
            case "_get_packet_channel":
                return _MultiplayerPeerExtension_proxy_get_packet_channel
            case "_get_packet_mode":
                return _MultiplayerPeerExtension_proxy_get_packet_mode
            case "_get_packet_peer":
                return _MultiplayerPeerExtension_proxy_get_packet_peer
            case "_get_packet_script":
                return _MultiplayerPeerExtension_proxy_get_packet_script
            case "_get_transfer_channel":
                return _MultiplayerPeerExtension_proxy_get_transfer_channel
            case "_get_transfer_mode":
                return _MultiplayerPeerExtension_proxy_get_transfer_mode
            case "_get_unique_id":
                return _MultiplayerPeerExtension_proxy_get_unique_id
            case "_is_refusing_new_connections":
                return _MultiplayerPeerExtension_proxy_is_refusing_new_connections
            case "_is_server":
                return _MultiplayerPeerExtension_proxy_is_server
            case "_is_server_relay_supported":
                return _MultiplayerPeerExtension_proxy_is_server_relay_supported
            case "_poll":
                return _MultiplayerPeerExtension_proxy_poll
            case "_put_packet_script":
                return _MultiplayerPeerExtension_proxy_put_packet_script
            case "_set_refuse_new_connections":
                return _MultiplayerPeerExtension_proxy_set_refuse_new_connections
            case "_set_target_peer":
                return _MultiplayerPeerExtension_proxy_set_target_peer
            case "_set_transfer_channel":
                return _MultiplayerPeerExtension_proxy_set_transfer_channel
            case "_set_transfer_mode":
                return _MultiplayerPeerExtension_proxy_set_transfer_mode
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _MultiplayerPeerExtension_proxy_close (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._close ()
}

func _MultiplayerPeerExtension_proxy_disconnect_peer (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._disconnectPeer (pPeer: args [0]!.assumingMemoryBound (to: Int32.self).pointee, pForce: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _MultiplayerPeerExtension_proxy_get_available_packet_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getAvailablePacketCount ()
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _MultiplayerPeerExtension_proxy_get_connection_status (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getConnectionStatus ()
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _MultiplayerPeerExtension_proxy_get_max_packet_size (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getMaxPacketSize ()
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _MultiplayerPeerExtension_proxy_get_packet_channel (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPacketChannel ()
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _MultiplayerPeerExtension_proxy_get_packet_mode (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPacketMode ()
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _MultiplayerPeerExtension_proxy_get_packet_peer (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPacketPeer ()
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _MultiplayerPeerExtension_proxy_get_packet_script (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPacketScript ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedByteArray
    ret.content = PackedByteArray.zero
}

func _MultiplayerPeerExtension_proxy_get_transfer_channel (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getTransferChannel ()
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _MultiplayerPeerExtension_proxy_get_transfer_mode (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getTransferMode ()
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _MultiplayerPeerExtension_proxy_get_unique_id (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getUniqueId ()
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _MultiplayerPeerExtension_proxy_is_refusing_new_connections (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isRefusingNewConnections ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _MultiplayerPeerExtension_proxy_is_server (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isServer ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _MultiplayerPeerExtension_proxy_is_server_relay_supported (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isServerRelaySupported ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _MultiplayerPeerExtension_proxy_poll (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._poll ()
}

func _MultiplayerPeerExtension_proxy_put_packet_script (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._putPacketScript (pBuffer: PackedByteArray (content: args [0]!.assumingMemoryBound (to: (Int64, Int64).self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _MultiplayerPeerExtension_proxy_set_refuse_new_connections (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setRefuseNewConnections (pEnable: args [0]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _MultiplayerPeerExtension_proxy_set_target_peer (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setTargetPeer (pPeer: args [0]!.assumingMemoryBound (to: Int32.self).pointee)
}

func _MultiplayerPeerExtension_proxy_set_transfer_channel (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setTransferChannel (pChannel: args [0]!.assumingMemoryBound (to: Int32.self).pointee)
}

func _MultiplayerPeerExtension_proxy_set_transfer_mode (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<MultiplayerPeerExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setTransferMode (pMode: args [0]!.assumingMemoryBound (to: MultiplayerPeer.TransferMode.self).pointee)
}

