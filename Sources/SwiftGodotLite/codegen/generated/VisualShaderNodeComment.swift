// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A comment node to be placed on visual shader graph.
/// 
/// A resizable rectangular area with changeable ``title`` and ``additionalDescription`` used for better organizing of other visual shader nodes.
open class VisualShaderNodeComment: VisualShaderNodeResizableBase {
    override open class var godotClassName: StringName { "VisualShaderNodeComment" }
    
    /* Properties */
    
    /// A title of the node.
    final public var title: String {
        get {
            return get_title ()
        }
        
        set {
            set_title (newValue)
        }
        
    }
    
    /// An additional description which placed below the title.
    final public var additionalDescription: String {
        get {
            return get_description ()
        }
        
        set {
            set_description (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_title: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_title")
        return withUnsafePointer (to: &VisualShaderNodeComment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_title (_ title: String) {
        #if false
        
        let gstr_title = GString (title)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeComment.method_set_title, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_title.content)
        
        #else
        
        let gstr_title = GString (title)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_title.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeComment.method_set_title, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_title: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_title")
        return withUnsafePointer (to: &VisualShaderNodeComment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_title ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (VisualShaderNodeComment.method_get_title, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_description: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_description")
        return withUnsafePointer (to: &VisualShaderNodeComment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_description (_ description: String) {
        #if false
        
        let gstr_description = GString (description)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeComment.method_set_description, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_description.content)
        
        #else
        
        let gstr_description = GString (description)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_description.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeComment.method_set_description, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_description: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_description")
        return withUnsafePointer (to: &VisualShaderNodeComment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_description ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (VisualShaderNodeComment.method_get_description, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
}

