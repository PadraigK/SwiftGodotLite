// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A parallax scrolling layer to be used with ``ParallaxBackground``.
/// 
/// A ParallaxLayer must be the child of a ``ParallaxBackground`` node. Each ParallaxLayer can be set to move at different speeds relative to the camera movement or the ``ParallaxBackground/scrollOffset`` value.
/// 
/// This node's children will be affected by its scroll offset.
/// 
/// > Note: Any changes to this node's position and scale made after it enters the scene will be ignored.
/// 
open class ParallaxLayer: Node2D {
    override open class var godotClassName: StringName { "ParallaxLayer" }
    
    /* Properties */
    
    /// Multiplies the ParallaxLayer's motion. If an axis is set to `0`, it will not scroll.
    final public var motionScale: Vector2 {
        get {
            return get_motion_scale ()
        }
        
        set {
            set_motion_scale (newValue)
        }
        
    }
    
    /// The ParallaxLayer's offset relative to the parent ParallaxBackground's ``ParallaxBackground/scrollOffset``.
    final public var motionOffset: Vector2 {
        get {
            return get_motion_offset ()
        }
        
        set {
            set_motion_offset (newValue)
        }
        
    }
    
    /// The ParallaxLayer's ``Texture2D`` repeating. Useful for creating an infinite scrolling background. If an axis is set to `0`, the ``Texture2D`` will not be repeated.
    /// 
    /// If the length of the viewport axis is bigger than twice the repeated axis size, it will not repeat infinitely, as the parallax layer only draws 2 instances of the texture at any given time.
    /// 
    /// > Note: Despite its name, the texture will not be mirrored, it will simply be repeated.
    /// 
    final public var motionMirroring: Vector2 {
        get {
            return get_mirroring ()
        }
        
        set {
            set_mirroring (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_motion_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_motion_scale")
        return withUnsafePointer (to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_motion_scale (_ scale: Vector2) {
        #if true
        
        var copy_scale = scale
        
        gi.object_method_bind_ptrcall_v (ParallaxLayer.method_set_motion_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scale)
        
        #else
        
        var copy_scale = scale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParallaxLayer.method_set_motion_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_motion_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_motion_scale")
        return withUnsafePointer (to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_motion_scale ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (ParallaxLayer.method_get_motion_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_motion_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_motion_offset")
        return withUnsafePointer (to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_motion_offset (_ offset: Vector2) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (ParallaxLayer.method_set_motion_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParallaxLayer.method_set_motion_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_motion_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_motion_offset")
        return withUnsafePointer (to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_motion_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (ParallaxLayer.method_get_motion_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mirroring: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mirroring")
        return withUnsafePointer (to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mirroring (_ mirror: Vector2) {
        #if true
        
        var copy_mirror = mirror
        
        gi.object_method_bind_ptrcall_v (ParallaxLayer.method_set_mirroring, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mirror)
        
        #else
        
        var copy_mirror = mirror
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mirror) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParallaxLayer.method_set_mirroring, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mirroring: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mirroring")
        return withUnsafePointer (to: &ParallaxLayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mirroring ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (ParallaxLayer.method_get_mirroring, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

