// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A modification that uses CCDIK to manipulate a series of bones to reach a target in 2D.
/// 
/// This ``SkeletonModification2D`` uses an algorithm called Cyclic Coordinate Descent Inverse Kinematics, or CCDIK, to manipulate a chain of bones in a ``Skeleton2D`` so it reaches a defined target.
/// 
/// CCDIK works by rotating a set of bones, typically called a "bone chain", on a single axis. Each bone is rotated to face the target from the tip (by default), which over a chain of bones allow it to rotate properly to reach the target. Because the bones only rotate on a single axis, CCDIK _can_ look more robotic than other IK solvers.
/// 
/// > Note: The CCDIK modifier has `ccdik_joints`, which are the data objects that hold the data for each joint in the CCDIK chain. This is different from a bone! CCDIK joints hold the data needed for each bone in the bone chain used by CCDIK.
/// 
/// CCDIK also fully supports angle constraints, allowing for more control over how a solution is met.
/// 
open class SkeletonModification2DCCDIK: SkeletonModification2D {
    override open class var godotClassName: StringName { "SkeletonModification2DCCDIK" }
    
    /* Properties */
    
    /// The NodePath to the node that is the target for the CCDIK modification. This node is what the CCDIK chain will attempt to rotate the bone chain to.
    final public var targetNodepath: NodePath {
        get {
            return get_target_node ()
        }
        
        set {
            set_target_node (newValue)
        }
        
    }
    
    /// The end position of the CCDIK chain. Typically, this should be a child of a ``Bone2D`` node attached to the final ``Bone2D`` in the CCDIK chain.
    final public var tipNodepath: NodePath {
        get {
            return get_tip_node ()
        }
        
        set {
            set_tip_node (newValue)
        }
        
    }
    
    /// The number of CCDIK joints in the CCDIK modification.
    final public var ccdikDataChainLength: Int32 {
        get {
            return get_ccdik_data_chain_length ()
        }
        
        set {
            set_ccdik_data_chain_length (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_target_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_target_node")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_target_node (_ targetNodepath: NodePath) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_set_target_node, UnsafeMutableRawPointer (mutating: handle), nil, &targetNodepath.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &targetNodepath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_set_target_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_target_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_target_node")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_target_node ()-> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_get_target_node, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_tip_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tip_node")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tip_node (_ tipNodepath: NodePath) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_set_tip_node, UnsafeMutableRawPointer (mutating: handle), nil, &tipNodepath.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &tipNodepath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_set_tip_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tip_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tip_node")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tip_node ()-> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_get_tip_node, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_ccdik_data_chain_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ccdik_data_chain_length")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ccdik_data_chain_length (_ length: Int32) {
        #if true
        
        var copy_length: Int = Int (length)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_set_ccdik_data_chain_length, UnsafeMutableRawPointer (mutating: handle), nil, &copy_length)
        
        #else
        
        var copy_length: Int = Int (length)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_length) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_set_ccdik_data_chain_length, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ccdik_data_chain_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ccdik_data_chain_length")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ccdik_data_chain_length ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_get_ccdik_data_chain_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ccdik_joint_bone2d_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ccdik_joint_bone2d_node")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2761262315)!
            }
            
        }
        
    }()
    
    /// Sets the ``Bone2D`` node assigned to the CCDIK joint at `jointIdx`.
    public final func setCcdikJointBone2dNode (jointIdx: Int32, bone2dNodepath: NodePath) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_set_ccdik_joint_bone2d_node, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &bone2dNodepath.content)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &bone2dNodepath.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_set_ccdik_joint_bone2d_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_ccdik_joint_bone2d_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ccdik_joint_bone2d_node")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 408788394)!
            }
            
        }
        
    }()
    
    /// Returns the ``Bone2D`` node assigned to the CCDIK joint at `jointIdx`.
    public final func getCcdikJointBone2dNode (jointIdx: Int32)-> NodePath {
        let _result: NodePath = NodePath ()
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_get_ccdik_joint_bone2d_node, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_get_ccdik_joint_bone2d_node, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_ccdik_joint_bone_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ccdik_joint_bone_index")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the bone index, `boneIdx`, of the CCDIK joint at `jointIdx`. When possible, this will also update the `bone2d_node` of the CCDIK joint based on data provided by the linked skeleton.
    public final func setCcdikJointBoneIndex (jointIdx: Int32, boneIdx: Int32) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_set_ccdik_joint_bone_index, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_bone_idx)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_bone_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_set_ccdik_joint_bone_index, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_ccdik_joint_bone_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ccdik_joint_bone_index")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the index of the ``Bone2D`` node assigned to the CCDIK joint at `jointIdx`.
    public final func getCcdikJointBoneIndex (jointIdx: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_get_ccdik_joint_bone_index, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_get_ccdik_joint_bone_index, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_ccdik_joint_rotate_from_joint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ccdik_joint_rotate_from_joint")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Sets whether the joint at `jointIdx` is set to rotate from the joint, `true`, or to rotate from the tip, `false`.
    public final func setCcdikJointRotateFromJoint (jointIdx: Int32, rotateFromJoint: Bool) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_rotate_from_joint = rotateFromJoint
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_set_ccdik_joint_rotate_from_joint, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_rotate_from_joint)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_rotate_from_joint = rotateFromJoint
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_rotate_from_joint) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_set_ccdik_joint_rotate_from_joint, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_ccdik_joint_rotate_from_joint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ccdik_joint_rotate_from_joint")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether the joint at `jointIdx` is set to rotate from the joint, `true`, or to rotate from the tip, `false`. The default is to rotate from the tip.
    public final func getCcdikJointRotateFromJoint (jointIdx: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_get_ccdik_joint_rotate_from_joint, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_get_ccdik_joint_rotate_from_joint, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_ccdik_joint_enable_constraint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ccdik_joint_enable_constraint")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Determines whether angle constraints on the CCDIK joint at `jointIdx` are enabled. When `true`, constraints will be enabled and taken into account when solving.
    public final func setCcdikJointEnableConstraint (jointIdx: Int32, enableConstraint: Bool) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_enable_constraint = enableConstraint
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_set_ccdik_joint_enable_constraint, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_enable_constraint)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_enable_constraint = enableConstraint
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable_constraint) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_set_ccdik_joint_enable_constraint, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_ccdik_joint_enable_constraint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ccdik_joint_enable_constraint")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether angle constraints on the CCDIK joint at `jointIdx` are enabled.
    public final func getCcdikJointEnableConstraint (jointIdx: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_get_ccdik_joint_enable_constraint, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_get_ccdik_joint_enable_constraint, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_ccdik_joint_constraint_angle_min: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ccdik_joint_constraint_angle_min")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Sets the minimum angle constraint for the joint at `jointIdx`.
    public final func setCcdikJointConstraintAngleMin (jointIdx: Int32, angleMin: Double) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_angle_min = angleMin
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_set_ccdik_joint_constraint_angle_min, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_angle_min)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_angle_min = angleMin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_angle_min) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_set_ccdik_joint_constraint_angle_min, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_ccdik_joint_constraint_angle_min: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ccdik_joint_constraint_angle_min")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns the minimum angle constraint for the joint at `jointIdx`.
    public final func getCcdikJointConstraintAngleMin (jointIdx: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_get_ccdik_joint_constraint_angle_min, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_get_ccdik_joint_constraint_angle_min, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_ccdik_joint_constraint_angle_max: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ccdik_joint_constraint_angle_max")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Sets the maximum angle constraint for the joint at `jointIdx`.
    public final func setCcdikJointConstraintAngleMax (jointIdx: Int32, angleMax: Double) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_angle_max = angleMax
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_set_ccdik_joint_constraint_angle_max, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_angle_max)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_angle_max = angleMax
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_angle_max) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_set_ccdik_joint_constraint_angle_max, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_ccdik_joint_constraint_angle_max: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ccdik_joint_constraint_angle_max")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns the maximum angle constraint for the joint at `jointIdx`.
    public final func getCcdikJointConstraintAngleMax (jointIdx: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_get_ccdik_joint_constraint_angle_max, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_get_ccdik_joint_constraint_angle_max, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_ccdik_joint_constraint_angle_invert: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ccdik_joint_constraint_angle_invert")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Sets whether the CCDIK joint at `jointIdx` uses an inverted joint constraint.
    /// 
    /// An inverted joint constraint only constraints the CCDIK joint to the angles _outside of_ the inputted minimum and maximum angles. For this reason, it is referred to as an inverted joint constraint, as it constraints the joint to the outside of the inputted values.
    /// 
    public final func setCcdikJointConstraintAngleInvert (jointIdx: Int32, invert: Bool) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_invert = invert
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_set_ccdik_joint_constraint_angle_invert, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_invert)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_invert = invert
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_invert) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_set_ccdik_joint_constraint_angle_invert, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_ccdik_joint_constraint_angle_invert: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ccdik_joint_constraint_angle_invert")
        return withUnsafePointer (to: &SkeletonModification2DCCDIK.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether the CCDIK joint at `jointIdx` uses an inverted joint constraint. See ``setCcdikJointConstraintAngleInvert(jointIdx:invert:)`` for details.
    public final func getCcdikJointConstraintAngleInvert (jointIdx: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DCCDIK.method_get_ccdik_joint_constraint_angle_invert, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DCCDIK.method_get_ccdik_joint_constraint_angle_invert, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

