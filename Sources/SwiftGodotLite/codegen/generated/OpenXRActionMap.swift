// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Collection of ``OpenXRActionSet`` and ``OpenXRInteractionProfile`` resources for the OpenXR module.
/// 
/// OpenXR uses an action system similar to Godots Input map system to bind inputs and outputs on various types of XR controllers to named actions. OpenXR specifies more detail on these inputs and outputs than Godot supports.
/// 
/// Another important distinction is that OpenXR offers no control over these bindings. The bindings we register are suggestions, it is up to the XR runtime to offer users the ability to change these bindings. This allows the XR runtime to fill in the gaps if new hardware becomes available.
/// 
/// The action map therefore needs to be loaded at startup and can't be changed afterwards. This resource is a container for the entire action map.
/// 
open class OpenXRActionMap: Resource {
    override open class var godotClassName: StringName { "OpenXRActionMap" }
    
    /* Properties */
    
    /// Collection of ``OpenXRActionSet``s that are part of this action map.
    final public var actionSets: GArray {
        get {
            return get_action_sets ()
        }
        
        set {
            set_action_sets (newValue)
        }
        
    }
    
    /// Collection of ``OpenXRInteractionProfile``s that are part of this action map.
    final public var interactionProfiles: GArray {
        get {
            return get_interaction_profiles ()
        }
        
        set {
            set_interaction_profiles (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_action_sets: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_action_sets")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_action_sets (_ actionSets: GArray) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (OpenXRActionMap.method_set_action_sets, UnsafeMutableRawPointer (mutating: handle), nil, &actionSets.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &actionSets.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (OpenXRActionMap.method_set_action_sets, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_action_sets: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_action_sets")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_action_sets ()-> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall (OpenXRActionMap.method_get_action_sets, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_action_set_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_action_set_count")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Retrieve the number of actions sets in our action map.
    public final func getActionSetCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (OpenXRActionMap.method_get_action_set_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_find_action_set: GDExtensionMethodBindPtr = {
        let methodName = StringName ("find_action_set")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1888809267)!
            }
            
        }
        
    }()
    
    /// Retrieve an action set by name.
    public final func findActionSet (name: String)-> OpenXRActionSet? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (OpenXRActionMap.method_find_action_set, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_name.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (OpenXRActionMap.method_find_action_set, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_action_set: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_action_set")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1789580336)!
            }
            
        }
        
    }()
    
    /// Retrieve the action set at this index.
    public final func getActionSet (idx: Int32)-> OpenXRActionSet? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (OpenXRActionMap.method_get_action_set, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (OpenXRActionMap.method_get_action_set, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_add_action_set: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_action_set")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2093310581)!
            }
            
        }
        
    }()
    
    /// Add an action set.
    public final func addActionSet (_ actionSet: OpenXRActionSet?) {
        #if false
        
        var copy_action_set_handle = actionSet?.handle
        
        gi.object_method_bind_ptrcall_v (OpenXRActionMap.method_add_action_set, UnsafeMutableRawPointer (mutating: handle), nil, &copy_action_set_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: actionSet?.handle) { p0 in
        _args.append (actionSet == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (OpenXRActionMap.method_add_action_set, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_action_set: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_action_set")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2093310581)!
            }
            
        }
        
    }()
    
    /// Remove an action set.
    public final func removeActionSet (_ actionSet: OpenXRActionSet?) {
        #if false
        
        var copy_action_set_handle = actionSet?.handle
        
        gi.object_method_bind_ptrcall_v (OpenXRActionMap.method_remove_action_set, UnsafeMutableRawPointer (mutating: handle), nil, &copy_action_set_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: actionSet?.handle) { p0 in
        _args.append (actionSet == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (OpenXRActionMap.method_remove_action_set, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_interaction_profiles: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_interaction_profiles")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_interaction_profiles (_ interactionProfiles: GArray) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (OpenXRActionMap.method_set_interaction_profiles, UnsafeMutableRawPointer (mutating: handle), nil, &interactionProfiles.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &interactionProfiles.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (OpenXRActionMap.method_set_interaction_profiles, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_interaction_profiles: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_interaction_profiles")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_interaction_profiles ()-> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall (OpenXRActionMap.method_get_interaction_profiles, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_interaction_profile_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_interaction_profile_count")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Retrieve the number of interaction profiles in our action map.
    public final func getInteractionProfileCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (OpenXRActionMap.method_get_interaction_profile_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_find_interaction_profile: GDExtensionMethodBindPtr = {
        let methodName = StringName ("find_interaction_profile")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3095875538)!
            }
            
        }
        
    }()
    
    /// Find an interaction profile by its name (path).
    public final func findInteractionProfile (name: String)-> OpenXRInteractionProfile? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (OpenXRActionMap.method_find_interaction_profile, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_name.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (OpenXRActionMap.method_find_interaction_profile, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_interaction_profile: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_interaction_profile")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2546151210)!
            }
            
        }
        
    }()
    
    /// Get the interaction profile at this index.
    public final func getInteractionProfile (idx: Int32)-> OpenXRInteractionProfile? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (OpenXRActionMap.method_get_interaction_profile, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (OpenXRActionMap.method_get_interaction_profile, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_add_interaction_profile: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_interaction_profile")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2697953512)!
            }
            
        }
        
    }()
    
    /// Add an interaction profile.
    public final func addInteractionProfile (_ interactionProfile: OpenXRInteractionProfile?) {
        #if false
        
        var copy_interaction_profile_handle = interactionProfile?.handle
        
        gi.object_method_bind_ptrcall_v (OpenXRActionMap.method_add_interaction_profile, UnsafeMutableRawPointer (mutating: handle), nil, &copy_interaction_profile_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: interactionProfile?.handle) { p0 in
        _args.append (interactionProfile == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (OpenXRActionMap.method_add_interaction_profile, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_interaction_profile: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_interaction_profile")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2697953512)!
            }
            
        }
        
    }()
    
    /// Remove an interaction profile.
    public final func removeInteractionProfile (_ interactionProfile: OpenXRInteractionProfile?) {
        #if false
        
        var copy_interaction_profile_handle = interactionProfile?.handle
        
        gi.object_method_bind_ptrcall_v (OpenXRActionMap.method_remove_interaction_profile, UnsafeMutableRawPointer (mutating: handle), nil, &copy_interaction_profile_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: interactionProfile?.handle) { p0 in
        _args.append (interactionProfile == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (OpenXRActionMap.method_remove_interaction_profile, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_create_default_action_sets: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_default_action_sets")
        return withUnsafePointer (to: &OpenXRActionMap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Setup this action set with our default actions.
    public final func createDefaultActionSets () {
        gi.object_method_bind_ptrcall (OpenXRActionMap.method_create_default_action_sets, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
}

