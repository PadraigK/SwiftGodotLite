// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A node used for animation playback.
/// 
/// An animation player is used for general-purpose playback of animations. It contains a dictionary of ``AnimationLibrary`` resources and custom blend times between animation transitions.
/// 
/// Some methods and properties use a single key to reference an animation directly. These keys are formatted as the key for the library, followed by a forward slash, then the key for the animation within the library, for example `"movement/run"`. If the library's key is an empty string (known as the default library), the forward slash is omitted, being the same key used by the library.
/// 
/// ``AnimationPlayer`` is better-suited than ``Tween`` for more complex animations, for example ones with non-trivial timings. It can also be used over ``Tween`` if the animation track editor is more convenient than doing it in code.
/// 
/// Updating the target properties of animations occurs at the process frame.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``currentAnimationChanged``
/// - ``animationChanged``
open class AnimationPlayer: AnimationMixer {
    override open class var godotClassName: StringName { "AnimationPlayer" }
    public enum AnimationProcessCallback: Int64 {
        /// For backward compatibility. See ``AnimationMixer/AnimationCallbackModeProcess/physics``.
        case physics = 0 // ANIMATION_PROCESS_PHYSICS
        /// For backward compatibility. See ``AnimationMixer/AnimationCallbackModeProcess/idle``.
        case idle = 1 // ANIMATION_PROCESS_IDLE
        /// For backward compatibility. See ``AnimationMixer/AnimationCallbackModeProcess/manual``.
        case manual = 2 // ANIMATION_PROCESS_MANUAL
    }
    
    public enum AnimationMethodCallMode: Int64 {
        /// For backward compatibility. See ``AnimationMixer/AnimationCallbackModeMethod/deferred``.
        case deferred = 0 // ANIMATION_METHOD_CALL_DEFERRED
        /// For backward compatibility. See ``AnimationMixer/AnimationCallbackModeMethod/immediate``.
        case immediate = 1 // ANIMATION_METHOD_CALL_IMMEDIATE
    }
    
    
    /* Properties */
    
    /// The key of the currently playing animation. If no animation is playing, the property's value is an empty string. Changing this value does not restart the animation. See ``play(name:customBlend:customSpeed:fromEnd:)`` for more information on playing animations.
    /// 
    /// > Note: While this property appears in the Inspector, it's not meant to be edited, and it's not saved in the scene. This property is mainly used to get the currently playing animation, and internally for animation playback tracks. For more information, see ``Animation``.
    /// 
    final public var currentAnimation: String {
        get {
            return get_current_animation ()
        }
        
        set {
            set_current_animation (newValue)
        }
        
    }
    
    /// If playing, the current animation's key, otherwise, the animation last played. When set, this changes the animation, but will not play it unless already playing. See also ``currentAnimation``.
    final public var assignedAnimation: String {
        get {
            return get_assigned_animation ()
        }
        
        set {
            set_assigned_animation (newValue)
        }
        
    }
    
    /// The key of the animation to play when the scene loads.
    final public var autoplay: String {
        get {
            return get_autoplay ()
        }
        
        set {
            set_autoplay (newValue)
        }
        
    }
    
    /// The length (in seconds) of the currently playing animation.
    final public var currentAnimationLength: Double {
        get {
            return get_current_animation_length ()
        }
        
    }
    
    /// The position (in seconds) of the currently playing animation.
    final public var currentAnimationPosition: Double {
        get {
            return get_current_animation_position ()
        }
        
    }
    
    /// The default time in which to blend animations. Ranges from 0 to 4096 with 0.01 precision.
    final public var playbackDefaultBlendTime: Double {
        get {
            return get_default_blend_time ()
        }
        
        set {
            set_default_blend_time (newValue)
        }
        
    }
    
    /// The speed scaling ratio. For example, if this value is `1`, then the animation plays at normal speed. If it's `0.5`, then it plays at half speed. If it's `2`, then it plays at double speed.
    /// 
    /// If set to a negative value, the animation is played in reverse. If set to `0`, the animation will not advance.
    /// 
    final public var speedScale: Double {
        get {
            return get_speed_scale ()
        }
        
        set {
            set_speed_scale (newValue)
        }
        
    }
    
    /// If `true` and the engine is running in Movie Maker mode (see ``MovieWriter``), exits the engine with ``SceneTree/quit(exitCode:)`` as soon as an animation is done playing in this ``AnimationPlayer``. A message is printed when the engine quits for this reason.
    /// 
    /// > Note: This obeys the same logic as the [signal AnimationMixer.animation_finished] signal, so it will not quit the engine if the animation is set to be looping.
    /// 
    final public var movieQuitOnFinish: Bool {
        get {
            return is_movie_quit_on_finish_enabled ()
        }
        
        set {
            set_movie_quit_on_finish_enabled (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_animation_set_next: GDExtensionMethodBindPtr = {
        let methodName = StringName ("animation_set_next")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3740211285)!
            }
            
        }
        
    }()
    
    /// Triggers the `animationTo` animation when the `animationFrom` animation completes.
    public final func animationSetNext (animationFrom: StringName, animationTo: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_animation_set_next, UnsafeMutableRawPointer (mutating: handle), nil, &animationFrom.content, &animationTo.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &animationFrom.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &animationTo.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AnimationPlayer.method_animation_set_next, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_animation_get_next: GDExtensionMethodBindPtr = {
        let methodName = StringName ("animation_get_next")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1965194235)!
            }
            
        }
        
    }()
    
    /// Returns the key of the animation which is queued to play after the `animationFrom` animation.
    public final func animationGetNext (animationFrom: StringName)-> StringName {
        let _result: StringName = StringName ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_animation_get_next, UnsafeMutableRawPointer (mutating: handle), &_result.content, &animationFrom.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &animationFrom.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_animation_get_next, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_blend_time: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_blend_time")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3231131886)!
            }
            
        }
        
    }()
    
    /// Specifies a blend time (in seconds) between two animations, referenced by their keys.
    public final func setBlendTime (animationFrom: StringName, animationTo: StringName, sec: Double) {
        #if false
        
        var copy_sec = sec
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_set_blend_time, UnsafeMutableRawPointer (mutating: handle), nil, &animationFrom.content, &animationTo.content, &copy_sec)
        
        #else
        
        var copy_sec = sec
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &animationFrom.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &animationTo.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_sec) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (AnimationPlayer.method_set_blend_time, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_blend_time: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_blend_time")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1958752504)!
            }
            
        }
        
    }()
    
    /// Returns the blend time (in seconds) between two animations, referenced by their keys.
    public final func getBlendTime (animationFrom: StringName, animationTo: StringName)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_get_blend_time, UnsafeMutableRawPointer (mutating: handle), &_result, &animationFrom.content, &animationTo.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &animationFrom.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &animationTo.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AnimationPlayer.method_get_blend_time, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_default_blend_time: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_default_blend_time")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_default_blend_time (_ sec: Double) {
        #if false
        
        var copy_sec = sec
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_set_default_blend_time, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sec)
        
        #else
        
        var copy_sec = sec
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_sec) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_set_default_blend_time, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_default_blend_time: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_default_blend_time")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_default_blend_time ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_default_blend_time, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_play: GDExtensionMethodBindPtr = {
        let methodName = StringName ("play")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3118260607)!
            }
            
        }
        
    }()
    
    /// Plays the animation with key `name`. Custom blend times and speed can be set.
    /// 
    /// The `fromEnd` option only affects when switching to a new animation track, or if the same track but at the start or end. It does not affect resuming playback that was paused in the middle of an animation. If `customSpeed` is negative and `fromEnd` is `true`, the animation will play backwards (which is equivalent to calling ``playBackwards(name:customBlend:)``).
    /// 
    /// The ``AnimationPlayer`` keeps track of its current or last played animation with ``assignedAnimation``. If this method is called with that same animation `name`, or with no `name` parameter, the assigned animation will resume playing if it was paused.
    /// 
    /// > Note: The animation will be updated the next time the ``AnimationPlayer`` is processed. If other variables are updated at the same time this is called, they may be updated too early. To perform the update immediately, call `advance(0)`.
    /// 
    public final func play (name: StringName = StringName (""), customBlend: Double = -1, customSpeed: Double = 1.0, fromEnd: Bool = false) {
        #if false
        
        var copy_custom_blend = customBlend
        var copy_custom_speed = customSpeed
        var copy_from_end = fromEnd
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_play, UnsafeMutableRawPointer (mutating: handle), nil, &name.content, &copy_custom_blend, &copy_custom_speed, &copy_from_end)
        
        #else
        
        var copy_custom_blend = customBlend
        var copy_custom_speed = customSpeed
        var copy_from_end = fromEnd
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_custom_blend) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_custom_speed) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_from_end) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (AnimationPlayer.method_play, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_play_backwards: GDExtensionMethodBindPtr = {
        let methodName = StringName ("play_backwards")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2787282401)!
            }
            
        }
        
    }()
    
    /// Plays the animation with key `name` in reverse.
    /// 
    /// This method is a shorthand for ``play(name:customBlend:customSpeed:fromEnd:)`` with `custom_speed = -1.0` and `from_end = true`, so see its description for more information.
    /// 
    public final func playBackwards (name: StringName = StringName (""), customBlend: Double = -1) {
        #if false
        
        var copy_custom_blend = customBlend
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_play_backwards, UnsafeMutableRawPointer (mutating: handle), nil, &name.content, &copy_custom_blend)
        
        #else
        
        var copy_custom_blend = customBlend
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_custom_blend) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AnimationPlayer.method_play_backwards, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_pause: GDExtensionMethodBindPtr = {
        let methodName = StringName ("pause")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Pauses the currently playing animation. The ``currentAnimationPosition`` will be kept and calling ``play(name:customBlend:customSpeed:fromEnd:)`` or ``playBackwards(name:customBlend:)`` without arguments or with the same animation name as ``assignedAnimation`` will resume the animation.
    /// 
    /// See also ``stop(keepState:)``.
    /// 
    public final func pause () {
        gi.object_method_bind_ptrcall (AnimationPlayer.method_pause, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_stop: GDExtensionMethodBindPtr = {
        let methodName = StringName ("stop")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 107499316)!
            }
            
        }
        
    }()
    
    /// Stops the currently playing animation. The animation position is reset to `0` and the `custom_speed` is reset to `1.0`. See also ``pause()``.
    /// 
    /// If `keepState` is `true`, the animation state is not updated visually.
    /// 
    /// > Note: The method / audio / animation playback tracks will not be processed by this method.
    /// 
    public final func stop (keepState: Bool = false) {
        #if false
        
        var copy_keep_state = keepState
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_stop, UnsafeMutableRawPointer (mutating: handle), nil, &copy_keep_state)
        
        #else
        
        var copy_keep_state = keepState
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_keep_state) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_stop, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_playing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_playing")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if an animation is currently playing (even if ``speedScale`` and/or `custom_speed` are `0`).
    public final func isPlaying ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (AnimationPlayer.method_is_playing, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_current_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_current_animation")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_current_animation (_ animation: String) {
        #if false
        
        let gstr_animation = GString (animation)
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_set_current_animation, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_animation.content)
        
        #else
        
        let gstr_animation = GString (animation)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_animation.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_set_current_animation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_current_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_animation")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_current_animation ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_current_animation, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_assigned_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_assigned_animation")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_assigned_animation (_ animation: String) {
        #if false
        
        let gstr_animation = GString (animation)
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_set_assigned_animation, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_animation.content)
        
        #else
        
        let gstr_animation = GString (animation)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_animation.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_set_assigned_animation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_assigned_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_assigned_animation")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_assigned_animation ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_assigned_animation, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_queue: GDExtensionMethodBindPtr = {
        let methodName = StringName ("queue")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Queues an animation for playback once the current one is done.
    /// 
    /// > Note: If a looped animation is currently playing, the queued animation will never play unless the looped animation is stopped somehow.
    /// 
    public final func queue (name: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_queue, UnsafeMutableRawPointer (mutating: handle), nil, &name.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_queue, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_queue: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_queue")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2981934095)!
            }
            
        }
        
    }()
    
    /// Returns a list of the animation keys that are currently queued to play.
    public final func getQueue ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_queue, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_clear_queue: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_queue")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears all queued, unplayed animations.
    public final func clearQueue () {
        gi.object_method_bind_ptrcall (AnimationPlayer.method_clear_queue, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_speed_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_speed_scale")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_speed_scale (_ speed: Double) {
        #if false
        
        var copy_speed = speed
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_set_speed_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_speed)
        
        #else
        
        var copy_speed = speed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_speed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_set_speed_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_speed_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_speed_scale")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_speed_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_speed_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_playing_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_playing_speed")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the actual playing speed of current animation or `0` if not playing. This speed is the ``speedScale`` property multiplied by `custom_speed` argument specified when calling the ``play(name:customBlend:customSpeed:fromEnd:)`` method.
    /// 
    /// Returns a negative value if the current animation is playing backwards.
    /// 
    public final func getPlayingSpeed ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_playing_speed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_autoplay: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_autoplay")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_autoplay (_ name: String) {
        #if false
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_set_autoplay, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_set_autoplay, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_autoplay: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_autoplay")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_autoplay ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_autoplay, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_movie_quit_on_finish_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_movie_quit_on_finish_enabled")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_movie_quit_on_finish_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_set_movie_quit_on_finish_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_set_movie_quit_on_finish_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_movie_quit_on_finish_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_movie_quit_on_finish_enabled")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_movie_quit_on_finish_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (AnimationPlayer.method_is_movie_quit_on_finish_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_current_animation_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_animation_position")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_current_animation_position ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_current_animation_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_current_animation_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_animation_length")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_current_animation_length ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_current_animation_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_seek: GDExtensionMethodBindPtr = {
        let methodName = StringName ("seek")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1807872683)!
            }
            
        }
        
    }()
    
    /// Seeks the animation to the `seconds` point in time (in seconds). If `update` is `true`, the animation updates too, otherwise it updates at process time. Events between the current frame and `seconds` are skipped.
    /// 
    /// If `updateOnly` is true, the method / audio / animation playback tracks will not be processed.
    /// 
    /// > Note: Seeking to the end of the animation doesn't emit [signal AnimationMixer.animation_finished]. If you want to skip animation and emit the signal, use ``AnimationMixer/advance(delta:)``.
    /// 
    public final func seek (seconds: Double, update: Bool = false, updateOnly: Bool = false) {
        #if false
        
        var copy_seconds = seconds
        var copy_update = update
        var copy_update_only = updateOnly
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_seek, UnsafeMutableRawPointer (mutating: handle), nil, &copy_seconds, &copy_update, &copy_update_only)
        
        #else
        
        var copy_seconds = seconds
        var copy_update = update
        var copy_update_only = updateOnly
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_seconds) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_update) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_update_only) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (AnimationPlayer.method_seek, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_process_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_process_callback")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1663839457)!
            }
            
        }
        
    }()
    
    /// For backward compatibility. See ``AnimationMixer.AnimationCallbackModeProcess``.
    public final func setProcessCallback (mode: AnimationPlayer.AnimationProcessCallback) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_set_process_callback, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_set_process_callback, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_process_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_process_callback")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4207496604)!
            }
            
        }
        
    }()
    
    /// For backward compatibility. See ``AnimationMixer.AnimationCallbackModeProcess``.
    public final func getProcessCallback ()-> AnimationPlayer.AnimationProcessCallback {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_process_callback, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AnimationPlayer.AnimationProcessCallback (rawValue: _result)!
    }
    
    fileprivate static var method_set_method_call_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_method_call_mode")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3413514846)!
            }
            
        }
        
    }()
    
    /// For backward compatibility. See ``AnimationMixer.AnimationCallbackModeMethod``.
    public final func setMethodCallMode (_ mode: AnimationPlayer.AnimationMethodCallMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_set_method_call_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_set_method_call_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_method_call_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_method_call_mode")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3583380054)!
            }
            
        }
        
    }()
    
    /// For backward compatibility. See ``AnimationMixer.AnimationCallbackModeMethod``.
    public final func getMethodCallMode ()-> AnimationPlayer.AnimationMethodCallMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_method_call_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AnimationPlayer.AnimationMethodCallMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_root: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_root")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    /// For backward compatibility. See ``AnimationMixer/rootNode``.
    public final func setRoot (path: NodePath) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (AnimationPlayer.method_set_root, UnsafeMutableRawPointer (mutating: handle), nil, &path.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationPlayer.method_set_root, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_root: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_root")
        return withUnsafePointer (to: &AnimationPlayer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    /// For backward compatibility. See ``AnimationMixer/rootNode``.
    public final func getRoot ()-> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall (AnimationPlayer.method_get_root, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ name: String) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = GString (args [0])!.description
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when ``currentAnimation`` changes.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.currentAnimationChanged.connect { name in
    ///    print ("caught signal")
    /// }
    /// ```
    public var currentAnimationChanged: Signal1 { Signal1 (target: self, signalName: "current_animation_changed") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal2/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal2/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal2/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal2 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal2 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ oldName: StringName, _ newName: StringName) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = StringName (args [0])!
                let arg_1 = StringName (args [1])!
                
                callback (arg_0, arg_1)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _, _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when a queued animation plays after the previous animation finished. See also ``AnimationPlayer/queue(name:)``.
    /// 
    /// > Note: The signal is not emitted when the animation is changed via ``AnimationPlayer/play(name:customBlend:customSpeed:fromEnd:)`` or by an ``AnimationTree``.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.animationChanged.connect { oldName, newName in
    ///    print ("caught signal")
    /// }
    /// ```
    public var animationChanged: Signal2 { Signal2 (target: self, signalName: "animation_changed") }
    
}

