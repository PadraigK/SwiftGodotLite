// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// 2D sprite node in a 3D world.
/// 
/// A node that displays a 2D texture in a 3D environment. The texture displayed can be a region from a larger atlas texture, or a frame from a sprite sheet animation. See also ``SpriteBase3D`` where properties such as the billboard mode are defined.
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``frameChanged``
/// - ``textureChanged``
open class Sprite3D: SpriteBase3D {
    override open class var godotClassName: StringName { "Sprite3D" }
    
    /* Properties */
    
    /// ``Texture2D`` object to draw. If ``GeometryInstance3D/materialOverride`` is used, this will be overridden. The size information is still used.
    final public var texture: Texture2D? {
        get {
            return get_texture ()
        }
        
        set {
            set_texture (newValue)
        }
        
    }
    
    /// The number of columns in the sprite sheet.
    final public var hframes: Int32 {
        get {
            return get_hframes ()
        }
        
        set {
            set_hframes (newValue)
        }
        
    }
    
    /// The number of rows in the sprite sheet.
    final public var vframes: Int32 {
        get {
            return get_vframes ()
        }
        
        set {
            set_vframes (newValue)
        }
        
    }
    
    /// Current frame to display from sprite sheet. ``hframes`` or ``vframes`` must be greater than 1.
    final public var frame: Int32 {
        get {
            return get_frame ()
        }
        
        set {
            set_frame (newValue)
        }
        
    }
    
    /// Coordinates of the frame to display from sprite sheet. This is as an alias for the ``frame`` property. ``hframes`` or ``vframes`` must be greater than 1.
    final public var frameCoords: Vector2i {
        get {
            return get_frame_coords ()
        }
        
        set {
            set_frame_coords (newValue)
        }
        
    }
    
    /// If `true`, the sprite will use ``regionRect`` and display only the specified part of its texture.
    final public var regionEnabled: Bool {
        get {
            return is_region_enabled ()
        }
        
        set {
            set_region_enabled (newValue)
        }
        
    }
    
    /// The region of the atlas texture to display. ``regionEnabled`` must be `true`.
    final public var regionRect: Rect2 {
        get {
            return get_region_rect ()
        }
        
        set {
            set_region_rect (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture (_ texture: Texture2D?) {
        #if true
        
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (Sprite3D.method_set_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: texture?.handle) { p0 in
        _args.append (texture == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Sprite3D.method_set_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Sprite3D.method_get_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_region_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_region_enabled")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_region_enabled (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Sprite3D.method_set_region_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Sprite3D.method_set_region_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_region_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_region_enabled")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_region_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Sprite3D.method_is_region_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_region_rect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_region_rect")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2046264180)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_region_rect (_ rect: Rect2) {
        #if true
        
        var copy_rect = rect
        
        gi.object_method_bind_ptrcall_v (Sprite3D.method_set_region_rect, UnsafeMutableRawPointer (mutating: handle), nil, &copy_rect)
        
        #else
        
        var copy_rect = rect
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_rect) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Sprite3D.method_set_region_rect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_region_rect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_region_rect")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1639390495)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_region_rect ()-> Rect2 {
        var _result: Rect2 = Rect2 ()
        gi.object_method_bind_ptrcall (Sprite3D.method_get_region_rect, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_frame: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_frame")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_frame (_ frame: Int32) {
        #if true
        
        var copy_frame: Int = Int (frame)
        
        gi.object_method_bind_ptrcall_v (Sprite3D.method_set_frame, UnsafeMutableRawPointer (mutating: handle), nil, &copy_frame)
        
        #else
        
        var copy_frame: Int = Int (frame)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_frame) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Sprite3D.method_set_frame, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_frame: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_frame")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_frame ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Sprite3D.method_get_frame, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_frame_coords: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_frame_coords")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130785943)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_frame_coords (_ coords: Vector2i) {
        #if true
        
        var copy_coords = coords
        
        gi.object_method_bind_ptrcall_v (Sprite3D.method_set_frame_coords, UnsafeMutableRawPointer (mutating: handle), nil, &copy_coords)
        
        #else
        
        var copy_coords = coords
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_coords) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Sprite3D.method_set_frame_coords, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_frame_coords: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_frame_coords")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_frame_coords ()-> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall (Sprite3D.method_get_frame_coords, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_vframes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vframes")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_vframes (_ vframes: Int32) {
        #if true
        
        var copy_vframes: Int = Int (vframes)
        
        gi.object_method_bind_ptrcall_v (Sprite3D.method_set_vframes, UnsafeMutableRawPointer (mutating: handle), nil, &copy_vframes)
        
        #else
        
        var copy_vframes: Int = Int (vframes)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_vframes) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Sprite3D.method_set_vframes, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_vframes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vframes")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_vframes ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Sprite3D.method_get_vframes, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_hframes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_hframes")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_hframes (_ hframes: Int32) {
        #if true
        
        var copy_hframes: Int = Int (hframes)
        
        gi.object_method_bind_ptrcall_v (Sprite3D.method_set_hframes, UnsafeMutableRawPointer (mutating: handle), nil, &copy_hframes)
        
        #else
        
        var copy_hframes: Int = Int (hframes)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_hframes) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Sprite3D.method_set_hframes, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_hframes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_hframes")
        return withUnsafePointer (to: &Sprite3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_hframes ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Sprite3D.method_get_hframes, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when the ``frame`` changes.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.frameChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var frameChanged: SimpleSignal { SimpleSignal (target: self, signalName: "frame_changed") }
    
    /// Emitted when the ``texture`` changes.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.textureChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var textureChanged: SimpleSignal { SimpleSignal (target: self, signalName: "texture_changed") }
    
}

