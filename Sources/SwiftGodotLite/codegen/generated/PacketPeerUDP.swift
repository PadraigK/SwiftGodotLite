// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// UDP packet peer.
/// 
/// UDP packet peer. Can be used to send raw UDP packets as well as ``Variant``s.
/// 
/// > Note: When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
/// 
open class PacketPeerUDP: PacketPeer {
    override open class var godotClassName: StringName { "PacketPeerUDP" }
    /* Methods */
    fileprivate static var method_bind: GDExtensionMethodBindPtr = {
        let methodName = StringName ("bind")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051239242)!
            }
            
        }
        
    }()
    
    /// Binds this ``PacketPeerUDP`` to the specified `port` and `bindAddress` with a buffer size `recvBufSize`, allowing it to receive incoming packets.
    /// 
    /// If `bindAddress` is set to `"*"` (default), the peer will be bound on all available addresses (both IPv4 and IPv6).
    /// 
    /// If `bindAddress` is set to `"0.0.0.0"` (for IPv4) or `"::"` (for IPv6), the peer will be bound to all available addresses matching that IP type.
    /// 
    /// If `bindAddress` is set to any valid address (e.g. `"192.168.1.101"`, `"::1"`, etc), the peer will only be bound to the interface with that addresses (or fail if no interface with the given address exists).
    /// 
    public final func bind (port: Int32, bindAddress: String = "*", recvBufSize: Int32 = 65536)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        var copy_port: Int = Int (port)
        let gstr_bind_address = GString (bindAddress)
        var copy_recv_buf_size: Int = Int (recvBufSize)
        
        gi.object_method_bind_ptrcall_v (PacketPeerUDP.method_bind, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_port, &gstr_bind_address.content, &copy_recv_buf_size)
        return GodotError (rawValue: _result)!
        #else
        
        var copy_port: Int = Int (port)
        let gstr_bind_address = GString (bindAddress)
        var copy_recv_buf_size: Int = Int (recvBufSize)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_port) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_bind_address.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_recv_buf_size) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (PacketPeerUDP.method_bind, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return GodotError (rawValue: _result)!
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_close: GDExtensionMethodBindPtr = {
        let methodName = StringName ("close")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Closes the ``PacketPeerUDP``'s underlying UDP socket.
    public final func close () {
        gi.object_method_bind_ptrcall (PacketPeerUDP.method_close, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_wait: GDExtensionMethodBindPtr = {
        let methodName = StringName ("wait")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166280745)!
            }
            
        }
        
    }()
    
    /// Waits for a packet to arrive on the bound address. See ``bind(port:bindAddress:recvBufSize:)``.
    /// 
    /// > Note: ``wait()`` can't be interrupted once it has been called. This can be worked around by allowing the other party to send a specific "death pill" packet like this:
    /// 
    public final func wait ()-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (PacketPeerUDP.method_wait, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_is_bound: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_bound")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns whether this ``PacketPeerUDP`` is bound to an address and can receive packets.
    public final func isBound ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PacketPeerUDP.method_is_bound, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_connect_to_host: GDExtensionMethodBindPtr = {
        let methodName = StringName ("connect_to_host")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 993915709)!
            }
            
        }
        
    }()
    
    /// Calling this method connects this UDP peer to the given `host`/`port` pair. UDP is in reality connectionless, so this option only means that incoming packets from different addresses are automatically discarded, and that outgoing packets are always sent to the connected address (future calls to ``setDestAddress(host:port:)`` are not allowed). This method does not send any data to the remote peer, to do that, use ``PacketPeer/putVar(_:fullObjects:)`` or ``PacketPeer/putPacket(buffer:)`` as usual. See also ``UDPServer``.
    /// 
    /// > Note: Connecting to the remote peer does not help to protect from malicious attacks like IP spoofing, etc. Think about using an encryption technique like TLS or DTLS if you feel like your application is transferring sensitive information.
    /// 
    public final func connectToHost (_ host: String, port: Int32)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_host = GString (host)
        var copy_port: Int = Int (port)
        
        gi.object_method_bind_ptrcall_v (PacketPeerUDP.method_connect_to_host, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_host.content, &copy_port)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_host = GString (host)
        var copy_port: Int = Int (port)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_host.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_port) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PacketPeerUDP.method_connect_to_host, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_socket_connected: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_socket_connected")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the UDP socket is open and has been connected to a remote address. See ``connectToHost(_:port:)``.
    public final func isSocketConnected ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PacketPeerUDP.method_is_socket_connected, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_packet_ip: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_packet_ip")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the IP of the remote peer that sent the last packet(that was received with ``PacketPeer/getPacket()`` or ``PacketPeer/getVar(allowObjects:)``).
    public final func getPacketIp ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (PacketPeerUDP.method_get_packet_ip, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_packet_port: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_packet_port")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the port of the remote peer that sent the last packet(that was received with ``PacketPeer/getPacket()`` or ``PacketPeer/getVar(allowObjects:)``).
    public final func getPacketPort ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (PacketPeerUDP.method_get_packet_port, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_local_port: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_local_port")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the local port to which this peer is bound.
    public final func getLocalPort ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (PacketPeerUDP.method_get_local_port, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_dest_address: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_dest_address")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 993915709)!
            }
            
        }
        
    }()
    
    /// Sets the destination address and port for sending packets and variables. A hostname will be resolved using DNS if needed.
    /// 
    /// > Note: ``setBroadcastEnabled(_:)`` must be enabled before sending packets to a broadcast address (e.g. `255.255.255.255`).
    /// 
    public final func setDestAddress (host: String, port: Int32)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_host = GString (host)
        var copy_port: Int = Int (port)
        
        gi.object_method_bind_ptrcall_v (PacketPeerUDP.method_set_dest_address, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_host.content, &copy_port)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_host = GString (host)
        var copy_port: Int = Int (port)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_host.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_port) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PacketPeerUDP.method_set_dest_address, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_broadcast_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_broadcast_enabled")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// Enable or disable sending of broadcast packets (e.g. `set_dest_address("255.255.255.255", 4343)`. This option is disabled by default.
    /// 
    /// > Note: Some Android devices might require the `CHANGE_WIFI_MULTICAST_STATE` permission and this option to be enabled to receive broadcast packets too.
    /// 
    public final func setBroadcastEnabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (PacketPeerUDP.method_set_broadcast_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PacketPeerUDP.method_set_broadcast_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_join_multicast_group: GDExtensionMethodBindPtr = {
        let methodName = StringName ("join_multicast_group")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 852856452)!
            }
            
        }
        
    }()
    
    /// Joins the multicast group specified by `multicastAddress` using the interface identified by `interfaceName`.
    /// 
    /// You can join the same multicast group with multiple interfaces. Use ``IP/getLocalInterfaces()`` to know which are available.
    /// 
    /// > Note: Some Android devices might require the `CHANGE_WIFI_MULTICAST_STATE` permission for multicast to work.
    /// 
    public final func joinMulticastGroup (multicastAddress: String, interfaceName: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_multicast_address = GString (multicastAddress)
        let gstr_interface_name = GString (interfaceName)
        
        gi.object_method_bind_ptrcall_v (PacketPeerUDP.method_join_multicast_group, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_multicast_address.content, &gstr_interface_name.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_multicast_address = GString (multicastAddress)
        let gstr_interface_name = GString (interfaceName)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_multicast_address.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_interface_name.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PacketPeerUDP.method_join_multicast_group, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_leave_multicast_group: GDExtensionMethodBindPtr = {
        let methodName = StringName ("leave_multicast_group")
        return withUnsafePointer (to: &PacketPeerUDP.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 852856452)!
            }
            
        }
        
    }()
    
    /// Removes the interface identified by `interfaceName` from the multicast group specified by `multicastAddress`.
    public final func leaveMulticastGroup (multicastAddress: String, interfaceName: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_multicast_address = GString (multicastAddress)
        let gstr_interface_name = GString (interfaceName)
        
        gi.object_method_bind_ptrcall_v (PacketPeerUDP.method_leave_multicast_group, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_multicast_address.content, &gstr_interface_name.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_multicast_address = GString (multicastAddress)
        let gstr_interface_name = GString (interfaceName)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_multicast_address.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_interface_name.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PacketPeerUDP.method_leave_multicast_group, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
}

