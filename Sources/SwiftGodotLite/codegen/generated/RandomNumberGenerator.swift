// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Provides methods for generating pseudo-random numbers.
/// 
/// RandomNumberGenerator is a class for generating pseudo-random numbers. It currently uses [url=https://www.pcg-random.org/]PCG32[/url].
/// 
/// > Note: The underlying algorithm is an implementation detail and should not be depended upon.
/// 
/// To generate a random float number (within a given range) based on a time-dependant seed:
/// 
open class RandomNumberGenerator: RefCounted {
    override open class var godotClassName: StringName { "RandomNumberGenerator" }
    
    /* Properties */
    
    /// Initializes the random number generator state based on the given seed value. A given seed will give a reproducible sequence of pseudo-random numbers.
    /// 
    /// > Note: The RNG does not have an avalanche effect, and can output similar random streams given similar seeds. Consider using a hash function to improve your seed quality if they're sourced externally.
    /// 
    /// > Note: Setting this property produces a side effect of changing the internal ``state``, so make sure to initialize the seed _before_ modifying the ``state``:
    /// 
    /// > Note: The default value of this property is pseudo-random, and changes when calling ``randomize()``. The `0` value documented here is a placeholder, and not the actual default seed.
    /// 
    final public var seed: UInt {
        get {
            return get_seed ()
        }
        
        set {
            set_seed (newValue)
        }
        
    }
    
    /// The current state of the random number generator. Save and restore this property to restore the generator to a previous state:
    /// 
    /// > Note: Do not set state to arbitrary values, since the random number generator requires the state to have certain qualities to behave properly. It should only be set to values that came from the state property itself. To initialize the random number generator with arbitrary input, use ``seed`` instead.
    /// 
    /// > Note: The default value of this property is pseudo-random, and changes when calling ``randomize()``. The `0` value documented here is a placeholder, and not the actual default seed.
    /// 
    final public var state: UInt {
        get {
            return get_state ()
        }
        
        set {
            set_state (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_seed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_seed")
        return withUnsafePointer (to: &RandomNumberGenerator.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_seed (_ seed: UInt) {
        #if false
        
        var copy_seed = seed
        
        gi.object_method_bind_ptrcall_v (RandomNumberGenerator.method_set_seed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_seed)
        
        #else
        
        var copy_seed = seed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_seed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RandomNumberGenerator.method_set_seed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_seed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_seed")
        return withUnsafePointer (to: &RandomNumberGenerator.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_seed ()-> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall (RandomNumberGenerator.method_get_seed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_state")
        return withUnsafePointer (to: &RandomNumberGenerator.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_state (_ state: UInt) {
        #if false
        
        var copy_state = state
        
        gi.object_method_bind_ptrcall_v (RandomNumberGenerator.method_set_state, UnsafeMutableRawPointer (mutating: handle), nil, &copy_state)
        
        #else
        
        var copy_state = state
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_state) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RandomNumberGenerator.method_set_state, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_state")
        return withUnsafePointer (to: &RandomNumberGenerator.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_state ()-> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall (RandomNumberGenerator.method_get_state, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_randi: GDExtensionMethodBindPtr = {
        let methodName = StringName ("randi")
        return withUnsafePointer (to: &RandomNumberGenerator.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns a pseudo-random 32-bit unsigned integer between `0` and `4294967295` (inclusive).
    public final func randi ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (RandomNumberGenerator.method_randi, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_randf: GDExtensionMethodBindPtr = {
        let methodName = StringName ("randf")
        return withUnsafePointer (to: &RandomNumberGenerator.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    /// Returns a pseudo-random float between `0.0` and `1.0` (inclusive).
    public final func randf ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RandomNumberGenerator.method_randf, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_randfn: GDExtensionMethodBindPtr = {
        let methodName = StringName ("randfn")
        return withUnsafePointer (to: &RandomNumberGenerator.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 837325100)!
            }
            
        }
        
    }()
    
    /// Returns a [url=https://en.wikipedia.org/wiki/Normal_distribution]normally-distributed[/url] pseudo-random number, using Box-Muller transform with the specified `mean` and a standard `deviation`. This is also called Gaussian distribution.
    public final func randfn (mean: Double = 0.0, deviation: Double = 1.0)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_mean = mean
        var copy_deviation = deviation
        
        gi.object_method_bind_ptrcall_v (RandomNumberGenerator.method_randfn, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_mean, &copy_deviation)
        return _result
        #else
        
        var copy_mean = mean
        var copy_deviation = deviation
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_mean) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_deviation) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (RandomNumberGenerator.method_randfn, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_randf_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("randf_range")
        return withUnsafePointer (to: &RandomNumberGenerator.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4269894367)!
            }
            
        }
        
    }()
    
    /// Returns a pseudo-random float between `from` and `to` (inclusive).
    public final func randfRange (from: Double, to: Double)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_from = from
        var copy_to = to
        
        gi.object_method_bind_ptrcall_v (RandomNumberGenerator.method_randf_range, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_from, &copy_to)
        return _result
        #else
        
        var copy_from = from
        var copy_to = to
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_from) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_to) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (RandomNumberGenerator.method_randf_range, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_randi_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("randi_range")
        return withUnsafePointer (to: &RandomNumberGenerator.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 50157827)!
            }
            
        }
        
    }()
    
    /// Returns a pseudo-random 32-bit signed integer between `from` and `to` (inclusive).
    public final func randiRange (from: Int32, to: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_from: Int = Int (from)
        var copy_to: Int = Int (to)
        
        gi.object_method_bind_ptrcall_v (RandomNumberGenerator.method_randi_range, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_from, &copy_to)
        return _result
        #else
        
        var copy_from: Int = Int (from)
        var copy_to: Int = Int (to)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_from) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_to) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (RandomNumberGenerator.method_randi_range, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_randomize: GDExtensionMethodBindPtr = {
        let methodName = StringName ("randomize")
        return withUnsafePointer (to: &RandomNumberGenerator.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Sets up a time-based seed for this ``RandomNumberGenerator`` instance. Unlike the [@GlobalScope] random number generation functions, different ``RandomNumberGenerator`` instances can use different seeds.
    public final func randomize () {
        gi.object_method_bind_ptrcall (RandomNumberGenerator.method_randomize, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
}

