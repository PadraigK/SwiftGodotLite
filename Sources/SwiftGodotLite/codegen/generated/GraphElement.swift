// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A container that represents a basic element that can be placed inside a ``GraphEdit`` control.
/// 
/// ``GraphElement`` allows to create custom elements for a ``GraphEdit`` graph. By default such elements can be selected, resized, and repositioned, but they cannot be connected. For a graph element that allows for connections see ``GraphNode``.
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``nodeSelected``
/// - ``nodeDeselected``
/// - ``raiseRequest``
/// - ``deleteRequest``
/// - ``resizeRequest``
/// - ``dragged``
/// - ``positionOffsetChanged``
open class GraphElement: Container {
    override open class var godotClassName: StringName { "GraphElement" }
    
    /* Properties */
    
    /// The offset of the GraphElement, relative to the scroll offset of the ``GraphEdit``.
    final public var positionOffset: Vector2 {
        get {
            return get_position_offset ()
        }
        
        set {
            set_position_offset (newValue)
        }
        
    }
    
    /// If `true`, the user can resize the GraphElement.
    /// 
    /// > Note: Dragging the handle will only emit the [signal resize_request] signal, the GraphElement needs to be resized manually.
    /// 
    final public var resizable: Bool {
        get {
            return is_resizable ()
        }
        
        set {
            set_resizable (newValue)
        }
        
    }
    
    /// If `true`, the user can drag the GraphElement.
    final public var draggable: Bool {
        get {
            return is_draggable ()
        }
        
        set {
            set_draggable (newValue)
        }
        
    }
    
    /// If `true`, the user can select the GraphElement.
    final public var selectable: Bool {
        get {
            return is_selectable ()
        }
        
        set {
            set_selectable (newValue)
        }
        
    }
    
    /// If `true`, the GraphElement is selected.
    final public var selected: Bool {
        get {
            return is_selected ()
        }
        
        set {
            set_selected (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_resizable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_resizable")
        return withUnsafePointer (to: &GraphElement.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_resizable (_ resizable: Bool) {
        #if true
        
        var copy_resizable = resizable
        
        gi.object_method_bind_ptrcall_v (GraphElement.method_set_resizable, UnsafeMutableRawPointer (mutating: handle), nil, &copy_resizable)
        
        #else
        
        var copy_resizable = resizable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_resizable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphElement.method_set_resizable, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_resizable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_resizable")
        return withUnsafePointer (to: &GraphElement.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_resizable ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (GraphElement.method_is_resizable, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_draggable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_draggable")
        return withUnsafePointer (to: &GraphElement.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_draggable (_ draggable: Bool) {
        #if true
        
        var copy_draggable = draggable
        
        gi.object_method_bind_ptrcall_v (GraphElement.method_set_draggable, UnsafeMutableRawPointer (mutating: handle), nil, &copy_draggable)
        
        #else
        
        var copy_draggable = draggable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_draggable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphElement.method_set_draggable, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_draggable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_draggable")
        return withUnsafePointer (to: &GraphElement.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_draggable ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (GraphElement.method_is_draggable, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_selectable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_selectable")
        return withUnsafePointer (to: &GraphElement.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_selectable (_ selectable: Bool) {
        #if true
        
        var copy_selectable = selectable
        
        gi.object_method_bind_ptrcall_v (GraphElement.method_set_selectable, UnsafeMutableRawPointer (mutating: handle), nil, &copy_selectable)
        
        #else
        
        var copy_selectable = selectable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_selectable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphElement.method_set_selectable, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_selectable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_selectable")
        return withUnsafePointer (to: &GraphElement.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_selectable ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (GraphElement.method_is_selectable, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_selected: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_selected")
        return withUnsafePointer (to: &GraphElement.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_selected (_ selected: Bool) {
        #if true
        
        var copy_selected = selected
        
        gi.object_method_bind_ptrcall_v (GraphElement.method_set_selected, UnsafeMutableRawPointer (mutating: handle), nil, &copy_selected)
        
        #else
        
        var copy_selected = selected
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_selected) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphElement.method_set_selected, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_selected: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_selected")
        return withUnsafePointer (to: &GraphElement.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_selected ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (GraphElement.method_is_selected, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_position_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_position_offset")
        return withUnsafePointer (to: &GraphElement.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_position_offset (_ offset: Vector2) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (GraphElement.method_set_position_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GraphElement.method_set_position_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_position_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_position_offset")
        return withUnsafePointer (to: &GraphElement.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_position_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (GraphElement.method_get_position_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when the GraphElement is selected.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.nodeSelected.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var nodeSelected: SimpleSignal { SimpleSignal (target: self, signalName: "node_selected") }
    
    /// Emitted when the GraphElement is deselected.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.nodeDeselected.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var nodeDeselected: SimpleSignal { SimpleSignal (target: self, signalName: "node_deselected") }
    
    /// Emitted when displaying the GraphElement over other ones is requested. Happens on focusing (clicking into) the GraphElement.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.raiseRequest.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var raiseRequest: SimpleSignal { SimpleSignal (target: self, signalName: "raise_request") }
    
    /// Emitted when removing the GraphElement is requested.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.deleteRequest.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var deleteRequest: SimpleSignal { SimpleSignal (target: self, signalName: "delete_request") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ newMinsize: Vector2) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Vector2 (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when resizing the GraphElement is requested. Happens on dragging the resizer handle (see ``resizable``).
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.resizeRequest.connect { newMinsize in
    ///    print ("caught signal")
    /// }
    /// ```
    public var resizeRequest: Signal1 { Signal1 (target: self, signalName: "resize_request") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal2/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal2/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal2/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal2 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal2 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ from: Vector2, _ to: Vector2) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Vector2 (args [0])!
                let arg_1 = Vector2 (args [1])!
                
                callback (arg_0, arg_1)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _, _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the GraphElement is dragged.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.dragged.connect { from, to in
    ///    print ("caught signal")
    /// }
    /// ```
    public var dragged: Signal2 { Signal2 (target: self, signalName: "dragged") }
    
    /// Emitted when the GraphElement is moved.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.positionOffsetChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var positionOffsetChanged: SimpleSignal { SimpleSignal (target: self, signalName: "position_offset_changed") }
    
}

