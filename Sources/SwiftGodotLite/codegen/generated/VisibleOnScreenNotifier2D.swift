// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A rectangular region of 2D space that detects whether it is visible on screen.
/// 
/// ``VisibleOnScreenEnabler2D`` represents a rectangular region of 2D space. When any part of this region becomes visible on screen or in a viewport, it will emit a [signal screen_entered] signal, and likewise it will emit a [signal screen_exited] signal when no part of it remains visible.
/// 
/// If you want a node to be enabled automatically when this region is visible on screen, use ``VisibleOnScreenEnabler2D``.
/// 
/// > Note: ``VisibleOnScreenNotifier2D`` uses the render culling code to determine whether it's visible on screen, so it won't function unless ``CanvasItem/visible`` is set to `true`.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``screenEntered``
/// - ``screenExited``
open class VisibleOnScreenNotifier2D: Node2D {
    override open class var godotClassName: StringName { "VisibleOnScreenNotifier2D" }
    
    /* Properties */
    
    /// The VisibleOnScreenNotifier2D's bounding rectangle.
    final public var rect: Rect2 {
        get {
            return get_rect ()
        }
        
        set {
            set_rect (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_rect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_rect")
        return withUnsafePointer (to: &VisibleOnScreenNotifier2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2046264180)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rect (_ rect: Rect2) {
        #if true
        
        var copy_rect = rect
        
        gi.object_method_bind_ptrcall_v (VisibleOnScreenNotifier2D.method_set_rect, UnsafeMutableRawPointer (mutating: handle), nil, &copy_rect)
        
        #else
        
        var copy_rect = rect
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_rect) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisibleOnScreenNotifier2D.method_set_rect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_rect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rect")
        return withUnsafePointer (to: &VisibleOnScreenNotifier2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1639390495)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_rect ()-> Rect2 {
        var _result: Rect2 = Rect2 ()
        gi.object_method_bind_ptrcall (VisibleOnScreenNotifier2D.method_get_rect, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_on_screen: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_on_screen")
        return withUnsafePointer (to: &VisibleOnScreenNotifier2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// If `true`, the bounding rectangle is on the screen.
    /// 
    /// > Note: It takes one frame for the ``VisibleOnScreenNotifier2D``'s visibility to be determined once added to the scene tree, so this method will always return `false` right after it is instantiated, before the draw pass.
    /// 
    public final func isOnScreen ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (VisibleOnScreenNotifier2D.method_is_on_screen, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when the VisibleOnScreenNotifier2D enters the screen.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.screenEntered.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var screenEntered: SimpleSignal { SimpleSignal (target: self, signalName: "screen_entered") }
    
    /// Emitted when the VisibleOnScreenNotifier2D exits the screen.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.screenExited.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var screenExited: SimpleSignal { SimpleSignal (target: self, signalName: "screen_exited") }
    
}

