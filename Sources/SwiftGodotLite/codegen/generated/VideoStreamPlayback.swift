// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Internal class used by ``VideoStream`` to manage playback state when played from a ``VideoStreamPlayer``.
/// 
/// This class is intended to be overridden by video decoder extensions with custom implementations of ``VideoStream``.
open class VideoStreamPlayback: Resource {
    override open class var godotClassName: StringName { "VideoStreamPlayback" }
    /* Methods */
    /// Stops playback. May be called multiple times before ``_play()``, or in response to ``VideoStreamPlayer/stop()``. ``_isPlaying()`` should return false once stopped.
    @_documentation(visibility: public)
    open func _stop () {
    }
    
    /// Called in response to ``VideoStreamPlayer/autoplay`` or ``VideoStreamPlayer/play()``. Note that manual playback may also invoke ``_stop()`` multiple times before this method is called. ``_isPlaying()`` should return true once playing.
    @_documentation(visibility: public)
    open func _play () {
    }
    
    /// Returns the playback state, as determined by calls to ``_play()`` and ``_stop()``.
    @_documentation(visibility: public)
    open func _isPlaying ()-> Bool {
        return false
    }
    
    /// Set the paused status of video playback. ``_isPaused()`` must return `paused`. Called in response to the ``VideoStreamPlayer/paused`` setter.
    @_documentation(visibility: public)
    open func _setPaused (_ paused: Bool) {
    }
    
    /// Returns the paused status, as set by ``_setPaused(_:)``.
    @_documentation(visibility: public)
    open func _isPaused ()-> Bool {
        return false
    }
    
    /// Returns the video duration in seconds, if known, or 0 if unknown.
    @_documentation(visibility: public)
    open func _getLength ()-> Double {
        return 0.0
    }
    
    /// Return the current playback timestamp. Called in response to the ``VideoStreamPlayer/streamPosition`` getter.
    @_documentation(visibility: public)
    open func _getPlaybackPosition ()-> Double {
        return 0.0
    }
    
    /// Seeks to `time` seconds. Called in response to the ``VideoStreamPlayer/streamPosition`` setter.
    @_documentation(visibility: public)
    open func _seek (time: Double) {
    }
    
    /// Select the audio track `idx`. Called when playback starts, and in response to the ``VideoStreamPlayer/audioTrack`` setter.
    @_documentation(visibility: public)
    open func _setAudioTrack (idx: Int32) {
    }
    
    /// Allocates a ``Texture2D`` in which decoded video frames will be drawn.
    @_documentation(visibility: public)
    open func _getTexture ()-> Texture2D? {
        return Texture2D ()
    }
    
    /// Ticks video playback for `delta` seconds. Called every frame as long as ``_isPaused()`` and ``_isPlaying()`` return true.
    @_documentation(visibility: public)
    open func _update (delta: Double) {
    }
    
    /// Returns the number of audio channels.
    @_documentation(visibility: public)
    open func _getChannels ()-> Int32 {
        return 0
    }
    
    /// Returns the audio sample rate used for mixing.
    @_documentation(visibility: public)
    open func _getMixRate ()-> Int32 {
        return 0
    }
    
    fileprivate static var method_mix_audio: GDExtensionMethodBindPtr = {
        let methodName = StringName ("mix_audio")
        return withUnsafePointer (to: &VideoStreamPlayback.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 93876830)!
            }
            
        }
        
    }()
    
    /// Render `numFrames` audio frames (of ``_getChannels()`` floats each) from `buffer`, starting from index `offset` in the array. Returns the number of audio frames rendered, or -1 on error.
    public final func mixAudio (numFrames: Int32, buffer: PackedFloat32Array = PackedFloat32Array(), offset: Int32 = 0)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_num_frames: Int = Int (numFrames)
        var copy_offset: Int = Int (offset)
        
        gi.object_method_bind_ptrcall_v (VideoStreamPlayback.method_mix_audio, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_num_frames, &buffer.content, &copy_offset)
        return _result
        #else
        
        var copy_num_frames: Int = Int (numFrames)
        var copy_offset: Int = Int (offset)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_num_frames) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &buffer.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_offset) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (VideoStreamPlayback.method_mix_audio, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_get_channels":
                return _VideoStreamPlayback_proxy_get_channels
            case "_get_length":
                return _VideoStreamPlayback_proxy_get_length
            case "_get_mix_rate":
                return _VideoStreamPlayback_proxy_get_mix_rate
            case "_get_playback_position":
                return _VideoStreamPlayback_proxy_get_playback_position
            case "_get_texture":
                return _VideoStreamPlayback_proxy_get_texture
            case "_is_paused":
                return _VideoStreamPlayback_proxy_is_paused
            case "_is_playing":
                return _VideoStreamPlayback_proxy_is_playing
            case "_play":
                return _VideoStreamPlayback_proxy_play
            case "_seek":
                return _VideoStreamPlayback_proxy_seek
            case "_set_audio_track":
                return _VideoStreamPlayback_proxy_set_audio_track
            case "_set_paused":
                return _VideoStreamPlayback_proxy_set_paused
            case "_stop":
                return _VideoStreamPlayback_proxy_stop
            case "_update":
                return _VideoStreamPlayback_proxy_update
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _VideoStreamPlayback_proxy_get_channels (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getChannels ()
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _VideoStreamPlayback_proxy_get_length (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getLength ()
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _VideoStreamPlayback_proxy_get_mix_rate (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getMixRate ()
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _VideoStreamPlayback_proxy_get_playback_position (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPlaybackPosition ()
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _VideoStreamPlayback_proxy_get_texture (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getTexture ()
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // Texture2D
}

func _VideoStreamPlayback_proxy_is_paused (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isPaused ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _VideoStreamPlayback_proxy_is_playing (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isPlaying ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _VideoStreamPlayback_proxy_play (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._play ()
}

func _VideoStreamPlayback_proxy_seek (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._seek (time: args [0]!.assumingMemoryBound (to: Double.self).pointee)
}

func _VideoStreamPlayback_proxy_set_audio_track (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setAudioTrack (idx: args [0]!.assumingMemoryBound (to: Int32.self).pointee)
}

func _VideoStreamPlayback_proxy_set_paused (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setPaused (args [0]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _VideoStreamPlayback_proxy_stop (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._stop ()
}

func _VideoStreamPlayback_proxy_update (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<VideoStreamPlayback>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._update (delta: args [0]!.assumingMemoryBound (to: Double.self).pointee)
}

