// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A CSG Sphere shape.
/// 
/// This node allows you to create a sphere for use with the CSG system.
/// 
/// > Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a ``MeshInstance3D`` with a ``PrimitiveMesh``. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.
/// 
open class CSGSphere3D: CSGPrimitive3D {
    override open class var godotClassName: StringName { "CSGSphere3D" }
    
    /* Properties */
    
    /// Radius of the sphere.
    final public var radius: Double {
        get {
            return get_radius ()
        }
        
        set {
            set_radius (newValue)
        }
        
    }
    
    /// Number of vertical slices for the sphere.
    final public var radialSegments: Int32 {
        get {
            return get_radial_segments ()
        }
        
        set {
            set_radial_segments (newValue)
        }
        
    }
    
    /// Number of horizontal slices for the sphere.
    final public var rings: Int32 {
        get {
            return get_rings ()
        }
        
        set {
            set_rings (newValue)
        }
        
    }
    
    /// If `true` the normals of the sphere are set to give a smooth effect making the sphere seem rounded. If `false` the sphere will have a flat shaded look.
    final public var smoothFaces: Bool {
        get {
            return get_smooth_faces ()
        }
        
        set {
            set_smooth_faces (newValue)
        }
        
    }
    
    /// The material used to render the sphere.
    final public var material: Material? {
        get {
            return get_material ()
        }
        
        set {
            set_material (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_radius")
        return withUnsafePointer (to: &CSGSphere3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_radius (_ radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (CSGSphere3D.method_set_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGSphere3D.method_set_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_radius")
        return withUnsafePointer (to: &CSGSphere3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CSGSphere3D.method_get_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_radial_segments: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_radial_segments")
        return withUnsafePointer (to: &CSGSphere3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_radial_segments (_ radialSegments: Int32) {
        #if false
        
        var copy_radial_segments: Int = Int (radialSegments)
        
        gi.object_method_bind_ptrcall_v (CSGSphere3D.method_set_radial_segments, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radial_segments)
        
        #else
        
        var copy_radial_segments: Int = Int (radialSegments)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radial_segments) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGSphere3D.method_set_radial_segments, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_radial_segments: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_radial_segments")
        return withUnsafePointer (to: &CSGSphere3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_radial_segments ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (CSGSphere3D.method_get_radial_segments, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_rings: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_rings")
        return withUnsafePointer (to: &CSGSphere3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rings (_ rings: Int32) {
        #if false
        
        var copy_rings: Int = Int (rings)
        
        gi.object_method_bind_ptrcall_v (CSGSphere3D.method_set_rings, UnsafeMutableRawPointer (mutating: handle), nil, &copy_rings)
        
        #else
        
        var copy_rings: Int = Int (rings)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_rings) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGSphere3D.method_set_rings, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_rings: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rings")
        return withUnsafePointer (to: &CSGSphere3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_rings ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (CSGSphere3D.method_get_rings, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_smooth_faces: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_smooth_faces")
        return withUnsafePointer (to: &CSGSphere3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_smooth_faces (_ smoothFaces: Bool) {
        #if false
        
        var copy_smooth_faces = smoothFaces
        
        gi.object_method_bind_ptrcall_v (CSGSphere3D.method_set_smooth_faces, UnsafeMutableRawPointer (mutating: handle), nil, &copy_smooth_faces)
        
        #else
        
        var copy_smooth_faces = smoothFaces
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_smooth_faces) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGSphere3D.method_set_smooth_faces, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_smooth_faces: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_smooth_faces")
        return withUnsafePointer (to: &CSGSphere3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_smooth_faces ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CSGSphere3D.method_get_smooth_faces, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_material: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_material")
        return withUnsafePointer (to: &CSGSphere3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2757459619)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_material (_ material: Material?) {
        #if false
        
        var copy_material_handle = material?.handle
        
        gi.object_method_bind_ptrcall_v (CSGSphere3D.method_set_material, UnsafeMutableRawPointer (mutating: handle), nil, &copy_material_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: material?.handle) { p0 in
        _args.append (material == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (CSGSphere3D.method_set_material, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_material: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_material")
        return withUnsafePointer (to: &CSGSphere3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 5934680)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_material ()-> Material? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (CSGSphere3D.method_get_material, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

