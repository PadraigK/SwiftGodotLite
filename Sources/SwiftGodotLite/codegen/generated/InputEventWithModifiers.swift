// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract base class for input events affected by modifier keys like [kbd]Shift[/kbd] and [kbd]Alt[/kbd].
/// 
/// Stores information about mouse, keyboard, and touch gesture input events. This includes information about which modifier keys are pressed, such as [kbd]Shift[/kbd] or [kbd]Alt[/kbd]. See ``Node/_input(event:)``.
open class InputEventWithModifiers: InputEventFromWindow {
    override open class var godotClassName: StringName { "InputEventWithModifiers" }
    
    /* Properties */
    
    /// Automatically use [kbd]Meta[/kbd] ([kbd]Cmd[/kbd]) on macOS and [kbd]Ctrl[/kbd] on other platforms. If `true`, ``ctrlPressed`` and ``metaPressed`` cannot be set.
    final public var commandOrControlAutoremap: Bool {
        get {
            return is_command_or_control_autoremap ()
        }
        
        set {
            set_command_or_control_autoremap (newValue)
        }
        
    }
    
    /// State of the [kbd]Alt[/kbd] modifier.
    final public var altPressed: Bool {
        get {
            return is_alt_pressed ()
        }
        
        set {
            set_alt_pressed (newValue)
        }
        
    }
    
    /// State of the [kbd]Shift[/kbd] modifier.
    final public var shiftPressed: Bool {
        get {
            return is_shift_pressed ()
        }
        
        set {
            set_shift_pressed (newValue)
        }
        
    }
    
    /// State of the [kbd]Ctrl[/kbd] modifier.
    final public var ctrlPressed: Bool {
        get {
            return is_ctrl_pressed ()
        }
        
        set {
            set_ctrl_pressed (newValue)
        }
        
    }
    
    /// State of the [kbd]Meta[/kbd] modifier. On Windows and Linux, this represents the Windows key (sometimes called "meta" or "super" on Linux). On macOS, this represents the Command key.
    final public var metaPressed: Bool {
        get {
            return is_meta_pressed ()
        }
        
        set {
            set_meta_pressed (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_command_or_control_autoremap: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_command_or_control_autoremap")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_command_or_control_autoremap (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (InputEventWithModifiers.method_set_command_or_control_autoremap, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventWithModifiers.method_set_command_or_control_autoremap, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_command_or_control_autoremap: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_command_or_control_autoremap")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_command_or_control_autoremap ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (InputEventWithModifiers.method_is_command_or_control_autoremap, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_command_or_control_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_command_or_control_pressed")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// On macOS, returns `true` if [kbd]Meta[/kbd] ([kbd]Cmd[/kbd]) is pressed.
    /// 
    /// On other platforms, returns `true` if [kbd]Ctrl[/kbd] is pressed.
    /// 
    public final func isCommandOrControlPressed ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (InputEventWithModifiers.method_is_command_or_control_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_alt_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alt_pressed")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alt_pressed (_ pressed: Bool) {
        #if false
        
        var copy_pressed = pressed
        
        gi.object_method_bind_ptrcall_v (InputEventWithModifiers.method_set_alt_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pressed)
        
        #else
        
        var copy_pressed = pressed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pressed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventWithModifiers.method_set_alt_pressed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_alt_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_alt_pressed")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_alt_pressed ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (InputEventWithModifiers.method_is_alt_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shift_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shift_pressed")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shift_pressed (_ pressed: Bool) {
        #if false
        
        var copy_pressed = pressed
        
        gi.object_method_bind_ptrcall_v (InputEventWithModifiers.method_set_shift_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pressed)
        
        #else
        
        var copy_pressed = pressed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pressed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventWithModifiers.method_set_shift_pressed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_shift_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_shift_pressed")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_shift_pressed ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (InputEventWithModifiers.method_is_shift_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ctrl_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ctrl_pressed")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ctrl_pressed (_ pressed: Bool) {
        #if false
        
        var copy_pressed = pressed
        
        gi.object_method_bind_ptrcall_v (InputEventWithModifiers.method_set_ctrl_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pressed)
        
        #else
        
        var copy_pressed = pressed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pressed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventWithModifiers.method_set_ctrl_pressed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_ctrl_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_ctrl_pressed")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_ctrl_pressed ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (InputEventWithModifiers.method_is_ctrl_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_meta_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_meta_pressed")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_meta_pressed (_ pressed: Bool) {
        #if false
        
        var copy_pressed = pressed
        
        gi.object_method_bind_ptrcall_v (InputEventWithModifiers.method_set_meta_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pressed)
        
        #else
        
        var copy_pressed = pressed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pressed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventWithModifiers.method_set_meta_pressed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_meta_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_meta_pressed")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_meta_pressed ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (InputEventWithModifiers.method_is_meta_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_modifiers_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_modifiers_mask")
        return withUnsafePointer (to: &InputEventWithModifiers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1258259499)!
            }
            
        }
        
    }()
    
    /// Returns the keycode combination of modifier keys.
    public final func getModifiersMask ()-> KeyModifierMask {
        var _result: KeyModifierMask = KeyModifierMask ()
        gi.object_method_bind_ptrcall (InputEventWithModifiers.method_get_modifiers_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

