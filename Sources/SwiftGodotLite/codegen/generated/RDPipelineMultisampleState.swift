// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Pipeline multisample state (used by ``RenderingDevice``).
/// 
/// ``RDPipelineMultisampleState`` is used to control how multisample or supersample antialiasing is being performed when rendering using ``RenderingDevice``.
open class RDPipelineMultisampleState: RefCounted {
    override open class var godotClassName: StringName { "RDPipelineMultisampleState" }
    
    /* Properties */
    
    /// The number of MSAA samples (or SSAA samples if ``enableSampleShading`` is `true`) to perform. Higher values result in better antialiasing, at the cost of performance.
    final public var sampleCount: RenderingDevice.TextureSamples {
        get {
            return get_sample_count ()
        }
        
        set {
            set_sample_count (newValue)
        }
        
    }
    
    /// If `true`, enables per-sample shading which replaces MSAA by SSAA. This provides higher quality antialiasing that works with transparent (alpha scissor) edges. This has a very high performance cost. See also ``minSampleShading``. See the [url=https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#primsrast-sampleshading]per-sample shading Vulkan documentation[/url] for more details.
    final public var enableSampleShading: Bool {
        get {
            return get_enable_sample_shading ()
        }
        
        set {
            set_enable_sample_shading (newValue)
        }
        
    }
    
    /// The multiplier of ``sampleCount`` that determines how many samples are performed for each fragment. Must be between `0.0` and `1.0` (inclusive). Only effective if ``enableSampleShading`` is `true`. If ``minSampleShading`` is `1.0`, fragment invocation must only read from the coverage index sample. Tile image access must not be used if ``enableSampleShading`` is _not_ `1.0`.
    final public var minSampleShading: Double {
        get {
            return get_min_sample_shading ()
        }
        
        set {
            set_min_sample_shading (newValue)
        }
        
    }
    
    /// If `true`, alpha to coverage is enabled. This generates a temporary coverage value based on the alpha component of the fragment's first color output. This allows alpha transparency to make use of multisample antialiasing.
    final public var enableAlphaToCoverage: Bool {
        get {
            return get_enable_alpha_to_coverage ()
        }
        
        set {
            set_enable_alpha_to_coverage (newValue)
        }
        
    }
    
    /// If `true`, alpha is forced to either `0.0` or `1.0`. This allows hardening the edges of antialiased alpha transparencies. Only relevant if ``enableAlphaToCoverage`` is `true`.
    final public var enableAlphaToOne: Bool {
        get {
            return get_enable_alpha_to_one ()
        }
        
        set {
            set_enable_alpha_to_one (newValue)
        }
        
    }
    
    /// The sample mask array. See the [url=https://registry.khronos.org/vulkan/specs/1.3-extensions/html/vkspec.html#fragops-samplemask]sample mask Vulkan documentation[/url] for more details.
    final public var sampleMasks: VariantCollection<Int64> {
        get {
            return get_sample_masks ()
        }
        
        set {
            set_sample_masks (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_sample_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sample_count")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3774171498)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sample_count (_ pMember: RenderingDevice.TextureSamples) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineMultisampleState.method_set_sample_count, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_set_sample_count, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sample_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sample_count")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 407791724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sample_count ()-> RenderingDevice.TextureSamples {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_get_sample_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.TextureSamples (rawValue: _result)!
    }
    
    fileprivate static var method_set_enable_sample_shading: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_sample_shading")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_sample_shading (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineMultisampleState.method_set_enable_sample_shading, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_set_enable_sample_shading, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_sample_shading: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_sample_shading")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_sample_shading ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_get_enable_sample_shading, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_min_sample_shading: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_min_sample_shading")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_min_sample_shading (_ pMember: Double) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineMultisampleState.method_set_min_sample_shading, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_set_min_sample_shading, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_min_sample_shading: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_min_sample_shading")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_min_sample_shading ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_get_min_sample_shading, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_enable_alpha_to_coverage: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_alpha_to_coverage")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_alpha_to_coverage (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineMultisampleState.method_set_enable_alpha_to_coverage, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_set_enable_alpha_to_coverage, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_alpha_to_coverage: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_alpha_to_coverage")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_alpha_to_coverage ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_get_enable_alpha_to_coverage, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_enable_alpha_to_one: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_alpha_to_one")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_alpha_to_one (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineMultisampleState.method_set_enable_alpha_to_one, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_set_enable_alpha_to_one, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_alpha_to_one: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_alpha_to_one")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_alpha_to_one ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_get_enable_alpha_to_one, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sample_masks: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sample_masks")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sample_masks (_ masks: VariantCollection<Int64>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (RDPipelineMultisampleState.method_set_sample_masks, UnsafeMutableRawPointer (mutating: handle), nil, &masks.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &masks.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_set_sample_masks, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sample_masks: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sample_masks")
        return withUnsafePointer (to: &RDPipelineMultisampleState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sample_masks ()-> VariantCollection<Int64> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (RDPipelineMultisampleState.method_get_sample_masks, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<Int64>(content: _result)
    }
    
}

