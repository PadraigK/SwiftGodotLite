// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A spatial node that has its position automatically updated by the ``XRServer``.
/// 
/// This node can be bound to a specific pose of a ``XRPositionalTracker`` and will automatically have its ``Node3D/transform`` updated by the ``XRServer``. Nodes of this type must be added as children of the ``XROrigin3D`` node.
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``trackingChanged``
open class XRNode3D: Node3D {
    override open class var godotClassName: StringName { "XRNode3D" }
    
    /* Properties */
    
    /// The name of the tracker we're bound to. Which trackers are available is not known during design time.
    /// 
    /// Godot defines a number of standard trackers such as `left_hand` and `right_hand` but others may be configured within a given ``XRInterface``.
    /// 
    final public var tracker: StringName {
        get {
            return get_tracker ()
        }
        
        set {
            set_tracker (newValue)
        }
        
    }
    
    /// The name of the pose we're bound to. Which poses a tracker supports is not known during design time.
    /// 
    /// Godot defines number of standard pose names such as `aim` and `grip` but other may be configured within a given ``XRInterface``.
    /// 
    final public var pose: StringName {
        get {
            return get_pose_name ()
        }
        
        set {
            set_pose_name (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_tracker: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tracker")
        return withUnsafePointer (to: &XRNode3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tracker (_ trackerName: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (XRNode3D.method_set_tracker, UnsafeMutableRawPointer (mutating: handle), nil, &trackerName.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &trackerName.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (XRNode3D.method_set_tracker, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tracker: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tracker")
        return withUnsafePointer (to: &XRNode3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tracker ()-> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall (XRNode3D.method_get_tracker, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_pose_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pose_name")
        return withUnsafePointer (to: &XRNode3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pose_name (_ pose: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (XRNode3D.method_set_pose_name, UnsafeMutableRawPointer (mutating: handle), nil, &pose.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &pose.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (XRNode3D.method_set_pose_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_pose_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pose_name")
        return withUnsafePointer (to: &XRNode3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pose_name ()-> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall (XRNode3D.method_get_pose_name, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_is_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_is_active")
        return withUnsafePointer (to: &XRNode3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the ``tracker`` has been registered and the ``pose`` is being tracked.
    public final func getIsActive ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (XRNode3D.method_get_is_active, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_has_tracking_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_has_tracking_data")
        return withUnsafePointer (to: &XRNode3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the ``tracker`` has current tracking data for the ``pose`` being tracked.
    public final func getHasTrackingData ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (XRNode3D.method_get_has_tracking_data, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_pose: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pose")
        return withUnsafePointer (to: &XRNode3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2806551826)!
            }
            
        }
        
    }()
    
    /// Returns the ``XRPose`` containing the current state of the pose being tracked. This gives access to additional properties of this pose.
    public final func getPose ()-> XRPose? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (XRNode3D.method_get_pose, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_trigger_haptic_pulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("trigger_haptic_pulse")
        return withUnsafePointer (to: &XRNode3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 508576839)!
            }
            
        }
        
    }()
    
    /// Triggers a haptic pulse on a device associated with this interface.
    /// 
    /// `actionName` is the name of the action for this pulse.
    /// 
    public final func triggerHapticPulse (actionName: String, frequency: Double, amplitude: Double, durationSec: Double, delaySec: Double) {
        #if false
        
        let gstr_action_name = GString (actionName)
        var copy_frequency = frequency
        var copy_amplitude = amplitude
        var copy_duration_sec = durationSec
        var copy_delay_sec = delaySec
        
        gi.object_method_bind_ptrcall_v (XRNode3D.method_trigger_haptic_pulse, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_action_name.content, &copy_frequency, &copy_amplitude, &copy_duration_sec, &copy_delay_sec)
        
        #else
        
        let gstr_action_name = GString (actionName)
        var copy_frequency = frequency
        var copy_amplitude = amplitude
        var copy_duration_sec = durationSec
        var copy_delay_sec = delaySec
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_action_name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_frequency) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_amplitude) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_duration_sec) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_delay_sec) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (XRNode3D.method_trigger_haptic_pulse, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ tracking: Bool) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Bool (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the ``tracker`` starts or stops receiving updated tracking data for the ``pose`` being tracked. The `tracking` argument indicates whether the tracker is getting updated tracking data.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.trackingChanged.connect { tracking in
    ///    print ("caught signal")
    /// }
    /// ```
    public var trackingChanged: Signal1 { Signal1 (target: self, signalName: "tracking_changed") }
    
}

