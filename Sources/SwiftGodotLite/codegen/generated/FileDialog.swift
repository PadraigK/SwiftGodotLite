// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A dialog for selecting files or directories in the filesystem.
/// 
/// ``FileDialog`` is a preset dialog used to choose files and directories in the filesystem. It supports filter masks. ``FileDialog`` automatically sets its window title according to the ``fileMode``. If you want to use a custom title, disable this by setting ``modeOverridesTitle`` to `false`.
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``fileSelected``
/// - ``filesSelected``
/// - ``dirSelected``
open class FileDialog: ConfirmationDialog {
    override open class var godotClassName: StringName { "FileDialog" }
    public enum FileMode: Int64 {
        /// The dialog allows selecting one, and only one file.
        case openFile = 0 // FILE_MODE_OPEN_FILE
        /// The dialog allows selecting multiple files.
        case openFiles = 1 // FILE_MODE_OPEN_FILES
        /// The dialog only allows selecting a directory, disallowing the selection of any file.
        case openDir = 2 // FILE_MODE_OPEN_DIR
        /// The dialog allows selecting one file or directory.
        case openAny = 3 // FILE_MODE_OPEN_ANY
        /// The dialog will warn when a file exists.
        case saveFile = 4 // FILE_MODE_SAVE_FILE
    }
    
    public enum Access: Int64 {
        /// The dialog only allows accessing files under the ``Resource`` path (`res://`).
        case resources = 0 // ACCESS_RESOURCES
        /// The dialog only allows accessing files under user data path (`user://`).
        case userdata = 1 // ACCESS_USERDATA
        /// The dialog allows accessing files on the whole file system.
        case filesystem = 2 // ACCESS_FILESYSTEM
    }
    
    
    /* Properties */
    
    /// If `true`, changing the ``fileMode`` property will set the window title accordingly (e.g. setting ``fileMode`` to .openFile will change the window title to "Open a File").
    final public var modeOverridesTitle: Bool {
        get {
            return is_mode_overriding_title ()
        }
        
        set {
            set_mode_overrides_title (newValue)
        }
        
    }
    
    /// The dialog's open or save mode, which affects the selection behavior. See ``FileDialog/FileMode``.
    final public var fileMode: FileDialog.FileMode {
        get {
            return get_file_mode ()
        }
        
        set {
            set_file_mode (newValue)
        }
        
    }
    
    /// The file system access scope. See ``FileDialog/Access`` constants.
    /// 
    /// > Warning: Currently, in sandboxed environments such as Web builds or sandboxed macOS apps, FileDialog cannot access the host file system. See [url=https://github.com/godotengine/godot-proposals/issues/1123]godot-proposals#1123[/url].
    /// 
    final public var access: FileDialog.Access {
        get {
            return get_access ()
        }
        
        set {
            set_access (newValue)
        }
        
    }
    
    /// If non-empty, the given sub-folder will be "root" of this ``FileDialog``, i.e. user won't be able to go to its parent directory.
    final public var rootSubfolder: String {
        get {
            return get_root_subfolder ()
        }
        
        set {
            set_root_subfolder (newValue)
        }
        
    }
    
    /// The available file type filters. For example, this shows only `.png` and `.gd` files: `set_filters(PackedStringArray(["*.png ; PNG Images","*.gd ; GDScript Files"]))`. Multiple file types can also be specified in a single filter. `"*.png, *.jpg, *.jpeg ; Supported Images"` will show both PNG and JPEG files when selected.
    final public var filters: PackedStringArray {
        get {
            return get_filters ()
        }
        
        set {
            set_filters (newValue)
        }
        
    }
    
    /// If `true`, the dialog will show hidden files.
    final public var showHiddenFiles: Bool {
        get {
            return is_showing_hidden_files ()
        }
        
        set {
            set_show_hidden_files (newValue)
        }
        
    }
    
    /// If `true`, ``access`` is set to .filesystem, and it is supported by the current ``DisplayServer``, OS native dialog will be used instead of custom one.
    /// 
    /// > Note: On macOS, sandboxed apps always use native dialogs to access host filesystem.
    /// 
    final public var useNativeDialog: Bool {
        get {
            return get_use_native_dialog ()
        }
        
        set {
            set_use_native_dialog (newValue)
        }
        
    }
    
    /// The current working directory of the file dialog.
    final public var currentDir: String {
        get {
            return get_current_dir ()
        }
        
        set {
            set_current_dir (newValue)
        }
        
    }
    
    /// The currently selected file of the file dialog.
    final public var currentFile: String {
        get {
            return get_current_file ()
        }
        
        set {
            set_current_file (newValue)
        }
        
    }
    
    /// The currently selected file path of the file dialog.
    final public var currentPath: String {
        get {
            return get_current_path ()
        }
        
        set {
            set_current_path (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_clear_filters: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_filters")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clear all the added filters in the dialog.
    public final func clearFilters () {
        gi.object_method_bind_ptrcall (FileDialog.method_clear_filters, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_add_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_filter")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3388804757)!
            }
            
        }
        
    }()
    
    /// Adds a comma-delimited file name `filter` option to the ``FileDialog`` with an optional `description`, which restricts what files can be picked.
    /// 
    /// A `filter` should be of the form `"filename.extension"`, where filename and extension can be `*` to match any string. Filters starting with `.` (i.e. empty filenames) are not allowed.
    /// 
    /// For example, a `filter` of `"*.png, *.jpg"` and a `description` of `"Images"` results in filter text "Images (*.png, *.jpg)".
    /// 
    public final func addFilter (_ filter: String, description: String = "") {
        #if false
        
        let gstr_filter = GString (filter)
        let gstr_description = GString (description)
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_add_filter, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_filter.content, &gstr_description.content)
        
        #else
        
        let gstr_filter = GString (filter)
        let gstr_description = GString (description)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_filter.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_description.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (FileDialog.method_add_filter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_filters: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_filters")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4015028928)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_filters (_ filters: PackedStringArray) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_set_filters, UnsafeMutableRawPointer (mutating: handle), nil, &filters.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &filters.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FileDialog.method_set_filters, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_filters: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_filters")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_filters ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (FileDialog.method_get_filters, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_current_dir: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_dir")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_current_dir ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (FileDialog.method_get_current_dir, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_current_file: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_file")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_current_file ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (FileDialog.method_get_current_file, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_current_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_path")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_current_path ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (FileDialog.method_get_current_path, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_current_dir: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_current_dir")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_current_dir (_ dir: String) {
        #if false
        
        let gstr_dir = GString (dir)
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_set_current_dir, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_dir.content)
        
        #else
        
        let gstr_dir = GString (dir)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_dir.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FileDialog.method_set_current_dir, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_current_file: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_current_file")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_current_file (_ file: String) {
        #if false
        
        let gstr_file = GString (file)
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_set_current_file, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_file.content)
        
        #else
        
        let gstr_file = GString (file)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_file.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FileDialog.method_set_current_file, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_current_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_current_path")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_current_path (_ path: String) {
        #if false
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_set_current_path, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_path.content)
        
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FileDialog.method_set_current_path, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_mode_overrides_title: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mode_overrides_title")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mode_overrides_title (_ override: Bool) {
        #if false
        
        var copy_override = override
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_set_mode_overrides_title, UnsafeMutableRawPointer (mutating: handle), nil, &copy_override)
        
        #else
        
        var copy_override = override
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_override) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FileDialog.method_set_mode_overrides_title, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_mode_overriding_title: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_mode_overriding_title")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_mode_overriding_title ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (FileDialog.method_is_mode_overriding_title, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_file_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_file_mode")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3654936397)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_file_mode (_ mode: FileDialog.FileMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_set_file_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FileDialog.method_set_file_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_file_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_file_mode")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4074825319)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_file_mode ()-> FileDialog.FileMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (FileDialog.method_get_file_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return FileDialog.FileMode (rawValue: _result)!
    }
    
    fileprivate static var method_get_vbox: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vbox")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 915758477)!
            }
            
        }
        
    }()
    
    /// Returns the vertical box container of the dialog, custom controls can be added to it.
    /// 
    /// > Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their ``CanvasItem/visible`` property.
    /// 
    public final func getVbox ()-> VBoxContainer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (FileDialog.method_get_vbox, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_line_edit: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_line_edit")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4071694264)!
            }
            
        }
        
    }()
    
    /// Returns the LineEdit for the selected file.
    /// 
    /// > Warning: This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their ``CanvasItem/visible`` property.
    /// 
    public final func getLineEdit ()-> LineEdit? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (FileDialog.method_get_line_edit, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_access: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_access")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4104413466)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_access (_ access: FileDialog.Access) {
        #if false
        
        var copy_access = Int64 (access.rawValue)
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_set_access, UnsafeMutableRawPointer (mutating: handle), nil, &copy_access)
        
        #else
        
        var copy_access = Int64 (access.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_access) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FileDialog.method_set_access, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_access: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_access")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3344081076)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_access ()-> FileDialog.Access {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (FileDialog.method_get_access, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return FileDialog.Access (rawValue: _result)!
    }
    
    fileprivate static var method_set_root_subfolder: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_root_subfolder")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_root_subfolder (_ dir: String) {
        #if false
        
        let gstr_dir = GString (dir)
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_set_root_subfolder, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_dir.content)
        
        #else
        
        let gstr_dir = GString (dir)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_dir.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FileDialog.method_set_root_subfolder, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_root_subfolder: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_root_subfolder")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_root_subfolder ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (FileDialog.method_get_root_subfolder, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_show_hidden_files: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_show_hidden_files")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_show_hidden_files (_ show: Bool) {
        #if false
        
        var copy_show = show
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_set_show_hidden_files, UnsafeMutableRawPointer (mutating: handle), nil, &copy_show)
        
        #else
        
        var copy_show = show
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_show) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FileDialog.method_set_show_hidden_files, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_showing_hidden_files: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_showing_hidden_files")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_showing_hidden_files ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (FileDialog.method_is_showing_hidden_files, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_use_native_dialog: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_native_dialog")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_native_dialog (_ native: Bool) {
        #if false
        
        var copy_native = native
        
        gi.object_method_bind_ptrcall_v (FileDialog.method_set_use_native_dialog, UnsafeMutableRawPointer (mutating: handle), nil, &copy_native)
        
        #else
        
        var copy_native = native
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_native) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (FileDialog.method_set_use_native_dialog, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_use_native_dialog: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_use_native_dialog")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_use_native_dialog ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (FileDialog.method_get_use_native_dialog, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_deselect_all: GDExtensionMethodBindPtr = {
        let methodName = StringName ("deselect_all")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clear all currently selected items in the dialog.
    public final func deselectAll () {
        gi.object_method_bind_ptrcall (FileDialog.method_deselect_all, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_invalidate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("invalidate")
        return withUnsafePointer (to: &FileDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Invalidate and update the current dialog content list.
    public final func invalidate () {
        gi.object_method_bind_ptrcall (FileDialog.method_invalidate, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ path: String) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = GString (args [0])!.description
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the user selects a file by double-clicking it or pressing the **OK** button.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.fileSelected.connect { path in
    ///    print ("caught signal")
    /// }
    /// ```
    public var fileSelected: Signal1 { Signal1 (target: self, signalName: "file_selected") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal2/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal2/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal2/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal2 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal2 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ paths: PackedStringArray) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = PackedStringArray (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the user selects multiple files.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.filesSelected.connect { paths in
    ///    print ("caught signal")
    /// }
    /// ```
    public var filesSelected: Signal2 { Signal2 (target: self, signalName: "files_selected") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal3/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal3/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal3/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal3 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal3 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ dir: String) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = GString (args [0])!.description
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the user selects a directory.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.dirSelected.connect { dir in
    ///    print ("caught signal")
    /// }
    /// ```
    public var dirSelected: Signal3 { Signal3 (target: self, signalName: "dir_selected") }
    
}

