// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A material that provides a special texture to a ``Sky``, usually an HDR panorama.
/// 
/// A resource referenced in a ``Sky`` that is used to draw a background. ``PanoramaSkyMaterial`` functions similar to skyboxes in other engines, except it uses an equirectangular sky map instead of a ``Cubemap``.
/// 
/// Using an HDR panorama is strongly recommended for accurate, high-quality reflections. Godot supports the Radiance HDR (`.hdr`) and OpenEXR (`.exr`) image formats for this purpose.
/// 
/// You can use [url=https://danilw.github.io/GLSL-howto/cubemap_to_panorama_js/cubemap_to_panorama.html]this tool[/url] to convert a cubemap to an equirectangular sky map.
/// 
open class PanoramaSkyMaterial: Material {
    override open class var godotClassName: StringName { "PanoramaSkyMaterial" }
    
    /* Properties */
    
    /// ``Texture2D`` to be applied to the ``PanoramaSkyMaterial``.
    final public var panorama: Texture2D? {
        get {
            return get_panorama ()
        }
        
        set {
            set_panorama (newValue)
        }
        
    }
    
    /// A boolean value to determine if the background texture should be filtered or not.
    final public var filter: Bool {
        get {
            return is_filtering_enabled ()
        }
        
        set {
            set_filtering_enabled (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_panorama: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_panorama")
        return withUnsafePointer (to: &PanoramaSkyMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_panorama (_ texture: Texture2D?) {
        #if true
        
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (PanoramaSkyMaterial.method_set_panorama, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: texture?.handle) { p0 in
        _args.append (texture == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (PanoramaSkyMaterial.method_set_panorama, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_panorama: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_panorama")
        return withUnsafePointer (to: &PanoramaSkyMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_panorama ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (PanoramaSkyMaterial.method_get_panorama, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_filtering_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_filtering_enabled")
        return withUnsafePointer (to: &PanoramaSkyMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_filtering_enabled (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (PanoramaSkyMaterial.method_set_filtering_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PanoramaSkyMaterial.method_set_filtering_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_filtering_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_filtering_enabled")
        return withUnsafePointer (to: &PanoramaSkyMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_filtering_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PanoramaSkyMaterial.method_is_filtering_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

