// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 2D polyline that can optionally be textured.
/// 
/// This node draws a 2D polyline, i.e. a shape consisting of several points connected by segments. ``Line2D`` is not a mathematical polyline, i.e. the segments are not infinitely thin. It is intended for rendering and it can be colored and optionally textured.
/// 
/// > Warning: Certain configurations may be impossible to draw nicely, such as very sharp angles. In these situations, the node uses fallback drawing logic to look decent.
/// 
/// > Note: ``Line2D`` is drawn using a 2D mesh.
/// 
open class Line2D: Node2D {
    override open class var godotClassName: StringName { "Line2D" }
    public enum LineJointMode: Int64 {
        /// Makes the polyline's joints pointy, connecting the sides of the two segments by extending them until they intersect. If the rotation of a joint is too big (based on ``sharpLimit``), the joint falls back to .lineJointBevel to prevent very long miters.
        case sharp = 0 // LINE_JOINT_SHARP
        /// Makes the polyline's joints bevelled/chamfered, connecting the sides of the two segments with a simple line.
        case bevel = 1 // LINE_JOINT_BEVEL
        /// Makes the polyline's joints rounded, connecting the sides of the two segments with an arc. The detail of this arc depends on ``roundPrecision``.
        case round = 2 // LINE_JOINT_ROUND
    }
    
    public enum LineCapMode: Int64 {
        /// Draws no line cap.
        case none = 0 // LINE_CAP_NONE
        /// Draws the line cap as a box, slightly extending the first/last segment.
        case box = 1 // LINE_CAP_BOX
        /// Draws the line cap as a semicircle attached to the first/last segment.
        case round = 2 // LINE_CAP_ROUND
    }
    
    public enum LineTextureMode: Int64 {
        /// Takes the left pixels of the texture and renders them over the whole polyline.
        case none = 0 // LINE_TEXTURE_NONE
        /// Tiles the texture over the polyline. ``CanvasItem/textureRepeat`` of the ``Line2D`` node must be ``CanvasItem/TextureRepeat/enabled`` or ``CanvasItem/TextureRepeat/mirror`` for it to work properly.
        case tile = 1 // LINE_TEXTURE_TILE
        /// Stretches the texture across the polyline. ``CanvasItem/textureRepeat`` of the ``Line2D`` node must be ``CanvasItem/TextureRepeat/disabled`` for best results.
        case stretch = 2 // LINE_TEXTURE_STRETCH
    }
    
    
    /* Properties */
    
    /// The points of the polyline, interpreted in local 2D coordinates. Segments are drawn between the adjacent points in this array.
    final public var points: PackedVector2Array {
        get {
            return get_points ()
        }
        
        set {
            set_points (newValue)
        }
        
    }
    
    /// If `true` and the polyline has more than 2 points, the last point and the first one will be connected by a segment.
    /// 
    /// > Note: The shape of the closing segment is not guaranteed to be seamless if a ``widthCurve`` is provided.
    /// 
    /// > Note: The joint between the closing segment and the first segment is drawn first and it samples the ``gradient`` and the ``widthCurve`` at the beginning. This is an implementation detail that might change in a future version.
    /// 
    final public var closed: Bool {
        get {
            return is_closed ()
        }
        
        set {
            set_closed (newValue)
        }
        
    }
    
    /// The polyline's width.
    final public var width: Double {
        get {
            return get_width ()
        }
        
        set {
            set_width (newValue)
        }
        
    }
    
    /// The polyline's width curve. The width of the polyline over its length will be equivalent to the value of the width curve over its domain.
    final public var widthCurve: Curve? {
        get {
            return get_curve ()
        }
        
        set {
            set_curve (newValue)
        }
        
    }
    
    /// The color of the polyline. Will not be used if a gradient is set.
    final public var defaultColor: Color {
        get {
            return get_default_color ()
        }
        
        set {
            set_default_color (newValue)
        }
        
    }
    
    /// The gradient is drawn through the whole line from start to finish. The ``defaultColor`` will not be used if this property is set.
    final public var gradient: Gradient? {
        get {
            return get_gradient ()
        }
        
        set {
            set_gradient (newValue)
        }
        
    }
    
    /// The texture used for the polyline. Uses ``textureMode`` for drawing style.
    final public var texture: Texture2D? {
        get {
            return get_texture ()
        }
        
        set {
            set_texture (newValue)
        }
        
    }
    
    /// The style to render the ``texture`` of the polyline. Use ``Line2D/LineTextureMode`` constants.
    final public var textureMode: Line2D.LineTextureMode {
        get {
            return get_texture_mode ()
        }
        
        set {
            set_texture_mode (newValue)
        }
        
    }
    
    /// The style of the connections between segments of the polyline. Use ``Line2D/LineJointMode`` constants.
    final public var jointMode: Line2D.LineJointMode {
        get {
            return get_joint_mode ()
        }
        
        set {
            set_joint_mode (newValue)
        }
        
    }
    
    /// The style of the beginning of the polyline, if ``closed`` is `false`. Use ``Line2D/LineCapMode`` constants.
    final public var beginCapMode: Line2D.LineCapMode {
        get {
            return get_begin_cap_mode ()
        }
        
        set {
            set_begin_cap_mode (newValue)
        }
        
    }
    
    /// The style of the end of the polyline, if ``closed`` is `false`. Use ``Line2D/LineCapMode`` constants.
    final public var endCapMode: Line2D.LineCapMode {
        get {
            return get_end_cap_mode ()
        }
        
        set {
            set_end_cap_mode (newValue)
        }
        
    }
    
    /// Determines the miter limit of the polyline. Normally, when ``jointMode`` is set to .lineJointSharp, sharp angles fall back to using the logic of .lineJointBevel joints to prevent very long miters. Higher values of this property mean that the fallback to a bevel joint will happen at sharper angles.
    final public var sharpLimit: Double {
        get {
            return get_sharp_limit ()
        }
        
        set {
            set_sharp_limit (newValue)
        }
        
    }
    
    /// The smoothness used for rounded joints and caps. Higher values result in smoother corners, but are more demanding to render and update.
    final public var roundPrecision: Int32 {
        get {
            return get_round_precision ()
        }
        
        set {
            set_round_precision (newValue)
        }
        
    }
    
    /// If `true`, the polyline's border will be anti-aliased.
    /// 
    /// > Note: ``Line2D`` is not accelerated by batching when being anti-aliased.
    /// 
    final public var antialiased: Bool {
        get {
            return get_antialiased ()
        }
        
        set {
            set_antialiased (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_points: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_points")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1509147220)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_points (_ points: PackedVector2Array) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_points, UnsafeMutableRawPointer (mutating: handle), nil, &points.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &points.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_points, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_points: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_points")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2961356807)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_points ()-> PackedVector2Array {
        let _result: PackedVector2Array = PackedVector2Array ()
        gi.object_method_bind_ptrcall (Line2D.method_get_points, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_point_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_point_position")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 163021252)!
            }
            
        }
        
    }()
    
    /// Overwrites the position of the point at the given `index` with the supplied `position`.
    public final func setPointPosition (index: Int32, position: Vector2) {
        #if false
        
        var copy_index: Int = Int (index)
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_point_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_index, &copy_position)
        
        #else
        
        var copy_index: Int = Int (index)
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_index) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Line2D.method_set_point_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_point_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_point_position")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the position of the point at index `index`.
    public final func getPointPosition (index: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_index: Int = Int (index)
        
        gi.object_method_bind_ptrcall_v (Line2D.method_get_point_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_index)
        return _result
        #else
        
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_get_point_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_point_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_point_count")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of points in the polyline.
    public final func getPointCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Line2D.method_get_point_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_point: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_point")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2654014372)!
            }
            
        }
        
    }()
    
    /// Adds a point with the specified `position` relative to the polyline's own position. If no `index` is provided, the new point will be added to the end of the points array.
    /// 
    /// If `index` is given, the new point is inserted before the existing point identified by index `index`. The indices of the points after the new point get increased by 1. The provided `index` must not exceed the number of existing points in the polyline. See ``getPointCount()``.
    /// 
    public final func addPoint (position: Vector2, index: Int32 = -1) {
        #if false
        
        var copy_position = position
        var copy_index: Int = Int (index)
        
        gi.object_method_bind_ptrcall_v (Line2D.method_add_point, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position, &copy_index)
        
        #else
        
        var copy_position = position
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Line2D.method_add_point, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_point: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_point")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Removes the point at index `index` from the polyline.
    public final func removePoint (index: Int32) {
        #if false
        
        var copy_index: Int = Int (index)
        
        gi.object_method_bind_ptrcall_v (Line2D.method_remove_point, UnsafeMutableRawPointer (mutating: handle), nil, &copy_index)
        
        #else
        
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_remove_point, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_clear_points: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_points")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Removes all points from the polyline, making it empty.
    public final func clearPoints () {
        gi.object_method_bind_ptrcall (Line2D.method_clear_points, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_closed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_closed")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_closed (_ closed: Bool) {
        #if false
        
        var copy_closed = closed
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_closed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_closed)
        
        #else
        
        var copy_closed = closed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_closed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_closed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_closed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_closed")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_closed ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Line2D.method_is_closed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_width")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_width (_ width: Double) {
        #if false
        
        var copy_width = width
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_width, UnsafeMutableRawPointer (mutating: handle), nil, &copy_width)
        
        #else
        
        var copy_width = width
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_width, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_width")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_width ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Line2D.method_get_width, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_curve: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_curve")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 270443179)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_curve (_ curve: Curve?) {
        #if false
        
        var copy_curve_handle = curve?.handle
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_curve, UnsafeMutableRawPointer (mutating: handle), nil, &copy_curve_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: curve?.handle) { p0 in
        _args.append (curve == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_curve, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_curve: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_curve")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2460114913)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_curve ()-> Curve? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Line2D.method_get_curve, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_default_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_default_color")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_default_color (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_default_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_default_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_default_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_default_color")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_default_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (Line2D.method_get_default_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gradient: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gradient")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2756054477)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gradient (_ color: Gradient?) {
        #if false
        
        var copy_color_handle = color?.handle
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_gradient, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: color?.handle) { p0 in
        _args.append (color == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_gradient, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gradient: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gradient")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 132272999)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gradient ()-> Gradient? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Line2D.method_get_gradient, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture (_ texture: Texture2D?) {
        #if false
        
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: texture?.handle) { p0 in
        _args.append (texture == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Line2D.method_get_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_texture_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_mode")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1952559516)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_mode (_ mode: Line2D.LineTextureMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_texture_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_texture_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_mode")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2341040722)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_mode ()-> Line2D.LineTextureMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Line2D.method_get_texture_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Line2D.LineTextureMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_joint_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_joint_mode")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 604292979)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_joint_mode (_ mode: Line2D.LineJointMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_joint_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_joint_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_joint_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joint_mode")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2546544037)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_joint_mode ()-> Line2D.LineJointMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Line2D.method_get_joint_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Line2D.LineJointMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_begin_cap_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_begin_cap_mode")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1669024546)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_begin_cap_mode (_ mode: Line2D.LineCapMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_begin_cap_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_begin_cap_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_begin_cap_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_begin_cap_mode")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1107511441)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_begin_cap_mode ()-> Line2D.LineCapMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Line2D.method_get_begin_cap_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Line2D.LineCapMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_end_cap_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_end_cap_mode")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1669024546)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_end_cap_mode (_ mode: Line2D.LineCapMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_end_cap_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_end_cap_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_end_cap_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_end_cap_mode")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1107511441)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_end_cap_mode ()-> Line2D.LineCapMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Line2D.method_get_end_cap_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Line2D.LineCapMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_sharp_limit: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sharp_limit")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sharp_limit (_ limit: Double) {
        #if false
        
        var copy_limit = limit
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_sharp_limit, UnsafeMutableRawPointer (mutating: handle), nil, &copy_limit)
        
        #else
        
        var copy_limit = limit
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_limit) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_sharp_limit, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sharp_limit: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sharp_limit")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sharp_limit ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Line2D.method_get_sharp_limit, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_round_precision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_round_precision")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_round_precision (_ precision: Int32) {
        #if false
        
        var copy_precision: Int = Int (precision)
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_round_precision, UnsafeMutableRawPointer (mutating: handle), nil, &copy_precision)
        
        #else
        
        var copy_precision: Int = Int (precision)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_precision) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_round_precision, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_round_precision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_round_precision")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_round_precision ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Line2D.method_get_round_precision, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_antialiased: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_antialiased")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_antialiased (_ antialiased: Bool) {
        #if false
        
        var copy_antialiased = antialiased
        
        gi.object_method_bind_ptrcall_v (Line2D.method_set_antialiased, UnsafeMutableRawPointer (mutating: handle), nil, &copy_antialiased)
        
        #else
        
        var copy_antialiased = antialiased
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_antialiased) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Line2D.method_set_antialiased, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_antialiased: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_antialiased")
        return withUnsafePointer (to: &Line2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_antialiased ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Line2D.method_get_antialiased, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

