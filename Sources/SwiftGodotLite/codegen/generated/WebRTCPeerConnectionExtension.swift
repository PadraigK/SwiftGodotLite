// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

open class WebRTCPeerConnectionExtension: WebRTCPeerConnection {
    override open class var godotClassName: StringName { "WebRTCPeerConnectionExtension" }
    /* Methods */
    /// 
    @_documentation(visibility: public)
    open func _getConnectionState ()-> WebRTCPeerConnection.ConnectionState {
        return WebRTCPeerConnection.ConnectionState(rawValue: 0)!
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getGatheringState ()-> WebRTCPeerConnection.GatheringState {
        return WebRTCPeerConnection.GatheringState(rawValue: 0)!
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getSignalingState ()-> WebRTCPeerConnection.SignalingState {
        return WebRTCPeerConnection.SignalingState(rawValue: 0)!
    }
    
    /// 
    @_documentation(visibility: public)
    open func _initialize (pConfig: GDictionary)-> GodotError {
        return .ok
    }
    
    /// 
    @_documentation(visibility: public)
    open func _createDataChannel (pLabel: String, pConfig: GDictionary)-> WebRTCDataChannel? {
        return WebRTCDataChannel ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _createOffer ()-> GodotError {
        return .ok
    }
    
    /// 
    @_documentation(visibility: public)
    open func _setRemoteDescription (pType: String, pSdp: String)-> GodotError {
        return .ok
    }
    
    /// 
    @_documentation(visibility: public)
    open func _setLocalDescription (pType: String, pSdp: String)-> GodotError {
        return .ok
    }
    
    /// 
    @_documentation(visibility: public)
    open func _addIceCandidate (pSdpMidName: String, pSdpMlineIndex: Int32, pSdpName: String)-> GodotError {
        return .ok
    }
    
    /// 
    @_documentation(visibility: public)
    open func _poll ()-> GodotError {
        return .ok
    }
    
    /// 
    @_documentation(visibility: public)
    open func _close () {
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_add_ice_candidate":
                return _WebRTCPeerConnectionExtension_proxy_add_ice_candidate
            case "_close":
                return _WebRTCPeerConnectionExtension_proxy_close
            case "_create_data_channel":
                return _WebRTCPeerConnectionExtension_proxy_create_data_channel
            case "_create_offer":
                return _WebRTCPeerConnectionExtension_proxy_create_offer
            case "_get_connection_state":
                return _WebRTCPeerConnectionExtension_proxy_get_connection_state
            case "_get_gathering_state":
                return _WebRTCPeerConnectionExtension_proxy_get_gathering_state
            case "_get_signaling_state":
                return _WebRTCPeerConnectionExtension_proxy_get_signaling_state
            case "_initialize":
                return _WebRTCPeerConnectionExtension_proxy_initialize
            case "_poll":
                return _WebRTCPeerConnectionExtension_proxy_poll
            case "_set_local_description":
                return _WebRTCPeerConnectionExtension_proxy_set_local_description
            case "_set_remote_description":
                return _WebRTCPeerConnectionExtension_proxy_set_remote_description
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _WebRTCPeerConnectionExtension_proxy_add_ice_candidate (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._addIceCandidate (pSdpMidName: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", pSdpMlineIndex: args [1]!.assumingMemoryBound (to: Int32.self).pointee, pSdpName: GString.stringFromGStringPtr (ptr: args [2]!) ?? "")
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _WebRTCPeerConnectionExtension_proxy_close (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._close ()
}

func _WebRTCPeerConnectionExtension_proxy_create_data_channel (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._createDataChannel (pLabel: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", pConfig: GDictionary (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // WebRTCDataChannel
}

func _WebRTCPeerConnectionExtension_proxy_create_offer (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._createOffer ()
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _WebRTCPeerConnectionExtension_proxy_get_connection_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getConnectionState ()
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _WebRTCPeerConnectionExtension_proxy_get_gathering_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getGatheringState ()
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _WebRTCPeerConnectionExtension_proxy_get_signaling_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getSignalingState ()
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _WebRTCPeerConnectionExtension_proxy_initialize (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._initialize (pConfig: GDictionary (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _WebRTCPeerConnectionExtension_proxy_poll (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._poll ()
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _WebRTCPeerConnectionExtension_proxy_set_local_description (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._setLocalDescription (pType: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", pSdp: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _WebRTCPeerConnectionExtension_proxy_set_remote_description (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<WebRTCPeerConnectionExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._setRemoteDescription (pType: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", pSdp: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

