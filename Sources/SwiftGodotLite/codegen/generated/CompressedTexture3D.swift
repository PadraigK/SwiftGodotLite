// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Texture with 3 dimensions, optionally compressed.
/// 
/// ``CompressedTexture3D`` is the VRAM-compressed counterpart of ``ImageTexture3D``. The file extension for ``CompressedTexture3D`` files is `.ctex3d`. This file format is internal to Godot; it is created by importing other image formats with the import system.
/// 
/// ``CompressedTexture3D`` uses VRAM compression, which allows to reduce memory usage on the GPU when rendering the texture. This also improves loading times, as VRAM-compressed textures are faster to load compared to textures using lossless compression. VRAM compression can exhibit noticeable artifacts and is intended to be used for 3D rendering, not 2D.
/// 
/// See ``Texture3D`` for a general description of 3D textures.
/// 
open class CompressedTexture3D: Texture3D {
    override open class var godotClassName: StringName { "CompressedTexture3D" }
    
    /* Properties */
    
    /// The ``CompressedTexture3D``'s file path to a `.ctex3d` file.
    final public var loadPath: String {
        get {
            return get_load_path ()
        }
        
        set {
            _ = load (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_load: GDExtensionMethodBindPtr = {
        let methodName = StringName ("load")
        return withUnsafePointer (to: &CompressedTexture3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Loads the texture from the specified `path`.
    fileprivate final func load (_ path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (CompressedTexture3D.method_load, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CompressedTexture3D.method_load, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_load_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_load_path")
        return withUnsafePointer (to: &CompressedTexture3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_load_path ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (CompressedTexture3D.method_get_load_path, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
}

