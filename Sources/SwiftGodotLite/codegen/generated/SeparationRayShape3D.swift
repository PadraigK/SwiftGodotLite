// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 3D ray shape used for physics collision that tries to separate itself from any collider.
/// 
/// A 3D ray shape, intended for use in physics. Usually used to provide a shape for a ``CollisionShape3D``. When a ``SeparationRayShape3D`` collides with an object, it tries to separate itself from it by moving its endpoint to the collision point. For example, a ``SeparationRayShape3D`` next to a character can allow it to instantly move up when touching stairs.
open class SeparationRayShape3D: Shape3D {
    override open class var godotClassName: StringName { "SeparationRayShape3D" }
    
    /* Properties */
    
    /// The ray's length.
    final public var length: Double {
        get {
            return get_length ()
        }
        
        set {
            set_length (newValue)
        }
        
    }
    
    /// If `false` (default), the shape always separates and returns a normal along its own direction.
    /// 
    /// If `true`, the shape can return the correct normal and separate in any direction, allowing sliding motion on slopes.
    /// 
    final public var slideOnSlope: Bool {
        get {
            return get_slide_on_slope ()
        }
        
        set {
            set_slide_on_slope (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_length")
        return withUnsafePointer (to: &SeparationRayShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_length (_ length: Double) {
        #if false
        
        var copy_length = length
        
        gi.object_method_bind_ptrcall_v (SeparationRayShape3D.method_set_length, UnsafeMutableRawPointer (mutating: handle), nil, &copy_length)
        
        #else
        
        var copy_length = length
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_length) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SeparationRayShape3D.method_set_length, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_length")
        return withUnsafePointer (to: &SeparationRayShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_length ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SeparationRayShape3D.method_get_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_slide_on_slope: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_slide_on_slope")
        return withUnsafePointer (to: &SeparationRayShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_slide_on_slope (_ active: Bool) {
        #if false
        
        var copy_active = active
        
        gi.object_method_bind_ptrcall_v (SeparationRayShape3D.method_set_slide_on_slope, UnsafeMutableRawPointer (mutating: handle), nil, &copy_active)
        
        #else
        
        var copy_active = active
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_active) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SeparationRayShape3D.method_set_slide_on_slope, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_slide_on_slope: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_slide_on_slope")
        return withUnsafePointer (to: &SeparationRayShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_slide_on_slope ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SeparationRayShape3D.method_get_slide_on_slope, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

