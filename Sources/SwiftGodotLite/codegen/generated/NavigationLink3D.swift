// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A link between two positions on ``NavigationRegion3D``s that agents can be routed through.
/// 
/// A link between two positions on ``NavigationRegion3D``s that agents can be routed through. These positions can be on the same ``NavigationRegion3D`` or on two different ones. Links are useful to express navigation methods other than traveling along the surface of the navigation mesh, such as ziplines, teleporters, or gaps that can be jumped across.
open class NavigationLink3D: Node3D {
    override open class var godotClassName: StringName { "NavigationLink3D" }
    
    /* Properties */
    
    /// Whether this link is currently active. If `false`, ``NavigationServer3D/mapGetPath(map:origin:destination:optimize:navigationLayers:)`` will ignore this link.
    final public var enabled: Bool {
        get {
            return is_enabled ()
        }
        
        set {
            set_enabled (newValue)
        }
        
    }
    
    /// Whether this link can be traveled in both directions or only from ``startPosition`` to ``endPosition``.
    final public var bidirectional: Bool {
        get {
            return is_bidirectional ()
        }
        
        set {
            set_bidirectional (newValue)
        }
        
    }
    
    /// A bitfield determining all navigation layers the link belongs to. These navigation layers will be checked when requesting a path with ``NavigationServer3D/mapGetPath(map:origin:destination:optimize:navigationLayers:)``.
    final public var navigationLayers: UInt32 {
        get {
            return get_navigation_layers ()
        }
        
        set {
            set_navigation_layers (newValue)
        }
        
    }
    
    /// Starting position of the link.
    /// 
    /// This position will search out the nearest polygon in the navigation mesh to attach to.
    /// 
    /// The distance the link will search is controlled by ``NavigationServer3D/mapSetLinkConnectionRadius(map:radius:)``.
    /// 
    final public var startPosition: Vector3 {
        get {
            return get_start_position ()
        }
        
        set {
            set_start_position (newValue)
        }
        
    }
    
    /// Ending position of the link.
    /// 
    /// This position will search out the nearest polygon in the navigation mesh to attach to.
    /// 
    /// The distance the link will search is controlled by ``NavigationServer3D/mapSetLinkConnectionRadius(map:radius:)``.
    /// 
    final public var endPosition: Vector3 {
        get {
            return get_end_position ()
        }
        
        set {
            set_end_position (newValue)
        }
        
    }
    
    /// When pathfinding enters this link from another regions navigation mesh the ``enterCost`` value is added to the path distance for determining the shortest path.
    final public var enterCost: Double {
        get {
            return get_enter_cost ()
        }
        
        set {
            set_enter_cost (newValue)
        }
        
    }
    
    /// When pathfinding moves along the link the traveled distance is multiplied with ``travelCost`` for determining the shortest path.
    final public var travelCost: Double {
        get {
            return get_travel_cost ()
        }
        
        set {
            set_travel_cost (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enabled")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_set_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationLink3D.method_set_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_enabled")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationLink3D.method_is_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bidirectional: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bidirectional")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bidirectional (_ bidirectional: Bool) {
        #if false
        
        var copy_bidirectional = bidirectional
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_set_bidirectional, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bidirectional)
        
        #else
        
        var copy_bidirectional = bidirectional
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bidirectional) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationLink3D.method_set_bidirectional, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_bidirectional: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_bidirectional")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_bidirectional ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationLink3D.method_is_bidirectional, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_navigation_layers")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_navigation_layers (_ navigationLayers: UInt32) {
        #if false
        
        var copy_navigation_layers: Int = Int (navigationLayers)
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_set_navigation_layers, UnsafeMutableRawPointer (mutating: handle), nil, &copy_navigation_layers)
        
        #else
        
        var copy_navigation_layers: Int = Int (navigationLayers)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_navigation_layers) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationLink3D.method_set_navigation_layers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_navigation_layers")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_navigation_layers ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (NavigationLink3D.method_get_navigation_layers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_navigation_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_navigation_layer_value")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``navigationLayers`` bitmask, given a `layerNumber` between 1 and 32.
    public final func setNavigationLayerValue (layerNumber: Int32, value: Bool) {
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_set_navigation_layer_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_number, &copy_value)
        
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationLink3D.method_set_navigation_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_navigation_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_navigation_layer_value")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``navigationLayers`` bitmask is enabled, given a `layerNumber` between 1 and 32.
    public final func getNavigationLayerValue (layerNumber: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_get_navigation_layer_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_number)
        return _result
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationLink3D.method_get_navigation_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_start_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_start_position")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_start_position (_ position: Vector3) {
        #if false
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_set_start_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationLink3D.method_set_start_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_start_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_start_position")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_start_position ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (NavigationLink3D.method_get_start_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_end_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_end_position")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_end_position (_ position: Vector3) {
        #if false
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_set_end_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationLink3D.method_set_end_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_end_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_end_position")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_end_position ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (NavigationLink3D.method_get_end_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_global_start_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_global_start_position")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    /// Sets the ``startPosition`` that is relative to the link from a global `position`.
    public final func setGlobalStartPosition (_ position: Vector3) {
        #if false
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_set_global_start_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationLink3D.method_set_global_start_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_global_start_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_global_start_position")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the ``startPosition`` that is relative to the link as a global position.
    public final func getGlobalStartPosition ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (NavigationLink3D.method_get_global_start_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_global_end_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_global_end_position")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    /// Sets the ``endPosition`` that is relative to the link from a global `position`.
    public final func setGlobalEndPosition (_ position: Vector3) {
        #if false
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_set_global_end_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationLink3D.method_set_global_end_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_global_end_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_global_end_position")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the ``endPosition`` that is relative to the link as a global position.
    public final func getGlobalEndPosition ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (NavigationLink3D.method_get_global_end_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_enter_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enter_cost")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enter_cost (_ enterCost: Double) {
        #if false
        
        var copy_enter_cost = enterCost
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_set_enter_cost, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enter_cost)
        
        #else
        
        var copy_enter_cost = enterCost
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enter_cost) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationLink3D.method_set_enter_cost, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enter_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enter_cost")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enter_cost ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationLink3D.method_get_enter_cost, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_travel_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_travel_cost")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_travel_cost (_ travelCost: Double) {
        #if false
        
        var copy_travel_cost = travelCost
        
        gi.object_method_bind_ptrcall_v (NavigationLink3D.method_set_travel_cost, UnsafeMutableRawPointer (mutating: handle), nil, &copy_travel_cost)
        
        #else
        
        var copy_travel_cost = travelCost
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_travel_cost) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationLink3D.method_set_travel_cost, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_travel_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_travel_cost")
        return withUnsafePointer (to: &NavigationLink3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_travel_cost ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (NavigationLink3D.method_get_travel_cost, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

