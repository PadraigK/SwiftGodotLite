// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Pipeline depth/stencil state (used by ``RenderingDevice``).
/// 
/// ``RDPipelineDepthStencilState`` controls the way depth and stencil comparisons are performed when sampling those values using ``RenderingDevice``.
open class RDPipelineDepthStencilState: RefCounted {
    override open class var godotClassName: StringName { "RDPipelineDepthStencilState" }
    
    /* Properties */
    
    /// If `true`, enables depth testing which allows objects to be automatically occluded by other objects based on their depth. This also allows objects to be partially occluded by other objects. If `false`, objects will appear in the order they were drawn (like in Godot's 2D renderer).
    final public var enableDepthTest: Bool {
        get {
            return get_enable_depth_test ()
        }
        
        set {
            set_enable_depth_test (newValue)
        }
        
    }
    
    final public var enableDepthWrite: Bool {
        get {
            return get_enable_depth_write ()
        }
        
        set {
            set_enable_depth_write (newValue)
        }
        
    }
    
    final public var depthCompareOperator: RenderingDevice.CompareOperator {
        get {
            return get_depth_compare_operator ()
        }
        
        set {
            set_depth_compare_operator (newValue)
        }
        
    }
    
    final public var enableDepthRange: Bool {
        get {
            return get_enable_depth_range ()
        }
        
        set {
            set_enable_depth_range (newValue)
        }
        
    }
    
    final public var depthRangeMin: Double {
        get {
            return get_depth_range_min ()
        }
        
        set {
            set_depth_range_min (newValue)
        }
        
    }
    
    final public var depthRangeMax: Double {
        get {
            return get_depth_range_max ()
        }
        
        set {
            set_depth_range_max (newValue)
        }
        
    }
    
    final public var enableStencil: Bool {
        get {
            return get_enable_stencil ()
        }
        
        set {
            set_enable_stencil (newValue)
        }
        
    }
    
    final public var frontOpFail: RenderingDevice.StencilOperation {
        get {
            return get_front_op_fail ()
        }
        
        set {
            set_front_op_fail (newValue)
        }
        
    }
    
    final public var frontOpPass: RenderingDevice.StencilOperation {
        get {
            return get_front_op_pass ()
        }
        
        set {
            set_front_op_pass (newValue)
        }
        
    }
    
    final public var frontOpDepthFail: RenderingDevice.StencilOperation {
        get {
            return get_front_op_depth_fail ()
        }
        
        set {
            set_front_op_depth_fail (newValue)
        }
        
    }
    
    final public var frontOpCompare: RenderingDevice.CompareOperator {
        get {
            return get_front_op_compare ()
        }
        
        set {
            set_front_op_compare (newValue)
        }
        
    }
    
    final public var frontOpCompareMask: UInt32 {
        get {
            return get_front_op_compare_mask ()
        }
        
        set {
            set_front_op_compare_mask (newValue)
        }
        
    }
    
    final public var frontOpWriteMask: UInt32 {
        get {
            return get_front_op_write_mask ()
        }
        
        set {
            set_front_op_write_mask (newValue)
        }
        
    }
    
    final public var frontOpReference: UInt32 {
        get {
            return get_front_op_reference ()
        }
        
        set {
            set_front_op_reference (newValue)
        }
        
    }
    
    final public var backOpFail: RenderingDevice.StencilOperation {
        get {
            return get_back_op_fail ()
        }
        
        set {
            set_back_op_fail (newValue)
        }
        
    }
    
    final public var backOpPass: RenderingDevice.StencilOperation {
        get {
            return get_back_op_pass ()
        }
        
        set {
            set_back_op_pass (newValue)
        }
        
    }
    
    final public var backOpDepthFail: RenderingDevice.StencilOperation {
        get {
            return get_back_op_depth_fail ()
        }
        
        set {
            set_back_op_depth_fail (newValue)
        }
        
    }
    
    final public var backOpCompare: RenderingDevice.CompareOperator {
        get {
            return get_back_op_compare ()
        }
        
        set {
            set_back_op_compare (newValue)
        }
        
    }
    
    final public var backOpCompareMask: UInt32 {
        get {
            return get_back_op_compare_mask ()
        }
        
        set {
            set_back_op_compare_mask (newValue)
        }
        
    }
    
    final public var backOpWriteMask: UInt32 {
        get {
            return get_back_op_write_mask ()
        }
        
        set {
            set_back_op_write_mask (newValue)
        }
        
    }
    
    final public var backOpReference: UInt32 {
        get {
            return get_back_op_reference ()
        }
        
        set {
            set_back_op_reference (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_enable_depth_test: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_depth_test")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_depth_test (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_enable_depth_test, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_enable_depth_test, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_depth_test: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_depth_test")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_depth_test ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_enable_depth_test, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_enable_depth_write: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_depth_write")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_depth_write (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_enable_depth_write, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_enable_depth_write, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_depth_write: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_depth_write")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_depth_write ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_enable_depth_write, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_depth_compare_operator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_depth_compare_operator")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2573711505)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_depth_compare_operator (_ pMember: RenderingDevice.CompareOperator) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_depth_compare_operator, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_depth_compare_operator, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_depth_compare_operator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_depth_compare_operator")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 269730778)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_depth_compare_operator ()-> RenderingDevice.CompareOperator {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_depth_compare_operator, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.CompareOperator (rawValue: _result)!
    }
    
    fileprivate static var method_set_enable_depth_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_depth_range")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_depth_range (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_enable_depth_range, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_enable_depth_range, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_depth_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_depth_range")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_depth_range ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_enable_depth_range, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_depth_range_min: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_depth_range_min")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_depth_range_min (_ pMember: Double) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_depth_range_min, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_depth_range_min, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_depth_range_min: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_depth_range_min")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_depth_range_min ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_depth_range_min, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_depth_range_max: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_depth_range_max")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_depth_range_max (_ pMember: Double) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_depth_range_max, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_depth_range_max, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_depth_range_max: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_depth_range_max")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_depth_range_max ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_depth_range_max, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_enable_stencil: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_stencil")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_stencil (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_enable_stencil, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_enable_stencil, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_stencil: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_stencil")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_stencil ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_enable_stencil, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_front_op_fail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_front_op_fail")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2092799566)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_front_op_fail (_ pMember: RenderingDevice.StencilOperation) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_front_op_fail, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_front_op_fail, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_front_op_fail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_front_op_fail")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1714732389)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_front_op_fail ()-> RenderingDevice.StencilOperation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_front_op_fail, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.StencilOperation (rawValue: _result)!
    }
    
    fileprivate static var method_set_front_op_pass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_front_op_pass")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2092799566)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_front_op_pass (_ pMember: RenderingDevice.StencilOperation) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_front_op_pass, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_front_op_pass, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_front_op_pass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_front_op_pass")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1714732389)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_front_op_pass ()-> RenderingDevice.StencilOperation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_front_op_pass, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.StencilOperation (rawValue: _result)!
    }
    
    fileprivate static var method_set_front_op_depth_fail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_front_op_depth_fail")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2092799566)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_front_op_depth_fail (_ pMember: RenderingDevice.StencilOperation) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_front_op_depth_fail, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_front_op_depth_fail, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_front_op_depth_fail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_front_op_depth_fail")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1714732389)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_front_op_depth_fail ()-> RenderingDevice.StencilOperation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_front_op_depth_fail, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.StencilOperation (rawValue: _result)!
    }
    
    fileprivate static var method_set_front_op_compare: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_front_op_compare")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2573711505)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_front_op_compare (_ pMember: RenderingDevice.CompareOperator) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_front_op_compare, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_front_op_compare, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_front_op_compare: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_front_op_compare")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 269730778)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_front_op_compare ()-> RenderingDevice.CompareOperator {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_front_op_compare, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.CompareOperator (rawValue: _result)!
    }
    
    fileprivate static var method_set_front_op_compare_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_front_op_compare_mask")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_front_op_compare_mask (_ pMember: UInt32) {
        #if false
        
        var copy_p_member: Int = Int (pMember)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_front_op_compare_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member: Int = Int (pMember)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_front_op_compare_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_front_op_compare_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_front_op_compare_mask")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_front_op_compare_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_front_op_compare_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_front_op_write_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_front_op_write_mask")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_front_op_write_mask (_ pMember: UInt32) {
        #if false
        
        var copy_p_member: Int = Int (pMember)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_front_op_write_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member: Int = Int (pMember)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_front_op_write_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_front_op_write_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_front_op_write_mask")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_front_op_write_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_front_op_write_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_front_op_reference: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_front_op_reference")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_front_op_reference (_ pMember: UInt32) {
        #if false
        
        var copy_p_member: Int = Int (pMember)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_front_op_reference, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member: Int = Int (pMember)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_front_op_reference, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_front_op_reference: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_front_op_reference")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_front_op_reference ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_front_op_reference, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_back_op_fail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_back_op_fail")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2092799566)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_back_op_fail (_ pMember: RenderingDevice.StencilOperation) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_back_op_fail, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_back_op_fail, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_back_op_fail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_back_op_fail")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1714732389)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_back_op_fail ()-> RenderingDevice.StencilOperation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_back_op_fail, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.StencilOperation (rawValue: _result)!
    }
    
    fileprivate static var method_set_back_op_pass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_back_op_pass")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2092799566)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_back_op_pass (_ pMember: RenderingDevice.StencilOperation) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_back_op_pass, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_back_op_pass, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_back_op_pass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_back_op_pass")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1714732389)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_back_op_pass ()-> RenderingDevice.StencilOperation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_back_op_pass, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.StencilOperation (rawValue: _result)!
    }
    
    fileprivate static var method_set_back_op_depth_fail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_back_op_depth_fail")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2092799566)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_back_op_depth_fail (_ pMember: RenderingDevice.StencilOperation) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_back_op_depth_fail, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_back_op_depth_fail, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_back_op_depth_fail: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_back_op_depth_fail")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1714732389)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_back_op_depth_fail ()-> RenderingDevice.StencilOperation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_back_op_depth_fail, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.StencilOperation (rawValue: _result)!
    }
    
    fileprivate static var method_set_back_op_compare: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_back_op_compare")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2573711505)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_back_op_compare (_ pMember: RenderingDevice.CompareOperator) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_back_op_compare, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_back_op_compare, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_back_op_compare: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_back_op_compare")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 269730778)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_back_op_compare ()-> RenderingDevice.CompareOperator {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_back_op_compare, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.CompareOperator (rawValue: _result)!
    }
    
    fileprivate static var method_set_back_op_compare_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_back_op_compare_mask")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_back_op_compare_mask (_ pMember: UInt32) {
        #if false
        
        var copy_p_member: Int = Int (pMember)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_back_op_compare_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member: Int = Int (pMember)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_back_op_compare_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_back_op_compare_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_back_op_compare_mask")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_back_op_compare_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_back_op_compare_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_back_op_write_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_back_op_write_mask")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_back_op_write_mask (_ pMember: UInt32) {
        #if false
        
        var copy_p_member: Int = Int (pMember)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_back_op_write_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member: Int = Int (pMember)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_back_op_write_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_back_op_write_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_back_op_write_mask")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_back_op_write_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_back_op_write_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_back_op_reference: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_back_op_reference")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_back_op_reference (_ pMember: UInt32) {
        #if false
        
        var copy_p_member: Int = Int (pMember)
        
        gi.object_method_bind_ptrcall_v (RDPipelineDepthStencilState.method_set_back_op_reference, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member: Int = Int (pMember)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_set_back_op_reference, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_back_op_reference: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_back_op_reference")
        return withUnsafePointer (to: &RDPipelineDepthStencilState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_back_op_reference ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (RDPipelineDepthStencilState.method_get_back_op_reference, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

