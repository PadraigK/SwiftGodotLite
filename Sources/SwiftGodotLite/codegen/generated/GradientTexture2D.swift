// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 2D texture that creates a pattern with colors obtained from a ``Gradient``.
/// 
/// A 2D texture that obtains colors from a ``Gradient`` to fill the texture data. This texture is able to transform a color transition into different patterns such as a linear or a radial gradient. The gradient is sampled individually for each pixel so it does not necessarily represent an exact copy of the gradient(see ``width`` and ``height``). See also ``GradientTexture1D``, ``CurveTexture`` and ``CurveXYZTexture``.
open class GradientTexture2D: Texture2D {
    override open class var godotClassName: StringName { "GradientTexture2D" }
    public enum Fill: Int64 {
        /// The colors are linearly interpolated in a straight line.
        case linear = 0 // FILL_LINEAR
        /// The colors are linearly interpolated in a circular pattern.
        case radial = 1 // FILL_RADIAL
        /// The colors are linearly interpolated in a square pattern.
        case square = 2 // FILL_SQUARE
    }
    
    public enum Repeat: Int64 {
        /// The gradient fill is restricted to the range defined by ``fillFrom`` to ``fillTo`` offsets.
        case repeatNone = 0 // REPEAT_NONE
        /// The texture is filled starting from ``fillFrom`` to ``fillTo`` offsets, repeating the same pattern in both directions.
        case `repeat` = 1 // REPEAT
        /// The texture is filled starting from ``fillFrom`` to ``fillTo`` offsets, mirroring the pattern in both directions.
        case repeatMirror = 2 // REPEAT_MIRROR
    }
    
    
    /* Properties */
    
    /// The ``Gradient`` used to fill the texture.
    final public var gradient: Gradient? {
        get {
            return get_gradient ()
        }
        
        set {
            set_gradient (newValue)
        }
        
    }
    
    /// The number of horizontal color samples that will be obtained from the ``Gradient``, which also represents the texture's width.
    final public var width: Int32 {
        get {
            return getWidth ()
        }
        
        set {
            set_width (newValue)
        }
        
    }
    
    /// The number of vertical color samples that will be obtained from the ``Gradient``, which also represents the texture's height.
    final public var height: Int32 {
        get {
            return getHeight ()
        }
        
        set {
            set_height (newValue)
        }
        
    }
    
    /// If `true`, the generated texture will support high dynamic range (``Image/Format/rgbaf`` format). This allows for glow effects to work if ``Environment/glowEnabled`` is `true`. If `false`, the generated texture will use low dynamic range; overbright colors will be clamped (``Image/Format/rgba8`` format).
    final public var useHdr: Bool {
        get {
            return is_using_hdr ()
        }
        
        set {
            set_use_hdr (newValue)
        }
        
    }
    
    /// The gradient fill type, one of the ``GradientTexture2D/Fill`` values. The texture is filled by interpolating colors starting from ``fillFrom`` to ``fillTo`` offsets.
    final public var fill: GradientTexture2D.Fill {
        get {
            return get_fill ()
        }
        
        set {
            set_fill (newValue)
        }
        
    }
    
    /// The initial offset used to fill the texture specified in UV coordinates.
    final public var fillFrom: Vector2 {
        get {
            return get_fill_from ()
        }
        
        set {
            set_fill_from (newValue)
        }
        
    }
    
    /// The final offset used to fill the texture specified in UV coordinates.
    final public var fillTo: Vector2 {
        get {
            return get_fill_to ()
        }
        
        set {
            set_fill_to (newValue)
        }
        
    }
    
    /// The gradient repeat type, one of the ``GradientTexture2D/Repeat`` values. The texture is filled starting from ``fillFrom`` to ``fillTo`` offsets by default, but the gradient fill can be repeated to cover the entire texture.
    final public var `repeat`: GradientTexture2D.Repeat {
        get {
            return get_repeat ()
        }
        
        set {
            set_repeat (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_gradient: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gradient")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2756054477)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gradient (_ gradient: Gradient?) {
        #if false
        
        var copy_gradient_handle = gradient?.handle
        
        gi.object_method_bind_ptrcall_v (GradientTexture2D.method_set_gradient, UnsafeMutableRawPointer (mutating: handle), nil, &copy_gradient_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: gradient?.handle) { p0 in
        _args.append (gradient == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (GradientTexture2D.method_set_gradient, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gradient: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gradient")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 132272999)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gradient ()-> Gradient? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (GradientTexture2D.method_get_gradient, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_width")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_width (_ width: Int32) {
        #if false
        
        var copy_width: Int = Int (width)
        
        gi.object_method_bind_ptrcall_v (GradientTexture2D.method_set_width, UnsafeMutableRawPointer (mutating: handle), nil, &copy_width)
        
        #else
        
        var copy_width: Int = Int (width)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GradientTexture2D.method_set_width, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_height")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_height (_ height: Int32) {
        #if false
        
        var copy_height: Int = Int (height)
        
        gi.object_method_bind_ptrcall_v (GradientTexture2D.method_set_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_height)
        
        #else
        
        var copy_height: Int = Int (height)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_height) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GradientTexture2D.method_set_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_use_hdr: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_hdr")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_hdr (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (GradientTexture2D.method_set_use_hdr, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GradientTexture2D.method_set_use_hdr, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_using_hdr: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_using_hdr")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_using_hdr ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (GradientTexture2D.method_is_using_hdr, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fill: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fill")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3623927636)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fill (_ fill: GradientTexture2D.Fill) {
        #if false
        
        var copy_fill = Int64 (fill.rawValue)
        
        gi.object_method_bind_ptrcall_v (GradientTexture2D.method_set_fill, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fill)
        
        #else
        
        var copy_fill = Int64 (fill.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fill) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GradientTexture2D.method_set_fill, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fill: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fill")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1876227217)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fill ()-> GradientTexture2D.Fill {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (GradientTexture2D.method_get_fill, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return GradientTexture2D.Fill (rawValue: _result)!
    }
    
    fileprivate static var method_set_fill_from: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fill_from")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fill_from (_ fillFrom: Vector2) {
        #if false
        
        var copy_fill_from = fillFrom
        
        gi.object_method_bind_ptrcall_v (GradientTexture2D.method_set_fill_from, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fill_from)
        
        #else
        
        var copy_fill_from = fillFrom
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fill_from) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GradientTexture2D.method_set_fill_from, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fill_from: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fill_from")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fill_from ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (GradientTexture2D.method_get_fill_from, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fill_to: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fill_to")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fill_to (_ fillTo: Vector2) {
        #if false
        
        var copy_fill_to = fillTo
        
        gi.object_method_bind_ptrcall_v (GradientTexture2D.method_set_fill_to, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fill_to)
        
        #else
        
        var copy_fill_to = fillTo
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fill_to) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GradientTexture2D.method_set_fill_to, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fill_to: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fill_to")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fill_to ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (GradientTexture2D.method_get_fill_to, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_repeat: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_repeat")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1357597002)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_repeat (_ `repeat`: GradientTexture2D.Repeat) {
        #if false
        
        var copy_repeat = Int64 (`repeat`.rawValue)
        
        gi.object_method_bind_ptrcall_v (GradientTexture2D.method_set_repeat, UnsafeMutableRawPointer (mutating: handle), nil, &copy_repeat)
        
        #else
        
        var copy_repeat = Int64 (`repeat`.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_repeat) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GradientTexture2D.method_set_repeat, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_repeat: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_repeat")
        return withUnsafePointer (to: &GradientTexture2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3351758665)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_repeat ()-> GradientTexture2D.Repeat {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (GradientTexture2D.method_get_repeat, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return GradientTexture2D.Repeat (rawValue: _result)!
    }
    
}

