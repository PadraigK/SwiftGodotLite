// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A modification that jiggles ``Bone2D`` nodes as they move towards a target.
/// 
/// This modification moves a series of bones, typically called a bone chain, towards a target. What makes this modification special is that it calculates the velocity and acceleration for each bone in the bone chain, and runs a very light physics-like calculation using the inputted values. This allows the bones to overshoot the target and "jiggle" around. It can be configured to act more like a spring, or sway around like cloth might.
/// 
/// This modification is useful for adding additional motion to things like hair, the edges of clothing, and more. It has several settings to that allow control over how the joint moves when the target moves.
/// 
/// > Note: The Jiggle modifier has `jiggle_joints`, which are the data objects that hold the data for each joint in the Jiggle chain. This is different from than ``Bone2D`` nodes! Jiggle joints hold the data needed for each ``Bone2D`` in the bone chain used by the Jiggle modification.
/// 
open class SkeletonModification2DJiggle: SkeletonModification2D {
    override open class var godotClassName: StringName { "SkeletonModification2DJiggle" }
    
    /* Properties */
    
    /// The NodePath to the node that is the target for the Jiggle modification. This node is what the Jiggle chain will attempt to rotate the bone chain to.
    final public var targetNodepath: NodePath {
        get {
            return get_target_node ()
        }
        
        set {
            set_target_node (newValue)
        }
        
    }
    
    /// The amount of Jiggle joints in the Jiggle modification.
    final public var jiggleDataChainLength: Int32 {
        get {
            return get_jiggle_data_chain_length ()
        }
        
        set {
            set_jiggle_data_chain_length (newValue)
        }
        
    }
    
    /// The default amount of stiffness assigned to the Jiggle joints, if they are not overridden. Higher values act more like springs, quickly moving into the correct position.
    final public var stiffness: Double {
        get {
            return get_stiffness ()
        }
        
        set {
            set_stiffness (newValue)
        }
        
    }
    
    /// The default amount of mass assigned to the Jiggle joints, if they are not overridden. Higher values lead to faster movements and more overshooting.
    final public var mass: Double {
        get {
            return get_mass ()
        }
        
        set {
            set_mass (newValue)
        }
        
    }
    
    /// The default amount of damping applied to the Jiggle joints, if they are not overridden. Higher values lead to more of the calculated velocity being applied.
    final public var damping: Double {
        get {
            return get_damping ()
        }
        
        set {
            set_damping (newValue)
        }
        
    }
    
    /// Whether the gravity vector, ``gravity``, should be applied to the Jiggle joints, assuming they are not overriding the default settings.
    final public var useGravity: Bool {
        get {
            return get_use_gravity ()
        }
        
        set {
            set_use_gravity (newValue)
        }
        
    }
    
    /// The default amount of gravity applied to the Jiggle joints, if they are not overridden.
    final public var gravity: Vector2 {
        get {
            return get_gravity ()
        }
        
        set {
            set_gravity (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_target_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_target_node")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_target_node (_ targetNodepath: NodePath) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_target_node, UnsafeMutableRawPointer (mutating: handle), nil, &targetNodepath.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &targetNodepath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_target_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_target_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_target_node")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_target_node ()-> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_target_node, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_jiggle_data_chain_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_jiggle_data_chain_length")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_jiggle_data_chain_length (_ length: Int32) {
        #if true
        
        var copy_length: Int = Int (length)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_jiggle_data_chain_length, UnsafeMutableRawPointer (mutating: handle), nil, &copy_length)
        
        #else
        
        var copy_length: Int = Int (length)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_length) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_jiggle_data_chain_length, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_jiggle_data_chain_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_jiggle_data_chain_length")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_jiggle_data_chain_length ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_jiggle_data_chain_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_stiffness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_stiffness")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_stiffness (_ stiffness: Double) {
        #if true
        
        var copy_stiffness = stiffness
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_stiffness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_stiffness)
        
        #else
        
        var copy_stiffness = stiffness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_stiffness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_stiffness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_stiffness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_stiffness")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_stiffness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_stiffness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mass")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mass (_ mass: Double) {
        #if true
        
        var copy_mass = mass
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_mass, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mass)
        
        #else
        
        var copy_mass = mass
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mass) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_mass, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mass")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mass ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_mass, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_damping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_damping")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_damping (_ damping: Double) {
        #if true
        
        var copy_damping = damping
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_damping, UnsafeMutableRawPointer (mutating: handle), nil, &copy_damping)
        
        #else
        
        var copy_damping = damping
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_damping) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_damping, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_damping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_damping")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_damping ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_damping, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_use_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_gravity")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_gravity (_ useGravity: Bool) {
        #if true
        
        var copy_use_gravity = useGravity
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_use_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_use_gravity)
        
        #else
        
        var copy_use_gravity = useGravity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_use_gravity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_use_gravity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_use_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_use_gravity")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_use_gravity ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_use_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity (_ gravity: Vector2) {
        #if true
        
        var copy_gravity = gravity
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_gravity)
        
        #else
        
        var copy_gravity = gravity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_gravity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_gravity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gravity")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_use_colliders: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_colliders")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// If `true`, the Jiggle modifier will take colliders into account, keeping them from entering into these collision objects.
    public final func setUseColliders (_ useColliders: Bool) {
        #if true
        
        var copy_use_colliders = useColliders
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_use_colliders, UnsafeMutableRawPointer (mutating: handle), nil, &copy_use_colliders)
        
        #else
        
        var copy_use_colliders = useColliders
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_use_colliders) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_use_colliders, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_use_colliders: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_use_colliders")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns whether the jiggle modifier is taking physics colliders into account when solving.
    public final func getUseColliders ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_use_colliders, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_mask")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Sets the collision mask that the Jiggle modifier will use when reacting to colliders, if the Jiggle modifier is set to take colliders into account.
    public final func setCollisionMask (_ collisionMask: Int32) {
        #if true
        
        var copy_collision_mask: Int = Int (collisionMask)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_collision_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_collision_mask)
        
        #else
        
        var copy_collision_mask: Int = Int (collisionMask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_collision_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_collision_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_mask")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the collision mask used by the Jiggle modifier when collisions are enabled.
    public final func getCollisionMask ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_collision_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_jiggle_joint_bone2d_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_jiggle_joint_bone2d_node")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2761262315)!
            }
            
        }
        
    }()
    
    /// Sets the ``Bone2D`` node assigned to the Jiggle joint at `jointIdx`.
    public final func setJiggleJointBone2dNode (jointIdx: Int32, bone2dNode: NodePath) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_jiggle_joint_bone2d_node, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &bone2dNode.content)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &bone2dNode.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_jiggle_joint_bone2d_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_jiggle_joint_bone2d_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_jiggle_joint_bone2d_node")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 408788394)!
            }
            
        }
        
    }()
    
    /// Returns the ``Bone2D`` node assigned to the Jiggle joint at `jointIdx`.
    public final func getJiggleJointBone2dNode (jointIdx: Int32)-> NodePath {
        let _result: NodePath = NodePath ()
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_get_jiggle_joint_bone2d_node, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_jiggle_joint_bone2d_node, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_jiggle_joint_bone_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_jiggle_joint_bone_index")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the bone index, `boneIdx`, of the Jiggle joint at `jointIdx`. When possible, this will also update the `bone2d_node` of the Jiggle joint based on data provided by the linked skeleton.
    public final func setJiggleJointBoneIndex (jointIdx: Int32, boneIdx: Int32) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_jiggle_joint_bone_index, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_bone_idx)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_bone_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_jiggle_joint_bone_index, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_jiggle_joint_bone_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_jiggle_joint_bone_index")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the index of the ``Bone2D`` node assigned to the Jiggle joint at `jointIdx`.
    public final func getJiggleJointBoneIndex (jointIdx: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_get_jiggle_joint_bone_index, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_jiggle_joint_bone_index, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_jiggle_joint_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_jiggle_joint_override")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Sets whether the Jiggle joint at `jointIdx` should override the default Jiggle joint settings. Setting this to `true` will make the joint use its own settings rather than the default ones attached to the modification.
    public final func setJiggleJointOverride (jointIdx: Int32, override: Bool) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_override = override
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_jiggle_joint_override, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_override)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_override = override
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_override) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_jiggle_joint_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_jiggle_joint_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_jiggle_joint_override")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns a boolean that indicates whether the joint at `jointIdx` is overriding the default Jiggle joint data defined in the modification.
    public final func getJiggleJointOverride (jointIdx: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_get_jiggle_joint_override, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_jiggle_joint_override, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_jiggle_joint_stiffness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_jiggle_joint_stiffness")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Sets the of stiffness of the Jiggle joint at `jointIdx`.
    public final func setJiggleJointStiffness (jointIdx: Int32, stiffness: Double) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_stiffness = stiffness
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_jiggle_joint_stiffness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_stiffness)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_stiffness = stiffness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_stiffness) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_jiggle_joint_stiffness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_jiggle_joint_stiffness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_jiggle_joint_stiffness")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns the stiffness of the Jiggle joint at `jointIdx`.
    public final func getJiggleJointStiffness (jointIdx: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_get_jiggle_joint_stiffness, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_jiggle_joint_stiffness, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_jiggle_joint_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_jiggle_joint_mass")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Sets the of mass of the Jiggle joint at `jointIdx`.
    public final func setJiggleJointMass (jointIdx: Int32, mass: Double) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_mass = mass
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_jiggle_joint_mass, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_mass)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_mass = mass
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mass) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_jiggle_joint_mass, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_jiggle_joint_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_jiggle_joint_mass")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns the amount of mass of the jiggle joint at `jointIdx`.
    public final func getJiggleJointMass (jointIdx: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_get_jiggle_joint_mass, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_jiggle_joint_mass, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_jiggle_joint_damping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_jiggle_joint_damping")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Sets the amount of damping of the Jiggle joint at `jointIdx`.
    public final func setJiggleJointDamping (jointIdx: Int32, damping: Double) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_damping = damping
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_jiggle_joint_damping, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_damping)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_damping = damping
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_damping) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_jiggle_joint_damping, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_jiggle_joint_damping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_jiggle_joint_damping")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns the amount of damping of the Jiggle joint at `jointIdx`.
    public final func getJiggleJointDamping (jointIdx: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_get_jiggle_joint_damping, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_jiggle_joint_damping, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_jiggle_joint_use_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_jiggle_joint_use_gravity")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Sets whether the Jiggle joint at `jointIdx` should use gravity.
    public final func setJiggleJointUseGravity (jointIdx: Int32, useGravity: Bool) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_use_gravity = useGravity
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_jiggle_joint_use_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_use_gravity)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_use_gravity = useGravity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_use_gravity) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_jiggle_joint_use_gravity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_jiggle_joint_use_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_jiggle_joint_use_gravity")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns a boolean that indicates whether the joint at `jointIdx` is using gravity or not.
    public final func getJiggleJointUseGravity (jointIdx: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_get_jiggle_joint_use_gravity, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_jiggle_joint_use_gravity, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_jiggle_joint_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_jiggle_joint_gravity")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 163021252)!
            }
            
        }
        
    }()
    
    /// Sets the gravity vector of the Jiggle joint at `jointIdx`.
    public final func setJiggleJointGravity (jointIdx: Int32, gravity: Vector2) {
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_gravity = gravity
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_set_jiggle_joint_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &copy_gravity)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var copy_gravity = gravity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_gravity) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_set_jiggle_joint_gravity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_jiggle_joint_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_jiggle_joint_gravity")
        return withUnsafePointer (to: &SkeletonModification2DJiggle.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns a ``Vector2`` representing the amount of gravity the Jiggle joint at `jointIdx` is influenced by.
    public final func getJiggleJointGravity (jointIdx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DJiggle.method_get_jiggle_joint_gravity, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DJiggle.method_get_jiggle_joint_gravity, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

