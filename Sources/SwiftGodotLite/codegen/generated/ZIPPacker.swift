// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Allows the creation of zip files.
/// 
/// This class implements a writer that allows storing the multiple blobs in a zip archive.
/// 
open class ZIPPacker: RefCounted {
    override open class var godotClassName: StringName { "ZIPPacker" }
    public enum ZipAppend: Int64 {
        /// Create a new zip archive at the given path.
        case create = 0 // APPEND_CREATE
        /// Append a new zip archive to the end of the already existing file at the given path.
        case createafter = 1 // APPEND_CREATEAFTER
        /// Add new files to the existing zip archive at the given path.
        case addinzip = 2 // APPEND_ADDINZIP
    }
    
    /* Methods */
    fileprivate static var method_open: GDExtensionMethodBindPtr = {
        let methodName = StringName ("open")
        return withUnsafePointer (to: &ZIPPacker.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1936816515)!
            }
            
        }
        
    }()
    
    /// Opens a zip file for writing at the given path using the specified write mode.
    /// 
    /// This must be called before everything else.
    /// 
    public final func open (path: String, append: ZIPPacker.ZipAppend = .create)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_path = GString (path)
        var copy_append = Int64 (append.rawValue)
        
        gi.object_method_bind_ptrcall_v (ZIPPacker.method_open, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content, &copy_append)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var copy_append = Int64 (append.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_append) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ZIPPacker.method_open, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_start_file: GDExtensionMethodBindPtr = {
        let methodName = StringName ("start_file")
        return withUnsafePointer (to: &ZIPPacker.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Starts writing to a file within the archive. Only one file can be written at the same time.
    /// 
    /// Must be called after ``open(path:append:)``.
    /// 
    public final func startFile (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (ZIPPacker.method_start_file, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ZIPPacker.method_start_file, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_write_file: GDExtensionMethodBindPtr = {
        let methodName = StringName ("write_file")
        return withUnsafePointer (to: &ZIPPacker.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 680677267)!
            }
            
        }
        
    }()
    
    /// Write the given `data` to the file.
    /// 
    /// Needs to be called after ``startFile(path:)``.
    /// 
    public final func writeFile (data: PackedByteArray)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        
        gi.object_method_bind_ptrcall_v (ZIPPacker.method_write_file, UnsafeMutableRawPointer (mutating: handle), &_result, &data.content)
        return GodotError (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &data.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ZIPPacker.method_write_file, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_close_file: GDExtensionMethodBindPtr = {
        let methodName = StringName ("close_file")
        return withUnsafePointer (to: &ZIPPacker.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166280745)!
            }
            
        }
        
    }()
    
    /// Stops writing to a file within the archive.
    /// 
    /// It will fail if there is no open file.
    /// 
    public final func closeFile ()-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (ZIPPacker.method_close_file, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_close: GDExtensionMethodBindPtr = {
        let methodName = StringName ("close")
        return withUnsafePointer (to: &ZIPPacker.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166280745)!
            }
            
        }
        
    }()
    
    /// Closes the underlying resources used by this instance.
    public final func close ()-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (ZIPPacker.method_close, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return GodotError (rawValue: _result)!
    }
    
}

