// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A modification that applies the transforms of ``PhysicalBone2D`` nodes to ``Bone2D`` nodes.
/// 
/// This modification takes the transforms of ``PhysicalBone2D`` nodes and applies them to ``Bone2D`` nodes. This allows the ``Bone2D`` nodes to react to physics thanks to the linked ``PhysicalBone2D`` nodes.
/// 
/// Experimental. Physical bones may be changed in the future to perform the position update of ``Bone2D`` on their own.
/// 
open class SkeletonModification2DPhysicalBones: SkeletonModification2D {
    override open class var godotClassName: StringName { "SkeletonModification2DPhysicalBones" }
    
    /* Properties */
    
    /// The number of ``PhysicalBone2D`` nodes linked in this modification.
    final public var physicalBoneChainLength: Int32 {
        get {
            return get_physical_bone_chain_length ()
        }
        
        set {
            set_physical_bone_chain_length (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_physical_bone_chain_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_physical_bone_chain_length")
        return withUnsafePointer (to: &SkeletonModification2DPhysicalBones.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_physical_bone_chain_length (_ length: Int32) {
        #if false
        
        var copy_length: Int = Int (length)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DPhysicalBones.method_set_physical_bone_chain_length, UnsafeMutableRawPointer (mutating: handle), nil, &copy_length)
        
        #else
        
        var copy_length: Int = Int (length)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_length) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DPhysicalBones.method_set_physical_bone_chain_length, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_physical_bone_chain_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_physical_bone_chain_length")
        return withUnsafePointer (to: &SkeletonModification2DPhysicalBones.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_physical_bone_chain_length ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (SkeletonModification2DPhysicalBones.method_get_physical_bone_chain_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_physical_bone_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_physical_bone_node")
        return withUnsafePointer (to: &SkeletonModification2DPhysicalBones.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2761262315)!
            }
            
        }
        
    }()
    
    /// Sets the ``PhysicalBone2D`` node at `jointIdx`.
    /// 
    /// > Note: This is just the index used for this modification, not the bone index used in the ``Skeleton2D``.
    /// 
    public final func setPhysicalBoneNode (jointIdx: Int32, physicalbone2dNode: NodePath) {
        #if false
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DPhysicalBones.method_set_physical_bone_node, UnsafeMutableRawPointer (mutating: handle), nil, &copy_joint_idx, &physicalbone2dNode.content)
        
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &physicalbone2dNode.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SkeletonModification2DPhysicalBones.method_set_physical_bone_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_physical_bone_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_physical_bone_node")
        return withUnsafePointer (to: &SkeletonModification2DPhysicalBones.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 408788394)!
            }
            
        }
        
    }()
    
    /// Returns the ``PhysicalBone2D`` node at `jointIdx`.
    public final func getPhysicalBoneNode (jointIdx: Int32)-> NodePath {
        let _result: NodePath = NodePath ()
        #if false
        
        var copy_joint_idx: Int = Int (jointIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DPhysicalBones.method_get_physical_bone_node, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_joint_idx)
        return _result
        #else
        
        var copy_joint_idx: Int = Int (jointIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_joint_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DPhysicalBones.method_get_physical_bone_node, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_fetch_physical_bones: GDExtensionMethodBindPtr = {
        let methodName = StringName ("fetch_physical_bones")
        return withUnsafePointer (to: &SkeletonModification2DPhysicalBones.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Empties the list of ``PhysicalBone2D`` nodes and populates it with all ``PhysicalBone2D`` nodes that are children of the ``Skeleton2D``.
    public final func fetchPhysicalBones () {
        gi.object_method_bind_ptrcall (SkeletonModification2DPhysicalBones.method_fetch_physical_bones, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_start_simulation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("start_simulation")
        return withUnsafePointer (to: &SkeletonModification2DPhysicalBones.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2787316981)!
            }
            
        }
        
    }()
    
    /// Tell the ``PhysicalBone2D`` nodes to start simulating and interacting with the physics world.
    /// 
    /// Optionally, an array of bone names can be passed to this function, and that will cause only ``PhysicalBone2D`` nodes with those names to start simulating.
    /// 
    public final func startSimulation (bones: VariantCollection<StringName> = VariantCollection<StringName> ()) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DPhysicalBones.method_start_simulation, UnsafeMutableRawPointer (mutating: handle), nil, &bones.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &bones.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DPhysicalBones.method_start_simulation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_stop_simulation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("stop_simulation")
        return withUnsafePointer (to: &SkeletonModification2DPhysicalBones.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2787316981)!
            }
            
        }
        
    }()
    
    /// Tell the ``PhysicalBone2D`` nodes to stop simulating and interacting with the physics world.
    /// 
    /// Optionally, an array of bone names can be passed to this function, and that will cause only ``PhysicalBone2D`` nodes with those names to stop simulating.
    /// 
    public final func stopSimulation (bones: VariantCollection<StringName> = VariantCollection<StringName> ()) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DPhysicalBones.method_stop_simulation, UnsafeMutableRawPointer (mutating: handle), nil, &bones.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &bones.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DPhysicalBones.method_stop_simulation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

