// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A singleton for handling inputs.
/// 
/// The ``Input`` singleton handles key presses, mouse buttons and movement, gamepads, and input actions. Actions and their events can be set in the **Input Map** tab in **Project > Project Settings**, or with the ``InputMap`` class.
/// 
/// > Note: ``Input``'s methods reflect the global input state and are not affected by ``Control/acceptEvent()`` or ``Viewport/setInputAsHandled()``, as those methods only deal with the way input is propagated in the ``SceneTree``.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``joyConnectionChanged``
open class Input: Object {
    /// The shared instance of this class
    public static var shared: Input = {
        return withUnsafePointer (to: &Input.godotClassName.content) { ptr in
            Input (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "Input" }
    public enum MouseMode: Int64 {
        /// Makes the mouse cursor visible if it is hidden.
        case visible = 0 // MOUSE_MODE_VISIBLE
        /// Makes the mouse cursor hidden if it is visible.
        case hidden = 1 // MOUSE_MODE_HIDDEN
        /// Captures the mouse. The mouse will be hidden and its position locked at the center of the window manager's window.
        /// 
        /// > Note: If you want to process the mouse's movement in this mode, you need to use ``InputEventMouseMotion/relative``.
        /// 
        case captured = 2 // MOUSE_MODE_CAPTURED
        /// Confines the mouse cursor to the game window, and make it visible.
        case confined = 3 // MOUSE_MODE_CONFINED
        /// Confines the mouse cursor to the game window, and make it hidden.
        case confinedHidden = 4 // MOUSE_MODE_CONFINED_HIDDEN
    }
    
    public enum CursorShape: Int64 {
        /// Arrow cursor. Standard, default pointing cursor.
        case arrow = 0 // CURSOR_ARROW
        /// I-beam cursor. Usually used to show where the text cursor will appear when the mouse is clicked.
        case ibeam = 1 // CURSOR_IBEAM
        /// Pointing hand cursor. Usually used to indicate the pointer is over a link or other interactable item.
        case pointingHand = 2 // CURSOR_POINTING_HAND
        /// Cross cursor. Typically appears over regions in which a drawing operation can be performed or for selections.
        case cross = 3 // CURSOR_CROSS
        /// Wait cursor. Indicates that the application is busy performing an operation. This cursor shape denotes that the application isn't usable during the operation (e.g. something is blocking its main thread).
        case wait = 4 // CURSOR_WAIT
        /// Busy cursor. Indicates that the application is busy performing an operation. This cursor shape denotes that the application is still usable during the operation.
        case busy = 5 // CURSOR_BUSY
        /// Drag cursor. Usually displayed when dragging something.
        /// 
        /// > Note: Windows lacks a dragging cursor, so .cursorDrag is the same as .cursorMove for this platform.
        /// 
        case drag = 6 // CURSOR_DRAG
        /// Can drop cursor. Usually displayed when dragging something to indicate that it can be dropped at the current position.
        case canDrop = 7 // CURSOR_CAN_DROP
        /// Forbidden cursor. Indicates that the current action is forbidden (for example, when dragging something) or that the control at a position is disabled.
        case forbidden = 8 // CURSOR_FORBIDDEN
        /// Vertical resize mouse cursor. A double-headed vertical arrow. It tells the user they can resize the window or the panel vertically.
        case vsize = 9 // CURSOR_VSIZE
        /// Horizontal resize mouse cursor. A double-headed horizontal arrow. It tells the user they can resize the window or the panel horizontally.
        case hsize = 10 // CURSOR_HSIZE
        /// Window resize mouse cursor. The cursor is a double-headed arrow that goes from the bottom left to the top right. It tells the user they can resize the window or the panel both horizontally and vertically.
        case bdiagsize = 11 // CURSOR_BDIAGSIZE
        /// Window resize mouse cursor. The cursor is a double-headed arrow that goes from the top left to the bottom right, the opposite of .cursorBdiagsize. It tells the user they can resize the window or the panel both horizontally and vertically.
        case fdiagsize = 12 // CURSOR_FDIAGSIZE
        /// Move cursor. Indicates that something can be moved.
        case move = 13 // CURSOR_MOVE
        /// Vertical split mouse cursor. On Windows, it's the same as .cursorVsize.
        case vsplit = 14 // CURSOR_VSPLIT
        /// Horizontal split mouse cursor. On Windows, it's the same as .cursorHsize.
        case hsplit = 15 // CURSOR_HSPLIT
        /// Help cursor. Usually a question mark.
        case help = 16 // CURSOR_HELP
    }
    
    
    /* Properties */
    
    /// Controls the mouse mode. See ``Input/MouseMode`` for more information.
    static public var mouseMode: Input.MouseMode {
        get {
            return get_mouse_mode ()
        }
        
        set {
            set_mouse_mode (newValue)
        }
        
    }
    
    /// If `true`, similar input events sent by the operating system are accumulated. When input accumulation is enabled, all input events generated during a frame will be merged and emitted when the frame is done rendering. Therefore, this limits the number of input method calls per second to the rendering FPS.
    /// 
    /// Input accumulation can be disabled to get slightly more precise/reactive input at the cost of increased CPU usage. In applications where drawing freehand lines is required, input accumulation should generally be disabled while the user is drawing the line to get results that closely follow the actual input.
    /// 
    /// > Note: Input accumulation is _enabled_ by default.
    /// 
    static public var useAccumulatedInput: Bool {
        get {
            return is_using_accumulated_input ()
        }
        
        set {
            set_use_accumulated_input (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_is_anything_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_anything_pressed")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if any action, key, joypad button, or mouse button is being pressed. This will also return `true` if any action is simulated via code by calling ``actionPress(action:strength:)``.
    public static func isAnythingPressed ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Input.method_is_anything_pressed, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_key_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_key_pressed")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1938909964)!
            }
            
        }
        
    }()
    
    /// Returns `true` if you are pressing the Latin key in the current keyboard layout. You can pass a ``Key`` constant.
    /// 
    /// ``isKeyPressed(keycode:)`` is only recommended over ``isPhysicalKeyPressed(keycode:)`` in non-game applications. This ensures that shortcut keys behave as expected depending on the user's keyboard layout, as keyboard shortcuts are generally dependent on the keyboard layout in non-game applications. If in doubt, use ``isPhysicalKeyPressed(keycode:)``.
    /// 
    /// > Note: Due to keyboard ghosting, ``isKeyPressed(keycode:)`` may return `false` even if one of the action's keys is pressed. See [url=$DOCS_URL/tutorials/inputs/input_examples.html#keyboard-events]Input examples[/url] in the documentation for more information.
    /// 
    public static func isKeyPressed (keycode: Key)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_keycode = Int64 (keycode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Input.method_is_key_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_keycode)
        return _result
        #else
        
        var copy_keycode = Int64 (keycode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_keycode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_is_key_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_physical_key_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_physical_key_pressed")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1938909964)!
            }
            
        }
        
    }()
    
    /// Returns `true` if you are pressing the key in the physical location on the 101/102-key US QWERTY keyboard. You can pass a ``Key`` constant.
    /// 
    /// ``isPhysicalKeyPressed(keycode:)`` is recommended over ``isKeyPressed(keycode:)`` for in-game actions, as it will make [kbd]W[/kbd]/[kbd]A[/kbd]/[kbd]S[/kbd]/[kbd]D[/kbd] layouts work regardless of the user's keyboard layout. ``isPhysicalKeyPressed(keycode:)`` will also ensure that the top row number keys work on any keyboard layout. If in doubt, use ``isPhysicalKeyPressed(keycode:)``.
    /// 
    /// > Note: Due to keyboard ghosting, ``isPhysicalKeyPressed(keycode:)`` may return `false` even if one of the action's keys is pressed. See [url=$DOCS_URL/tutorials/inputs/input_examples.html#keyboard-events]Input examples[/url] in the documentation for more information.
    /// 
    public static func isPhysicalKeyPressed (keycode: Key)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_keycode = Int64 (keycode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Input.method_is_physical_key_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_keycode)
        return _result
        #else
        
        var copy_keycode = Int64 (keycode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_keycode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_is_physical_key_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_key_label_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_key_label_pressed")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1938909964)!
            }
            
        }
        
    }()
    
    /// Returns `true` if you are pressing the key with the `keycode` printed on it. You can pass a ``Key`` constant or any Unicode character code.
    public static func isKeyLabelPressed (keycode: Key)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_keycode = Int64 (keycode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Input.method_is_key_label_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_keycode)
        return _result
        #else
        
        var copy_keycode = Int64 (keycode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_keycode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_is_key_label_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_mouse_button_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_mouse_button_pressed")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1821097125)!
            }
            
        }
        
    }()
    
    /// Returns `true` if you are pressing the mouse button specified with ``MouseButton``.
    public static func isMouseButtonPressed (button: MouseButton)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_button = Int64 (button.rawValue)
        
        gi.object_method_bind_ptrcall_v (Input.method_is_mouse_button_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_button)
        return _result
        #else
        
        var copy_button = Int64 (button.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_button) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_is_mouse_button_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_joy_button_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_joy_button_pressed")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 787208542)!
            }
            
        }
        
    }()
    
    /// Returns `true` if you are pressing the joypad button (see ``JoyButton``).
    public static func isJoyButtonPressed (device: Int32, button: JoyButton)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_device: Int = Int (device)
        var copy_button = Int64 (button.rawValue)
        
        gi.object_method_bind_ptrcall_v (Input.method_is_joy_button_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_device, &copy_button)
        return _result
        #else
        
        var copy_device: Int = Int (device)
        var copy_button = Int64 (button.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_device) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_button) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_is_joy_button_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_action_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_action_pressed")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1558498928)!
            }
            
        }
        
    }()
    
    /// Returns `true` if you are pressing the action event.
    /// 
    /// If `exactMatch` is `false`, it ignores additional input modifiers for ``InputEventKey`` and ``InputEventMouseButton`` events, and the direction for ``InputEventJoypadMotion`` events.
    /// 
    /// > Note: Due to keyboard ghosting, ``isActionPressed(action:exactMatch:)`` may return `false` even if one of the action's keys is pressed. See [url=$DOCS_URL/tutorials/inputs/input_examples.html#keyboard-events]Input examples[/url] in the documentation for more information.
    /// 
    public static func isActionPressed (action: StringName, exactMatch: Bool = false)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_exact_match = exactMatch
        
        gi.object_method_bind_ptrcall_v (Input.method_is_action_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &action.content, &copy_exact_match)
        return _result
        #else
        
        var copy_exact_match = exactMatch
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &action.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_exact_match) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_is_action_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_action_just_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_action_just_pressed")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1558498928)!
            }
            
        }
        
    }()
    
    /// Returns `true` when the user has _started_ pressing the action event in the current frame or physics tick. It will only return `true` on the frame or tick that the user pressed down the button.
    /// 
    /// This is useful for code that needs to run only once when an action is pressed, instead of every frame while it's pressed.
    /// 
    /// If `exactMatch` is `false`, it ignores additional input modifiers for ``InputEventKey`` and ``InputEventMouseButton`` events, and the direction for ``InputEventJoypadMotion`` events.
    /// 
    /// > Note: Returning `true` does not imply that the action is _still_ pressed. An action can be pressed and released again rapidly, and `true` will still be returned so as not to miss input.
    /// 
    /// > Note: Due to keyboard ghosting, ``isActionJustPressed(action:exactMatch:)`` may return `false` even if one of the action's keys is pressed. See [url=$DOCS_URL/tutorials/inputs/input_examples.html#keyboard-events]Input examples[/url] in the documentation for more information.
    /// 
    /// > Note: During input handling (e.g. ``Node/_input(event:)``), use ``InputEvent/isActionPressed(action:allowEcho:exactMatch:)`` instead to query the action state of the current event.
    /// 
    public static func isActionJustPressed (action: StringName, exactMatch: Bool = false)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_exact_match = exactMatch
        
        gi.object_method_bind_ptrcall_v (Input.method_is_action_just_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &action.content, &copy_exact_match)
        return _result
        #else
        
        var copy_exact_match = exactMatch
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &action.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_exact_match) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_is_action_just_pressed, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_action_just_released: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_action_just_released")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1558498928)!
            }
            
        }
        
    }()
    
    /// Returns `true` when the user _stops_ pressing the action event in the current frame or physics tick. It will only return `true` on the frame or tick that the user releases the button.
    /// 
    /// > Note: Returning `true` does not imply that the action is _still_ not pressed. An action can be released and pressed again rapidly, and `true` will still be returned so as not to miss input.
    /// 
    /// If `exactMatch` is `false`, it ignores additional input modifiers for ``InputEventKey`` and ``InputEventMouseButton`` events, and the direction for ``InputEventJoypadMotion`` events.
    /// 
    /// > Note: During input handling (e.g. ``Node/_input(event:)``), use ``InputEvent/isActionReleased(action:exactMatch:)`` instead to query the action state of the current event.
    /// 
    public static func isActionJustReleased (action: StringName, exactMatch: Bool = false)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_exact_match = exactMatch
        
        gi.object_method_bind_ptrcall_v (Input.method_is_action_just_released, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &action.content, &copy_exact_match)
        return _result
        #else
        
        var copy_exact_match = exactMatch
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &action.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_exact_match) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_is_action_just_released, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_action_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_action_strength")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 801543509)!
            }
            
        }
        
    }()
    
    /// Returns a value between 0 and 1 representing the intensity of the given action. In a joypad, for example, the further away the axis (analog sticks or L2, R2 triggers) is from the dead zone, the closer the value will be to 1. If the action is mapped to a control that has no axis such as the keyboard, the value returned will be 0 or 1.
    /// 
    /// If `exactMatch` is `false`, it ignores additional input modifiers for ``InputEventKey`` and ``InputEventMouseButton`` events, and the direction for ``InputEventJoypadMotion`` events.
    /// 
    public static func getActionStrength (action: StringName, exactMatch: Bool = false)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_exact_match = exactMatch
        
        gi.object_method_bind_ptrcall_v (Input.method_get_action_strength, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &action.content, &copy_exact_match)
        return _result
        #else
        
        var copy_exact_match = exactMatch
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &action.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_exact_match) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_get_action_strength, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_action_raw_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_action_raw_strength")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 801543509)!
            }
            
        }
        
    }()
    
    /// Returns a value between 0 and 1 representing the raw intensity of the given action, ignoring the action's deadzone. In most cases, you should use ``getActionStrength(action:exactMatch:)`` instead.
    /// 
    /// If `exactMatch` is `false`, it ignores additional input modifiers for ``InputEventKey`` and ``InputEventMouseButton`` events, and the direction for ``InputEventJoypadMotion`` events.
    /// 
    public static func getActionRawStrength (action: StringName, exactMatch: Bool = false)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_exact_match = exactMatch
        
        gi.object_method_bind_ptrcall_v (Input.method_get_action_raw_strength, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &action.content, &copy_exact_match)
        return _result
        #else
        
        var copy_exact_match = exactMatch
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &action.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_exact_match) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_get_action_raw_strength, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_axis: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_axis")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1958752504)!
            }
            
        }
        
    }()
    
    /// Get axis input by specifying two actions, one negative and one positive.
    /// 
    /// This is a shorthand for writing `Input.get_action_strength("positive_action") - Input.get_action_strength("negative_action")`.
    /// 
    public static func getAxis (negativeAction: StringName, positiveAction: StringName)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Input.method_get_axis, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &negativeAction.content, &positiveAction.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &negativeAction.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &positiveAction.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_get_axis, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_vector: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vector")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2479607902)!
            }
            
        }
        
    }()
    
    /// Gets an input vector by specifying four actions for the positive and negative X and Y axes.
    /// 
    /// This method is useful when getting vector input, such as from a joystick, directional pad, arrows, or WASD. The vector has its length limited to 1 and has a circular deadzone, which is useful for using vector input as movement.
    /// 
    /// By default, the deadzone is automatically calculated from the average of the action deadzones. However, you can override the deadzone to be whatever you want (on the range of 0 to 1).
    /// 
    public static func getVector (negativeX: StringName, positiveX: StringName, negativeY: StringName, positiveY: StringName, deadzone: Double = -1.0)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_deadzone = deadzone
        
        gi.object_method_bind_ptrcall_v (Input.method_get_vector, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &negativeX.content, &positiveX.content, &negativeY.content, &positiveY.content, &copy_deadzone)
        return _result
        #else
        
        var copy_deadzone = deadzone
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &negativeX.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &positiveX.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &negativeY.content) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &positiveY.content) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_deadzone) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (Input.method_get_vector, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                            return _result
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_joy_mapping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_joy_mapping")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1168363258)!
            }
            
        }
        
    }()
    
    /// Adds a new mapping entry (in SDL2 format) to the mapping database. Optionally update already connected devices.
    public static func addJoyMapping (_ mapping: String, updateExisting: Bool = false) {
        #if false
        
        let gstr_mapping = GString (mapping)
        var copy_update_existing = updateExisting
        
        gi.object_method_bind_ptrcall_v (Input.method_add_joy_mapping, UnsafeMutableRawPointer (mutating: shared.handle), nil, &gstr_mapping.content, &copy_update_existing)
        
        #else
        
        let gstr_mapping = GString (mapping)
        var copy_update_existing = updateExisting
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_mapping.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_update_existing) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_add_joy_mapping, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_joy_mapping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_joy_mapping")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Removes all mappings from the internal database that match the given GUID.
    public static func removeJoyMapping (guid: String) {
        #if false
        
        let gstr_guid = GString (guid)
        
        gi.object_method_bind_ptrcall_v (Input.method_remove_joy_mapping, UnsafeMutableRawPointer (mutating: shared.handle), nil, &gstr_guid.content)
        
        #else
        
        let gstr_guid = GString (guid)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_guid.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_remove_joy_mapping, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_joy_known: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_joy_known")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3067735520)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the system knows the specified device. This means that it sets all button and axis indices. Unknown joypads are not expected to match these constants, but you can still retrieve events from them.
    public static func isJoyKnown (device: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_device: Int = Int (device)
        
        gi.object_method_bind_ptrcall_v (Input.method_is_joy_known, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_device)
        return _result
        #else
        
        var copy_device: Int = Int (device)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_device) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_is_joy_known, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_joy_axis: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joy_axis")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4063175957)!
            }
            
        }
        
    }()
    
    /// Returns the current value of the joypad axis at given index (see ``JoyAxis``).
    public static func getJoyAxis (device: Int32, axis: JoyAxis)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_device: Int = Int (device)
        var copy_axis = Int64 (axis.rawValue)
        
        gi.object_method_bind_ptrcall_v (Input.method_get_joy_axis, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_device, &copy_axis)
        return _result
        #else
        
        var copy_device: Int = Int (device)
        var copy_axis = Int64 (axis.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_device) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_axis) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_get_joy_axis, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_joy_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joy_name")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 990163283)!
            }
            
        }
        
    }()
    
    /// Returns the name of the joypad at the specified device index, e.g. `PS4 Controller`. Godot uses the [url=https://github.com/gabomdq/SDL_GameControllerDB]SDL2 game controller database[/url] to determine gamepad names.
    public static func getJoyName (device: Int32)-> String {
        let _result = GString ()
        #if false
        
        var copy_device: Int = Int (device)
        
        gi.object_method_bind_ptrcall_v (Input.method_get_joy_name, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &copy_device)
        return _result.description
        #else
        
        var copy_device: Int = Int (device)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_device) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_get_joy_name, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_get_joy_guid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joy_guid")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 844755477)!
            }
            
        }
        
    }()
    
    /// Returns a SDL2-compatible device GUID on platforms that use gamepad remapping, e.g. `030000004c050000c405000000010000`. Returns `"Default Gamepad"` otherwise. Godot uses the [url=https://github.com/gabomdq/SDL_GameControllerDB]SDL2 game controller database[/url] to determine gamepad names and mappings based on this GUID.
    public static func getJoyGuid (device: Int32)-> String {
        let _result = GString ()
        #if false
        
        var copy_device: Int = Int (device)
        
        gi.object_method_bind_ptrcall_v (Input.method_get_joy_guid, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &copy_device)
        return _result.description
        #else
        
        var copy_device: Int = Int (device)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_device) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_get_joy_guid, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_get_joy_info: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joy_info")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3485342025)!
            }
            
        }
        
    }()
    
    /// Returns a dictionary with extra platform-specific information about the device, e.g. the raw gamepad name from the OS or the Steam Input index.
    /// 
    /// On Windows the dictionary contains the following fields:
    /// 
    /// `xinput_index`: The index of the controller in the XInput system.
    /// 
    /// On Linux:
    /// 
    /// `raw_name`: The name of the controller as it came from the OS, before getting renamed by the godot controller database.
    /// 
    /// `vendor_id`: The USB vendor ID of the device.
    /// 
    /// `product_id`: The USB product ID of the device.
    /// 
    /// `steam_input_index`: The Steam Input gamepad index, if the device is not a Steam Input device this key won't be present.
    /// 
    public static func getJoyInfo (device: Int32)-> GDictionary {
        let _result: GDictionary = GDictionary ()
        #if false
        
        var copy_device: Int = Int (device)
        
        gi.object_method_bind_ptrcall_v (Input.method_get_joy_info, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &copy_device)
        return _result
        #else
        
        var copy_device: Int = Int (device)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_device) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_get_joy_info, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_should_ignore_device: GDExtensionMethodBindPtr = {
        let methodName = StringName ("should_ignore_device")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2522259332)!
            }
            
        }
        
    }()
    
    /// Queries whether an input device should be ignored or not. Devices can be ignored by setting the environment variable `SDL_GAMECONTROLLER_IGNORE_DEVICES`. Read the [url=https://wiki.libsdl.org/SDL2]SDL documentation[/url] for more information.
    /// 
    /// > Note: Some 3rd party tools can contribute to the list of ignored devices. For example, _SteamInput_ creates virtual devices from physical devices for remapping purposes. To avoid handling the same input device twice, the original device is added to the ignore list.
    /// 
    public static func shouldIgnoreDevice (vendorId: Int32, productId: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_vendor_id: Int = Int (vendorId)
        var copy_product_id: Int = Int (productId)
        
        gi.object_method_bind_ptrcall_v (Input.method_should_ignore_device, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_vendor_id, &copy_product_id)
        return _result
        #else
        
        var copy_vendor_id: Int = Int (vendorId)
        var copy_product_id: Int = Int (productId)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_vendor_id) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_product_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_should_ignore_device, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_connected_joypads: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_connected_joypads")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    /// Returns an ``GArray`` containing the device IDs of all currently connected joypads.
    public static func getConnectedJoypads ()-> VariantCollection<Int64> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Input.method_get_connected_joypads, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return VariantCollection<Int64>(content: _result)
    }
    
    fileprivate static var method_get_joy_vibration_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joy_vibration_strength")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3114997196)!
            }
            
        }
        
    }()
    
    /// Returns the strength of the joypad vibration: x is the strength of the weak motor, and y is the strength of the strong motor.
    public static func getJoyVibrationStrength (device: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_device: Int = Int (device)
        
        gi.object_method_bind_ptrcall_v (Input.method_get_joy_vibration_strength, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_device)
        return _result
        #else
        
        var copy_device: Int = Int (device)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_device) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_get_joy_vibration_strength, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_joy_vibration_duration: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joy_vibration_duration")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4025615559)!
            }
            
        }
        
    }()
    
    /// Returns the duration of the current vibration effect in seconds.
    public static func getJoyVibrationDuration (device: Int32)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_device: Int = Int (device)
        
        gi.object_method_bind_ptrcall_v (Input.method_get_joy_vibration_duration, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_device)
        return _result
        #else
        
        var copy_device: Int = Int (device)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_device) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_get_joy_vibration_duration, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_start_joy_vibration: GDExtensionMethodBindPtr = {
        let methodName = StringName ("start_joy_vibration")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2576575033)!
            }
            
        }
        
    }()
    
    /// Starts to vibrate the joypad. Joypads usually come with two rumble motors, a strong and a weak one. `weakMagnitude` is the strength of the weak motor (between 0 and 1) and `strongMagnitude` is the strength of the strong motor (between 0 and 1). `duration` is the duration of the effect in seconds (a duration of 0 will try to play the vibration indefinitely). The vibration can be stopped early by calling ``stopJoyVibration(device:)``.
    /// 
    /// > Note: Not every hardware is compatible with long effect durations; it is recommended to restart an effect if it has to be played for more than a few seconds.
    /// 
    public static func startJoyVibration (device: Int32, weakMagnitude: Double, strongMagnitude: Double, duration: Double = 0) {
        #if false
        
        var copy_device: Int = Int (device)
        var copy_weak_magnitude = weakMagnitude
        var copy_strong_magnitude = strongMagnitude
        var copy_duration = duration
        
        gi.object_method_bind_ptrcall_v (Input.method_start_joy_vibration, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_device, &copy_weak_magnitude, &copy_strong_magnitude, &copy_duration)
        
        #else
        
        var copy_device: Int = Int (device)
        var copy_weak_magnitude = weakMagnitude
        var copy_strong_magnitude = strongMagnitude
        var copy_duration = duration
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_device) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_weak_magnitude) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_strong_magnitude) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_duration) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (Input.method_start_joy_vibration, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_stop_joy_vibration: GDExtensionMethodBindPtr = {
        let methodName = StringName ("stop_joy_vibration")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Stops the vibration of the joypad started with ``startJoyVibration(device:weakMagnitude:strongMagnitude:duration:)``.
    public static func stopJoyVibration (device: Int32) {
        #if false
        
        var copy_device: Int = Int (device)
        
        gi.object_method_bind_ptrcall_v (Input.method_stop_joy_vibration, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_device)
        
        #else
        
        var copy_device: Int = Int (device)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_device) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_stop_joy_vibration, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_vibrate_handheld: GDExtensionMethodBindPtr = {
        let methodName = StringName ("vibrate_handheld")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 955504365)!
            }
            
        }
        
    }()
    
    /// Vibrate the handheld device for the specified duration in milliseconds.
    /// 
    /// > Note: This method is implemented on Android, iOS, and Web. It has no effect on other platforms.
    /// 
    /// > Note: For Android, ``vibrateHandheld(durationMs:)`` requires enabling the `VIBRATE` permission in the export preset. Otherwise, ``vibrateHandheld(durationMs:)`` will have no effect.
    /// 
    /// > Note: For iOS, specifying the duration is only supported in iOS 13 and later.
    /// 
    /// > Note: Some web browsers such as Safari and Firefox for Android do not support ``vibrateHandheld(durationMs:)``.
    /// 
    public static func vibrateHandheld (durationMs: Int32 = 500) {
        #if false
        
        var copy_duration_ms: Int = Int (durationMs)
        
        gi.object_method_bind_ptrcall_v (Input.method_vibrate_handheld, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_duration_ms)
        
        #else
        
        var copy_duration_ms: Int = Int (durationMs)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_duration_ms) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_vibrate_handheld, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gravity")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the gravity in m/s² of the device's accelerometer sensor, if the device has one. Otherwise, the method returns ``Vector3.ZERO``.
    /// 
    /// > Note: This method only works on Android and iOS. On other platforms, it always returns ``Vector3.ZERO``.
    /// 
    public static func getGravity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (Input.method_get_gravity, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_accelerometer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_accelerometer")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the acceleration in m/s² of the device's accelerometer sensor, if the device has one. Otherwise, the method returns ``Vector3.ZERO``.
    /// 
    /// Note this method returns an empty ``Vector3`` when running from the editor even when your device has an accelerometer. You must export your project to a supported device to read values from the accelerometer.
    /// 
    /// > Note: This method only works on Android and iOS. On other platforms, it always returns ``Vector3.ZERO``.
    /// 
    public static func getAccelerometer ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (Input.method_get_accelerometer, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_magnetometer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_magnetometer")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the magnetic field strength in micro-Tesla for all axes of the device's magnetometer sensor, if the device has one. Otherwise, the method returns ``Vector3.ZERO``.
    /// 
    /// > Note: This method only works on Android and iOS. On other platforms, it always returns ``Vector3.ZERO``.
    /// 
    public static func getMagnetometer ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (Input.method_get_magnetometer, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_gyroscope: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gyroscope")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the rotation rate in rad/s around a device's X, Y, and Z axes of the gyroscope sensor, if the device has one. Otherwise, the method returns ``Vector3.ZERO``.
    /// 
    /// > Note: This method only works on Android and iOS. On other platforms, it always returns ``Vector3.ZERO``.
    /// 
    public static func getGyroscope ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (Input.method_get_gyroscope, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    /// Sets the gravity value of the accelerometer sensor. Can be used for debugging on devices without a hardware sensor, for example in an editor on a PC.
    /// 
    /// > Note: This value can be immediately overwritten by the hardware sensor value on Android and iOS.
    /// 
    public static func setGravity (value: Vector3) {
        #if false
        
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (Input.method_set_gravity, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_value)
        
        #else
        
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_value) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_set_gravity, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_accelerometer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_accelerometer")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    /// Sets the acceleration value of the accelerometer sensor. Can be used for debugging on devices without a hardware sensor, for example in an editor on a PC.
    /// 
    /// > Note: This value can be immediately overwritten by the hardware sensor value on Android and iOS.
    /// 
    public static func setAccelerometer (value: Vector3) {
        #if false
        
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (Input.method_set_accelerometer, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_value)
        
        #else
        
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_value) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_set_accelerometer, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_magnetometer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_magnetometer")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    /// Sets the value of the magnetic field of the magnetometer sensor. Can be used for debugging on devices without a hardware sensor, for example in an editor on a PC.
    /// 
    /// > Note: This value can be immediately overwritten by the hardware sensor value on Android and iOS.
    /// 
    public static func setMagnetometer (value: Vector3) {
        #if false
        
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (Input.method_set_magnetometer, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_value)
        
        #else
        
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_value) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_set_magnetometer, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_gyroscope: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gyroscope")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    /// Sets the value of the rotation rate of the gyroscope sensor. Can be used for debugging on devices without a hardware sensor, for example in an editor on a PC.
    /// 
    /// > Note: This value can be immediately overwritten by the hardware sensor value on Android and iOS.
    /// 
    public static func setGyroscope (value: Vector3) {
        #if false
        
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (Input.method_set_gyroscope, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_value)
        
        #else
        
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_value) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_set_gyroscope, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_last_mouse_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_last_mouse_velocity")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1497962370)!
            }
            
        }
        
    }()
    
    /// Returns the last mouse velocity. To provide a precise and jitter-free velocity, mouse velocity is only calculated every 0.1s. Therefore, mouse velocity will lag mouse movements.
    public static func getLastMouseVelocity ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (Input.method_get_last_mouse_velocity, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_mouse_button_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mouse_button_mask")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2512161324)!
            }
            
        }
        
    }()
    
    /// Returns mouse buttons as a bitmask. If multiple mouse buttons are pressed at the same time, the bits are added together. Equivalent to ``DisplayServer/mouseGetButtonState()``.
    public static func getMouseButtonMask ()-> MouseButtonMask {
        var _result: MouseButtonMask = MouseButtonMask ()
        gi.object_method_bind_ptrcall (Input.method_get_mouse_button_mask, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mouse_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mouse_mode")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2228490894)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_mouse_mode (_ mode: Input.MouseMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Input.method_set_mouse_mode, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_set_mouse_mode, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mouse_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mouse_mode")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 965286182)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func get_mouse_mode ()-> Input.MouseMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Input.method_get_mouse_mode, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return Input.MouseMode (rawValue: _result)!
    }
    
    fileprivate static var method_warp_mouse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("warp_mouse")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Sets the mouse position to the specified vector, provided in pixels and relative to an origin at the upper left corner of the currently focused Window Manager game window.
    /// 
    /// Mouse position is clipped to the limits of the screen resolution, or to the limits of the game window if ``Input/MouseMode`` is set to .confined or .confinedHidden.
    /// 
    /// > Note: ``warpMouse(position:)`` is only supported on Windows, macOS and Linux. It has no effect on Android, iOS and Web.
    /// 
    public static func warpMouse (position: Vector2) {
        #if false
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (Input.method_warp_mouse, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_warp_mouse, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_action_press: GDExtensionMethodBindPtr = {
        let methodName = StringName ("action_press")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1713091165)!
            }
            
        }
        
    }()
    
    /// This will simulate pressing the specified action.
    /// 
    /// The strength can be used for non-boolean actions, it's ranged between 0 and 1 representing the intensity of the given action.
    /// 
    /// > Note: This method will not cause any ``Node/_input(event:)`` calls. It is intended to be used with ``isActionPressed(action:exactMatch:)`` and ``isActionJustPressed(action:exactMatch:)``. If you want to simulate `_input`, use ``parseInputEvent(_:)`` instead.
    /// 
    public static func actionPress (action: StringName, strength: Double = 1.0) {
        #if false
        
        var copy_strength = strength
        
        gi.object_method_bind_ptrcall_v (Input.method_action_press, UnsafeMutableRawPointer (mutating: shared.handle), nil, &action.content, &copy_strength)
        
        #else
        
        var copy_strength = strength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &action.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_strength) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Input.method_action_press, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_action_release: GDExtensionMethodBindPtr = {
        let methodName = StringName ("action_release")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// If the specified action is already pressed, this will release it.
    public static func actionRelease (action: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Input.method_action_release, UnsafeMutableRawPointer (mutating: shared.handle), nil, &action.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &action.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_action_release, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_default_cursor_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_default_cursor_shape")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2124816902)!
            }
            
        }
        
    }()
    
    /// Sets the default cursor shape to be used in the viewport instead of .cursorArrow.
    /// 
    /// > Note: If you want to change the default cursor shape for ``Control``'s nodes, use ``Control/mouseDefaultCursorShape`` instead.
    /// 
    /// > Note: This method generates an ``InputEventMouseMotion`` to update cursor immediately.
    /// 
    public static func setDefaultCursorShape (_ shape: Input.CursorShape = .arrow) {
        #if false
        
        var copy_shape = Int64 (shape.rawValue)
        
        gi.object_method_bind_ptrcall_v (Input.method_set_default_cursor_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_shape)
        
        #else
        
        var copy_shape = Int64 (shape.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_shape) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_set_default_cursor_shape, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_current_cursor_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_cursor_shape")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3455658929)!
            }
            
        }
        
    }()
    
    /// Returns the currently assigned cursor shape (see ``Input/CursorShape``).
    public static func getCurrentCursorShape ()-> Input.CursorShape {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Input.method_get_current_cursor_shape, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return Input.CursorShape (rawValue: _result)!
    }
    
    fileprivate static var method_set_custom_mouse_cursor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_mouse_cursor")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 703945977)!
            }
            
        }
        
    }()
    
    /// Sets a custom mouse cursor image, which is only visible inside the game window. The hotspot can also be specified. Passing `null` to the image parameter resets to the system cursor. See ``Input/CursorShape`` for the list of shapes.
    /// 
    /// `image`'s size must be lower than or equal to 256×256. To avoid rendering issues, sizes lower than or equal to 128×128 are recommended.
    /// 
    /// `hotspot` must be within `image`'s size.
    /// 
    /// > Note: ``AnimatedTexture``s aren't supported as custom mouse cursors. If using an ``AnimatedTexture``, only the first frame will be displayed.
    /// 
    /// > Note: The **Lossless**, **Lossy** or **Uncompressed** compression modes are recommended. The **Video RAM** compression mode can be used, but it will be decompressed on the CPU, which means loading times are slowed down and no memory is saved compared to lossless modes.
    /// 
    /// > Note: On the web platform, the maximum allowed cursor image size is 128×128. Cursor images larger than 32×32 will also only be displayed if the mouse cursor image is entirely located within the page for [url=https://chromestatus.com/feature/5825971391299584]security reasons[/url].
    /// 
    public static func setCustomMouseCursor (image: Resource?, shape: Input.CursorShape = .arrow, hotspot: Vector2 = Vector2 (x: 0, y: 0)) {
        #if false
        
        var copy_shape = Int64 (shape.rawValue)
        var copy_hotspot = hotspot
        var copy_image_handle = image?.handle
        
        gi.object_method_bind_ptrcall_v (Input.method_set_custom_mouse_cursor, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_image_handle, &copy_shape, &copy_hotspot)
        
        #else
        
        var copy_shape = Int64 (shape.rawValue)
        var copy_hotspot = hotspot
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: image?.handle) { p0 in
        _args.append (image == nil ? nil : p0)
            withUnsafePointer (to: &copy_shape) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_hotspot) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (Input.method_set_custom_mouse_cursor, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_parse_input_event: GDExtensionMethodBindPtr = {
        let methodName = StringName ("parse_input_event")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3754044979)!
            }
            
        }
        
    }()
    
    /// Feeds an ``InputEvent`` to the game. Can be used to artificially trigger input events from code. Also generates ``Node/_input(event:)`` calls.
    /// 
    /// **Example:**
    /// 
    public static func parseInputEvent (_ event: InputEvent?) {
        #if false
        
        var copy_event_handle = event?.handle
        
        gi.object_method_bind_ptrcall_v (Input.method_parse_input_event, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_event_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: event?.handle) { p0 in
        _args.append (event == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Input.method_parse_input_event, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_use_accumulated_input: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_accumulated_input")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func set_use_accumulated_input (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (Input.method_set_use_accumulated_input, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Input.method_set_use_accumulated_input, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_using_accumulated_input: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_using_accumulated_input")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate static func is_using_accumulated_input ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Input.method_is_using_accumulated_input, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_flush_buffered_events: GDExtensionMethodBindPtr = {
        let methodName = StringName ("flush_buffered_events")
        return withUnsafePointer (to: &Input.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Sends all input events which are in the current buffer to the game loop. These events may have been buffered as a result of accumulated input (``useAccumulatedInput``) or agile input flushing (``ProjectSettings/inputDevices/buffering/agileEventFlushing``).
    /// 
    /// The engine will already do this itself at key execution points (at least once per frame). However, this can be useful in advanced cases where you want precise control over the timing of event handling.
    /// 
    public static func flushBufferedEvents () {
        gi.object_method_bind_ptrcall (Input.method_flush_buffered_events, UnsafeMutableRawPointer (mutating: shared.handle), nil, nil)
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ device: Int64, _ connected: Bool) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Int64 (args [0])!
                let arg_1 = Bool (args [1])!
                
                callback (arg_0, arg_1)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _, _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when a joypad device has been connected or disconnected.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.joyConnectionChanged.connect { device, connected in
    ///    print ("caught signal")
    /// }
    /// ```
    public var joyConnectionChanged: Signal1 { Signal1 (target: self, signalName: "joy_connection_changed") }
    
}

