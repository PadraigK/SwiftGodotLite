// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A font loaded from a system font. Falls back to a default theme font if not implemented on the host OS.
/// 
/// ``SystemFont`` loads a font from a system font with the first matching name from ``fontNames``.
/// 
/// It will attempt to match font style, but it's not guaranteed.
/// 
/// The returned font might be part of a font collection or be a variable font with OpenType "weight", "width" and/or "italic" features set.
/// 
/// You can create ``FontVariation`` of the system font for fine control over its features.
/// 
/// > Note: This class is implemented on iOS, Linux, macOS and Windows, on other platforms it will fallback to default theme font.
/// 
open class SystemFont: Font {
    override open class var godotClassName: StringName { "SystemFont" }
    
    /* Properties */
    
    /// Array of font family names to search, first matching font found is used.
    final public var fontNames: PackedStringArray {
        get {
            return get_font_names ()
        }
        
        set {
            set_font_names (newValue)
        }
        
    }
    
    /// If set to `true`, italic or oblique font is preferred.
    final public var fontItalic: Bool {
        get {
            return get_font_italic ()
        }
        
        set {
            set_font_italic (newValue)
        }
        
    }
    
    /// Preferred weight (boldness) of the font. A value in the `100...999` range, normal font weight is `400`, bold font weight is `700`.
    final public var fontWeight: Int32 {
        get {
            return getFontWeight ()
        }
        
        set {
            set_font_weight (newValue)
        }
        
    }
    
    /// Preferred font stretch amount, compared to a normal width. A percentage value between `50%` and `200%`.
    final public var fontStretch: Int32 {
        get {
            return getFontStretch ()
        }
        
        set {
            set_font_stretch (newValue)
        }
        
    }
    
    /// Font anti-aliasing mode.
    final public var antialiasing: TextServer.FontAntialiasing {
        get {
            return get_antialiasing ()
        }
        
        set {
            set_antialiasing (newValue)
        }
        
    }
    
    /// If set to `true`, generate mipmaps for the font textures.
    final public var generateMipmaps: Bool {
        get {
            return get_generate_mipmaps ()
        }
        
        set {
            set_generate_mipmaps (newValue)
        }
        
    }
    
    /// If set to `true`, system fonts can be automatically used as fallbacks.
    final public var allowSystemFallback: Bool {
        get {
            return is_allow_system_fallback ()
        }
        
        set {
            set_allow_system_fallback (newValue)
        }
        
    }
    
    /// If set to `true`, auto-hinting is supported and preferred over font built-in hinting.
    final public var forceAutohinter: Bool {
        get {
            return is_force_autohinter ()
        }
        
        set {
            set_force_autohinter (newValue)
        }
        
    }
    
    /// Font hinting mode.
    final public var hinting: TextServer.Hinting {
        get {
            return get_hinting ()
        }
        
        set {
            set_hinting (newValue)
        }
        
    }
    
    /// Font glyph subpixel positioning mode. Subpixel positioning provides shaper text and better kerning for smaller font sizes, at the cost of memory usage and font rasterization speed. Use ``TextServer/SubpixelPositioning/auto`` to automatically enable it based on the font size.
    final public var subpixelPositioning: TextServer.SubpixelPositioning {
        get {
            return get_subpixel_positioning ()
        }
        
        set {
            set_subpixel_positioning (newValue)
        }
        
    }
    
    /// If set to `true`, glyphs of all sizes are rendered using single multichannel signed distance field generated from the dynamic font vector data.
    final public var multichannelSignedDistanceField: Bool {
        get {
            return is_multichannel_signed_distance_field ()
        }
        
        set {
            set_multichannel_signed_distance_field (newValue)
        }
        
    }
    
    /// The width of the range around the shape between the minimum and maximum representable signed distance. If using font outlines, ``msdfPixelRange`` must be set to at least _twice_ the size of the largest font outline. The default ``msdfPixelRange`` value of `16` allows outline sizes up to `8` to look correct.
    final public var msdfPixelRange: Int32 {
        get {
            return get_msdf_pixel_range ()
        }
        
        set {
            set_msdf_pixel_range (newValue)
        }
        
    }
    
    /// Source font size used to generate MSDF textures. Higher values allow for more precision, but are slower to render and require more memory. Only increase this value if you notice a visible lack of precision in glyph rendering.
    final public var msdfSize: Int32 {
        get {
            return get_msdf_size ()
        }
        
        set {
            set_msdf_size (newValue)
        }
        
    }
    
    /// Font oversampling factor, if set to `0.0` global oversampling factor is used instead.
    final public var oversampling: Double {
        get {
            return get_oversampling ()
        }
        
        set {
            set_oversampling (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_antialiasing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_antialiasing")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1669900)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_antialiasing (_ antialiasing: TextServer.FontAntialiasing) {
        #if true
        
        var copy_antialiasing = Int64 (antialiasing.rawValue)
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_antialiasing, UnsafeMutableRawPointer (mutating: handle), nil, &copy_antialiasing)
        
        #else
        
        var copy_antialiasing = Int64 (antialiasing.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_antialiasing) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_antialiasing, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_antialiasing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_antialiasing")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4262718649)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_antialiasing ()-> TextServer.FontAntialiasing {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (SystemFont.method_get_antialiasing, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.FontAntialiasing (rawValue: _result)!
    }
    
    fileprivate static var method_set_generate_mipmaps: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_generate_mipmaps")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_generate_mipmaps (_ generateMipmaps: Bool) {
        #if true
        
        var copy_generate_mipmaps = generateMipmaps
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_generate_mipmaps, UnsafeMutableRawPointer (mutating: handle), nil, &copy_generate_mipmaps)
        
        #else
        
        var copy_generate_mipmaps = generateMipmaps
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_generate_mipmaps) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_generate_mipmaps, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_generate_mipmaps: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_generate_mipmaps")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_generate_mipmaps ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SystemFont.method_get_generate_mipmaps, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_allow_system_fallback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_allow_system_fallback")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_allow_system_fallback (_ allowSystemFallback: Bool) {
        #if true
        
        var copy_allow_system_fallback = allowSystemFallback
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_allow_system_fallback, UnsafeMutableRawPointer (mutating: handle), nil, &copy_allow_system_fallback)
        
        #else
        
        var copy_allow_system_fallback = allowSystemFallback
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_allow_system_fallback) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_allow_system_fallback, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_allow_system_fallback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_allow_system_fallback")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_allow_system_fallback ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SystemFont.method_is_allow_system_fallback, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_force_autohinter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_force_autohinter")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_force_autohinter (_ forceAutohinter: Bool) {
        #if true
        
        var copy_force_autohinter = forceAutohinter
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_force_autohinter, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force_autohinter)
        
        #else
        
        var copy_force_autohinter = forceAutohinter
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force_autohinter) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_force_autohinter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_force_autohinter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_force_autohinter")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_force_autohinter ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SystemFont.method_is_force_autohinter, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_hinting: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_hinting")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1827459492)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_hinting (_ hinting: TextServer.Hinting) {
        #if true
        
        var copy_hinting = Int64 (hinting.rawValue)
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_hinting, UnsafeMutableRawPointer (mutating: handle), nil, &copy_hinting)
        
        #else
        
        var copy_hinting = Int64 (hinting.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_hinting) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_hinting, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_hinting: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_hinting")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3683214614)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_hinting ()-> TextServer.Hinting {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (SystemFont.method_get_hinting, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.Hinting (rawValue: _result)!
    }
    
    fileprivate static var method_set_subpixel_positioning: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_subpixel_positioning")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4225742182)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_subpixel_positioning (_ subpixelPositioning: TextServer.SubpixelPositioning) {
        #if true
        
        var copy_subpixel_positioning = Int64 (subpixelPositioning.rawValue)
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_subpixel_positioning, UnsafeMutableRawPointer (mutating: handle), nil, &copy_subpixel_positioning)
        
        #else
        
        var copy_subpixel_positioning = Int64 (subpixelPositioning.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_subpixel_positioning) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_subpixel_positioning, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_subpixel_positioning: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_subpixel_positioning")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1069238588)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_subpixel_positioning ()-> TextServer.SubpixelPositioning {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (SystemFont.method_get_subpixel_positioning, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.SubpixelPositioning (rawValue: _result)!
    }
    
    fileprivate static var method_set_multichannel_signed_distance_field: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_multichannel_signed_distance_field")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_multichannel_signed_distance_field (_ msdf: Bool) {
        #if true
        
        var copy_msdf = msdf
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_multichannel_signed_distance_field, UnsafeMutableRawPointer (mutating: handle), nil, &copy_msdf)
        
        #else
        
        var copy_msdf = msdf
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_msdf) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_multichannel_signed_distance_field, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_multichannel_signed_distance_field: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_multichannel_signed_distance_field")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_multichannel_signed_distance_field ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SystemFont.method_is_multichannel_signed_distance_field, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_msdf_pixel_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_msdf_pixel_range")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_msdf_pixel_range (_ msdfPixelRange: Int32) {
        #if true
        
        var copy_msdf_pixel_range: Int = Int (msdfPixelRange)
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_msdf_pixel_range, UnsafeMutableRawPointer (mutating: handle), nil, &copy_msdf_pixel_range)
        
        #else
        
        var copy_msdf_pixel_range: Int = Int (msdfPixelRange)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_msdf_pixel_range) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_msdf_pixel_range, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_msdf_pixel_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_msdf_pixel_range")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_msdf_pixel_range ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (SystemFont.method_get_msdf_pixel_range, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_msdf_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_msdf_size")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_msdf_size (_ msdfSize: Int32) {
        #if true
        
        var copy_msdf_size: Int = Int (msdfSize)
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_msdf_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_msdf_size)
        
        #else
        
        var copy_msdf_size: Int = Int (msdfSize)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_msdf_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_msdf_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_msdf_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_msdf_size")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_msdf_size ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (SystemFont.method_get_msdf_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_oversampling: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_oversampling")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_oversampling (_ oversampling: Double) {
        #if true
        
        var copy_oversampling = oversampling
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_oversampling, UnsafeMutableRawPointer (mutating: handle), nil, &copy_oversampling)
        
        #else
        
        var copy_oversampling = oversampling
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_oversampling) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_oversampling, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_oversampling: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_oversampling")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_oversampling ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SystemFont.method_get_oversampling, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_font_names: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_names")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_font_names ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (SystemFont.method_get_font_names, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_font_names: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_names")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4015028928)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_names (_ names: PackedStringArray) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_font_names, UnsafeMutableRawPointer (mutating: handle), nil, &names.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &names.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_font_names, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_font_italic: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_italic")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_font_italic ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SystemFont.method_get_font_italic, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_font_italic: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_italic")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_italic (_ italic: Bool) {
        #if true
        
        var copy_italic = italic
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_font_italic, UnsafeMutableRawPointer (mutating: handle), nil, &copy_italic)
        
        #else
        
        var copy_italic = italic
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_italic) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_font_italic, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_font_weight: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_weight")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_weight (_ weight: Int32) {
        #if true
        
        var copy_weight: Int = Int (weight)
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_font_weight, UnsafeMutableRawPointer (mutating: handle), nil, &copy_weight)
        
        #else
        
        var copy_weight: Int = Int (weight)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_weight) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_font_weight, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_font_stretch: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_stretch")
        return withUnsafePointer (to: &SystemFont.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_stretch (_ stretch: Int32) {
        #if true
        
        var copy_stretch: Int = Int (stretch)
        
        gi.object_method_bind_ptrcall_v (SystemFont.method_set_font_stretch, UnsafeMutableRawPointer (mutating: handle), nil, &copy_stretch)
        
        #else
        
        var copy_stretch: Int = Int (stretch)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_stretch) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SystemFont.method_set_font_stretch, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

