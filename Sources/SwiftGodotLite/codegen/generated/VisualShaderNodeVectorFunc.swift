// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A vector function to be used within the visual shader graph.
/// 
/// A visual shader node able to perform different functions using vectors.
open class VisualShaderNodeVectorFunc: VisualShaderNodeVectorBase {
    override open class var godotClassName: StringName { "VisualShaderNodeVectorFunc" }
    public enum Function: Int64 {
        /// Normalizes the vector so that it has a length of `1` but points in the same direction.
        case normalize = 0 // FUNC_NORMALIZE
        /// Clamps the value between `0.0` and `1.0`.
        case saturate = 1 // FUNC_SATURATE
        /// Returns the opposite value of the parameter.
        case negate = 2 // FUNC_NEGATE
        /// Returns `1/vector`.
        case reciprocal = 3 // FUNC_RECIPROCAL
        /// Returns the absolute value of the parameter.
        case abs = 4 // FUNC_ABS
        /// Returns the arc-cosine of the parameter.
        case acos = 5 // FUNC_ACOS
        /// Returns the inverse hyperbolic cosine of the parameter.
        case acosh = 6 // FUNC_ACOSH
        /// Returns the arc-sine of the parameter.
        case asin = 7 // FUNC_ASIN
        /// Returns the inverse hyperbolic sine of the parameter.
        case asinh = 8 // FUNC_ASINH
        /// Returns the arc-tangent of the parameter.
        case atan = 9 // FUNC_ATAN
        /// Returns the inverse hyperbolic tangent of the parameter.
        case atanh = 10 // FUNC_ATANH
        /// Finds the nearest integer that is greater than or equal to the parameter.
        case ceil = 11 // FUNC_CEIL
        /// Returns the cosine of the parameter.
        case cos = 12 // FUNC_COS
        /// Returns the hyperbolic cosine of the parameter.
        case cosh = 13 // FUNC_COSH
        /// Converts a quantity in radians to degrees.
        case degrees = 14 // FUNC_DEGREES
        /// Base-e Exponential.
        case exp = 15 // FUNC_EXP
        /// Base-2 Exponential.
        case exp2 = 16 // FUNC_EXP2
        /// Finds the nearest integer less than or equal to the parameter.
        case floor = 17 // FUNC_FLOOR
        /// Computes the fractional part of the argument.
        case fract = 18 // FUNC_FRACT
        /// Returns the inverse of the square root of the parameter.
        case inverseSqrt = 19 // FUNC_INVERSE_SQRT
        /// Natural logarithm.
        case log = 20 // FUNC_LOG
        /// Base-2 logarithm.
        case log2 = 21 // FUNC_LOG2
        /// Converts a quantity in degrees to radians.
        case radians = 22 // FUNC_RADIANS
        /// Finds the nearest integer to the parameter.
        case round = 23 // FUNC_ROUND
        /// Finds the nearest even integer to the parameter.
        case roundeven = 24 // FUNC_ROUNDEVEN
        /// Extracts the sign of the parameter, i.e. returns `-1` if the parameter is negative, `1` if it's positive and `0` otherwise.
        case sign = 25 // FUNC_SIGN
        /// Returns the sine of the parameter.
        case sin = 26 // FUNC_SIN
        /// Returns the hyperbolic sine of the parameter.
        case sinh = 27 // FUNC_SINH
        /// Returns the square root of the parameter.
        case sqrt = 28 // FUNC_SQRT
        /// Returns the tangent of the parameter.
        case tan = 29 // FUNC_TAN
        /// Returns the hyperbolic tangent of the parameter.
        case tanh = 30 // FUNC_TANH
        /// Returns a value equal to the nearest integer to the parameter whose absolute value is not larger than the absolute value of the parameter.
        case trunc = 31 // FUNC_TRUNC
        /// Returns `1.0 - vector`.
        case oneminus = 32 // FUNC_ONEMINUS
        /// Represents the size of the ``VisualShaderNodeVectorFunc/Function`` enum.
        case max = 33 // FUNC_MAX
    }
    
    
    /* Properties */
    
    /// The function to be performed. See ``VisualShaderNodeVectorFunc/Function`` for options.
    final public var function: VisualShaderNodeVectorFunc.Function {
        get {
            return get_function ()
        }
        
        set {
            set_function (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_function: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_function")
        return withUnsafePointer (to: &VisualShaderNodeVectorFunc.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 629964457)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_function (_ `func`: VisualShaderNodeVectorFunc.Function) {
        #if true
        
        var copy_func = Int64 (`func`.rawValue)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeVectorFunc.method_set_function, UnsafeMutableRawPointer (mutating: handle), nil, &copy_func)
        
        #else
        
        var copy_func = Int64 (`func`.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_func) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeVectorFunc.method_set_function, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_function: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_function")
        return withUnsafePointer (to: &VisualShaderNodeVectorFunc.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4047776843)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_function ()-> VisualShaderNodeVectorFunc.Function {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (VisualShaderNodeVectorFunc.method_get_function, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VisualShaderNodeVectorFunc.Function (rawValue: _result)!
    }
    
}

