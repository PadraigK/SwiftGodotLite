// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Represents all data of a GLTF file.
/// 
/// Contains all nodes and resources of a GLTF file. This is used by ``GLTFDocument`` as data storage, which allows ``GLTFDocument`` and all ``GLTFDocumentExtension`` classes to remain stateless.
/// 
/// GLTFState can be populated by ``GLTFDocument`` reading a file or by converting a Godot scene. Then the data can either be used to create a Godot scene or save to a GLTF file. The code that converts to/from a Godot scene can be intercepted at arbitrary points by ``GLTFDocumentExtension`` classes. This allows for custom data to be stored in the GLTF file or for custom data to be converted to/from Godot nodes.
/// 
open class GLTFState: Resource {
    override open class var godotClassName: StringName { "GLTFState" }
    /* Constants */
    /// Discards all embedded textures and uses untextured materials.
    public static let handleBinaryDiscardTextures = 0
    /// Extracts embedded textures to be reimported and compressed. Editor only. Acts as uncompressed at runtime.
    public static let handleBinaryExtractTextures = 1
    /// Embeds textures VRAM compressed with Basis Universal into the generated scene.
    public static let handleBinaryEmbedAsBasisu = 2
    /// Embeds textures compressed losslessly into the generated scene, matching old behavior.
    public static let handleBinaryEmbedAsUncompressed = 3
    
    /* Properties */
    
    final public var json: GDictionary {
        get {
            return get_json ()
        }
        
        set {
            set_json (newValue)
        }
        
    }
    
    final public var majorVersion: Int32 {
        get {
            return get_major_version ()
        }
        
        set {
            set_major_version (newValue)
        }
        
    }
    
    final public var minorVersion: Int32 {
        get {
            return get_minor_version ()
        }
        
        set {
            set_minor_version (newValue)
        }
        
    }
    
    /// The copyright string in the asset header of the GLTF file. This is set during import if present and export if non-empty. See the GLTF asset header documentation for more information.
    final public var copyright: String {
        get {
            return get_copyright ()
        }
        
        set {
            set_copyright (newValue)
        }
        
    }
    
    final public var glbData: PackedByteArray {
        get {
            return get_glb_data ()
        }
        
        set {
            set_glb_data (newValue)
        }
        
    }
    
    final public var useNamedSkinBinds: Bool {
        get {
            return get_use_named_skin_binds ()
        }
        
        set {
            set_use_named_skin_binds (newValue)
        }
        
    }
    
    final public var nodes: ObjectCollection<GLTFNode> {
        get {
            return get_nodes ()
        }
        
        set {
            set_nodes (newValue)
        }
        
    }
    
    final public var buffers: VariantCollection<PackedByteArray> {
        get {
            return get_buffers ()
        }
        
        set {
            set_buffers (newValue)
        }
        
    }
    
    final public var bufferViews: ObjectCollection<GLTFBufferView> {
        get {
            return get_buffer_views ()
        }
        
        set {
            set_buffer_views (newValue)
        }
        
    }
    
    final public var accessors: ObjectCollection<GLTFAccessor> {
        get {
            return get_accessors ()
        }
        
        set {
            set_accessors (newValue)
        }
        
    }
    
    final public var meshes: ObjectCollection<GLTFMesh> {
        get {
            return get_meshes ()
        }
        
        set {
            set_meshes (newValue)
        }
        
    }
    
    final public var materials: ObjectCollection<Material> {
        get {
            return get_materials ()
        }
        
        set {
            set_materials (newValue)
        }
        
    }
    
    /// The name of the scene. When importing, if not specified, this will be the file name. When exporting, if specified, the scene name will be saved to the GLTF file.
    final public var sceneName: String {
        get {
            return get_scene_name ()
        }
        
        set {
            set_scene_name (newValue)
        }
        
    }
    
    /// The folder path associated with this GLTF data. This is used to find other files the GLTF file references, like images or binary buffers. This will be set during import when appending from a file, and will be set during export when writing to a file.
    final public var basePath: String {
        get {
            return get_base_path ()
        }
        
        set {
            set_base_path (newValue)
        }
        
    }
    
    /// The file name associated with this GLTF data. If it ends with `.gltf`, this is text-based GLTF, otherwise this is binary GLB. This will be set during import when appending from a file, and will be set during export when writing to a file. If writing to a buffer, this will be an empty string.
    final public var filename: String {
        get {
            return get_filename ()
        }
        
        set {
            set_filename (newValue)
        }
        
    }
    
    /// The root nodes of the GLTF file. Typically, a GLTF file will only have one scene, and therefore one root node. However, a GLTF file may have multiple scenes and therefore multiple root nodes, which will be generated as siblings of each other and as children of the root node of the generated Godot scene.
    final public var rootNodes: PackedInt32Array {
        get {
            return get_root_nodes ()
        }
        
        set {
            set_root_nodes (newValue)
        }
        
    }
    
    final public var textures: ObjectCollection<GLTFTexture> {
        get {
            return get_textures ()
        }
        
        set {
            set_textures (newValue)
        }
        
    }
    
    final public var textureSamplers: ObjectCollection<GLTFTextureSampler> {
        get {
            return get_texture_samplers ()
        }
        
        set {
            set_texture_samplers (newValue)
        }
        
    }
    
    final public var images: ObjectCollection<Texture2D> {
        get {
            return get_images ()
        }
        
        set {
            set_images (newValue)
        }
        
    }
    
    final public var skins: ObjectCollection<GLTFSkin> {
        get {
            return get_skins ()
        }
        
        set {
            set_skins (newValue)
        }
        
    }
    
    final public var cameras: ObjectCollection<GLTFCamera> {
        get {
            return get_cameras ()
        }
        
        set {
            set_cameras (newValue)
        }
        
    }
    
    final public var lights: ObjectCollection<GLTFLight> {
        get {
            return get_lights ()
        }
        
        set {
            set_lights (newValue)
        }
        
    }
    
    final public var uniqueNames: VariantCollection<String> {
        get {
            return get_unique_names ()
        }
        
        set {
            set_unique_names (newValue)
        }
        
    }
    
    final public var uniqueAnimationNames: VariantCollection<String> {
        get {
            return get_unique_animation_names ()
        }
        
        set {
            set_unique_animation_names (newValue)
        }
        
    }
    
    final public var skeletons: ObjectCollection<GLTFSkeleton> {
        get {
            return get_skeletons ()
        }
        
        set {
            set_skeletons (newValue)
        }
        
    }
    
    final public var createAnimations: Bool {
        get {
            return get_create_animations ()
        }
        
        set {
            set_create_animations (newValue)
        }
        
    }
    
    final public var animations: ObjectCollection<GLTFAnimation> {
        get {
            return get_animations ()
        }
        
        set {
            set_animations (newValue)
        }
        
    }
    
    final public var handleBinaryImage: Int32 {
        get {
            return get_handle_binary_image ()
        }
        
        set {
            set_handle_binary_image (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_add_used_extension: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_used_extension")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2678287736)!
            }
            
        }
        
    }()
    
    /// Appends an extension to the list of extensions used by this GLTF file during serialization. If `required` is true, the extension will also be added to the list of required extensions. Do not run this in ``GLTFDocumentExtension/_exportPost(state:)``, as that stage is too late to add extensions. The final list is sorted alphabetically.
    public final func addUsedExtension (extensionName: String, required: Bool) {
        #if false
        
        let gstr_extension_name = GString (extensionName)
        var copy_required = required
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_add_used_extension, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_extension_name.content, &copy_required)
        
        #else
        
        let gstr_extension_name = GString (extensionName)
        var copy_required = required
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_extension_name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_required) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GLTFState.method_add_used_extension, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_json: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_json")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2382534195)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_json ()-> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall (GLTFState.method_get_json, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_json: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_json")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155329257)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_json (_ json: GDictionary) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_json, UnsafeMutableRawPointer (mutating: handle), nil, &json.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &json.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_json, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_major_version: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_major_version")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_major_version ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_major_version, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_major_version: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_major_version")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_major_version (_ majorVersion: Int32) {
        #if false
        
        var copy_major_version: Int = Int (majorVersion)
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_major_version, UnsafeMutableRawPointer (mutating: handle), nil, &copy_major_version)
        
        #else
        
        var copy_major_version: Int = Int (majorVersion)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_major_version) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_major_version, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_minor_version: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_minor_version")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_minor_version ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_minor_version, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_minor_version: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_minor_version")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_minor_version (_ minorVersion: Int32) {
        #if false
        
        var copy_minor_version: Int = Int (minorVersion)
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_minor_version, UnsafeMutableRawPointer (mutating: handle), nil, &copy_minor_version)
        
        #else
        
        var copy_minor_version: Int = Int (minorVersion)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_minor_version) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_minor_version, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_copyright: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_copyright")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_copyright ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (GLTFState.method_get_copyright, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_copyright: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_copyright")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_copyright (_ copyright: String) {
        #if false
        
        let gstr_copyright = GString (copyright)
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_copyright, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_copyright.content)
        
        #else
        
        let gstr_copyright = GString (copyright)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_copyright.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_copyright, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_glb_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_glb_data")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2115431945)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_glb_data ()-> PackedByteArray {
        let _result: PackedByteArray = PackedByteArray ()
        gi.object_method_bind_ptrcall (GLTFState.method_get_glb_data, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_glb_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_glb_data")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2971499966)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_glb_data (_ glbData: PackedByteArray) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_glb_data, UnsafeMutableRawPointer (mutating: handle), nil, &glbData.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &glbData.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_glb_data, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_use_named_skin_binds: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_use_named_skin_binds")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_use_named_skin_binds ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (GLTFState.method_get_use_named_skin_binds, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_use_named_skin_binds: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_named_skin_binds")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_named_skin_binds (_ useNamedSkinBinds: Bool) {
        #if false
        
        var copy_use_named_skin_binds = useNamedSkinBinds
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_use_named_skin_binds, UnsafeMutableRawPointer (mutating: handle), nil, &copy_use_named_skin_binds)
        
        #else
        
        var copy_use_named_skin_binds = useNamedSkinBinds
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_use_named_skin_binds) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_use_named_skin_binds, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_nodes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_nodes")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns an array of all ``GLTFNode``s in the GLTF file. These are the nodes that ``GLTFNode/children`` and ``rootNodes`` refer to. This includes nodes that may not be generated in the Godot scene, or nodes that may generate multiple Godot scene nodes.
    fileprivate final func get_nodes ()-> ObjectCollection<GLTFNode> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_nodes, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFNode>(content: _result)
    }
    
    fileprivate static var method_set_nodes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_nodes")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the ``GLTFNode``s in the state. These are the nodes that ``GLTFNode/children`` and ``rootNodes`` refer to. Some of the nodes set here may not be generated in the Godot scene, or may generate multiple Godot scene nodes.
    fileprivate final func set_nodes (_ nodes: ObjectCollection<GLTFNode>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_nodes, UnsafeMutableRawPointer (mutating: handle), nil, &nodes.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &nodes.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_nodes, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_buffers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_buffers")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_buffers ()-> VariantCollection<PackedByteArray> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_buffers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<PackedByteArray>(content: _result)
    }
    
    fileprivate static var method_set_buffers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_buffers")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_buffers (_ buffers: VariantCollection<PackedByteArray>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_buffers, UnsafeMutableRawPointer (mutating: handle), nil, &buffers.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &buffers.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_buffers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_buffer_views: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_buffer_views")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// 
    fileprivate final func get_buffer_views ()-> ObjectCollection<GLTFBufferView> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_buffer_views, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFBufferView>(content: _result)
    }
    
    fileprivate static var method_set_buffer_views: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_buffer_views")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// 
    fileprivate final func set_buffer_views (_ bufferViews: ObjectCollection<GLTFBufferView>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_buffer_views, UnsafeMutableRawPointer (mutating: handle), nil, &bufferViews.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &bufferViews.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_buffer_views, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_accessors: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_accessors")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// 
    fileprivate final func get_accessors ()-> ObjectCollection<GLTFAccessor> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_accessors, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFAccessor>(content: _result)
    }
    
    fileprivate static var method_set_accessors: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_accessors")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// 
    fileprivate final func set_accessors (_ accessors: ObjectCollection<GLTFAccessor>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_accessors, UnsafeMutableRawPointer (mutating: handle), nil, &accessors.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &accessors.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_accessors, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_meshes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_meshes")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns an array of all ``GLTFMesh``es in the GLTF file. These are the meshes that the ``GLTFNode/mesh`` index refers to.
    fileprivate final func get_meshes ()-> ObjectCollection<GLTFMesh> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_meshes, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFMesh>(content: _result)
    }
    
    fileprivate static var method_set_meshes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_meshes")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the ``GLTFMesh``es in the state. These are the meshes that the ``GLTFNode/mesh`` index refers to.
    fileprivate final func set_meshes (_ meshes: ObjectCollection<GLTFMesh>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_meshes, UnsafeMutableRawPointer (mutating: handle), nil, &meshes.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &meshes.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_meshes, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_animation_players_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_animation_players_count")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3744713108)!
            }
            
        }
        
    }()
    
    /// Returns the number of ``AnimationPlayer`` nodes in this ``GLTFState``. These nodes are only used during the export process when converting Godot ``AnimationPlayer`` nodes to GLTF animations.
    public final func getAnimationPlayersCount (idx: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_get_animation_players_count, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_get_animation_players_count, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_animation_player: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_animation_player")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 925043400)!
            }
            
        }
        
    }()
    
    /// Returns the ``AnimationPlayer`` node with the given index. These nodes are only used during the export process when converting Godot ``AnimationPlayer`` nodes to GLTF animations.
    public final func getAnimationPlayer (idx: Int32)-> AnimationPlayer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_get_animation_player, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_get_animation_player, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_materials: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_materials")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// 
    fileprivate final func get_materials ()-> ObjectCollection<Material> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_materials, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<Material>(content: _result)
    }
    
    fileprivate static var method_set_materials: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_materials")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// 
    fileprivate final func set_materials (_ materials: ObjectCollection<Material>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_materials, UnsafeMutableRawPointer (mutating: handle), nil, &materials.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &materials.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_materials, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_scene_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_scene_name")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2841200299)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_scene_name ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (GLTFState.method_get_scene_name, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_scene_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_scene_name")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_scene_name (_ sceneName: String) {
        #if false
        
        let gstr_scene_name = GString (sceneName)
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_scene_name, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_scene_name.content)
        
        #else
        
        let gstr_scene_name = GString (sceneName)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_scene_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_scene_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_base_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_base_path")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2841200299)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_base_path ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (GLTFState.method_get_base_path, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_base_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_base_path")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_base_path (_ basePath: String) {
        #if false
        
        let gstr_base_path = GString (basePath)
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_base_path, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_base_path.content)
        
        #else
        
        let gstr_base_path = GString (basePath)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_base_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_base_path, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_filename: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_filename")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_filename ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (GLTFState.method_get_filename, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_filename: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_filename")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_filename (_ filename: String) {
        #if false
        
        let gstr_filename = GString (filename)
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_filename, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_filename.content)
        
        #else
        
        let gstr_filename = GString (filename)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_filename.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_filename, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_root_nodes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_root_nodes")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 969006518)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_root_nodes ()-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        gi.object_method_bind_ptrcall (GLTFState.method_get_root_nodes, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_root_nodes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_root_nodes")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3614634198)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_root_nodes (_ rootNodes: PackedInt32Array) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_root_nodes, UnsafeMutableRawPointer (mutating: handle), nil, &rootNodes.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &rootNodes.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_root_nodes, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_textures: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_textures")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// 
    fileprivate final func get_textures ()-> ObjectCollection<GLTFTexture> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_textures, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFTexture>(content: _result)
    }
    
    fileprivate static var method_set_textures: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_textures")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// 
    fileprivate final func set_textures (_ textures: ObjectCollection<GLTFTexture>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_textures, UnsafeMutableRawPointer (mutating: handle), nil, &textures.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &textures.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_textures, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_samplers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_samplers")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Retrieves the array of texture samplers that are used by the textures contained in the GLTF.
    fileprivate final func get_texture_samplers ()-> ObjectCollection<GLTFTextureSampler> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_texture_samplers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFTextureSampler>(content: _result)
    }
    
    fileprivate static var method_set_texture_samplers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_samplers")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the array of texture samplers that are used by the textures contained in the GLTF.
    fileprivate final func set_texture_samplers (_ textureSamplers: ObjectCollection<GLTFTextureSampler>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_texture_samplers, UnsafeMutableRawPointer (mutating: handle), nil, &textureSamplers.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &textureSamplers.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_texture_samplers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_images: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_images")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Gets the images of the GLTF file as an array of ``Texture2D``s. These are the images that the ``GLTFTexture/srcImage`` index refers to.
    fileprivate final func get_images ()-> ObjectCollection<Texture2D> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_images, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<Texture2D>(content: _result)
    }
    
    fileprivate static var method_set_images: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_images")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the images in the state stored as an array of ``Texture2D``s. This can be used during export. These are the images that the ``GLTFTexture/srcImage`` index refers to.
    fileprivate final func set_images (_ images: ObjectCollection<Texture2D>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_images, UnsafeMutableRawPointer (mutating: handle), nil, &images.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &images.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_images, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_skins: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_skins")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns an array of all ``GLTFSkin``s in the GLTF file. These are the skins that the ``GLTFNode/skin`` index refers to.
    fileprivate final func get_skins ()-> ObjectCollection<GLTFSkin> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_skins, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFSkin>(content: _result)
    }
    
    fileprivate static var method_set_skins: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_skins")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the ``GLTFSkin``s in the state. These are the skins that the ``GLTFNode/skin`` index refers to.
    fileprivate final func set_skins (_ skins: ObjectCollection<GLTFSkin>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_skins, UnsafeMutableRawPointer (mutating: handle), nil, &skins.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &skins.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_skins, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_cameras: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cameras")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns an array of all ``GLTFCamera``s in the GLTF file. These are the cameras that the ``GLTFNode/camera`` index refers to.
    fileprivate final func get_cameras ()-> ObjectCollection<GLTFCamera> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_cameras, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFCamera>(content: _result)
    }
    
    fileprivate static var method_set_cameras: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cameras")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the ``GLTFCamera``s in the state. These are the cameras that the ``GLTFNode/camera`` index refers to.
    fileprivate final func set_cameras (_ cameras: ObjectCollection<GLTFCamera>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_cameras, UnsafeMutableRawPointer (mutating: handle), nil, &cameras.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &cameras.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_cameras, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_lights: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_lights")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns an array of all ``GLTFLight``s in the GLTF file. These are the lights that the ``GLTFNode/light`` index refers to.
    fileprivate final func get_lights ()-> ObjectCollection<GLTFLight> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_lights, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFLight>(content: _result)
    }
    
    fileprivate static var method_set_lights: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_lights")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the ``GLTFLight``s in the state. These are the lights that the ``GLTFNode/light`` index refers to.
    fileprivate final func set_lights (_ lights: ObjectCollection<GLTFLight>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_lights, UnsafeMutableRawPointer (mutating: handle), nil, &lights.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &lights.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_lights, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_unique_names: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_unique_names")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns an array of unique node names. This is used in both the import process and export process.
    fileprivate final func get_unique_names ()-> VariantCollection<String> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_unique_names, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<String>(content: _result)
    }
    
    fileprivate static var method_set_unique_names: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_unique_names")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the unique node names in the state. This is used in both the import process and export process.
    fileprivate final func set_unique_names (_ uniqueNames: VariantCollection<String>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_unique_names, UnsafeMutableRawPointer (mutating: handle), nil, &uniqueNames.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &uniqueNames.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_unique_names, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_unique_animation_names: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_unique_animation_names")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns an array of unique animation names. This is only used during the import process.
    fileprivate final func get_unique_animation_names ()-> VariantCollection<String> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_unique_animation_names, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<String>(content: _result)
    }
    
    fileprivate static var method_set_unique_animation_names: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_unique_animation_names")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the unique animation names in the state. This is only used during the import process.
    fileprivate final func set_unique_animation_names (_ uniqueAnimationNames: VariantCollection<String>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_unique_animation_names, UnsafeMutableRawPointer (mutating: handle), nil, &uniqueAnimationNames.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &uniqueAnimationNames.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_unique_animation_names, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_skeletons: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_skeletons")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns an array of all ``GLTFSkeleton``s in the GLTF file. These are the skeletons that the ``GLTFNode/skeleton`` index refers to.
    fileprivate final func get_skeletons ()-> ObjectCollection<GLTFSkeleton> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_skeletons, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFSkeleton>(content: _result)
    }
    
    fileprivate static var method_set_skeletons: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_skeletons")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the ``GLTFSkeleton``s in the state. These are the skeletons that the ``GLTFNode/skeleton`` index refers to.
    fileprivate final func set_skeletons (_ skeletons: ObjectCollection<GLTFSkeleton>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_skeletons, UnsafeMutableRawPointer (mutating: handle), nil, &skeletons.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &skeletons.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_skeletons, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_create_animations: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_create_animations")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_create_animations ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (GLTFState.method_get_create_animations, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_create_animations: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_create_animations")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_create_animations (_ createAnimations: Bool) {
        #if false
        
        var copy_create_animations = createAnimations
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_create_animations, UnsafeMutableRawPointer (mutating: handle), nil, &copy_create_animations)
        
        #else
        
        var copy_create_animations = createAnimations
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_create_animations) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_create_animations, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_animations: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_animations")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns an array of all ``GLTFAnimation``s in the GLTF file. When importing, these will be generated as animations in an ``AnimationPlayer`` node. When exporting, these will be generated from Godot ``AnimationPlayer`` nodes.
    fileprivate final func get_animations ()-> ObjectCollection<GLTFAnimation> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_animations, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<GLTFAnimation>(content: _result)
    }
    
    fileprivate static var method_set_animations: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_animations")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the ``GLTFAnimation``s in the state. When importing, these will be generated as animations in an ``AnimationPlayer`` node. When exporting, these will be generated from Godot ``AnimationPlayer`` nodes.
    fileprivate final func set_animations (_ animations: ObjectCollection<GLTFAnimation>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_animations, UnsafeMutableRawPointer (mutating: handle), nil, &animations.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &animations.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_animations, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_scene_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_scene_node")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4253421667)!
            }
            
        }
        
    }()
    
    /// Returns the Godot scene node that corresponds to the same index as the ``GLTFNode`` it was generated from. This is the inverse of ``getNodeIndex(sceneNode:)``. Useful during the import process.
    /// 
    /// > Note: Not every ``GLTFNode`` will have a scene node generated, and not every generated scene node will have a corresponding ``GLTFNode``. If there is no scene node for this ``GLTFNode`` index, `null` is returned.
    /// 
    public final func getSceneNode (idx: Int32)-> Node? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_get_scene_node, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_get_scene_node, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_node_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_node_index")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1205807060)!
            }
            
        }
        
    }()
    
    /// Returns the index of the ``GLTFNode`` corresponding to this Godot scene node. This is the inverse of ``getSceneNode(idx:)``. Useful during the export process.
    /// 
    /// > Note: Not every Godot scene node will have a corresponding ``GLTFNode``, and not every ``GLTFNode`` will have a scene node generated. If there is no ``GLTFNode`` index for this scene node, `-1` is returned.
    /// 
    public final func getNodeIndex (sceneNode: Node?)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_scene_node_handle = sceneNode?.handle
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_get_node_index, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_scene_node_handle)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: sceneNode?.handle) { p0 in
        _args.append (sceneNode == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_get_node_index, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_additional_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_additional_data")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2138907829)!
            }
            
        }
        
    }()
    
    /// Gets additional arbitrary data in this ``GLTFState`` instance. This can be used to keep per-file state data in ``GLTFDocumentExtension`` classes, which is important because they are stateless.
    /// 
    /// The argument should be the ``GLTFDocumentExtension`` name (does not have to match the extension name in the GLTF file), and the return value can be anything you set. If nothing was set, the return value is null.
    /// 
    public final func getAdditionalData (extensionName: StringName)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_get_additional_data, UnsafeMutableRawPointer (mutating: handle), &_result.content, &extensionName.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &extensionName.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_get_additional_data, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_additional_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_additional_data")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3776071444)!
            }
            
        }
        
    }()
    
    /// Sets additional arbitrary data in this ``GLTFState`` instance. This can be used to keep per-file state data in ``GLTFDocumentExtension`` classes, which is important because they are stateless.
    /// 
    /// The first argument should be the ``GLTFDocumentExtension`` name (does not have to match the extension name in the GLTF file), and the second argument can be anything you want.
    /// 
    public final func setAdditionalData (extensionName: StringName, additionalData: Variant) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_additional_data, UnsafeMutableRawPointer (mutating: handle), nil, &extensionName.content, &additionalData.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &extensionName.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &additionalData.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GLTFState.method_set_additional_data, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_handle_binary_image: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_handle_binary_image")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// 
    fileprivate final func get_handle_binary_image ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFState.method_get_handle_binary_image, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_handle_binary_image: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_handle_binary_image")
        return withUnsafePointer (to: &GLTFState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// 
    fileprivate final func set_handle_binary_image (_ method: Int32) {
        #if false
        
        var copy_method: Int = Int (method)
        
        gi.object_method_bind_ptrcall_v (GLTFState.method_set_handle_binary_image, UnsafeMutableRawPointer (mutating: handle), nil, &copy_method)
        
        #else
        
        var copy_method: Int = Int (method)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_method) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFState.method_set_handle_binary_image, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

