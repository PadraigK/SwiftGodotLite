// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// An interface to a game world that doesn't create a window or draw to the screen directly.
/// 
/// ``SubViewport`` Isolates a rectangular region of a scene to be displayed independently. This can be used, for example, to display UI in 3D space.
/// 
/// > Note: ``SubViewport`` is a ``Viewport`` that isn't a ``Window``, i.e. it doesn't draw anything by itself. To display anything, ``SubViewport`` must have a non-zero size and be either put inside a ``SubViewportContainer`` or assigned to a ``ViewportTexture``.
/// 
open class SubViewport: Viewport {
    override open class var godotClassName: StringName { "SubViewport" }
    public enum ClearMode: Int64 {
        /// Always clear the render target before drawing.
        case always = 0 // CLEAR_MODE_ALWAYS
        /// Never clear the render target.
        case never = 1 // CLEAR_MODE_NEVER
        /// Clear the render target on the next frame, then switch to .never.
        case once = 2 // CLEAR_MODE_ONCE
    }
    
    public enum UpdateMode: Int64 {
        /// Do not update the render target.
        case disabled = 0 // UPDATE_DISABLED
        /// Update the render target once, then switch to .updateDisabled.
        case once = 1 // UPDATE_ONCE
        /// Update the render target only when it is visible. This is the default value.
        case whenVisible = 2 // UPDATE_WHEN_VISIBLE
        /// Update the render target only when its parent is visible.
        case whenParentVisible = 3 // UPDATE_WHEN_PARENT_VISIBLE
        /// Always update the render target.
        case always = 4 // UPDATE_ALWAYS
    }
    
    
    /* Properties */
    
    /// The width and height of the sub-viewport. Must be set to a value greater than or equal to 2 pixels on both dimensions. Otherwise, nothing will be displayed.
    /// 
    /// > Note: If the parent node is a ``SubViewportContainer`` and its ``SubViewportContainer/stretch`` is `true`, the viewport size cannot be changed manually.
    /// 
    final public var size: Vector2i {
        get {
            return get_size ()
        }
        
        set {
            set_size (newValue)
        }
        
    }
    
    /// The 2D size override of the sub-viewport. If either the width or height is `0`, the override is disabled.
    final public var size2dOverride: Vector2i {
        get {
            return get_size_2d_override ()
        }
        
        set {
            set_size_2d_override (newValue)
        }
        
    }
    
    /// If `true`, the 2D size override affects stretch as well.
    final public var size2dOverrideStretch: Bool {
        get {
            return is_size_2d_override_stretch_enabled ()
        }
        
        set {
            set_size_2d_override_stretch (newValue)
        }
        
    }
    
    /// The clear mode when the sub-viewport is used as a render target.
    /// 
    /// > Note: This property is intended for 2D usage.
    /// 
    final public var renderTargetClearMode: SubViewport.ClearMode {
        get {
            return get_clear_mode ()
        }
        
        set {
            set_clear_mode (newValue)
        }
        
    }
    
    /// The update mode when the sub-viewport is used as a render target.
    final public var renderTargetUpdateMode: SubViewport.UpdateMode {
        get {
            return get_update_mode ()
        }
        
        set {
            set_update_mode (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_size")
        return withUnsafePointer (to: &SubViewport.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130785943)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_size (_ size: Vector2i) {
        #if true
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (SubViewport.method_set_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SubViewport.method_set_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size")
        return withUnsafePointer (to: &SubViewport.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_size ()-> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall (SubViewport.method_get_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_size_2d_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_size_2d_override")
        return withUnsafePointer (to: &SubViewport.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130785943)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_size_2d_override (_ size: Vector2i) {
        #if true
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (SubViewport.method_set_size_2d_override, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SubViewport.method_set_size_2d_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_size_2d_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size_2d_override")
        return withUnsafePointer (to: &SubViewport.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_size_2d_override ()-> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall (SubViewport.method_get_size_2d_override, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_size_2d_override_stretch: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_size_2d_override_stretch")
        return withUnsafePointer (to: &SubViewport.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_size_2d_override_stretch (_ enable: Bool) {
        #if true
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (SubViewport.method_set_size_2d_override_stretch, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SubViewport.method_set_size_2d_override_stretch, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_size_2d_override_stretch_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_size_2d_override_stretch_enabled")
        return withUnsafePointer (to: &SubViewport.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_size_2d_override_stretch_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SubViewport.method_is_size_2d_override_stretch_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_update_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_update_mode")
        return withUnsafePointer (to: &SubViewport.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1295690030)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_update_mode (_ mode: SubViewport.UpdateMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (SubViewport.method_set_update_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SubViewport.method_set_update_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_update_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_update_mode")
        return withUnsafePointer (to: &SubViewport.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2980171553)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_update_mode ()-> SubViewport.UpdateMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (SubViewport.method_get_update_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return SubViewport.UpdateMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_clear_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_clear_mode")
        return withUnsafePointer (to: &SubViewport.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2834454712)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_clear_mode (_ mode: SubViewport.ClearMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (SubViewport.method_set_clear_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SubViewport.method_set_clear_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_clear_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_clear_mode")
        return withUnsafePointer (to: &SubViewport.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 331324495)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_clear_mode ()-> SubViewport.ClearMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (SubViewport.method_get_clear_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return SubViewport.ClearMode (rawValue: _result)!
    }
    
}

