// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A baked signed distance field 3D particle collision shape affecting ``GPUParticles3D`` nodes.
/// 
/// A baked signed distance field 3D particle collision shape affecting ``GPUParticles3D`` nodes.
/// 
/// Signed distance fields (SDF) allow for efficiently representing approximate collision shapes for convex and concave objects of any shape. This is more flexible than ``GPUParticlesCollisionHeightField3D``, but it requires a baking step.
/// 
/// **Baking:** The signed distance field texture can be baked by selecting the ``GPUParticlesCollisionSDF3D`` node in the editor, then clicking **Bake SDF** at the top of the 3D viewport. Any _visible_ ``MeshInstance3D``s within the ``size`` will be taken into account for baking, regardless of their ``GeometryInstance3D/giMode``.
/// 
/// > Note: Baking a ``GPUParticlesCollisionSDF3D``'s ``texture`` is only possible within the editor, as there is no bake method exposed for use in exported projects. However, it's still possible to load pre-baked ``Texture3D``s into its ``texture`` property in an exported project.
/// 
/// > Note: ``ParticleProcessMaterial/collisionMode`` must be ``ParticleProcessMaterial/CollisionMode/collisionRigid`` or ``ParticleProcessMaterial/CollisionMode/collisionHideOnContact`` on the ``GPUParticles3D``'s process material for collision to work.
/// 
/// > Note: Particle collision only affects ``GPUParticles3D``, not ``CPUParticles3D``.
/// 
open class GPUParticlesCollisionSDF3D: GPUParticlesCollision3D {
    override open class var godotClassName: StringName { "GPUParticlesCollisionSDF3D" }
    public enum Resolution: Int64 {
        /// Bake a 16×16×16 signed distance field. This is the fastest option, but also the least precise.
        case resolution16 = 0 // RESOLUTION_16
        /// Bake a 32×32×32 signed distance field.
        case resolution32 = 1 // RESOLUTION_32
        /// Bake a 64×64×64 signed distance field.
        case resolution64 = 2 // RESOLUTION_64
        /// Bake a 128×128×128 signed distance field.
        case resolution128 = 3 // RESOLUTION_128
        /// Bake a 256×256×256 signed distance field.
        case resolution256 = 4 // RESOLUTION_256
        /// Bake a 512×512×512 signed distance field. This is the slowest option, but also the most precise.
        case resolution512 = 5 // RESOLUTION_512
        /// Represents the size of the ``GPUParticlesCollisionSDF3D/Resolution`` enum.
        case max = 6 // RESOLUTION_MAX
    }
    
    
    /* Properties */
    
    /// The collision SDF's size in 3D units. To improve SDF quality, the ``size`` should be set as small as possible while covering the parts of the scene you need.
    final public var size: Vector3 {
        get {
            return get_size ()
        }
        
        set {
            set_size (newValue)
        }
        
    }
    
    /// The bake resolution to use for the signed distance field ``texture``. The texture must be baked again for changes to the ``resolution`` property to be effective. Higher resolutions have a greater performance cost and take more time to bake. Higher resolutions also result in larger baked textures, leading to increased VRAM and storage space requirements. To improve performance and reduce bake times, use the lowest resolution possible for the object you're representing the collision of.
    final public var resolution: GPUParticlesCollisionSDF3D.Resolution {
        get {
            return get_resolution ()
        }
        
        set {
            set_resolution (newValue)
        }
        
    }
    
    /// The collision shape's thickness. Unlike other particle colliders, ``GPUParticlesCollisionSDF3D`` is actually hollow on the inside. ``thickness`` can be increased to prevent particles from tunneling through the collision shape at high speeds, or when the ``GPUParticlesCollisionSDF3D`` is moved.
    final public var thickness: Double {
        get {
            return get_thickness ()
        }
        
        set {
            set_thickness (newValue)
        }
        
    }
    
    /// The visual layers to account for when baking the particle collision SDF. Only ``MeshInstance3D``s whose ``VisualInstance3D/layers`` match with this ``bakeMask`` will be included in the generated particle collision SDF. By default, all objects are taken into account for the particle collision SDF baking.
    final public var bakeMask: UInt32 {
        get {
            return get_bake_mask ()
        }
        
        set {
            set_bake_mask (newValue)
        }
        
    }
    
    /// The 3D texture representing the signed distance field.
    final public var texture: Texture3D? {
        get {
            return get_texture ()
        }
        
        set {
            set_texture (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_size")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_size (_ size: Vector3) {
        #if false
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (GPUParticlesCollisionSDF3D.method_set_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_set_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_size ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_get_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_resolution: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_resolution")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1155629297)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_resolution (_ resolution: GPUParticlesCollisionSDF3D.Resolution) {
        #if false
        
        var copy_resolution = Int64 (resolution.rawValue)
        
        gi.object_method_bind_ptrcall_v (GPUParticlesCollisionSDF3D.method_set_resolution, UnsafeMutableRawPointer (mutating: handle), nil, &copy_resolution)
        
        #else
        
        var copy_resolution = Int64 (resolution.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_resolution) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_set_resolution, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_resolution: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_resolution")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2919555867)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_resolution ()-> GPUParticlesCollisionSDF3D.Resolution {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_get_resolution, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return GPUParticlesCollisionSDF3D.Resolution (rawValue: _result)!
    }
    
    fileprivate static var method_set_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1188404210)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture (_ texture: Texture3D?) {
        #if false
        
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (GPUParticlesCollisionSDF3D.method_set_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: texture?.handle) { p0 in
        _args.append (texture == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_set_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373985333)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture ()-> Texture3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_get_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_thickness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_thickness")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_thickness (_ thickness: Double) {
        #if false
        
        var copy_thickness = thickness
        
        gi.object_method_bind_ptrcall_v (GPUParticlesCollisionSDF3D.method_set_thickness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_thickness)
        
        #else
        
        var copy_thickness = thickness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_thickness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_set_thickness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_thickness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_thickness")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_thickness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_get_thickness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bake_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bake_mask")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bake_mask (_ mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (GPUParticlesCollisionSDF3D.method_set_bake_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_set_bake_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bake_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bake_mask")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bake_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_get_bake_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bake_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bake_mask_value")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``bakeMask``, given a `layerNumber` between 1 and 32.
    public final func setBakeMaskValue (layerNumber: Int32, value: Bool) {
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (GPUParticlesCollisionSDF3D.method_set_bake_mask_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_number, &copy_value)
        
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_set_bake_mask_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_bake_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bake_mask_value")
        return withUnsafePointer (to: &GPUParticlesCollisionSDF3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``bakeMask`` is enabled, given a `layerNumber` between 1 and 32.
    public final func getBakeMaskValue (layerNumber: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        
        gi.object_method_bind_ptrcall_v (GPUParticlesCollisionSDF3D.method_get_bake_mask_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_number)
        return _result
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GPUParticlesCollisionSDF3D.method_get_bake_mask_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

