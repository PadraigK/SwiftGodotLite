// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Provides direct access to a physics body in the ``PhysicsServer2D``.
/// 
/// Provides direct access to a physics body in the ``PhysicsServer2D``, allowing safe changes to physics properties. This object is passed via the direct state callback of ``RigidBody2D``, and is intended for changing the direct state of that body. See ``RigidBody2D/_integrateForces(state:)``.
open class PhysicsDirectBodyState2D: Object {
    override open class var godotClassName: StringName { "PhysicsDirectBodyState2D" }
    
    /* Properties */
    
    /// The timestep (delta) used for the simulation.
    final public var step: Double {
        get {
            return get_step ()
        }
        
    }
    
    /// The inverse of the mass of the body.
    final public var inverseMass: Double {
        get {
            return get_inverse_mass ()
        }
        
    }
    
    /// The inverse of the inertia of the body.
    final public var inverseInertia: Double {
        get {
            return get_inverse_inertia ()
        }
        
    }
    
    /// The rate at which the body stops rotating, if there are not any other forces moving it.
    final public var totalAngularDamp: Double {
        get {
            return get_total_angular_damp ()
        }
        
    }
    
    /// The rate at which the body stops moving, if there are not any other forces moving it.
    final public var totalLinearDamp: Double {
        get {
            return get_total_linear_damp ()
        }
        
    }
    
    /// The total gravity vector being currently applied to this body.
    final public var totalGravity: Vector2 {
        get {
            return get_total_gravity ()
        }
        
    }
    
    /// The body's center of mass position relative to the body's center in the global coordinate system.
    final public var centerOfMass: Vector2 {
        get {
            return get_center_of_mass ()
        }
        
    }
    
    /// The body's center of mass position in the body's local coordinate system.
    final public var centerOfMassLocal: Vector2 {
        get {
            return get_center_of_mass_local ()
        }
        
    }
    
    /// The body's rotational velocity in _radians_ per second.
    final public var angularVelocity: Double {
        get {
            return get_angular_velocity ()
        }
        
        set {
            set_angular_velocity (newValue)
        }
        
    }
    
    /// The body's linear velocity in pixels per second.
    final public var linearVelocity: Vector2 {
        get {
            return get_linear_velocity ()
        }
        
        set {
            set_linear_velocity (newValue)
        }
        
    }
    
    /// If `true`, this body is currently sleeping (not active).
    final public var sleeping: Bool {
        get {
            return is_sleeping ()
        }
        
        set {
            set_sleep_state (newValue)
        }
        
    }
    
    /// The body's transformation matrix.
    final public var transform: Transform2D {
        get {
            return get_transform ()
        }
        
        set {
            set_transform (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_total_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_total_gravity")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_total_gravity ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_total_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_total_linear_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_total_linear_damp")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_total_linear_damp ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_total_linear_damp, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_total_angular_damp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_total_angular_damp")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_total_angular_damp ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_total_angular_damp, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_center_of_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_center_of_mass")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_center_of_mass ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_center_of_mass, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_center_of_mass_local: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_center_of_mass_local")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_center_of_mass_local ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_center_of_mass_local, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_inverse_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_inverse_mass")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_inverse_mass ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_inverse_mass, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_inverse_inertia: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_inverse_inertia")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_inverse_inertia ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_inverse_inertia, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_linear_velocity")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_velocity (_ velocity: Vector2) {
        #if false
        
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_set_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_velocity)
        
        #else
        
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_set_linear_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_linear_velocity")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_velocity ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_velocity")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_velocity (_ velocity: Double) {
        #if false
        
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_set_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_velocity)
        
        #else
        
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_set_angular_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_velocity")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_velocity ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_transform")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2761652528)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_transform (_ transform: Transform2D) {
        #if false
        
        var copy_transform = transform
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_set_transform, UnsafeMutableRawPointer (mutating: handle), nil, &copy_transform)
        
        #else
        
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_transform) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_set_transform, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transform")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3814499831)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_transform ()-> Transform2D {
        var _result: Transform2D = Transform2D ()
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_transform, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_velocity_at_local_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_velocity_at_local_position")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2656412154)!
            }
            
        }
        
    }()
    
    /// Returns the body's velocity at the given relative position, including both translation and rotation.
    public final func getVelocityAtLocalPosition (_ localPosition: Vector2)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_local_position = localPosition
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_velocity_at_local_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_local_position)
        return _result
        #else
        
        var copy_local_position = localPosition
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_local_position) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_velocity_at_local_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_apply_central_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_central_impulse")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Applies a directional impulse without affecting rotation.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    /// This is equivalent to using ``applyImpulse(_:position:)`` at the body's center of mass.
    /// 
    public final func applyCentralImpulse (_ impulse: Vector2) {
        #if false
        
        var copy_impulse = impulse
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_apply_central_impulse, UnsafeMutableRawPointer (mutating: handle), nil, &copy_impulse)
        
        #else
        
        var copy_impulse = impulse
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_impulse) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_apply_central_impulse, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_apply_torque_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_torque_impulse")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Applies a rotational impulse to the body without affecting the position.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    /// > Note: ``inverseInertia`` is required for this to work. To have ``inverseInertia``, an active ``CollisionShape2D`` must be a child of the node, or you can manually set ``inverseInertia``.
    /// 
    public final func applyTorqueImpulse (_ impulse: Double) {
        #if false
        
        var copy_impulse = impulse
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_apply_torque_impulse, UnsafeMutableRawPointer (mutating: handle), nil, &copy_impulse)
        
        #else
        
        var copy_impulse = impulse
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_impulse) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_apply_torque_impulse, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_apply_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_impulse")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4288681949)!
            }
            
        }
        
    }()
    
    /// Applies a positioned impulse to the body.
    /// 
    /// An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason, it should only be used when simulating one-time impacts (use the "_force" functions otherwise).
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public final func applyImpulse (_ impulse: Vector2, position: Vector2 = Vector2 (x: 0, y: 0)) {
        #if false
        
        var copy_impulse = impulse
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_apply_impulse, UnsafeMutableRawPointer (mutating: handle), nil, &copy_impulse, &copy_position)
        
        #else
        
        var copy_impulse = impulse
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_impulse) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_apply_impulse, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_apply_central_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_central_force")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3862383994)!
            }
            
        }
        
    }()
    
    /// Applies a directional force without affecting rotation. A force is time dependent and meant to be applied every physics update.
    /// 
    /// This is equivalent to using ``applyForce(_:position:)`` at the body's center of mass.
    /// 
    public final func applyCentralForce (_ force: Vector2 = Vector2 (x: 0, y: 0)) {
        #if false
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_apply_central_force, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_apply_central_force, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_apply_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_force")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4288681949)!
            }
            
        }
        
    }()
    
    /// Applies a positioned force to the body. A force is time dependent and meant to be applied every physics update.
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public final func applyForce (_ force: Vector2, position: Vector2 = Vector2 (x: 0, y: 0)) {
        #if false
        
        var copy_force = force
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_apply_force, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force, &copy_position)
        
        #else
        
        var copy_force = force
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_apply_force, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_apply_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_torque")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Applies a rotational force without affecting position. A force is time dependent and meant to be applied every physics update.
    /// 
    /// > Note: ``inverseInertia`` is required for this to work. To have ``inverseInertia``, an active ``CollisionShape2D`` must be a child of the node, or you can manually set ``inverseInertia``.
    /// 
    public final func applyTorque (_ torque: Double) {
        #if false
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_apply_torque, UnsafeMutableRawPointer (mutating: handle), nil, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_torque) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_apply_torque, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_constant_central_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_constant_central_force")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3862383994)!
            }
            
        }
        
    }()
    
    /// Adds a constant directional force without affecting rotation that keeps being applied over time until cleared with `constant_force = Vector2(0, 0)`.
    /// 
    /// This is equivalent to using ``addConstantForce(_:position:)`` at the body's center of mass.
    /// 
    public final func addConstantCentralForce (_ force: Vector2 = Vector2 (x: 0, y: 0)) {
        #if false
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_add_constant_central_force, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_add_constant_central_force, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_constant_force")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4288681949)!
            }
            
        }
        
    }()
    
    /// Adds a constant positioned force to the body that keeps being applied over time until cleared with `constant_force = Vector2(0, 0)`.
    /// 
    /// `position` is the offset from the body origin in global coordinates.
    /// 
    public final func addConstantForce (_ force: Vector2, position: Vector2 = Vector2 (x: 0, y: 0)) {
        #if false
        
        var copy_force = force
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_add_constant_force, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force, &copy_position)
        
        #else
        
        var copy_force = force
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_add_constant_force, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_constant_torque")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Adds a constant rotational force without affecting position that keeps being applied over time until cleared with `constant_torque = 0`.
    public final func addConstantTorque (_ torque: Double) {
        #if false
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_add_constant_torque, UnsafeMutableRawPointer (mutating: handle), nil, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_torque) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_add_constant_torque, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constant_force")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Sets the body's total constant positional forces applied during each physics update.
    /// 
    /// See ``addConstantForce(_:position:)`` and ``addConstantCentralForce(_:)``.
    /// 
    public final func setConstantForce (_ force: Vector2) {
        #if false
        
        var copy_force = force
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_set_constant_force, UnsafeMutableRawPointer (mutating: handle), nil, &copy_force)
        
        #else
        
        var copy_force = force
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_force) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_set_constant_force, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_constant_force: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constant_force")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    /// Returns the body's total constant positional forces applied during each physics update.
    /// 
    /// See ``addConstantForce(_:position:)`` and ``addConstantCentralForce(_:)``.
    /// 
    public final func getConstantForce ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_constant_force, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constant_torque")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Sets the body's total constant rotational forces applied during each physics update.
    /// 
    /// See ``addConstantTorque(_:)``.
    /// 
    public final func setConstantTorque (_ torque: Double) {
        #if false
        
        var copy_torque = torque
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_set_constant_torque, UnsafeMutableRawPointer (mutating: handle), nil, &copy_torque)
        
        #else
        
        var copy_torque = torque
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_torque) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_set_constant_torque, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_constant_torque: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constant_torque")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the body's total constant rotational forces applied during each physics update.
    /// 
    /// See ``addConstantTorque(_:)``.
    /// 
    public final func getConstantTorque ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_constant_torque, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sleep_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sleep_state")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sleep_state (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_set_sleep_state, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_set_sleep_state, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_sleeping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_sleeping")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_sleeping ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_is_sleeping, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_contact_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_count")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of contacts this body has with other bodies.
    /// 
    /// > Note: By default, this returns 0 unless bodies are configured to monitor contacts. See ``RigidBody2D/contactMonitor``.
    /// 
    public final func getContactCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_contact_local_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_local_position")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the position of the contact point on the body in the global coordinate system.
    public final func getContactLocalPosition (contactIdx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_local_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_contact_idx)
        return _result
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_local_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_contact_local_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_local_normal")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the local normal at the contact point.
    public final func getContactLocalNormal (contactIdx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_local_normal, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_contact_idx)
        return _result
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_local_normal, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_contact_local_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_local_shape")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the local shape index of the collision.
    public final func getContactLocalShape (contactIdx: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_local_shape, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_contact_idx)
        return _result
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_local_shape, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_contact_local_velocity_at_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_local_velocity_at_position")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the velocity vector at the body's contact point.
    public final func getContactLocalVelocityAtPosition (contactIdx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_local_velocity_at_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_contact_idx)
        return _result
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_local_velocity_at_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_contact_collider: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_collider")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 495598643)!
            }
            
        }
        
    }()
    
    /// Returns the collider's ``RID``.
    public final func getContactCollider (contactIdx: Int32)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_collider, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_contact_idx)
        return _result
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_collider, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_contact_collider_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_collider_position")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the position of the contact point on the collider in the global coordinate system.
    public final func getContactColliderPosition (contactIdx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_collider_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_contact_idx)
        return _result
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_collider_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_contact_collider_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_collider_id")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the collider's object id.
    public final func getContactColliderId (contactIdx: Int32)-> UInt {
        var _result: UInt = 0
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_collider_id, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_contact_idx)
        return _result
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_collider_id, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_contact_collider_object: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_collider_object")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3332903315)!
            }
            
        }
        
    }()
    
    /// Returns the collider object. This depends on how it was created (will return a scene node if such was used to create it).
    public final func getContactColliderObject (contactIdx: Int32)-> Object? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_collider_object, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_contact_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_collider_object, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_contact_collider_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_collider_shape")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the collider's shape index.
    public final func getContactColliderShape (contactIdx: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_collider_shape, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_contact_idx)
        return _result
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_collider_shape, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_contact_collider_velocity_at_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_collider_velocity_at_position")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the velocity vector at the collider's contact point.
    public final func getContactColliderVelocityAtPosition (contactIdx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_collider_velocity_at_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_contact_idx)
        return _result
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_collider_velocity_at_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_contact_impulse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_contact_impulse")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the impulse created by the contact.
    public final func getContactImpulse (contactIdx: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_contact_idx: Int = Int (contactIdx)
        
        gi.object_method_bind_ptrcall_v (PhysicsDirectBodyState2D.method_get_contact_impulse, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_contact_idx)
        return _result
        #else
        
        var copy_contact_idx: Int = Int (contactIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_contact_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_contact_impulse, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_step: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_step")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_step ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_step, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_integrate_forces: GDExtensionMethodBindPtr = {
        let methodName = StringName ("integrate_forces")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Calls the built-in force integration code.
    public final func integrateForces () {
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_integrate_forces, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_get_space_state: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_space_state")
        return withUnsafePointer (to: &PhysicsDirectBodyState2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2506717822)!
            }
            
        }
        
    }()
    
    /// Returns the current state of the space, useful for queries.
    public final func getSpaceState ()-> PhysicsDirectSpaceState2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (PhysicsDirectBodyState2D.method_get_space_state, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

