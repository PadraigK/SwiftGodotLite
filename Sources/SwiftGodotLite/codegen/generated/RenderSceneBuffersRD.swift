// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract render scene buffer implementation for the RenderingDevice based renderers.
/// 
/// This object manages all 3D rendering buffers for the rendering device based renderers. An instance of this object is created for every viewport that has 3D rendering enabled.
/// 
/// All buffers are organized in **contexts**. The default context is called **render_buffers** and can contain amongst others the color buffer, depth buffer, velocity buffers, VRS density map and MSAA variants of these buffers.
/// 
/// Buffers are only guaranteed to exist during rendering of the viewport.
/// 
/// > Note: this is an internal rendering server object only exposed for GDExtension plugins.
/// 
open class RenderSceneBuffersRD: RenderSceneBuffers {
    override open class var godotClassName: StringName { "RenderSceneBuffersRD" }
    /* Methods */
    fileprivate static var method_has_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_texture")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 471820014)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a cached texture exists for this name.
    public final func hasTexture (context: StringName, name: StringName)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_has_texture, UnsafeMutableRawPointer (mutating: handle), &_result, &context.content, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &context.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_has_texture, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_create_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_texture")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3559915770)!
            }
            
        }
        
    }()
    
    /// Create a new texture with the given definition and cache this under the given name. Will return the existing texture if it already exists.
    public final func createTexture (context: StringName, name: StringName, dataFormat: RenderingDevice.DataFormat, usageBits: UInt32, textureSamples: RenderingDevice.TextureSamples, size: Vector2i, layers: UInt32, mipmaps: UInt32, unique: Bool)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_data_format = Int64 (dataFormat.rawValue)
        var copy_usage_bits: Int = Int (usageBits)
        var copy_texture_samples = Int64 (textureSamples.rawValue)
        var copy_size = size
        var copy_layers: Int = Int (layers)
        var copy_mipmaps: Int = Int (mipmaps)
        var copy_unique = unique
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_create_texture, UnsafeMutableRawPointer (mutating: handle), &_result.content, &context.content, &name.content, &copy_data_format, &copy_usage_bits, &copy_texture_samples, &copy_size, &copy_layers, &copy_mipmaps, &copy_unique)
        return _result
        #else
        
        var copy_data_format = Int64 (dataFormat.rawValue)
        var copy_usage_bits: Int = Int (usageBits)
        var copy_texture_samples = Int64 (textureSamples.rawValue)
        var copy_size = size
        var copy_layers: Int = Int (layers)
        var copy_mipmaps: Int = Int (mipmaps)
        var copy_unique = unique
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &context.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_data_format) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_usage_bits) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_texture_samples) { p4 in
                            _args.append (p4)
                            return withUnsafePointer (to: &copy_size) { p5 in
                                _args.append (p5)
                                return withUnsafePointer (to: &copy_layers) { p6 in
                                    _args.append (p6)
                                    return withUnsafePointer (to: &copy_mipmaps) { p7 in
                                        _args.append (p7)
                                        return withUnsafePointer (to: &copy_unique) { p8 in
                                            _args.append (p8)
        
                                            gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_create_texture, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                                            return _result
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_create_texture_from_format: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_texture_from_format")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3344669382)!
            }
            
        }
        
    }()
    
    /// Create a new texture using the given format and view and cache this under the given name. Will return the existing texture if it already exists.
    public final func createTextureFromFormat (context: StringName, name: StringName, format: RDTextureFormat?, view: RDTextureView?, unique: Bool)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_unique = unique
        var copy_format_handle = format?.handle
        var copy_view_handle = view?.handle
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_create_texture_from_format, UnsafeMutableRawPointer (mutating: handle), &_result.content, &context.content, &name.content, &copy_format_handle, &copy_view_handle, &copy_unique)
        return _result
        #else
        
        var copy_unique = unique
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &context.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: format?.handle) { p2 in
                _args.append (format == nil ? nil : p2)
                    return withUnsafePointer (to: view?.handle) { p3 in
                    _args.append (view == nil ? nil : p3)
                        return withUnsafePointer (to: &copy_unique) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_create_texture_from_format, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                            return _result
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_create_texture_view: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_texture_view")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 283055834)!
            }
            
        }
        
    }()
    
    /// Create a new texture view for an existing texture and cache this under the given view_name. Will return the existing teture view if it already exists. Will error if the source texture doesn't exist.
    public final func createTextureView (context: StringName, name: StringName, viewName: StringName, view: RDTextureView?)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_view_handle = view?.handle
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_create_texture_view, UnsafeMutableRawPointer (mutating: handle), &_result.content, &context.content, &name.content, &viewName.content, &copy_view_handle)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &context.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &viewName.content) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: view?.handle) { p3 in
                    _args.append (view == nil ? nil : p3)
        
                        gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_create_texture_view, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                        return _result
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 750006389)!
            }
            
        }
        
    }()
    
    /// Returns a cached texture with this name.
    public final func getTexture (context: StringName, name: StringName)-> RID {
        let _result: RID = RID ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_get_texture, UnsafeMutableRawPointer (mutating: handle), &_result.content, &context.content, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &context.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_texture, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_format: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_format")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 371461758)!
            }
            
        }
        
    }()
    
    /// Returns the texture format information with which a cached texture was created.
    public final func getTextureFormat (context: StringName, name: StringName)-> RDTextureFormat? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_get_texture_format, UnsafeMutableRawPointer (mutating: handle), &_result, &context.content, &name.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &context.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_texture_format, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_slice: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_slice")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 588440706)!
            }
            
        }
        
    }()
    
    /// Returns a specific slice (layer or mipmap) for a cached texture.
    public final func getTextureSlice (context: StringName, name: StringName, layer: UInt32, mipmap: UInt32, layers: UInt32, mipmaps: UInt32)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_layer: Int = Int (layer)
        var copy_mipmap: Int = Int (mipmap)
        var copy_layers: Int = Int (layers)
        var copy_mipmaps: Int = Int (mipmaps)
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_get_texture_slice, UnsafeMutableRawPointer (mutating: handle), &_result.content, &context.content, &name.content, &copy_layer, &copy_mipmap, &copy_layers, &copy_mipmaps)
        return _result
        #else
        
        var copy_layer: Int = Int (layer)
        var copy_mipmap: Int = Int (mipmap)
        var copy_layers: Int = Int (layers)
        var copy_mipmaps: Int = Int (mipmaps)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &context.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_layer) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_mipmap) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_layers) { p4 in
                            _args.append (p4)
                            return withUnsafePointer (to: &copy_mipmaps) { p5 in
                                _args.append (p5)
        
                                gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_texture_slice, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                                return _result
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_slice_view: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_slice_view")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 682451778)!
            }
            
        }
        
    }()
    
    /// Returns a specific view of a slice (layer or mipmap) for a cached texture.
    public final func getTextureSliceView (context: StringName, name: StringName, layer: UInt32, mipmap: UInt32, layers: UInt32, mipmaps: UInt32, view: RDTextureView?)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_layer: Int = Int (layer)
        var copy_mipmap: Int = Int (mipmap)
        var copy_layers: Int = Int (layers)
        var copy_mipmaps: Int = Int (mipmaps)
        var copy_view_handle = view?.handle
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_get_texture_slice_view, UnsafeMutableRawPointer (mutating: handle), &_result.content, &context.content, &name.content, &copy_layer, &copy_mipmap, &copy_layers, &copy_mipmaps, &copy_view_handle)
        return _result
        #else
        
        var copy_layer: Int = Int (layer)
        var copy_mipmap: Int = Int (mipmap)
        var copy_layers: Int = Int (layers)
        var copy_mipmaps: Int = Int (mipmaps)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &context.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_layer) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_mipmap) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_layers) { p4 in
                            _args.append (p4)
                            return withUnsafePointer (to: &copy_mipmaps) { p5 in
                                _args.append (p5)
                                return withUnsafePointer (to: view?.handle) { p6 in
                                _args.append (view == nil ? nil : p6)
        
                                    gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_texture_slice_view, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                                    return _result
                                }
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_slice_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_slice_size")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2617625368)!
            }
            
        }
        
    }()
    
    /// Returns the texture size of a given slice of a cached texture.
    public final func getTextureSliceSize (context: StringName, name: StringName, mipmap: UInt32)-> Vector2i {
        var _result: Vector2i = Vector2i ()
        #if false
        
        var copy_mipmap: Int = Int (mipmap)
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_get_texture_slice_size, UnsafeMutableRawPointer (mutating: handle), &_result, &context.content, &name.content, &copy_mipmap)
        return _result
        #else
        
        var copy_mipmap: Int = Int (mipmap)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &context.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_mipmap) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_texture_slice_size, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_clear_context: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_context")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Frees all buffers related to this context.
    public final func clearContext (_ context: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_clear_context, UnsafeMutableRawPointer (mutating: handle), nil, &context.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &context.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_clear_context, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_color_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_color_texture")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Returns the color texture we are rendering 3D content to. If multiview is used this will be a texture array with all views.
    public final func getColorTexture ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_color_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_color_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_color_layer")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 937000113)!
            }
            
        }
        
    }()
    
    /// Returns the specified layer from the color texture we are rendering 3D content to.
    public final func getColorLayer (_ layer: UInt32)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_get_color_layer, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_layer)
        return _result
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_color_layer, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_depth_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_depth_texture")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Returns the depth texture we are rendering 3D content to. If multiview is used this will be a texture array with all views.
    public final func getDepthTexture ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_depth_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_depth_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_depth_layer")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 937000113)!
            }
            
        }
        
    }()
    
    /// Returns the specified layer from the depth texture we are rendering 3D content to.
    public final func getDepthLayer (_ layer: UInt32)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_get_depth_layer, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_layer)
        return _result
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_depth_layer, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_velocity_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_velocity_texture")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Returns the velocity texture we are rendering 3D content to. If multiview is used this will be a texture array with all views.
    public final func getVelocityTexture ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_velocity_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_velocity_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_velocity_layer")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 937000113)!
            }
            
        }
        
    }()
    
    /// Returns the specified layer from the velocity texture we are rendering 3D content to.
    public final func getVelocityLayer (_ layer: UInt32)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersRD.method_get_velocity_layer, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_layer)
        return _result
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_velocity_layer, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_render_target: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_render_target")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the render target associated with this buffers object.
    public final func getRenderTarget ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_render_target, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_view_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_view_count")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the view count for the associated viewport.
    public final func getViewCount ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_view_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_internal_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_internal_size")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    /// Returns the internal size of the render buffer (size before upscaling) with which textures are created by default.
    public final func getInternalSize ()-> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_internal_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_use_taa: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_use_taa")
        return withUnsafePointer (to: &RenderSceneBuffersRD.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if TAA is enabled.
    public final func getUseTaa ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RenderSceneBuffersRD.method_get_use_taa, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

