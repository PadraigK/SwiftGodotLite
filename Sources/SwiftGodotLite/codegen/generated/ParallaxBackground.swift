// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A node used to create a parallax scrolling background.
/// 
/// A ParallaxBackground uses one or more ``ParallaxLayer`` child nodes to create a parallax effect. Each ``ParallaxLayer`` can move at a different speed using ``ParallaxLayer/motionOffset``. This creates an illusion of depth in a 2D game. If not used with a ``Camera2D``, you must manually calculate the ``scrollOffset``.
/// 
/// > Note: Each ``ParallaxBackground`` is drawn on one specific ``Viewport`` and cannot be shared between multiple ``Viewport``s, see ``CanvasLayer/customViewport``. When using multiple ``Viewport``s, for example in a split-screen game, you need create an individual ``ParallaxBackground`` for each ``Viewport`` you want it to be drawn on.
/// 
open class ParallaxBackground: CanvasLayer {
    override open class var godotClassName: StringName { "ParallaxBackground" }
    
    /* Properties */
    
    /// The ParallaxBackground's scroll value. Calculated automatically when using a ``Camera2D``, but can be used to manually manage scrolling when no camera is present.
    final public var scrollOffset: Vector2 {
        get {
            return get_scroll_offset ()
        }
        
        set {
            set_scroll_offset (newValue)
        }
        
    }
    
    /// The base position offset for all ``ParallaxLayer`` children.
    final public var scrollBaseOffset: Vector2 {
        get {
            return get_scroll_base_offset ()
        }
        
        set {
            set_scroll_base_offset (newValue)
        }
        
    }
    
    /// The base motion scale for all ``ParallaxLayer`` children.
    final public var scrollBaseScale: Vector2 {
        get {
            return get_scroll_base_scale ()
        }
        
        set {
            set_scroll_base_scale (newValue)
        }
        
    }
    
    /// Top-left limits for scrolling to begin. If the camera is outside of this limit, the background will stop scrolling. Must be lower than ``scrollLimitEnd`` to work.
    final public var scrollLimitBegin: Vector2 {
        get {
            return get_limit_begin ()
        }
        
        set {
            set_limit_begin (newValue)
        }
        
    }
    
    /// Bottom-right limits for scrolling to end. If the camera is outside of this limit, the background will stop scrolling. Must be higher than ``scrollLimitBegin`` to work.
    final public var scrollLimitEnd: Vector2 {
        get {
            return get_limit_end ()
        }
        
        set {
            set_limit_end (newValue)
        }
        
    }
    
    /// If `true`, elements in ``ParallaxLayer`` child aren't affected by the zoom level of the camera.
    final public var scrollIgnoreCameraZoom: Bool {
        get {
            return is_ignore_camera_zoom ()
        }
        
        set {
            set_ignore_camera_zoom (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_scroll_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_scroll_offset")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_scroll_offset (_ offset: Vector2) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (ParallaxBackground.method_set_scroll_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParallaxBackground.method_set_scroll_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_scroll_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_scroll_offset")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_scroll_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (ParallaxBackground.method_get_scroll_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_scroll_base_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_scroll_base_offset")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_scroll_base_offset (_ offset: Vector2) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (ParallaxBackground.method_set_scroll_base_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParallaxBackground.method_set_scroll_base_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_scroll_base_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_scroll_base_offset")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_scroll_base_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (ParallaxBackground.method_get_scroll_base_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_scroll_base_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_scroll_base_scale")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_scroll_base_scale (_ scale: Vector2) {
        #if true
        
        var copy_scale = scale
        
        gi.object_method_bind_ptrcall_v (ParallaxBackground.method_set_scroll_base_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scale)
        
        #else
        
        var copy_scale = scale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParallaxBackground.method_set_scroll_base_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_scroll_base_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_scroll_base_scale")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_scroll_base_scale ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (ParallaxBackground.method_get_scroll_base_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_limit_begin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_limit_begin")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_limit_begin (_ offset: Vector2) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (ParallaxBackground.method_set_limit_begin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParallaxBackground.method_set_limit_begin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_limit_begin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_limit_begin")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_limit_begin ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (ParallaxBackground.method_get_limit_begin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_limit_end: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_limit_end")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_limit_end (_ offset: Vector2) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (ParallaxBackground.method_set_limit_end, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParallaxBackground.method_set_limit_end, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_limit_end: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_limit_end")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_limit_end ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (ParallaxBackground.method_get_limit_end, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ignore_camera_zoom: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ignore_camera_zoom")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ignore_camera_zoom (_ ignore: Bool) {
        #if true
        
        var copy_ignore = ignore
        
        gi.object_method_bind_ptrcall_v (ParallaxBackground.method_set_ignore_camera_zoom, UnsafeMutableRawPointer (mutating: handle), nil, &copy_ignore)
        
        #else
        
        var copy_ignore = ignore
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_ignore) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParallaxBackground.method_set_ignore_camera_zoom, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_ignore_camera_zoom: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_ignore_camera_zoom")
        return withUnsafePointer (to: &ParallaxBackground.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_ignore_camera_zoom ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (ParallaxBackground.method_is_ignore_camera_zoom, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

