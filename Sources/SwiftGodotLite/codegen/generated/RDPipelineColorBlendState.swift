// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Pipeline color blend state (used by ``RenderingDevice``).
/// 
/// This object is used by ``RenderingDevice``.
open class RDPipelineColorBlendState: RefCounted {
    override open class var godotClassName: StringName { "RDPipelineColorBlendState" }
    
    /* Properties */
    
    /// If `true`, performs the logic operation defined in ``logicOp``.
    final public var enableLogicOp: Bool {
        get {
            return get_enable_logic_op ()
        }
        
        set {
            set_enable_logic_op (newValue)
        }
        
    }
    
    /// The logic operation to perform for blending. Only effective if ``enableLogicOp`` is `true`.
    final public var logicOp: RenderingDevice.LogicOperation {
        get {
            return get_logic_op ()
        }
        
        set {
            set_logic_op (newValue)
        }
        
    }
    
    /// The constant color to blend with. See also ``RenderingDevice/drawListSetBlendConstants(drawList:color:)``.
    final public var blendConstant: Color {
        get {
            return get_blend_constant ()
        }
        
        set {
            set_blend_constant (newValue)
        }
        
    }
    
    /// The attachments that are blended together.
    final public var attachments: ObjectCollection<RDPipelineColorBlendStateAttachment> {
        get {
            return get_attachments ()
        }
        
        set {
            set_attachments (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_enable_logic_op: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_logic_op")
        return withUnsafePointer (to: &RDPipelineColorBlendState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_logic_op (_ pMember: Bool) {
        #if true
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendState.method_set_enable_logic_op, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendState.method_set_enable_logic_op, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_logic_op: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_logic_op")
        return withUnsafePointer (to: &RDPipelineColorBlendState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_logic_op ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineColorBlendState.method_get_enable_logic_op, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_logic_op: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_logic_op")
        return withUnsafePointer (to: &RDPipelineColorBlendState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3610841058)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_logic_op (_ pMember: RenderingDevice.LogicOperation) {
        #if true
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendState.method_set_logic_op, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendState.method_set_logic_op, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_logic_op: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_logic_op")
        return withUnsafePointer (to: &RDPipelineColorBlendState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 988254690)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_logic_op ()-> RenderingDevice.LogicOperation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineColorBlendState.method_get_logic_op, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.LogicOperation (rawValue: _result)!
    }
    
    fileprivate static var method_set_blend_constant: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_blend_constant")
        return withUnsafePointer (to: &RDPipelineColorBlendState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_blend_constant (_ pMember: Color) {
        #if true
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendState.method_set_blend_constant, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendState.method_set_blend_constant, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_blend_constant: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_blend_constant")
        return withUnsafePointer (to: &RDPipelineColorBlendState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_blend_constant ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (RDPipelineColorBlendState.method_get_blend_constant, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_attachments: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_attachments")
        return withUnsafePointer (to: &RDPipelineColorBlendState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_attachments (_ attachments: ObjectCollection<RDPipelineColorBlendStateAttachment>) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendState.method_set_attachments, UnsafeMutableRawPointer (mutating: handle), nil, &attachments.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &attachments.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendState.method_set_attachments, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_attachments: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_attachments")
        return withUnsafePointer (to: &RDPipelineColorBlendState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_attachments ()-> ObjectCollection<RDPipelineColorBlendStateAttachment> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (RDPipelineColorBlendState.method_get_attachments, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<RDPipelineColorBlendStateAttachment>(content: _result)
    }
    
}

