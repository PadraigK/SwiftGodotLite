// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Directional 2D light from a distance.
/// 
/// A directional light is a type of ``Light2D`` node that models an infinite number of parallel rays covering the entire scene. It is used for lights with strong intensity that are located far away from the scene (for example: to model sunlight or moonlight).
/// 
/// > Note: ``DirectionalLight2D`` does not support light cull masks (but it supports shadow cull masks). It will always light up 2D nodes, regardless of the 2D node's ``CanvasItem/lightMask``.
/// 
open class DirectionalLight2D: Light2D {
    override open class var godotClassName: StringName { "DirectionalLight2D" }
    
    /* Properties */
    
    /// The height of the light. Used with 2D normal mapping. Ranges from 0 (parallel to the plane) to 1 (perpendicular to the plane).
    final public var height: Double {
        get {
            return getHeight ()
        }
        
        set {
            setHeight (newValue)
        }
        
    }
    
    /// The maximum distance from the camera center objects can be before their shadows are culled (in pixels). Decreasing this value can prevent objects located outside the camera from casting shadows (while also improving performance). ``Camera2D/zoom`` is not taken into account by ``maxDistance``, which means that at higher zoom values, shadows will appear to fade out sooner when zooming onto a given point.
    final public var maxDistance: Double {
        get {
            return get_max_distance ()
        }
        
        set {
            set_max_distance (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_max_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_max_distance")
        return withUnsafePointer (to: &DirectionalLight2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_max_distance (_ pixels: Double) {
        #if false
        
        var copy_pixels = pixels
        
        gi.object_method_bind_ptrcall_v (DirectionalLight2D.method_set_max_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pixels)
        
        #else
        
        var copy_pixels = pixels
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pixels) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirectionalLight2D.method_set_max_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_max_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_max_distance")
        return withUnsafePointer (to: &DirectionalLight2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_max_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (DirectionalLight2D.method_get_max_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

