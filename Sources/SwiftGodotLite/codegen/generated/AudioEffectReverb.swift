// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Adds a reverberation audio effect to an Audio bus.
/// 
/// Simulates the sound of acoustic environments such as rooms, concert halls, caverns, or an open spaces.
open class AudioEffectReverb: AudioEffect {
    override open class var godotClassName: StringName { "AudioEffectReverb" }
    
    /* Properties */
    
    /// Time between the original signal and the early reflections of the reverb signal, in milliseconds.
    final public var predelayMsec: Double {
        get {
            return get_predelay_msec ()
        }
        
        set {
            set_predelay_msec (newValue)
        }
        
    }
    
    /// Output percent of predelay. Value can range from 0 to 1.
    final public var predelayFeedback: Double {
        get {
            return get_predelay_feedback ()
        }
        
        set {
            set_predelay_feedback (newValue)
        }
        
    }
    
    /// Dimensions of simulated room. Bigger means more echoes. Value can range from 0 to 1.
    final public var roomSize: Double {
        get {
            return get_room_size ()
        }
        
        set {
            set_room_size (newValue)
        }
        
    }
    
    /// Defines how reflective the imaginary room's walls are. Value can range from 0 to 1.
    final public var damping: Double {
        get {
            return get_damping ()
        }
        
        set {
            set_damping (newValue)
        }
        
    }
    
    /// Widens or narrows the stereo image of the reverb tail. 1 means fully widens. Value can range from 0 to 1.
    final public var spread: Double {
        get {
            return get_spread ()
        }
        
        set {
            set_spread (newValue)
        }
        
    }
    
    /// High-pass filter passes signals with a frequency higher than a certain cutoff frequency and attenuates signals with frequencies lower than the cutoff frequency. Value can range from 0 to 1.
    final public var hipass: Double {
        get {
            return get_hpf ()
        }
        
        set {
            set_hpf (newValue)
        }
        
    }
    
    /// Output percent of original sound. At 0, only modified sound is outputted. Value can range from 0 to 1.
    final public var dry: Double {
        get {
            return get_dry ()
        }
        
        set {
            set_dry (newValue)
        }
        
    }
    
    /// Output percent of modified sound. At 0, only original sound is outputted. Value can range from 0 to 1.
    final public var wet: Double {
        get {
            return get_wet ()
        }
        
        set {
            set_wet (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_predelay_msec: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_predelay_msec")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_predelay_msec (_ msec: Double) {
        #if true
        
        var copy_msec = msec
        
        gi.object_method_bind_ptrcall_v (AudioEffectReverb.method_set_predelay_msec, UnsafeMutableRawPointer (mutating: handle), nil, &copy_msec)
        
        #else
        
        var copy_msec = msec
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_msec) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectReverb.method_set_predelay_msec, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_predelay_msec: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_predelay_msec")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_predelay_msec ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectReverb.method_get_predelay_msec, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_predelay_feedback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_predelay_feedback")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_predelay_feedback (_ feedback: Double) {
        #if true
        
        var copy_feedback = feedback
        
        gi.object_method_bind_ptrcall_v (AudioEffectReverb.method_set_predelay_feedback, UnsafeMutableRawPointer (mutating: handle), nil, &copy_feedback)
        
        #else
        
        var copy_feedback = feedback
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_feedback) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectReverb.method_set_predelay_feedback, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_predelay_feedback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_predelay_feedback")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_predelay_feedback ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectReverb.method_get_predelay_feedback, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_room_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_room_size")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_room_size (_ size: Double) {
        #if true
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (AudioEffectReverb.method_set_room_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectReverb.method_set_room_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_room_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_room_size")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_room_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectReverb.method_get_room_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_damping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_damping")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_damping (_ amount: Double) {
        #if true
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (AudioEffectReverb.method_set_damping, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectReverb.method_set_damping, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_damping: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_damping")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_damping ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectReverb.method_get_damping, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_spread: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_spread")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_spread (_ amount: Double) {
        #if true
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (AudioEffectReverb.method_set_spread, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectReverb.method_set_spread, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_spread: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_spread")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_spread ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectReverb.method_get_spread, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_dry: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_dry")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_dry (_ amount: Double) {
        #if true
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (AudioEffectReverb.method_set_dry, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectReverb.method_set_dry, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_dry: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_dry")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_dry ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectReverb.method_get_dry, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_wet: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_wet")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_wet (_ amount: Double) {
        #if true
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (AudioEffectReverb.method_set_wet, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectReverb.method_set_wet, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_wet: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_wet")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_wet ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectReverb.method_get_wet, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_hpf: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_hpf")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_hpf (_ amount: Double) {
        #if true
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (AudioEffectReverb.method_set_hpf, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectReverb.method_set_hpf, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_hpf: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_hpf")
        return withUnsafePointer (to: &AudioEffectReverb.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_hpf ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (AudioEffectReverb.method_get_hpf, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

