// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A synchronization mechanism used to control access to a shared resource by ``Thread``s.
/// 
/// A synchronization semaphore that can be used to synchronize multiple ``Thread``s. Initialized to zero on creation. For a binary version, see ``Mutex``.
/// 
/// > Warning: Semaphores must be used carefully to avoid deadlocks.
/// 
/// > Warning: To guarantee that the operating system is able to perform proper cleanup (no crashes, no deadlocks), these conditions must be met:
/// 
/// - When a ``Semaphore``'s reference count reaches zero and it is therefore destroyed, no threads must be waiting on it.
/// 
/// - When a ``Thread``'s reference count reaches zero and it is therefore destroyed, it must not be waiting on any semaphore.
/// 
open class Semaphore: RefCounted {
    override open class var godotClassName: StringName { "Semaphore" }
    /* Methods */
    fileprivate static var method_wait: GDExtensionMethodBindPtr = {
        let methodName = StringName ("wait")
        return withUnsafePointer (to: &Semaphore.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Waits for the ``Semaphore``, if its value is zero, blocks until non-zero.
    public final func wait () {
        gi.object_method_bind_ptrcall (Semaphore.method_wait, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_try_wait: GDExtensionMethodBindPtr = {
        let methodName = StringName ("try_wait")
        return withUnsafePointer (to: &Semaphore.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Like ``wait()``, but won't block, so if the value is zero, fails immediately and returns `false`. If non-zero, it returns `true` to report success.
    public final func tryWait ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Semaphore.method_try_wait, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_post: GDExtensionMethodBindPtr = {
        let methodName = StringName ("post")
        return withUnsafePointer (to: &Semaphore.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Lowers the ``Semaphore``, allowing one more thread in.
    public final func post () {
        gi.object_method_bind_ptrcall (Semaphore.method_post, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
}

