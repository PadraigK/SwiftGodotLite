// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// DTLS packet peer.
/// 
/// This class represents a DTLS peer connection. It can be used to connect to a DTLS server, and is returned by ``DTLSServer/takeConnection(udpPeer:)``.
/// 
/// > Note: When exporting to Android, make sure to enable the `INTERNET` permission in the Android export preset before exporting the project or using one-click deploy. Otherwise, network communication of any kind will be blocked by Android.
/// 
/// > Warning: TLS certificate revocation and certificate pinning are currently not supported. Revoked certificates are accepted as long as they are otherwise valid. If this is a concern, you may want to use automatically managed certificates with a short validity period.
/// 
open class PacketPeerDTLS: PacketPeer {
    override open class var godotClassName: StringName { "PacketPeerDTLS" }
    public enum Status: Int64 {
        /// A status representing a ``PacketPeerDTLS`` that is disconnected.
        case disconnected = 0 // STATUS_DISCONNECTED
        /// A status representing a ``PacketPeerDTLS`` that is currently performing the handshake with a remote peer.
        case handshaking = 1 // STATUS_HANDSHAKING
        /// A status representing a ``PacketPeerDTLS`` that is connected to a remote peer.
        case connected = 2 // STATUS_CONNECTED
        /// A status representing a ``PacketPeerDTLS`` in a generic error state.
        case error = 3 // STATUS_ERROR
        /// An error status that shows a mismatch in the DTLS certificate domain presented by the host and the domain requested for validation.
        case errorHostnameMismatch = 4 // STATUS_ERROR_HOSTNAME_MISMATCH
    }
    
    /* Methods */
    fileprivate static var method_poll: GDExtensionMethodBindPtr = {
        let methodName = StringName ("poll")
        return withUnsafePointer (to: &PacketPeerDTLS.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Poll the connection to check for incoming packets. Call this frequently to update the status and keep the connection working.
    public final func poll () {
        gi.object_method_bind_ptrcall (PacketPeerDTLS.method_poll, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_connect_to_peer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("connect_to_peer")
        return withUnsafePointer (to: &PacketPeerDTLS.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2880188099)!
            }
            
        }
        
    }()
    
    /// Connects a `packetPeer` beginning the DTLS handshake using the underlying ``PacketPeerUDP`` which must be connected (see ``PacketPeerUDP/connectToHost(_:port:)``). You can optionally specify the `clientOptions` to be used while verifying the TLS connections. See ``TLSOptions/client(trustedChain:commonNameOverride:)`` and ``TLSOptions/clientUnsafe(trustedChain:)``.
    public final func connectToPeer (packetPeer: PacketPeerUDP?, hostname: String, clientOptions: TLSOptions? = nil)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_hostname = GString (hostname)
        var copy_packet_peer_handle = packetPeer?.handle
        var copy_client_options_handle = clientOptions?.handle
        
        gi.object_method_bind_ptrcall_v (PacketPeerDTLS.method_connect_to_peer, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_packet_peer_handle, &gstr_hostname.content, &copy_client_options_handle)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_hostname = GString (hostname)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: packetPeer?.handle) { p0 in
        _args.append (packetPeer == nil ? nil : p0)
            return withUnsafePointer (to: &gstr_hostname.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: clientOptions?.handle) { p2 in
                _args.append (clientOptions == nil ? nil : p2)
        
                    gi.object_method_bind_ptrcall (PacketPeerDTLS.method_connect_to_peer, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return GodotError (rawValue: _result)!
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_status: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_status")
        return withUnsafePointer (to: &PacketPeerDTLS.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3248654679)!
            }
            
        }
        
    }()
    
    /// Returns the status of the connection. See ``PacketPeerDTLS/Status`` for values.
    public final func getStatus ()-> PacketPeerDTLS.Status {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (PacketPeerDTLS.method_get_status, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return PacketPeerDTLS.Status (rawValue: _result)!
    }
    
    fileprivate static var method_disconnect_from_peer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("disconnect_from_peer")
        return withUnsafePointer (to: &PacketPeerDTLS.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Disconnects this peer, terminating the DTLS session.
    public final func disconnectFromPeer () {
        gi.object_method_bind_ptrcall (PacketPeerDTLS.method_disconnect_from_peer, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
}

