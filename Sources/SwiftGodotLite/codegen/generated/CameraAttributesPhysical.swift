// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Physically-based camera settings.
/// 
/// ``CameraAttributesPhysical`` is used to set rendering settings based on a physically-based camera's settings. It is responsible for exposure, auto-exposure, and depth of field.
/// 
/// When used in a ``WorldEnvironment`` it provides default settings for exposure, auto-exposure, and depth of field that will be used by all cameras without their own ``CameraAttributes``, including the editor camera. When used in a ``Camera3D`` it will override any ``CameraAttributes`` set in the ``WorldEnvironment`` and will override the ``Camera3D``s ``Camera3D/far``, ``Camera3D/near``, ``Camera3D/fov``, and ``Camera3D/keepAspect`` properties. When used in ``VoxelGI`` or ``LightmapGI``, only the exposure settings will be used.
/// 
/// The default settings are intended for use in an outdoor environment, tips for settings for use in an indoor environment can be found in each setting's documentation.
/// 
/// > Note: Depth of field blur is only supported in the Forward+ and Mobile rendering methods, not Compatibility.
/// 
open class CameraAttributesPhysical: CameraAttributes {
    override open class var godotClassName: StringName { "CameraAttributesPhysical" }
    
    /* Properties */
    
    /// Distance from camera of object that will be in focus, measured in meters. Internally this will be clamped to be at least 1 millimeter larger than ``frustumFocalLength``.
    final public var frustumFocusDistance: Double {
        get {
            return get_focus_distance ()
        }
        
        set {
            set_focus_distance (newValue)
        }
        
    }
    
    /// Distance between camera lens and camera aperture, measured in millimeters. Controls field of view and depth of field. A larger focal length will result in a smaller field of view and a narrower depth of field meaning fewer objects will be in focus. A smaller focal length will result in a wider field of view and a larger depth of field meaning more objects will be in focus. When attached to a ``Camera3D`` as its ``Camera3D/attributes``, it will override the ``Camera3D/fov`` property and the ``Camera3D/keepAspect`` property.
    final public var frustumFocalLength: Double {
        get {
            return get_focal_length ()
        }
        
        set {
            set_focal_length (newValue)
        }
        
    }
    
    /// Override value for ``Camera3D/near``. Used internally when calculating depth of field. When attached to a ``Camera3D`` as its ``Camera3D/attributes``, it will override the ``Camera3D/near`` property.
    final public var frustumNear: Double {
        get {
            return get_near ()
        }
        
        set {
            set_near (newValue)
        }
        
    }
    
    /// Override value for ``Camera3D/far``. Used internally when calculating depth of field. When attached to a ``Camera3D`` as its ``Camera3D/attributes``, it will override the ``Camera3D/far`` property.
    final public var frustumFar: Double {
        get {
            return get_far ()
        }
        
        set {
            set_far (newValue)
        }
        
    }
    
    /// Size of the aperture of the camera, measured in f-stops. An f-stop is a unitless ratio between the focal length of the camera and the diameter of the aperture. A high aperture setting will result in a smaller aperture which leads to a dimmer image and sharper focus. A low aperture results in a wide aperture which lets in more light resulting in a brighter, less-focused image. Default is appropriate for outdoors at daytime (i.e. for use with a default ``DirectionalLight3D``), for indoor lighting, a value between 2 and 4 is more appropriate.
    /// 
    /// Only available when ``ProjectSettings/rendering/lightsAndShadows/usePhysicalLightUnits`` is enabled.
    /// 
    final public var exposureAperture: Double {
        get {
            return get_aperture ()
        }
        
        set {
            set_aperture (newValue)
        }
        
    }
    
    /// Time for shutter to open and close, measured in seconds. A higher value will let in more light leading to a brighter image, while a lower amount will let in less light leading to a darker image.
    /// 
    /// Only available when ``ProjectSettings/rendering/lightsAndShadows/usePhysicalLightUnits`` is enabled.
    /// 
    final public var exposureShutterSpeed: Double {
        get {
            return get_shutter_speed ()
        }
        
        set {
            set_shutter_speed (newValue)
        }
        
    }
    
    /// The minimum luminance luminance (in EV100) used when calculating auto exposure. When calculating scene average luminance, color values will be clamped to at least this value. This limits the auto-exposure from exposing above a certain brightness, resulting in a cut off point where the scene will remain dark.
    final public var autoExposureMinExposureValue: Double {
        get {
            return get_auto_exposure_min_exposure_value ()
        }
        
        set {
            set_auto_exposure_min_exposure_value (newValue)
        }
        
    }
    
    /// The maximum luminance (in EV100) used when calculating auto exposure. When calculating scene average luminance, color values will be clamped to at least this value. This limits the auto-exposure from exposing below a certain brightness, resulting in a cut off point where the scene will remain bright.
    final public var autoExposureMaxExposureValue: Double {
        get {
            return get_auto_exposure_max_exposure_value ()
        }
        
        set {
            set_auto_exposure_max_exposure_value (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_aperture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_aperture")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_aperture (_ aperture: Double) {
        #if true
        
        var copy_aperture = aperture
        
        gi.object_method_bind_ptrcall_v (CameraAttributesPhysical.method_set_aperture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_aperture)
        
        #else
        
        var copy_aperture = aperture
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_aperture) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_set_aperture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_aperture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_aperture")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_aperture ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_get_aperture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shutter_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shutter_speed")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shutter_speed (_ shutterSpeed: Double) {
        #if true
        
        var copy_shutter_speed = shutterSpeed
        
        gi.object_method_bind_ptrcall_v (CameraAttributesPhysical.method_set_shutter_speed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_shutter_speed)
        
        #else
        
        var copy_shutter_speed = shutterSpeed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_shutter_speed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_set_shutter_speed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shutter_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shutter_speed")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shutter_speed ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_get_shutter_speed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_focal_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_focal_length")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_focal_length (_ focalLength: Double) {
        #if true
        
        var copy_focal_length = focalLength
        
        gi.object_method_bind_ptrcall_v (CameraAttributesPhysical.method_set_focal_length, UnsafeMutableRawPointer (mutating: handle), nil, &copy_focal_length)
        
        #else
        
        var copy_focal_length = focalLength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_focal_length) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_set_focal_length, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_focal_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_focal_length")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_focal_length ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_get_focal_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_focus_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_focus_distance")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_focus_distance (_ focusDistance: Double) {
        #if true
        
        var copy_focus_distance = focusDistance
        
        gi.object_method_bind_ptrcall_v (CameraAttributesPhysical.method_set_focus_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_focus_distance)
        
        #else
        
        var copy_focus_distance = focusDistance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_focus_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_set_focus_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_focus_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_focus_distance")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_focus_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_get_focus_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_near: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_near")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_near (_ near: Double) {
        #if true
        
        var copy_near = near
        
        gi.object_method_bind_ptrcall_v (CameraAttributesPhysical.method_set_near, UnsafeMutableRawPointer (mutating: handle), nil, &copy_near)
        
        #else
        
        var copy_near = near
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_near) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_set_near, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_near: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_near")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_near ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_get_near, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_far: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_far")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_far (_ far: Double) {
        #if true
        
        var copy_far = far
        
        gi.object_method_bind_ptrcall_v (CameraAttributesPhysical.method_set_far, UnsafeMutableRawPointer (mutating: handle), nil, &copy_far)
        
        #else
        
        var copy_far = far
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_far) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_set_far, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_far: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_far")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_far ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_get_far, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_fov: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fov")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the vertical field of view that corresponds to the ``frustumFocalLength``. This value is calculated internally whenever ``frustumFocalLength`` is changed.
    public final func getFov ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_get_fov, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_auto_exposure_max_exposure_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_auto_exposure_max_exposure_value")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_auto_exposure_max_exposure_value (_ exposureValueMax: Double) {
        #if true
        
        var copy_exposure_value_max = exposureValueMax
        
        gi.object_method_bind_ptrcall_v (CameraAttributesPhysical.method_set_auto_exposure_max_exposure_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_exposure_value_max)
        
        #else
        
        var copy_exposure_value_max = exposureValueMax
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_exposure_value_max) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_set_auto_exposure_max_exposure_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_auto_exposure_max_exposure_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_auto_exposure_max_exposure_value")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_auto_exposure_max_exposure_value ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_get_auto_exposure_max_exposure_value, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_auto_exposure_min_exposure_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_auto_exposure_min_exposure_value")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_auto_exposure_min_exposure_value (_ exposureValueMin: Double) {
        #if true
        
        var copy_exposure_value_min = exposureValueMin
        
        gi.object_method_bind_ptrcall_v (CameraAttributesPhysical.method_set_auto_exposure_min_exposure_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_exposure_value_min)
        
        #else
        
        var copy_exposure_value_min = exposureValueMin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_exposure_value_min) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_set_auto_exposure_min_exposure_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_auto_exposure_min_exposure_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_auto_exposure_min_exposure_value")
        return withUnsafePointer (to: &CameraAttributesPhysical.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_auto_exposure_min_exposure_value ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CameraAttributesPhysical.method_get_auto_exposure_min_exposure_value, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

