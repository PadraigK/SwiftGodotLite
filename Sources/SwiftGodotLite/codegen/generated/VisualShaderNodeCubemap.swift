// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A ``Cubemap`` sampling node to be used within the visual shader graph.
/// 
/// Translated to `texture(cubemap, vec3)` in the shader language. Returns a color vector and alpha channel as scalar.
open class VisualShaderNodeCubemap: VisualShaderNode {
    override open class var godotClassName: StringName { "VisualShaderNodeCubemap" }
    public enum Source: Int64 {
        /// Use the ``Cubemap`` set via ``cubeMap``. If this is set to ``source``, the `samplerCube` port is ignored.
        case texture = 0 // SOURCE_TEXTURE
        /// Use the ``Cubemap`` sampler reference passed via the `samplerCube` port. If this is set to ``source``, the ``cubeMap`` texture is ignored.
        case port = 1 // SOURCE_PORT
        /// Represents the size of the ``VisualShaderNodeCubemap/Source`` enum.
        case max = 2 // SOURCE_MAX
    }
    
    public enum TextureType: Int64 {
        /// No hints are added to the uniform declaration.
        case data = 0 // TYPE_DATA
        /// Adds `hint_albedo` as hint to the uniform declaration for proper sRGB to linear conversion.
        case color = 1 // TYPE_COLOR
        /// Adds `hint_normal` as hint to the uniform declaration, which internally converts the texture for proper usage as normal map.
        case normalMap = 2 // TYPE_NORMAL_MAP
        /// Represents the size of the ``VisualShaderNodeCubemap/TextureType`` enum.
        case max = 3 // TYPE_MAX
    }
    
    
    /* Properties */
    
    /// Defines which source should be used for the sampling. See ``VisualShaderNodeCubemap/Source`` for options.
    final public var source: VisualShaderNodeCubemap.Source {
        get {
            return get_source ()
        }
        
        set {
            set_source (newValue)
        }
        
    }
    
    /// The ``Cubemap`` texture to sample when using .texture as ``source``.
    final public var cubeMap: Cubemap? {
        get {
            return get_cube_map ()
        }
        
        set {
            set_cube_map (newValue)
        }
        
    }
    
    /// Defines the type of data provided by the source texture. See ``VisualShaderNodeCubemap/TextureType`` for options.
    final public var textureType: VisualShaderNodeCubemap.TextureType {
        get {
            return get_texture_type ()
        }
        
        set {
            set_texture_type (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_source")
        return withUnsafePointer (to: &VisualShaderNodeCubemap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1625400621)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_source (_ value: VisualShaderNodeCubemap.Source) {
        #if false
        
        var copy_value = Int64 (value.rawValue)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeCubemap.method_set_source, UnsafeMutableRawPointer (mutating: handle), nil, &copy_value)
        
        #else
        
        var copy_value = Int64 (value.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_value) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeCubemap.method_set_source, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_source: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_source")
        return withUnsafePointer (to: &VisualShaderNodeCubemap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2222048781)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_source ()-> VisualShaderNodeCubemap.Source {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (VisualShaderNodeCubemap.method_get_source, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VisualShaderNodeCubemap.Source (rawValue: _result)!
    }
    
    fileprivate static var method_set_cube_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cube_map")
        return withUnsafePointer (to: &VisualShaderNodeCubemap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2219800736)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cube_map (_ value: Cubemap?) {
        #if false
        
        var copy_value_handle = value?.handle
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeCubemap.method_set_cube_map, UnsafeMutableRawPointer (mutating: handle), nil, &copy_value_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: value?.handle) { p0 in
        _args.append (value == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeCubemap.method_set_cube_map, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_cube_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cube_map")
        return withUnsafePointer (to: &VisualShaderNodeCubemap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1772111058)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_cube_map ()-> Cubemap? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (VisualShaderNodeCubemap.method_get_cube_map, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_texture_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_type")
        return withUnsafePointer (to: &VisualShaderNodeCubemap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1899718876)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_type (_ value: VisualShaderNodeCubemap.TextureType) {
        #if false
        
        var copy_value = Int64 (value.rawValue)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeCubemap.method_set_texture_type, UnsafeMutableRawPointer (mutating: handle), nil, &copy_value)
        
        #else
        
        var copy_value = Int64 (value.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_value) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeCubemap.method_set_texture_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_type")
        return withUnsafePointer (to: &VisualShaderNodeCubemap.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3356498888)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_type ()-> VisualShaderNodeCubemap.TextureType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (VisualShaderNodeCubemap.method_get_texture_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VisualShaderNodeCubemap.TextureType (rawValue: _result)!
    }
    
}

