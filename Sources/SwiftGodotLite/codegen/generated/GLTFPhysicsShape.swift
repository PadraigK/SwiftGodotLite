// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Represents a GLTF physics shape.
/// 
/// Represents a physics shape as defined by the `OMI_collider` GLTF extension. This class is an intermediary between the GLTF data and Godot's nodes, and it's abstracted in a way that allows adding support for different GLTF physics extensions in the future.
open class GLTFPhysicsShape: Resource {
    override open class var godotClassName: StringName { "GLTFPhysicsShape" }
    
    /* Properties */
    
    /// The type of shape this shape represents. Valid values are "box", "capsule", "cylinder", "sphere", "hull", and "trimesh".
    final public var shapeType: String {
        get {
            return get_shape_type ()
        }
        
        set {
            set_shape_type (newValue)
        }
        
    }
    
    /// The size of the shape, in meters. This is only used when the shape type is "box", and it represents the "diameter" of the box. This value should not be negative.
    final public var size: Vector3 {
        get {
            return get_size ()
        }
        
        set {
            set_size (newValue)
        }
        
    }
    
    /// The radius of the shape, in meters. This is only used when the shape type is "capsule", "cylinder", or "sphere". This value should not be negative.
    final public var radius: Double {
        get {
            return get_radius ()
        }
        
        set {
            set_radius (newValue)
        }
        
    }
    
    /// The height of the shape, in meters. This is only used when the shape type is "capsule" or "cylinder". This value should not be negative, and for "capsule" it should be at least twice the radius.
    final public var height: Double {
        get {
            return get_height ()
        }
        
        set {
            set_height (newValue)
        }
        
    }
    
    /// If `true`, indicates that this shape is a trigger. For Godot, this means that the shape should be a child of an Area3D node.
    /// 
    /// This is the only variable not used in the ``toNode(cacheShapes:)`` method, it's intended to be used alongside when deciding where to add the generated node as a child.
    /// 
    final public var isTrigger: Bool {
        get {
            return get_is_trigger ()
        }
        
        set {
            set_is_trigger (newValue)
        }
        
    }
    
    /// The index of the shape's mesh in the GLTF file. This is only used when the shape type is "hull" (convex hull) or "trimesh" (concave trimesh).
    final public var meshIndex: Int32 {
        get {
            return get_mesh_index ()
        }
        
        set {
            set_mesh_index (newValue)
        }
        
    }
    
    /// The ``ImporterMesh`` resource of the shape. This is only used when the shape type is "hull" (convex hull) or "trimesh" (concave trimesh).
    final public var importerMesh: ImporterMesh? {
        get {
            return get_importer_mesh ()
        }
        
        set {
            set_importer_mesh (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_from_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("from_node")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3613751275)!
            }
            
        }
        
    }()
    
    /// Create a new GLTFPhysicsShape instance from the given Godot ``CollisionShape3D`` node.
    public static func fromNode (shapeNode: CollisionShape3D?)-> GLTFPhysicsShape? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_shape_node_handle = shapeNode?.handle
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsShape.method_from_node, nil, &_result, &copy_shape_node_handle)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: shapeNode?.handle) { p0 in
        _args.append (shapeNode == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_from_node, nil, &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_to_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("to_node")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 563689933)!
            }
            
        }
        
    }()
    
    /// Converts this GLTFPhysicsShape instance into a Godot ``CollisionShape3D`` node.
    public final func toNode (cacheShapes: Bool = false)-> CollisionShape3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_cache_shapes = cacheShapes
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsShape.method_to_node, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_cache_shapes)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_cache_shapes = cacheShapes
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_cache_shapes) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_to_node, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_from_dictionary: GDExtensionMethodBindPtr = {
        let methodName = StringName ("from_dictionary")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2390691823)!
            }
            
        }
        
    }()
    
    /// Creates a new GLTFPhysicsShape instance by parsing the given ``GDictionary``.
    public static func fromDictionary (_ dictionary: GDictionary)-> GLTFPhysicsShape? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsShape.method_from_dictionary, nil, &_result, &dictionary.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &dictionary.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_from_dictionary, nil, &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_to_dictionary: GDExtensionMethodBindPtr = {
        let methodName = StringName ("to_dictionary")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Serializes this GLTFPhysicsShape instance into a ``GDictionary``.
    public final func toDictionary ()-> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_to_dictionary, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_shape_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shape_type")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shape_type ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_get_shape_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_shape_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shape_type")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shape_type (_ shapeType: String) {
        #if false
        
        let gstr_shape_type = GString (shapeType)
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsShape.method_set_shape_type, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_shape_type.content)
        
        #else
        
        let gstr_shape_type = GString (shapeType)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_shape_type.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_set_shape_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_size ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_get_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_size")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_size (_ size: Vector3) {
        #if false
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsShape.method_set_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_set_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_radius")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_get_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_radius")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_radius (_ radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsShape.method_set_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_set_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_height")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_height ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_get_height, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_height")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_height (_ height: Double) {
        #if false
        
        var copy_height = height
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsShape.method_set_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_height)
        
        #else
        
        var copy_height = height
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_height) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_set_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_is_trigger: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_is_trigger")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_is_trigger ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_get_is_trigger, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_is_trigger: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_is_trigger")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_is_trigger (_ isTrigger: Bool) {
        #if false
        
        var copy_is_trigger = isTrigger
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsShape.method_set_is_trigger, UnsafeMutableRawPointer (mutating: handle), nil, &copy_is_trigger)
        
        #else
        
        var copy_is_trigger = isTrigger
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_is_trigger) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_set_is_trigger, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mesh_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mesh_index")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mesh_index ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_get_mesh_index, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mesh_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mesh_index")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mesh_index (_ meshIndex: Int32) {
        #if false
        
        var copy_mesh_index: Int = Int (meshIndex)
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsShape.method_set_mesh_index, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mesh_index)
        
        #else
        
        var copy_mesh_index: Int = Int (meshIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mesh_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_set_mesh_index, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_importer_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_importer_mesh")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3161779525)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_importer_mesh ()-> ImporterMesh? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_get_importer_mesh, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_importer_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_importer_mesh")
        return withUnsafePointer (to: &GLTFPhysicsShape.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2255166972)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_importer_mesh (_ importerMesh: ImporterMesh?) {
        #if false
        
        var copy_importer_mesh_handle = importerMesh?.handle
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsShape.method_set_importer_mesh, UnsafeMutableRawPointer (mutating: handle), nil, &copy_importer_mesh_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: importerMesh?.handle) { p0 in
        _args.append (importerMesh == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsShape.method_set_importer_mesh, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

