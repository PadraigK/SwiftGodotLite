// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Provides virtual methods that can be overridden to create custom ``PhysicsServer3D`` implementations.
/// 
/// This class extends ``PhysicsServer3D`` by providing additional virtual methods that can be overridden. When these methods are overridden, they will be called instead of the internal methods of the physics server.
/// 
/// Intended for use with GDExtension to create custom implementations of ``PhysicsServer3D``.
/// 
open class PhysicsServer3DExtension: PhysicsServer3D {
    override open class var godotClassName: StringName { "PhysicsServer3DExtension" }
    /* Methods */
    /// 
    @_documentation(visibility: public)
    open func _worldBoundaryShapeCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _separationRayShapeCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _sphereShapeCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _boxShapeCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _capsuleShapeCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _cylinderShapeCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _convexPolygonShapeCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _concavePolygonShapeCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _heightmapShapeCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _customShapeCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _shapeSetData (shape: RID, data: Variant) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _shapeSetCustomSolverBias (shape: RID, bias: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _shapeSetMargin (shape: RID, margin: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _shapeGetMargin (shape: RID)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _shapeGetType (shape: RID)-> PhysicsServer3D.ShapeType {
        return PhysicsServer3D.ShapeType(rawValue: 0)!
    }
    
    /// 
    @_documentation(visibility: public)
    open func _shapeGetData (shape: RID)-> Variant {
        return Variant ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _shapeGetCustomSolverBias (shape: RID)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _spaceCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _spaceSetActive (space: RID, active: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _spaceIsActive (space: RID)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _spaceSetParam (space: RID, param: PhysicsServer3D.SpaceParameter, value: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _spaceGetParam (space: RID, param: PhysicsServer3D.SpaceParameter)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _spaceGetDirectState (space: RID)-> PhysicsDirectSpaceState3D? {
        return PhysicsDirectSpaceState3D ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _spaceSetDebugContacts (space: RID, maxContacts: Int32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _spaceGetContacts (space: RID)-> PackedVector3Array {
        return PackedVector3Array ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _spaceGetContactCount (space: RID)-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetSpace (area: RID, space: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaGetSpace (area: RID)-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaAddShape (area: RID, shape: RID, transform: Transform3D, disabled: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetShape (area: RID, shapeIdx: Int32, shape: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetShapeTransform (area: RID, shapeIdx: Int32, transform: Transform3D) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetShapeDisabled (area: RID, shapeIdx: Int32, disabled: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaGetShapeCount (area: RID)-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaGetShape (area: RID, shapeIdx: Int32)-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaGetShapeTransform (area: RID, shapeIdx: Int32)-> Transform3D {
        return Transform3D ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaRemoveShape (area: RID, shapeIdx: Int32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaClearShapes (area: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaAttachObjectInstanceId (area: RID, id: UInt) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaGetObjectInstanceId (area: RID)-> UInt {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetParam (area: RID, param: PhysicsServer3D.AreaParameter, value: Variant) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetTransform (area: RID, transform: Transform3D) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaGetParam (area: RID, param: PhysicsServer3D.AreaParameter)-> Variant {
        return Variant ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaGetTransform (area: RID)-> Transform3D {
        return Transform3D ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetCollisionLayer (area: RID, layer: UInt32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaGetCollisionLayer (area: RID)-> UInt32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetCollisionMask (area: RID, mask: UInt32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaGetCollisionMask (area: RID)-> UInt32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetMonitorable (area: RID, monitorable: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetRayPickable (area: RID, enable: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetMonitorCallback (area: RID, callback: Callable) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _areaSetAreaMonitorCallback (area: RID, callback: Callable) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetSpace (body: RID, space: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetSpace (body: RID)-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetMode (body: RID, mode: PhysicsServer3D.BodyMode) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetMode (body: RID)-> PhysicsServer3D.BodyMode {
        return PhysicsServer3D.BodyMode(rawValue: 0)!
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyAddShape (body: RID, shape: RID, transform: Transform3D, disabled: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetShape (body: RID, shapeIdx: Int32, shape: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetShapeTransform (body: RID, shapeIdx: Int32, transform: Transform3D) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetShapeDisabled (body: RID, shapeIdx: Int32, disabled: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetShapeCount (body: RID)-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetShape (body: RID, shapeIdx: Int32)-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetShapeTransform (body: RID, shapeIdx: Int32)-> Transform3D {
        return Transform3D ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyRemoveShape (body: RID, shapeIdx: Int32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyClearShapes (body: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyAttachObjectInstanceId (body: RID, id: UInt) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetObjectInstanceId (body: RID)-> UInt {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetEnableContinuousCollisionDetection (body: RID, enable: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyIsContinuousCollisionDetectionEnabled (body: RID)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetCollisionLayer (body: RID, layer: UInt32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetCollisionLayer (body: RID)-> UInt32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetCollisionMask (body: RID, mask: UInt32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetCollisionMask (body: RID)-> UInt32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetCollisionPriority (body: RID, priority: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetCollisionPriority (body: RID)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetUserFlags (body: RID, flags: UInt32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetUserFlags (body: RID)-> UInt32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetParam (body: RID, param: PhysicsServer3D.BodyParameter, value: Variant) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetParam (body: RID, param: PhysicsServer3D.BodyParameter)-> Variant {
        return Variant ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyResetMassProperties (body: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetState (body: RID, state: PhysicsServer3D.BodyState, value: Variant) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetState (body: RID, state: PhysicsServer3D.BodyState)-> Variant {
        return Variant ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyApplyCentralImpulse (body: RID, impulse: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyApplyImpulse (body: RID, impulse: Vector3, position: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyApplyTorqueImpulse (body: RID, impulse: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyApplyCentralForce (body: RID, force: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyApplyForce (body: RID, force: Vector3, position: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyApplyTorque (body: RID, torque: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyAddConstantCentralForce (body: RID, force: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyAddConstantForce (body: RID, force: Vector3, position: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyAddConstantTorque (body: RID, torque: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetConstantForce (body: RID, force: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetConstantForce (body: RID)-> Vector3 {
        return Vector3 ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetConstantTorque (body: RID, torque: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetConstantTorque (body: RID)-> Vector3 {
        return Vector3 ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetAxisVelocity (body: RID, axisVelocity: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetAxisLock (body: RID, axis: PhysicsServer3D.BodyAxis, lock: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyIsAxisLocked (body: RID, axis: PhysicsServer3D.BodyAxis)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyAddCollisionException (body: RID, exceptedBody: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyRemoveCollisionException (body: RID, exceptedBody: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetCollisionExceptions (body: RID)-> VariantCollection<RID> {
        return VariantCollection<RID>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetMaxContactsReported (body: RID, amount: Int32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetMaxContactsReported (body: RID)-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetContactsReportedDepthThreshold (body: RID, threshold: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetContactsReportedDepthThreshold (body: RID)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetOmitForceIntegration (body: RID, enable: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyIsOmittingForceIntegration (body: RID)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetStateSyncCallback (body: RID, callable: Callable) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetForceIntegrationCallback (body: RID, callable: Callable, userdata: Variant) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodySetRayPickable (body: RID, enable: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _bodyGetDirectState (body: RID)-> PhysicsDirectBodyState3D? {
        return PhysicsDirectBodyState3D ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyUpdateRenderingServer (body: RID, renderingServerHandler: PhysicsServer3DRenderingServerHandler?) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetSpace (body: RID, space: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetSpace (body: RID)-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetRayPickable (body: RID, enable: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetCollisionLayer (body: RID, layer: UInt32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetCollisionLayer (body: RID)-> UInt32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetCollisionMask (body: RID, mask: UInt32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetCollisionMask (body: RID)-> UInt32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyAddCollisionException (body: RID, bodyB: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyRemoveCollisionException (body: RID, bodyB: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetCollisionExceptions (body: RID)-> VariantCollection<RID> {
        return VariantCollection<RID>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetState (body: RID, state: PhysicsServer3D.BodyState, variant: Variant) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetState (body: RID, state: PhysicsServer3D.BodyState)-> Variant {
        return Variant ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetTransform (body: RID, transform: Transform3D) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetSimulationPrecision (body: RID, simulationPrecision: Int32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetSimulationPrecision (body: RID)-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetTotalMass (body: RID, totalMass: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetTotalMass (body: RID)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetLinearStiffness (body: RID, linearStiffness: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetLinearStiffness (body: RID)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetPressureCoefficient (body: RID, pressureCoefficient: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetPressureCoefficient (body: RID)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetDampingCoefficient (body: RID, dampingCoefficient: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetDampingCoefficient (body: RID)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetDragCoefficient (body: RID, dragCoefficient: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetDragCoefficient (body: RID)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodySetMesh (body: RID, mesh: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetBounds (body: RID)-> AABB {
        return AABB ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyMovePoint (body: RID, pointIndex: Int32, globalPosition: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyGetPointGlobalPosition (body: RID, pointIndex: Int32)-> Vector3 {
        return Vector3 ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyRemoveAllPinnedPoints (body: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyPinPoint (body: RID, pointIndex: Int32, pin: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _softBodyIsPointPinned (body: RID, pointIndex: Int32)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointCreate ()-> RID {
        return RID ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointClear (joint: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointMakePin (joint: RID, bodyA: RID, localA: Vector3, bodyB: RID, localB: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _pinJointSetParam (joint: RID, param: PhysicsServer3D.PinJointParam, value: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _pinJointGetParam (joint: RID, param: PhysicsServer3D.PinJointParam)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _pinJointSetLocalA (joint: RID, localA: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _pinJointGetLocalA (joint: RID)-> Vector3 {
        return Vector3 ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _pinJointSetLocalB (joint: RID, localB: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _pinJointGetLocalB (joint: RID)-> Vector3 {
        return Vector3 ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointMakeHinge (joint: RID, bodyA: RID, hingeA: Transform3D, bodyB: RID, hingeB: Transform3D) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointMakeHingeSimple (joint: RID, bodyA: RID, pivotA: Vector3, axisA: Vector3, bodyB: RID, pivotB: Vector3, axisB: Vector3) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _hingeJointSetParam (joint: RID, param: PhysicsServer3D.HingeJointParam, value: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _hingeJointGetParam (joint: RID, param: PhysicsServer3D.HingeJointParam)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _hingeJointSetFlag (joint: RID, flag: PhysicsServer3D.HingeJointFlag, enabled: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _hingeJointGetFlag (joint: RID, flag: PhysicsServer3D.HingeJointFlag)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointMakeSlider (joint: RID, bodyA: RID, localRefA: Transform3D, bodyB: RID, localRefB: Transform3D) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _sliderJointSetParam (joint: RID, param: PhysicsServer3D.SliderJointParam, value: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _sliderJointGetParam (joint: RID, param: PhysicsServer3D.SliderJointParam)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointMakeConeTwist (joint: RID, bodyA: RID, localRefA: Transform3D, bodyB: RID, localRefB: Transform3D) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _coneTwistJointSetParam (joint: RID, param: PhysicsServer3D.ConeTwistJointParam, value: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _coneTwistJointGetParam (joint: RID, param: PhysicsServer3D.ConeTwistJointParam)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointMakeGeneric6dof (joint: RID, bodyA: RID, localRefA: Transform3D, bodyB: RID, localRefB: Transform3D) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _generic6dofJointSetParam (joint: RID, axis: Vector3.Axis, param: PhysicsServer3D.G6DOFJointAxisParam, value: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _generic6dofJointGetParam (joint: RID, axis: Vector3.Axis, param: PhysicsServer3D.G6DOFJointAxisParam)-> Double {
        return 0.0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _generic6dofJointSetFlag (joint: RID, axis: Vector3.Axis, flag: PhysicsServer3D.G6DOFJointAxisFlag, enable: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _generic6dofJointGetFlag (joint: RID, axis: Vector3.Axis, flag: PhysicsServer3D.G6DOFJointAxisFlag)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointGetType (joint: RID)-> PhysicsServer3D.JointType {
        return PhysicsServer3D.JointType(rawValue: 0)!
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointSetSolverPriority (joint: RID, priority: Int32) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointGetSolverPriority (joint: RID)-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointDisableCollisionsBetweenBodies (joint: RID, disable: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _jointIsDisabledCollisionsBetweenBodies (joint: RID)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _freeRid (_ rid: RID) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _setActive (_ active: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _init () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _step (_ step: Double) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _sync () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _flushQueries () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _endSync () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _finish () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _isFlushingQueries ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getProcessInfo (_ processInfo: PhysicsServer3D.ProcessInfo)-> Int32 {
        return 0
    }
    
    fileprivate static var method_body_test_motion_is_excluding_body: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_test_motion_is_excluding_body")
        return withUnsafePointer (to: &PhysicsServer3DExtension.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// 
    public final func bodyTestMotionIsExcludingBody (_ body: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3DExtension.method_body_test_motion_is_excluding_body, UnsafeMutableRawPointer (mutating: handle), &_result, &body.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &body.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3DExtension.method_body_test_motion_is_excluding_body, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_body_test_motion_is_excluding_object: GDExtensionMethodBindPtr = {
        let methodName = StringName ("body_test_motion_is_excluding_object")
        return withUnsafePointer (to: &PhysicsServer3DExtension.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// 
    public final func bodyTestMotionIsExcludingObject (_ object: UInt)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_object = object
        
        gi.object_method_bind_ptrcall_v (PhysicsServer3DExtension.method_body_test_motion_is_excluding_object, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_object)
        return _result
        #else
        
        var copy_object = object
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_object) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsServer3DExtension.method_body_test_motion_is_excluding_object, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_area_add_shape":
                return _PhysicsServer3DExtension_proxy_area_add_shape
            case "_area_attach_object_instance_id":
                return _PhysicsServer3DExtension_proxy_area_attach_object_instance_id
            case "_area_clear_shapes":
                return _PhysicsServer3DExtension_proxy_area_clear_shapes
            case "_area_create":
                return _PhysicsServer3DExtension_proxy_area_create
            case "_area_get_collision_layer":
                return _PhysicsServer3DExtension_proxy_area_get_collision_layer
            case "_area_get_collision_mask":
                return _PhysicsServer3DExtension_proxy_area_get_collision_mask
            case "_area_get_object_instance_id":
                return _PhysicsServer3DExtension_proxy_area_get_object_instance_id
            case "_area_get_param":
                return _PhysicsServer3DExtension_proxy_area_get_param
            case "_area_get_shape":
                return _PhysicsServer3DExtension_proxy_area_get_shape
            case "_area_get_shape_count":
                return _PhysicsServer3DExtension_proxy_area_get_shape_count
            case "_area_get_shape_transform":
                return _PhysicsServer3DExtension_proxy_area_get_shape_transform
            case "_area_get_space":
                return _PhysicsServer3DExtension_proxy_area_get_space
            case "_area_get_transform":
                return _PhysicsServer3DExtension_proxy_area_get_transform
            case "_area_remove_shape":
                return _PhysicsServer3DExtension_proxy_area_remove_shape
            case "_area_set_area_monitor_callback":
                return _PhysicsServer3DExtension_proxy_area_set_area_monitor_callback
            case "_area_set_collision_layer":
                return _PhysicsServer3DExtension_proxy_area_set_collision_layer
            case "_area_set_collision_mask":
                return _PhysicsServer3DExtension_proxy_area_set_collision_mask
            case "_area_set_monitor_callback":
                return _PhysicsServer3DExtension_proxy_area_set_monitor_callback
            case "_area_set_monitorable":
                return _PhysicsServer3DExtension_proxy_area_set_monitorable
            case "_area_set_param":
                return _PhysicsServer3DExtension_proxy_area_set_param
            case "_area_set_ray_pickable":
                return _PhysicsServer3DExtension_proxy_area_set_ray_pickable
            case "_area_set_shape":
                return _PhysicsServer3DExtension_proxy_area_set_shape
            case "_area_set_shape_disabled":
                return _PhysicsServer3DExtension_proxy_area_set_shape_disabled
            case "_area_set_shape_transform":
                return _PhysicsServer3DExtension_proxy_area_set_shape_transform
            case "_area_set_space":
                return _PhysicsServer3DExtension_proxy_area_set_space
            case "_area_set_transform":
                return _PhysicsServer3DExtension_proxy_area_set_transform
            case "_body_add_collision_exception":
                return _PhysicsServer3DExtension_proxy_body_add_collision_exception
            case "_body_add_constant_central_force":
                return _PhysicsServer3DExtension_proxy_body_add_constant_central_force
            case "_body_add_constant_force":
                return _PhysicsServer3DExtension_proxy_body_add_constant_force
            case "_body_add_constant_torque":
                return _PhysicsServer3DExtension_proxy_body_add_constant_torque
            case "_body_add_shape":
                return _PhysicsServer3DExtension_proxy_body_add_shape
            case "_body_apply_central_force":
                return _PhysicsServer3DExtension_proxy_body_apply_central_force
            case "_body_apply_central_impulse":
                return _PhysicsServer3DExtension_proxy_body_apply_central_impulse
            case "_body_apply_force":
                return _PhysicsServer3DExtension_proxy_body_apply_force
            case "_body_apply_impulse":
                return _PhysicsServer3DExtension_proxy_body_apply_impulse
            case "_body_apply_torque":
                return _PhysicsServer3DExtension_proxy_body_apply_torque
            case "_body_apply_torque_impulse":
                return _PhysicsServer3DExtension_proxy_body_apply_torque_impulse
            case "_body_attach_object_instance_id":
                return _PhysicsServer3DExtension_proxy_body_attach_object_instance_id
            case "_body_clear_shapes":
                return _PhysicsServer3DExtension_proxy_body_clear_shapes
            case "_body_create":
                return _PhysicsServer3DExtension_proxy_body_create
            case "_body_get_collision_exceptions":
                return _PhysicsServer3DExtension_proxy_body_get_collision_exceptions
            case "_body_get_collision_layer":
                return _PhysicsServer3DExtension_proxy_body_get_collision_layer
            case "_body_get_collision_mask":
                return _PhysicsServer3DExtension_proxy_body_get_collision_mask
            case "_body_get_collision_priority":
                return _PhysicsServer3DExtension_proxy_body_get_collision_priority
            case "_body_get_constant_force":
                return _PhysicsServer3DExtension_proxy_body_get_constant_force
            case "_body_get_constant_torque":
                return _PhysicsServer3DExtension_proxy_body_get_constant_torque
            case "_body_get_contacts_reported_depth_threshold":
                return _PhysicsServer3DExtension_proxy_body_get_contacts_reported_depth_threshold
            case "_body_get_direct_state":
                return _PhysicsServer3DExtension_proxy_body_get_direct_state
            case "_body_get_max_contacts_reported":
                return _PhysicsServer3DExtension_proxy_body_get_max_contacts_reported
            case "_body_get_mode":
                return _PhysicsServer3DExtension_proxy_body_get_mode
            case "_body_get_object_instance_id":
                return _PhysicsServer3DExtension_proxy_body_get_object_instance_id
            case "_body_get_param":
                return _PhysicsServer3DExtension_proxy_body_get_param
            case "_body_get_shape":
                return _PhysicsServer3DExtension_proxy_body_get_shape
            case "_body_get_shape_count":
                return _PhysicsServer3DExtension_proxy_body_get_shape_count
            case "_body_get_shape_transform":
                return _PhysicsServer3DExtension_proxy_body_get_shape_transform
            case "_body_get_space":
                return _PhysicsServer3DExtension_proxy_body_get_space
            case "_body_get_state":
                return _PhysicsServer3DExtension_proxy_body_get_state
            case "_body_get_user_flags":
                return _PhysicsServer3DExtension_proxy_body_get_user_flags
            case "_body_is_axis_locked":
                return _PhysicsServer3DExtension_proxy_body_is_axis_locked
            case "_body_is_continuous_collision_detection_enabled":
                return _PhysicsServer3DExtension_proxy_body_is_continuous_collision_detection_enabled
            case "_body_is_omitting_force_integration":
                return _PhysicsServer3DExtension_proxy_body_is_omitting_force_integration
            case "_body_remove_collision_exception":
                return _PhysicsServer3DExtension_proxy_body_remove_collision_exception
            case "_body_remove_shape":
                return _PhysicsServer3DExtension_proxy_body_remove_shape
            case "_body_reset_mass_properties":
                return _PhysicsServer3DExtension_proxy_body_reset_mass_properties
            case "_body_set_axis_lock":
                return _PhysicsServer3DExtension_proxy_body_set_axis_lock
            case "_body_set_axis_velocity":
                return _PhysicsServer3DExtension_proxy_body_set_axis_velocity
            case "_body_set_collision_layer":
                return _PhysicsServer3DExtension_proxy_body_set_collision_layer
            case "_body_set_collision_mask":
                return _PhysicsServer3DExtension_proxy_body_set_collision_mask
            case "_body_set_collision_priority":
                return _PhysicsServer3DExtension_proxy_body_set_collision_priority
            case "_body_set_constant_force":
                return _PhysicsServer3DExtension_proxy_body_set_constant_force
            case "_body_set_constant_torque":
                return _PhysicsServer3DExtension_proxy_body_set_constant_torque
            case "_body_set_contacts_reported_depth_threshold":
                return _PhysicsServer3DExtension_proxy_body_set_contacts_reported_depth_threshold
            case "_body_set_enable_continuous_collision_detection":
                return _PhysicsServer3DExtension_proxy_body_set_enable_continuous_collision_detection
            case "_body_set_force_integration_callback":
                return _PhysicsServer3DExtension_proxy_body_set_force_integration_callback
            case "_body_set_max_contacts_reported":
                return _PhysicsServer3DExtension_proxy_body_set_max_contacts_reported
            case "_body_set_mode":
                return _PhysicsServer3DExtension_proxy_body_set_mode
            case "_body_set_omit_force_integration":
                return _PhysicsServer3DExtension_proxy_body_set_omit_force_integration
            case "_body_set_param":
                return _PhysicsServer3DExtension_proxy_body_set_param
            case "_body_set_ray_pickable":
                return _PhysicsServer3DExtension_proxy_body_set_ray_pickable
            case "_body_set_shape":
                return _PhysicsServer3DExtension_proxy_body_set_shape
            case "_body_set_shape_disabled":
                return _PhysicsServer3DExtension_proxy_body_set_shape_disabled
            case "_body_set_shape_transform":
                return _PhysicsServer3DExtension_proxy_body_set_shape_transform
            case "_body_set_space":
                return _PhysicsServer3DExtension_proxy_body_set_space
            case "_body_set_state":
                return _PhysicsServer3DExtension_proxy_body_set_state
            case "_body_set_state_sync_callback":
                return _PhysicsServer3DExtension_proxy_body_set_state_sync_callback
            case "_body_set_user_flags":
                return _PhysicsServer3DExtension_proxy_body_set_user_flags
            case "_box_shape_create":
                return _PhysicsServer3DExtension_proxy_box_shape_create
            case "_capsule_shape_create":
                return _PhysicsServer3DExtension_proxy_capsule_shape_create
            case "_concave_polygon_shape_create":
                return _PhysicsServer3DExtension_proxy_concave_polygon_shape_create
            case "_cone_twist_joint_get_param":
                return _PhysicsServer3DExtension_proxy_cone_twist_joint_get_param
            case "_cone_twist_joint_set_param":
                return _PhysicsServer3DExtension_proxy_cone_twist_joint_set_param
            case "_convex_polygon_shape_create":
                return _PhysicsServer3DExtension_proxy_convex_polygon_shape_create
            case "_custom_shape_create":
                return _PhysicsServer3DExtension_proxy_custom_shape_create
            case "_cylinder_shape_create":
                return _PhysicsServer3DExtension_proxy_cylinder_shape_create
            case "_end_sync":
                return _PhysicsServer3DExtension_proxy_end_sync
            case "_finish":
                return _PhysicsServer3DExtension_proxy_finish
            case "_flush_queries":
                return _PhysicsServer3DExtension_proxy_flush_queries
            case "_free_rid":
                return _PhysicsServer3DExtension_proxy_free_rid
            case "_generic_6dof_joint_get_flag":
                return _PhysicsServer3DExtension_proxy_generic_6dof_joint_get_flag
            case "_generic_6dof_joint_get_param":
                return _PhysicsServer3DExtension_proxy_generic_6dof_joint_get_param
            case "_generic_6dof_joint_set_flag":
                return _PhysicsServer3DExtension_proxy_generic_6dof_joint_set_flag
            case "_generic_6dof_joint_set_param":
                return _PhysicsServer3DExtension_proxy_generic_6dof_joint_set_param
            case "_get_process_info":
                return _PhysicsServer3DExtension_proxy_get_process_info
            case "_heightmap_shape_create":
                return _PhysicsServer3DExtension_proxy_heightmap_shape_create
            case "_hinge_joint_get_flag":
                return _PhysicsServer3DExtension_proxy_hinge_joint_get_flag
            case "_hinge_joint_get_param":
                return _PhysicsServer3DExtension_proxy_hinge_joint_get_param
            case "_hinge_joint_set_flag":
                return _PhysicsServer3DExtension_proxy_hinge_joint_set_flag
            case "_hinge_joint_set_param":
                return _PhysicsServer3DExtension_proxy_hinge_joint_set_param
            case "_init":
                return _PhysicsServer3DExtension_proxy_init
            case "_is_flushing_queries":
                return _PhysicsServer3DExtension_proxy_is_flushing_queries
            case "_joint_clear":
                return _PhysicsServer3DExtension_proxy_joint_clear
            case "_joint_create":
                return _PhysicsServer3DExtension_proxy_joint_create
            case "_joint_disable_collisions_between_bodies":
                return _PhysicsServer3DExtension_proxy_joint_disable_collisions_between_bodies
            case "_joint_get_solver_priority":
                return _PhysicsServer3DExtension_proxy_joint_get_solver_priority
            case "_joint_get_type":
                return _PhysicsServer3DExtension_proxy_joint_get_type
            case "_joint_is_disabled_collisions_between_bodies":
                return _PhysicsServer3DExtension_proxy_joint_is_disabled_collisions_between_bodies
            case "_joint_make_cone_twist":
                return _PhysicsServer3DExtension_proxy_joint_make_cone_twist
            case "_joint_make_generic_6dof":
                return _PhysicsServer3DExtension_proxy_joint_make_generic_6dof
            case "_joint_make_hinge":
                return _PhysicsServer3DExtension_proxy_joint_make_hinge
            case "_joint_make_hinge_simple":
                return _PhysicsServer3DExtension_proxy_joint_make_hinge_simple
            case "_joint_make_pin":
                return _PhysicsServer3DExtension_proxy_joint_make_pin
            case "_joint_make_slider":
                return _PhysicsServer3DExtension_proxy_joint_make_slider
            case "_joint_set_solver_priority":
                return _PhysicsServer3DExtension_proxy_joint_set_solver_priority
            case "_pin_joint_get_local_a":
                return _PhysicsServer3DExtension_proxy_pin_joint_get_local_a
            case "_pin_joint_get_local_b":
                return _PhysicsServer3DExtension_proxy_pin_joint_get_local_b
            case "_pin_joint_get_param":
                return _PhysicsServer3DExtension_proxy_pin_joint_get_param
            case "_pin_joint_set_local_a":
                return _PhysicsServer3DExtension_proxy_pin_joint_set_local_a
            case "_pin_joint_set_local_b":
                return _PhysicsServer3DExtension_proxy_pin_joint_set_local_b
            case "_pin_joint_set_param":
                return _PhysicsServer3DExtension_proxy_pin_joint_set_param
            case "_separation_ray_shape_create":
                return _PhysicsServer3DExtension_proxy_separation_ray_shape_create
            case "_set_active":
                return _PhysicsServer3DExtension_proxy_set_active
            case "_shape_get_custom_solver_bias":
                return _PhysicsServer3DExtension_proxy_shape_get_custom_solver_bias
            case "_shape_get_data":
                return _PhysicsServer3DExtension_proxy_shape_get_data
            case "_shape_get_margin":
                return _PhysicsServer3DExtension_proxy_shape_get_margin
            case "_shape_get_type":
                return _PhysicsServer3DExtension_proxy_shape_get_type
            case "_shape_set_custom_solver_bias":
                return _PhysicsServer3DExtension_proxy_shape_set_custom_solver_bias
            case "_shape_set_data":
                return _PhysicsServer3DExtension_proxy_shape_set_data
            case "_shape_set_margin":
                return _PhysicsServer3DExtension_proxy_shape_set_margin
            case "_slider_joint_get_param":
                return _PhysicsServer3DExtension_proxy_slider_joint_get_param
            case "_slider_joint_set_param":
                return _PhysicsServer3DExtension_proxy_slider_joint_set_param
            case "_soft_body_add_collision_exception":
                return _PhysicsServer3DExtension_proxy_soft_body_add_collision_exception
            case "_soft_body_create":
                return _PhysicsServer3DExtension_proxy_soft_body_create
            case "_soft_body_get_bounds":
                return _PhysicsServer3DExtension_proxy_soft_body_get_bounds
            case "_soft_body_get_collision_exceptions":
                return _PhysicsServer3DExtension_proxy_soft_body_get_collision_exceptions
            case "_soft_body_get_collision_layer":
                return _PhysicsServer3DExtension_proxy_soft_body_get_collision_layer
            case "_soft_body_get_collision_mask":
                return _PhysicsServer3DExtension_proxy_soft_body_get_collision_mask
            case "_soft_body_get_damping_coefficient":
                return _PhysicsServer3DExtension_proxy_soft_body_get_damping_coefficient
            case "_soft_body_get_drag_coefficient":
                return _PhysicsServer3DExtension_proxy_soft_body_get_drag_coefficient
            case "_soft_body_get_linear_stiffness":
                return _PhysicsServer3DExtension_proxy_soft_body_get_linear_stiffness
            case "_soft_body_get_point_global_position":
                return _PhysicsServer3DExtension_proxy_soft_body_get_point_global_position
            case "_soft_body_get_pressure_coefficient":
                return _PhysicsServer3DExtension_proxy_soft_body_get_pressure_coefficient
            case "_soft_body_get_simulation_precision":
                return _PhysicsServer3DExtension_proxy_soft_body_get_simulation_precision
            case "_soft_body_get_space":
                return _PhysicsServer3DExtension_proxy_soft_body_get_space
            case "_soft_body_get_state":
                return _PhysicsServer3DExtension_proxy_soft_body_get_state
            case "_soft_body_get_total_mass":
                return _PhysicsServer3DExtension_proxy_soft_body_get_total_mass
            case "_soft_body_is_point_pinned":
                return _PhysicsServer3DExtension_proxy_soft_body_is_point_pinned
            case "_soft_body_move_point":
                return _PhysicsServer3DExtension_proxy_soft_body_move_point
            case "_soft_body_pin_point":
                return _PhysicsServer3DExtension_proxy_soft_body_pin_point
            case "_soft_body_remove_all_pinned_points":
                return _PhysicsServer3DExtension_proxy_soft_body_remove_all_pinned_points
            case "_soft_body_remove_collision_exception":
                return _PhysicsServer3DExtension_proxy_soft_body_remove_collision_exception
            case "_soft_body_set_collision_layer":
                return _PhysicsServer3DExtension_proxy_soft_body_set_collision_layer
            case "_soft_body_set_collision_mask":
                return _PhysicsServer3DExtension_proxy_soft_body_set_collision_mask
            case "_soft_body_set_damping_coefficient":
                return _PhysicsServer3DExtension_proxy_soft_body_set_damping_coefficient
            case "_soft_body_set_drag_coefficient":
                return _PhysicsServer3DExtension_proxy_soft_body_set_drag_coefficient
            case "_soft_body_set_linear_stiffness":
                return _PhysicsServer3DExtension_proxy_soft_body_set_linear_stiffness
            case "_soft_body_set_mesh":
                return _PhysicsServer3DExtension_proxy_soft_body_set_mesh
            case "_soft_body_set_pressure_coefficient":
                return _PhysicsServer3DExtension_proxy_soft_body_set_pressure_coefficient
            case "_soft_body_set_ray_pickable":
                return _PhysicsServer3DExtension_proxy_soft_body_set_ray_pickable
            case "_soft_body_set_simulation_precision":
                return _PhysicsServer3DExtension_proxy_soft_body_set_simulation_precision
            case "_soft_body_set_space":
                return _PhysicsServer3DExtension_proxy_soft_body_set_space
            case "_soft_body_set_state":
                return _PhysicsServer3DExtension_proxy_soft_body_set_state
            case "_soft_body_set_total_mass":
                return _PhysicsServer3DExtension_proxy_soft_body_set_total_mass
            case "_soft_body_set_transform":
                return _PhysicsServer3DExtension_proxy_soft_body_set_transform
            case "_soft_body_update_rendering_server":
                return _PhysicsServer3DExtension_proxy_soft_body_update_rendering_server
            case "_space_create":
                return _PhysicsServer3DExtension_proxy_space_create
            case "_space_get_contact_count":
                return _PhysicsServer3DExtension_proxy_space_get_contact_count
            case "_space_get_contacts":
                return _PhysicsServer3DExtension_proxy_space_get_contacts
            case "_space_get_direct_state":
                return _PhysicsServer3DExtension_proxy_space_get_direct_state
            case "_space_get_param":
                return _PhysicsServer3DExtension_proxy_space_get_param
            case "_space_is_active":
                return _PhysicsServer3DExtension_proxy_space_is_active
            case "_space_set_active":
                return _PhysicsServer3DExtension_proxy_space_set_active
            case "_space_set_debug_contacts":
                return _PhysicsServer3DExtension_proxy_space_set_debug_contacts
            case "_space_set_param":
                return _PhysicsServer3DExtension_proxy_space_set_param
            case "_sphere_shape_create":
                return _PhysicsServer3DExtension_proxy_sphere_shape_create
            case "_step":
                return _PhysicsServer3DExtension_proxy_step
            case "_sync":
                return _PhysicsServer3DExtension_proxy_sync
            case "_world_boundary_shape_create":
                return _PhysicsServer3DExtension_proxy_world_boundary_shape_create
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _PhysicsServer3DExtension_proxy_area_add_shape (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaAddShape (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shape: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), transform: args [2]!.assumingMemoryBound (to: Transform3D.self).pointee, disabled: args [3]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_area_attach_object_instance_id (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaAttachObjectInstanceId (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), id: args [1]!.assumingMemoryBound (to: UInt.self).pointee)
}

func _PhysicsServer3DExtension_proxy_area_clear_shapes (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaClearShapes (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_area_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._areaCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_area_get_collision_layer (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._areaGetCollisionLayer (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: UInt32.self)
}

func _PhysicsServer3DExtension_proxy_area_get_collision_mask (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._areaGetCollisionMask (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: UInt32.self)
}

func _PhysicsServer3DExtension_proxy_area_get_object_instance_id (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._areaGetObjectInstanceId (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: UInt.self)
}

func _PhysicsServer3DExtension_proxy_area_get_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._areaGetParam (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.AreaParameter.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Variant
    ret.content = Variant.zero
}

func _PhysicsServer3DExtension_proxy_area_get_shape (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._areaGetShape (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_area_get_shape_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._areaGetShapeCount (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _PhysicsServer3DExtension_proxy_area_get_shape_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._areaGetShapeTransform (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret, as: Transform3D.self)
}

func _PhysicsServer3DExtension_proxy_area_get_space (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._areaGetSpace (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_area_get_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._areaGetTransform (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Transform3D.self)
}

func _PhysicsServer3DExtension_proxy_area_remove_shape (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaRemoveShape (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_area_set_area_monitor_callback (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetAreaMonitorCallback (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), callback: Callable (content: args [1]!.assumingMemoryBound (to: (Int64, Int64).self).pointee))
}

func _PhysicsServer3DExtension_proxy_area_set_collision_layer (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetCollisionLayer (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), layer: args [1]!.assumingMemoryBound (to: UInt32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_area_set_collision_mask (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetCollisionMask (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), mask: args [1]!.assumingMemoryBound (to: UInt32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_area_set_monitor_callback (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetMonitorCallback (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), callback: Callable (content: args [1]!.assumingMemoryBound (to: (Int64, Int64).self).pointee))
}

func _PhysicsServer3DExtension_proxy_area_set_monitorable (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetMonitorable (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), monitorable: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_area_set_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetParam (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.AreaParameter.self).pointee, value: args [2]!.assumingMemoryBound (to: Variant.self).pointee)
}

func _PhysicsServer3DExtension_proxy_area_set_ray_pickable (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetRayPickable (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), enable: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_area_set_shape (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetShape (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee, shape: RID (content: args [2]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_area_set_shape_disabled (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetShapeDisabled (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee, disabled: args [2]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_area_set_shape_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetShapeTransform (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee, transform: args [2]!.assumingMemoryBound (to: Transform3D.self).pointee)
}

func _PhysicsServer3DExtension_proxy_area_set_space (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetSpace (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), space: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_area_set_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._areaSetTransform (area: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), transform: args [1]!.assumingMemoryBound (to: Transform3D.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_add_collision_exception (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyAddCollisionException (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), exceptedBody: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_body_add_constant_central_force (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyAddConstantCentralForce (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), force: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_add_constant_force (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyAddConstantForce (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), force: args [1]!.assumingMemoryBound (to: Vector3.self).pointee, position: args [2]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_add_constant_torque (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyAddConstantTorque (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), torque: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_add_shape (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyAddShape (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shape: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), transform: args [2]!.assumingMemoryBound (to: Transform3D.self).pointee, disabled: args [3]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_apply_central_force (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyApplyCentralForce (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), force: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_apply_central_impulse (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyApplyCentralImpulse (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), impulse: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_apply_force (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyApplyForce (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), force: args [1]!.assumingMemoryBound (to: Vector3.self).pointee, position: args [2]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_apply_impulse (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyApplyImpulse (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), impulse: args [1]!.assumingMemoryBound (to: Vector3.self).pointee, position: args [2]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_apply_torque (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyApplyTorque (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), torque: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_apply_torque_impulse (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyApplyTorqueImpulse (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), impulse: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_attach_object_instance_id (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyAttachObjectInstanceId (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), id: args [1]!.assumingMemoryBound (to: UInt.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_clear_shapes (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyClearShapes (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_body_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_body_get_collision_exceptions (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetCollisionExceptions (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::RID
}

func _PhysicsServer3DExtension_proxy_body_get_collision_layer (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetCollisionLayer (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: UInt32.self)
}

func _PhysicsServer3DExtension_proxy_body_get_collision_mask (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetCollisionMask (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: UInt32.self)
}

func _PhysicsServer3DExtension_proxy_body_get_collision_priority (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetCollisionPriority (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_body_get_constant_force (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetConstantForce (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Vector3.self)
}

func _PhysicsServer3DExtension_proxy_body_get_constant_torque (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetConstantTorque (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Vector3.self)
}

func _PhysicsServer3DExtension_proxy_body_get_contacts_reported_depth_threshold (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetContactsReportedDepthThreshold (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_body_get_direct_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetDirectState (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // PhysicsDirectBodyState3D
}

func _PhysicsServer3DExtension_proxy_body_get_max_contacts_reported (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetMaxContactsReported (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _PhysicsServer3DExtension_proxy_body_get_mode (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetMode (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _PhysicsServer3DExtension_proxy_body_get_object_instance_id (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetObjectInstanceId (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: UInt.self)
}

func _PhysicsServer3DExtension_proxy_body_get_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetParam (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.BodyParameter.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Variant
    ret.content = Variant.zero
}

func _PhysicsServer3DExtension_proxy_body_get_shape (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetShape (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_body_get_shape_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetShapeCount (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _PhysicsServer3DExtension_proxy_body_get_shape_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetShapeTransform (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret, as: Transform3D.self)
}

func _PhysicsServer3DExtension_proxy_body_get_space (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetSpace (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_body_get_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetState (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), state: args [1]!.assumingMemoryBound (to: PhysicsServer3D.BodyState.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Variant
    ret.content = Variant.zero
}

func _PhysicsServer3DExtension_proxy_body_get_user_flags (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyGetUserFlags (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: UInt32.self)
}

func _PhysicsServer3DExtension_proxy_body_is_axis_locked (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyIsAxisLocked (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), axis: args [1]!.assumingMemoryBound (to: PhysicsServer3D.BodyAxis.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _PhysicsServer3DExtension_proxy_body_is_continuous_collision_detection_enabled (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyIsContinuousCollisionDetectionEnabled (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _PhysicsServer3DExtension_proxy_body_is_omitting_force_integration (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._bodyIsOmittingForceIntegration (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _PhysicsServer3DExtension_proxy_body_remove_collision_exception (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyRemoveCollisionException (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), exceptedBody: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_body_remove_shape (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyRemoveShape (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_reset_mass_properties (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodyResetMassProperties (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_body_set_axis_lock (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetAxisLock (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), axis: args [1]!.assumingMemoryBound (to: PhysicsServer3D.BodyAxis.self).pointee, lock: args [2]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_axis_velocity (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetAxisVelocity (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), axisVelocity: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_collision_layer (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetCollisionLayer (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), layer: args [1]!.assumingMemoryBound (to: UInt32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_collision_mask (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetCollisionMask (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), mask: args [1]!.assumingMemoryBound (to: UInt32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_collision_priority (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetCollisionPriority (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), priority: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_constant_force (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetConstantForce (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), force: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_constant_torque (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetConstantTorque (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), torque: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_contacts_reported_depth_threshold (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetContactsReportedDepthThreshold (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), threshold: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_enable_continuous_collision_detection (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetEnableContinuousCollisionDetection (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), enable: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_force_integration_callback (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetForceIntegrationCallback (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), callable: Callable (content: args [1]!.assumingMemoryBound (to: (Int64, Int64).self).pointee), userdata: args [2]!.assumingMemoryBound (to: Variant.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_max_contacts_reported (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetMaxContactsReported (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), amount: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_mode (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetMode (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), mode: args [1]!.assumingMemoryBound (to: PhysicsServer3D.BodyMode.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_omit_force_integration (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetOmitForceIntegration (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), enable: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetParam (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.BodyParameter.self).pointee, value: args [2]!.assumingMemoryBound (to: Variant.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_ray_pickable (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetRayPickable (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), enable: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_shape (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetShape (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee, shape: RID (content: args [2]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_body_set_shape_disabled (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetShapeDisabled (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee, disabled: args [2]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_shape_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetShapeTransform (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), shapeIdx: args [1]!.assumingMemoryBound (to: Int32.self).pointee, transform: args [2]!.assumingMemoryBound (to: Transform3D.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_space (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetSpace (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), space: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_body_set_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetState (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), state: args [1]!.assumingMemoryBound (to: PhysicsServer3D.BodyState.self).pointee, value: args [2]!.assumingMemoryBound (to: Variant.self).pointee)
}

func _PhysicsServer3DExtension_proxy_body_set_state_sync_callback (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetStateSyncCallback (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), callable: Callable (content: args [1]!.assumingMemoryBound (to: (Int64, Int64).self).pointee))
}

func _PhysicsServer3DExtension_proxy_body_set_user_flags (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._bodySetUserFlags (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), flags: args [1]!.assumingMemoryBound (to: UInt32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_box_shape_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._boxShapeCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_capsule_shape_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._capsuleShapeCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_concave_polygon_shape_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._concavePolygonShapeCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_cone_twist_joint_get_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._coneTwistJointGetParam (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.ConeTwistJointParam.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_cone_twist_joint_set_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._coneTwistJointSetParam (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.ConeTwistJointParam.self).pointee, value: args [2]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_convex_polygon_shape_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._convexPolygonShapeCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_custom_shape_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._customShapeCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_cylinder_shape_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._cylinderShapeCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_end_sync (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._endSync ()
}

func _PhysicsServer3DExtension_proxy_finish (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._finish ()
}

func _PhysicsServer3DExtension_proxy_flush_queries (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._flushQueries ()
}

func _PhysicsServer3DExtension_proxy_free_rid (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._freeRid (RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_generic_6dof_joint_get_flag (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._generic6dofJointGetFlag (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), axis: args [1]!.assumingMemoryBound (to: Vector3.Axis.self).pointee, flag: args [2]!.assumingMemoryBound (to: PhysicsServer3D.G6DOFJointAxisFlag.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _PhysicsServer3DExtension_proxy_generic_6dof_joint_get_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._generic6dofJointGetParam (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), axis: args [1]!.assumingMemoryBound (to: Vector3.Axis.self).pointee, param: args [2]!.assumingMemoryBound (to: PhysicsServer3D.G6DOFJointAxisParam.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_generic_6dof_joint_set_flag (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._generic6dofJointSetFlag (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), axis: args [1]!.assumingMemoryBound (to: Vector3.Axis.self).pointee, flag: args [2]!.assumingMemoryBound (to: PhysicsServer3D.G6DOFJointAxisFlag.self).pointee, enable: args [3]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_generic_6dof_joint_set_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._generic6dofJointSetParam (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), axis: args [1]!.assumingMemoryBound (to: Vector3.Axis.self).pointee, param: args [2]!.assumingMemoryBound (to: PhysicsServer3D.G6DOFJointAxisParam.self).pointee, value: args [3]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_get_process_info (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getProcessInfo (args [0]!.assumingMemoryBound (to: PhysicsServer3D.ProcessInfo.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _PhysicsServer3DExtension_proxy_heightmap_shape_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._heightmapShapeCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_hinge_joint_get_flag (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._hingeJointGetFlag (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), flag: args [1]!.assumingMemoryBound (to: PhysicsServer3D.HingeJointFlag.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _PhysicsServer3DExtension_proxy_hinge_joint_get_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._hingeJointGetParam (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.HingeJointParam.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_hinge_joint_set_flag (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._hingeJointSetFlag (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), flag: args [1]!.assumingMemoryBound (to: PhysicsServer3D.HingeJointFlag.self).pointee, enabled: args [2]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_hinge_joint_set_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._hingeJointSetParam (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.HingeJointParam.self).pointee, value: args [2]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_init (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._init ()
}

func _PhysicsServer3DExtension_proxy_is_flushing_queries (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isFlushingQueries ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _PhysicsServer3DExtension_proxy_joint_clear (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._jointClear (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_joint_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._jointCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_joint_disable_collisions_between_bodies (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._jointDisableCollisionsBetweenBodies (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), disable: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_joint_get_solver_priority (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._jointGetSolverPriority (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _PhysicsServer3DExtension_proxy_joint_get_type (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._jointGetType (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _PhysicsServer3DExtension_proxy_joint_is_disabled_collisions_between_bodies (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._jointIsDisabledCollisionsBetweenBodies (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _PhysicsServer3DExtension_proxy_joint_make_cone_twist (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._jointMakeConeTwist (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), bodyA: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), localRefA: args [2]!.assumingMemoryBound (to: Transform3D.self).pointee, bodyB: RID (content: args [3]!.assumingMemoryBound (to: Int64.self).pointee), localRefB: args [4]!.assumingMemoryBound (to: Transform3D.self).pointee)
}

func _PhysicsServer3DExtension_proxy_joint_make_generic_6dof (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._jointMakeGeneric6dof (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), bodyA: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), localRefA: args [2]!.assumingMemoryBound (to: Transform3D.self).pointee, bodyB: RID (content: args [3]!.assumingMemoryBound (to: Int64.self).pointee), localRefB: args [4]!.assumingMemoryBound (to: Transform3D.self).pointee)
}

func _PhysicsServer3DExtension_proxy_joint_make_hinge (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._jointMakeHinge (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), bodyA: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), hingeA: args [2]!.assumingMemoryBound (to: Transform3D.self).pointee, bodyB: RID (content: args [3]!.assumingMemoryBound (to: Int64.self).pointee), hingeB: args [4]!.assumingMemoryBound (to: Transform3D.self).pointee)
}

func _PhysicsServer3DExtension_proxy_joint_make_hinge_simple (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._jointMakeHingeSimple (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), bodyA: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), pivotA: args [2]!.assumingMemoryBound (to: Vector3.self).pointee, axisA: args [3]!.assumingMemoryBound (to: Vector3.self).pointee, bodyB: RID (content: args [4]!.assumingMemoryBound (to: Int64.self).pointee), pivotB: args [5]!.assumingMemoryBound (to: Vector3.self).pointee, axisB: args [6]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_joint_make_pin (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._jointMakePin (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), bodyA: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), localA: args [2]!.assumingMemoryBound (to: Vector3.self).pointee, bodyB: RID (content: args [3]!.assumingMemoryBound (to: Int64.self).pointee), localB: args [4]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_joint_make_slider (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._jointMakeSlider (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), bodyA: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee), localRefA: args [2]!.assumingMemoryBound (to: Transform3D.self).pointee, bodyB: RID (content: args [3]!.assumingMemoryBound (to: Int64.self).pointee), localRefB: args [4]!.assumingMemoryBound (to: Transform3D.self).pointee)
}

func _PhysicsServer3DExtension_proxy_joint_set_solver_priority (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._jointSetSolverPriority (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), priority: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_pin_joint_get_local_a (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._pinJointGetLocalA (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Vector3.self)
}

func _PhysicsServer3DExtension_proxy_pin_joint_get_local_b (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._pinJointGetLocalB (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Vector3.self)
}

func _PhysicsServer3DExtension_proxy_pin_joint_get_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._pinJointGetParam (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.PinJointParam.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_pin_joint_set_local_a (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._pinJointSetLocalA (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), localA: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_pin_joint_set_local_b (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._pinJointSetLocalB (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), localB: args [1]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_pin_joint_set_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._pinJointSetParam (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.PinJointParam.self).pointee, value: args [2]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_separation_ray_shape_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._separationRayShapeCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_set_active (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setActive (args [0]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_shape_get_custom_solver_bias (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapeGetCustomSolverBias (shape: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_shape_get_data (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapeGetData (shape: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Variant
    ret.content = Variant.zero
}

func _PhysicsServer3DExtension_proxy_shape_get_margin (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapeGetMargin (shape: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_shape_get_type (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._shapeGetType (shape: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _PhysicsServer3DExtension_proxy_shape_set_custom_solver_bias (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapeSetCustomSolverBias (shape: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), bias: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_shape_set_data (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapeSetData (shape: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), data: args [1]!.assumingMemoryBound (to: Variant.self).pointee)
}

func _PhysicsServer3DExtension_proxy_shape_set_margin (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._shapeSetMargin (shape: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), margin: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_slider_joint_get_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._sliderJointGetParam (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.SliderJointParam.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_slider_joint_set_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._sliderJointSetParam (joint: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.SliderJointParam.self).pointee, value: args [2]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_add_collision_exception (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodyAddCollisionException (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), bodyB: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_soft_body_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_soft_body_get_bounds (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetBounds (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: AABB.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_get_collision_exceptions (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetCollisionExceptions (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::RID
}

func _PhysicsServer3DExtension_proxy_soft_body_get_collision_layer (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetCollisionLayer (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: UInt32.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_get_collision_mask (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetCollisionMask (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: UInt32.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_get_damping_coefficient (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetDampingCoefficient (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_get_drag_coefficient (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetDragCoefficient (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_get_linear_stiffness (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetLinearStiffness (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_get_point_global_position (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetPointGlobalPosition (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pointIndex: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret, as: Vector3.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_get_pressure_coefficient (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetPressureCoefficient (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_get_simulation_precision (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetSimulationPrecision (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_get_space (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetSpace (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_soft_body_get_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetState (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), state: args [1]!.assumingMemoryBound (to: PhysicsServer3D.BodyState.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Variant
    ret.content = Variant.zero
}

func _PhysicsServer3DExtension_proxy_soft_body_get_total_mass (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyGetTotalMass (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_is_point_pinned (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._softBodyIsPointPinned (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pointIndex: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _PhysicsServer3DExtension_proxy_soft_body_move_point (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodyMovePoint (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pointIndex: args [1]!.assumingMemoryBound (to: Int32.self).pointee, globalPosition: args [2]!.assumingMemoryBound (to: Vector3.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_pin_point (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodyPinPoint (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pointIndex: args [1]!.assumingMemoryBound (to: Int32.self).pointee, pin: args [2]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_remove_all_pinned_points (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodyRemoveAllPinnedPoints (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_soft_body_remove_collision_exception (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodyRemoveCollisionException (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), bodyB: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_soft_body_set_collision_layer (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetCollisionLayer (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), layer: args [1]!.assumingMemoryBound (to: UInt32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_set_collision_mask (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetCollisionMask (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), mask: args [1]!.assumingMemoryBound (to: UInt32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_set_damping_coefficient (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetDampingCoefficient (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), dampingCoefficient: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_set_drag_coefficient (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetDragCoefficient (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), dragCoefficient: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_set_linear_stiffness (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetLinearStiffness (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), linearStiffness: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_set_mesh (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetMesh (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), mesh: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_soft_body_set_pressure_coefficient (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetPressureCoefficient (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), pressureCoefficient: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_set_ray_pickable (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetRayPickable (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), enable: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_set_simulation_precision (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetSimulationPrecision (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), simulationPrecision: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_set_space (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetSpace (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), space: RID (content: args [1]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _PhysicsServer3DExtension_proxy_soft_body_set_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetState (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), state: args [1]!.assumingMemoryBound (to: PhysicsServer3D.BodyState.self).pointee, variant: args [2]!.assumingMemoryBound (to: Variant.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_set_total_mass (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetTotalMass (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), totalMass: args [1]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_set_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._softBodySetTransform (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), transform: args [1]!.assumingMemoryBound (to: Transform3D.self).pointee)
}

func _PhysicsServer3DExtension_proxy_soft_body_update_rendering_server (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_1 = args [1]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._softBodyUpdateRenderingServer (body: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), renderingServerHandler: lookupLiveObject (handleAddress: resolved_1) as? PhysicsServer3DRenderingServerHandler ?? PhysicsServer3DRenderingServerHandler (nativeHandle: resolved_1))
}

func _PhysicsServer3DExtension_proxy_space_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._spaceCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_space_get_contact_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._spaceGetContactCount (space: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _PhysicsServer3DExtension_proxy_space_get_contacts (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._spaceGetContacts (space: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedVector3Array
    ret.content = PackedVector3Array.zero
}

func _PhysicsServer3DExtension_proxy_space_get_direct_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._spaceGetDirectState (space: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // PhysicsDirectSpaceState3D
}

func _PhysicsServer3DExtension_proxy_space_get_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._spaceGetParam (space: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.SpaceParameter.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _PhysicsServer3DExtension_proxy_space_is_active (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._spaceIsActive (space: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _PhysicsServer3DExtension_proxy_space_set_active (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._spaceSetActive (space: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), active: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _PhysicsServer3DExtension_proxy_space_set_debug_contacts (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._spaceSetDebugContacts (space: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), maxContacts: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
}

func _PhysicsServer3DExtension_proxy_space_set_param (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._spaceSetParam (space: RID (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), param: args [1]!.assumingMemoryBound (to: PhysicsServer3D.SpaceParameter.self).pointee, value: args [2]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_sphere_shape_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._sphereShapeCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

func _PhysicsServer3DExtension_proxy_step (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._step (args [0]!.assumingMemoryBound (to: Double.self).pointee)
}

func _PhysicsServer3DExtension_proxy_sync (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._sync ()
}

func _PhysicsServer3DExtension_proxy_world_boundary_shape_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<PhysicsServer3DExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._worldBoundaryShapeCreate ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // RID
    ret.content = RID.zero
}

