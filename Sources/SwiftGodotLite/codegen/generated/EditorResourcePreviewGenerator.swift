// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Custom generator of previews.
/// 
/// Custom code to generate previews. Please check `file_dialog/thumbnail_size` in ``EditorSettings`` to find out the right size to do previews at.
open class EditorResourcePreviewGenerator: RefCounted {
    override open class var godotClassName: StringName { "EditorResourcePreviewGenerator" }
    /* Methods */
    /// Returns `true` if your generator supports the resource of type `type`.
    @_documentation(visibility: public)
    open func _handles (type: String)-> Bool {
        return false
    }
    
    /// Generate a preview from a given resource with the specified size. This must always be implemented.
    /// 
    /// Returning an empty texture is an OK way to fail and let another generator take care.
    /// 
    /// Care must be taken because this function is always called from a thread (not the main thread).
    /// 
    /// `metadata` dictionary can be modified to store file-specific metadata that can be used in ``EditorResourceTooltipPlugin/_makeTooltipForPath(_:metadata:base:)`` (like image size, sample length etc.).
    /// 
    @_documentation(visibility: public)
    open func _generate (resource: Resource?, size: Vector2i, metadata: GDictionary)-> Texture2D? {
        return Texture2D ()
    }
    
    /// Generate a preview directly from a path with the specified size. Implementing this is optional, as default code will load and call ``_generate(resource:size:metadata:)``.
    /// 
    /// Returning an empty texture is an OK way to fail and let another generator take care.
    /// 
    /// Care must be taken because this function is always called from a thread (not the main thread).
    /// 
    /// `metadata` dictionary can be modified to store file-specific metadata that can be used in ``EditorResourceTooltipPlugin/_makeTooltipForPath(_:metadata:base:)`` (like image size, sample length etc.).
    /// 
    @_documentation(visibility: public)
    open func _generateFromPath (_ path: String, size: Vector2i, metadata: GDictionary)-> Texture2D? {
        return Texture2D ()
    }
    
    /// If this function returns `true`, the generator will automatically generate the small previews from the normal preview texture generated by the methods ``_generate(resource:size:metadata:)`` or ``_generateFromPath(_:size:metadata:)``.
    /// 
    /// By default, it returns `false`.
    /// 
    @_documentation(visibility: public)
    open func _generateSmallPreviewAutomatically ()-> Bool {
        return false
    }
    
    /// If this function returns `true`, the generator will call ``_generate(resource:size:metadata:)`` or ``_generateFromPath(_:size:metadata:)`` for small previews as well.
    /// 
    /// By default, it returns `false`.
    /// 
    @_documentation(visibility: public)
    open func _canGenerateSmallPreview ()-> Bool {
        return false
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_can_generate_small_preview":
                return _EditorResourcePreviewGenerator_proxy_can_generate_small_preview
            case "_generate":
                return _EditorResourcePreviewGenerator_proxy_generate
            case "_generate_from_path":
                return _EditorResourcePreviewGenerator_proxy_generate_from_path
            case "_generate_small_preview_automatically":
                return _EditorResourcePreviewGenerator_proxy_generate_small_preview_automatically
            case "_handles":
                return _EditorResourcePreviewGenerator_proxy_handles
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _EditorResourcePreviewGenerator_proxy_can_generate_small_preview (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorResourcePreviewGenerator>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._canGenerateSmallPreview ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _EditorResourcePreviewGenerator_proxy_generate (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorResourcePreviewGenerator>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._generate (resource: lookupLiveObject (handleAddress: resolved_0) as? Resource ?? Resource (nativeHandle: resolved_0), size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, metadata: GDictionary (content: args [2]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // Texture2D
}

func _EditorResourcePreviewGenerator_proxy_generate_from_path (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorResourcePreviewGenerator>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._generateFromPath (GString.stringFromGStringPtr (ptr: args [0]!) ?? "", size: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee, metadata: GDictionary (content: args [2]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // Texture2D
}

func _EditorResourcePreviewGenerator_proxy_generate_small_preview_automatically (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorResourcePreviewGenerator>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._generateSmallPreviewAutomatically ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _EditorResourcePreviewGenerator_proxy_handles (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorResourcePreviewGenerator>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._handles (type: GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

