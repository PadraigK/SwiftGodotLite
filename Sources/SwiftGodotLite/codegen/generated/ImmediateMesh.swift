// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Mesh optimized for creating geometry manually.
/// 
/// A mesh type optimized for creating geometry manually, similar to OpenGL 1.x immediate mode.
/// 
/// Here's a sample on how to generate a triangular face:
/// 
/// > Note: Generating complex geometries with ``ImmediateMesh`` is highly inefficient. Instead, it is designed to generate simple geometry that changes often.
/// 
open class ImmediateMesh: Mesh {
    override open class var godotClassName: StringName { "ImmediateMesh" }
    /* Methods */
    fileprivate static var method_surface_begin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("surface_begin")
        return withUnsafePointer (to: &ImmediateMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2794442543)!
            }
            
        }
        
    }()
    
    /// Begin a new surface.
    public final func surfaceBegin (primitive: Mesh.PrimitiveType, material: Material? = nil) {
        #if true
        
        var copy_primitive = Int64 (primitive.rawValue)
        var copy_material_handle = material?.handle
        
        gi.object_method_bind_ptrcall_v (ImmediateMesh.method_surface_begin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_primitive, &copy_material_handle)
        
        #else
        
        var copy_primitive = Int64 (primitive.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_primitive) { p0 in
            _args.append (p0)
            withUnsafePointer (to: material?.handle) { p1 in
            _args.append (material == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (ImmediateMesh.method_surface_begin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_surface_set_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("surface_set_color")
        return withUnsafePointer (to: &ImmediateMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    /// Set the color attribute that will be pushed with the next vertex.
    public final func surfaceSetColor (_ color: Color) {
        #if true
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (ImmediateMesh.method_surface_set_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ImmediateMesh.method_surface_set_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_surface_set_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("surface_set_normal")
        return withUnsafePointer (to: &ImmediateMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    /// Set the normal attribute that will be pushed with the next vertex.
    public final func surfaceSetNormal (_ normal: Vector3) {
        #if true
        
        var copy_normal = normal
        
        gi.object_method_bind_ptrcall_v (ImmediateMesh.method_surface_set_normal, UnsafeMutableRawPointer (mutating: handle), nil, &copy_normal)
        
        #else
        
        var copy_normal = normal
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_normal) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ImmediateMesh.method_surface_set_normal, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_surface_set_tangent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("surface_set_tangent")
        return withUnsafePointer (to: &ImmediateMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3505987427)!
            }
            
        }
        
    }()
    
    /// Set the tangent attribute that will be pushed with the next vertex.
    public final func surfaceSetTangent (_ tangent: Plane) {
        #if true
        
        var copy_tangent = tangent
        
        gi.object_method_bind_ptrcall_v (ImmediateMesh.method_surface_set_tangent, UnsafeMutableRawPointer (mutating: handle), nil, &copy_tangent)
        
        #else
        
        var copy_tangent = tangent
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_tangent) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ImmediateMesh.method_surface_set_tangent, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_surface_set_uv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("surface_set_uv")
        return withUnsafePointer (to: &ImmediateMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Set the UV attribute that will be pushed with the next vertex.
    public final func surfaceSetUv (_ uv: Vector2) {
        #if true
        
        var copy_uv = uv
        
        gi.object_method_bind_ptrcall_v (ImmediateMesh.method_surface_set_uv, UnsafeMutableRawPointer (mutating: handle), nil, &copy_uv)
        
        #else
        
        var copy_uv = uv
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_uv) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ImmediateMesh.method_surface_set_uv, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_surface_set_uv2: GDExtensionMethodBindPtr = {
        let methodName = StringName ("surface_set_uv2")
        return withUnsafePointer (to: &ImmediateMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Set the UV2 attribute that will be pushed with the next vertex.
    public final func surfaceSetUv2 (_ uv2: Vector2) {
        #if true
        
        var copy_uv2 = uv2
        
        gi.object_method_bind_ptrcall_v (ImmediateMesh.method_surface_set_uv2, UnsafeMutableRawPointer (mutating: handle), nil, &copy_uv2)
        
        #else
        
        var copy_uv2 = uv2
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_uv2) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ImmediateMesh.method_surface_set_uv2, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_surface_add_vertex: GDExtensionMethodBindPtr = {
        let methodName = StringName ("surface_add_vertex")
        return withUnsafePointer (to: &ImmediateMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    /// Add a 3D vertex using the current attributes previously set.
    public final func surfaceAddVertex (_ vertex: Vector3) {
        #if true
        
        var copy_vertex = vertex
        
        gi.object_method_bind_ptrcall_v (ImmediateMesh.method_surface_add_vertex, UnsafeMutableRawPointer (mutating: handle), nil, &copy_vertex)
        
        #else
        
        var copy_vertex = vertex
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_vertex) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ImmediateMesh.method_surface_add_vertex, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_surface_add_vertex_2d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("surface_add_vertex_2d")
        return withUnsafePointer (to: &ImmediateMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Add a 2D vertex using the current attributes previously set.
    public final func surfaceAddVertex2d (vertex: Vector2) {
        #if true
        
        var copy_vertex = vertex
        
        gi.object_method_bind_ptrcall_v (ImmediateMesh.method_surface_add_vertex_2d, UnsafeMutableRawPointer (mutating: handle), nil, &copy_vertex)
        
        #else
        
        var copy_vertex = vertex
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_vertex) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ImmediateMesh.method_surface_add_vertex_2d, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_surface_end: GDExtensionMethodBindPtr = {
        let methodName = StringName ("surface_end")
        return withUnsafePointer (to: &ImmediateMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// End and commit current surface. Note that surface being created will not be visible until this function is called.
    public final func surfaceEnd () {
        gi.object_method_bind_ptrcall (ImmediateMesh.method_surface_end, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_clear_surfaces: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_surfaces")
        return withUnsafePointer (to: &ImmediateMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clear all surfaces.
    public final func clearSurfaces () {
        gi.object_method_bind_ptrcall (ImmediateMesh.method_clear_surfaces, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
}

