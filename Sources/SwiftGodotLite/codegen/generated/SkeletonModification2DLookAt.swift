// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A modification that rotates a ``Bone2D`` node to look at a target.
/// 
/// This ``SkeletonModification2D`` rotates a bone to look a target. This is extremely helpful for moving character's head to look at the player, rotating a turret to look at a target, or any other case where you want to make a bone rotate towards something quickly and easily.
open class SkeletonModification2DLookAt: SkeletonModification2D {
    override open class var godotClassName: StringName { "SkeletonModification2DLookAt" }
    
    /* Properties */
    
    /// The index of the ``Bone2D`` node that the modification will operate on.
    final public var boneIndex: Int32 {
        get {
            return get_bone_index ()
        }
        
        set {
            set_bone_index (newValue)
        }
        
    }
    
    /// The ``Bone2D`` node that the modification will operate on.
    final public var bone2dNode: NodePath {
        get {
            return get_bone2d_node ()
        }
        
        set {
            set_bone2d_node (newValue)
        }
        
    }
    
    /// The NodePath to the node that is the target for the LookAt modification. This node is what the modification will rotate the ``Bone2D`` to.
    final public var targetNodepath: NodePath {
        get {
            return get_target_node ()
        }
        
        set {
            set_target_node (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_bone2d_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone2d_node")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bone2d_node (_ bone2dNodepath: NodePath) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DLookAt.method_set_bone2d_node, UnsafeMutableRawPointer (mutating: handle), nil, &bone2dNodepath.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &bone2dNodepath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_set_bone2d_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone2d_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone2d_node")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bone2d_node ()-> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_get_bone2d_node, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_bone_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone_index")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bone_index (_ boneIdx: Int32) {
        #if true
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DLookAt.method_set_bone_index, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_set_bone_index, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_index")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bone_index ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_get_bone_index, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_target_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_target_node")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_target_node (_ targetNodepath: NodePath) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DLookAt.method_set_target_node, UnsafeMutableRawPointer (mutating: handle), nil, &targetNodepath.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &targetNodepath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_set_target_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_target_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_target_node")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_target_node ()-> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_get_target_node, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_additional_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_additional_rotation")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Sets the amount of additional rotation that is to be applied after executing the modification. This allows for offsetting the results by the inputted rotation amount.
    public final func setAdditionalRotation (_ rotation: Double) {
        #if true
        
        var copy_rotation = rotation
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DLookAt.method_set_additional_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_rotation)
        
        #else
        
        var copy_rotation = rotation
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_rotation) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_set_additional_rotation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_additional_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_additional_rotation")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the amount of additional rotation that is applied after the LookAt modification executes.
    public final func getAdditionalRotation ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_get_additional_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_enable_constraint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_constraint")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// Sets whether this modification will use constraints or not. When `true`, constraints will be applied when solving the LookAt modification.
    public final func setEnableConstraint (_ enableConstraint: Bool) {
        #if true
        
        var copy_enable_constraint = enableConstraint
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DLookAt.method_set_enable_constraint, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable_constraint)
        
        #else
        
        var copy_enable_constraint = enableConstraint
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable_constraint) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_set_enable_constraint, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_constraint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_constraint")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the LookAt modification is using constraints.
    public final func getEnableConstraint ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_get_enable_constraint, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_constraint_angle_min: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constraint_angle_min")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Sets the constraint's minimum allowed angle.
    public final func setConstraintAngleMin (_ angleMin: Double) {
        #if true
        
        var copy_angle_min = angleMin
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DLookAt.method_set_constraint_angle_min, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angle_min)
        
        #else
        
        var copy_angle_min = angleMin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angle_min) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_set_constraint_angle_min, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_constraint_angle_min: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constraint_angle_min")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the constraint's minimum allowed angle.
    public final func getConstraintAngleMin ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_get_constraint_angle_min, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_constraint_angle_max: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constraint_angle_max")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    /// Sets the constraint's maximum allowed angle.
    public final func setConstraintAngleMax (_ angleMax: Double) {
        #if true
        
        var copy_angle_max = angleMax
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DLookAt.method_set_constraint_angle_max, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angle_max)
        
        #else
        
        var copy_angle_max = angleMax
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angle_max) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_set_constraint_angle_max, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_constraint_angle_max: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constraint_angle_max")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the constraint's maximum allowed angle.
    public final func getConstraintAngleMax ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_get_constraint_angle_max, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_constraint_angle_invert: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constraint_angle_invert")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// When `true`, the modification will use an inverted joint constraint.
    /// 
    /// An inverted joint constraint only constraints the ``Bone2D`` to the angles _outside of_ the inputted minimum and maximum angles. For this reason, it is referred to as an inverted joint constraint, as it constraints the joint to the outside of the inputted values.
    /// 
    public final func setConstraintAngleInvert (_ invert: Bool) {
        #if true
        
        var copy_invert = invert
        
        gi.object_method_bind_ptrcall_v (SkeletonModification2DLookAt.method_set_constraint_angle_invert, UnsafeMutableRawPointer (mutating: handle), nil, &copy_invert)
        
        #else
        
        var copy_invert = invert
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_invert) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_set_constraint_angle_invert, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_constraint_angle_invert: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constraint_angle_invert")
        return withUnsafePointer (to: &SkeletonModification2DLookAt.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns whether the constraints to this modification are inverted or not.
    public final func getConstraintAngleInvert ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (SkeletonModification2DLookAt.method_get_constraint_angle_invert, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

