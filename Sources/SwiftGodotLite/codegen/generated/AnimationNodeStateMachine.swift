// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A state machine with multiple ``AnimationRootNode``s, used by ``AnimationTree``.
/// 
/// Contains multiple ``AnimationRootNode``s representing animation states, connected in a graph. State transitions can be configured to happen automatically or via code, using a shortest-path algorithm. Retrieve the ``AnimationNodeStateMachinePlayback`` object from the ``AnimationTree`` node to control it programmatically.
/// 
/// **Example:**
/// 
open class AnimationNodeStateMachine: AnimationRootNode {
    override open class var godotClassName: StringName { "AnimationNodeStateMachine" }
    public enum StateMachineType: Int64 {
        /// Seeking to the beginning is treated as playing from the start state. Transition to the end state is treated as exiting the state machine.
        case root = 0 // STATE_MACHINE_TYPE_ROOT
        /// Seeking to the beginning is treated as seeking to the beginning of the animation in the current state. Transition to the end state, or the absence of transitions in each state, is treated as exiting the state machine.
        case nested = 1 // STATE_MACHINE_TYPE_NESTED
        /// This is a grouped state machine that can be controlled from a parent state machine. It does not work on standalone. There must be a state machine with ``stateMachineType`` of .root or .nested in the parent or ancestor.
        case grouped = 2 // STATE_MACHINE_TYPE_GROUPED
    }
    
    
    /* Properties */
    
    /// This property can define the process of transitions for different use cases. See also ``AnimationNodeStateMachine.StateMachineType``.
    final public var stateMachineType: AnimationNodeStateMachine.StateMachineType {
        get {
            return get_state_machine_type ()
        }
        
        set {
            set_state_machine_type (newValue)
        }
        
    }
    
    /// If `true`, allows teleport to the self state with ``AnimationNodeStateMachinePlayback/travel(toNode:resetOnTeleport:)``. When the reset option is enabled in ``AnimationNodeStateMachinePlayback/travel(toNode:resetOnTeleport:)``, the animation is restarted. If `false`, nothing happens on the teleportation to the self state.
    final public var allowTransitionToSelf: Bool {
        get {
            return is_allow_transition_to_self ()
        }
        
        set {
            set_allow_transition_to_self (newValue)
        }
        
    }
    
    /// If `true`, treat the cross-fade to the start and end nodes as a blend with the RESET animation.
    /// 
    /// In most cases, when additional cross-fades are performed in the parent ``AnimationNode`` of the state machine, setting this property to `false` and matching the cross-fade time of the parent ``AnimationNode`` and the state machine's start node and end node gives good results.
    /// 
    final public var resetEnds: Bool {
        get {
            return are_ends_reset ()
        }
        
        set {
            set_reset_ends (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_add_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_node")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1980270704)!
            }
            
        }
        
    }()
    
    /// Adds a new animation node to the graph. The `position` is used for display in the editor.
    public final func addNode (name: StringName, node: AnimationNode?, position: Vector2 = Vector2 (x: 0, y: 0)) {
        #if true
        
        var copy_position = position
        var copy_node_handle = node?.handle
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_add_node, UnsafeMutableRawPointer (mutating: handle), nil, &name.content, &copy_node_handle, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: node?.handle) { p1 in
            _args.append (node == nil ? nil : p1)
                withUnsafePointer (to: &copy_position) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_add_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_replace_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("replace_node")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2559412862)!
            }
            
        }
        
    }()
    
    /// 
    public final func replaceNode (name: StringName, node: AnimationNode?) {
        #if true
        
        var copy_node_handle = node?.handle
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_replace_node, UnsafeMutableRawPointer (mutating: handle), nil, &name.content, &copy_node_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: node?.handle) { p1 in
            _args.append (node == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_replace_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_node")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 625644256)!
            }
            
        }
        
    }()
    
    /// Returns the animation node with the given name.
    public final func getNode (name: StringName)-> AnimationNode? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_get_node, UnsafeMutableRawPointer (mutating: handle), &_result, &name.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_get_node, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_remove_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_node")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Deletes the given animation node from the graph.
    public final func removeNode (name: StringName) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_remove_node, UnsafeMutableRawPointer (mutating: handle), nil, &name.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_remove_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_rename_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("rename_node")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3740211285)!
            }
            
        }
        
    }()
    
    /// Renames the given animation node.
    public final func renameNode (name: StringName, newName: StringName) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_rename_node, UnsafeMutableRawPointer (mutating: handle), nil, &name.content, &newName.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &newName.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_rename_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_has_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_node")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the graph contains the given animation node.
    public final func hasNode (name: StringName)-> Bool {
        var _result: Bool = false
        #if true
        
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_has_node, UnsafeMutableRawPointer (mutating: handle), &_result, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_has_node, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_node_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_node_name")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 739213945)!
            }
            
        }
        
    }()
    
    /// Returns the given animation node's name.
    public final func getNodeName (node: AnimationNode?)-> StringName {
        let _result: StringName = StringName ()
        #if true
        
        var copy_node_handle = node?.handle
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_get_node_name, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_node_handle)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: node?.handle) { p0 in
        _args.append (node == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_get_node_name, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_node_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_node_position")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1999414630)!
            }
            
        }
        
    }()
    
    /// Sets the animation node's coordinates. Used for display in the editor.
    public final func setNodePosition (name: StringName, position: Vector2) {
        #if true
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_set_node_position, UnsafeMutableRawPointer (mutating: handle), nil, &name.content, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_set_node_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_node_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_node_position")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3100822709)!
            }
            
        }
        
    }()
    
    /// Returns the given animation node's coordinates. Used for display in the editor.
    public final func getNodePosition (name: StringName)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_get_node_position, UnsafeMutableRawPointer (mutating: handle), &_result, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_get_node_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_has_transition: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_transition")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 471820014)!
            }
            
        }
        
    }()
    
    /// Returns `true` if there is a transition between the given animation nodes.
    public final func hasTransition (from: StringName, to: StringName)-> Bool {
        var _result: Bool = false
        #if true
        
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_has_transition, UnsafeMutableRawPointer (mutating: handle), &_result, &from.content, &to.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &from.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &to.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_has_transition, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_transition: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_transition")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 795486887)!
            }
            
        }
        
    }()
    
    /// Adds a transition between the given animation nodes.
    public final func addTransition (from: StringName, to: StringName, transition: AnimationNodeStateMachineTransition?) {
        #if true
        
        var copy_transition_handle = transition?.handle
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_add_transition, UnsafeMutableRawPointer (mutating: handle), nil, &from.content, &to.content, &copy_transition_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &from.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &to.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: transition?.handle) { p2 in
                _args.append (transition == nil ? nil : p2)
        
                    gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_add_transition, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_transition: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transition")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4192381260)!
            }
            
        }
        
    }()
    
    /// Returns the given transition.
    public final func getTransition (idx: Int32)-> AnimationNodeStateMachineTransition? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_get_transition, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_get_transition, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_transition_from: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transition_from")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 659327637)!
            }
            
        }
        
    }()
    
    /// Returns the given transition's start node.
    public final func getTransitionFrom (idx: Int32)-> StringName {
        let _result: StringName = StringName ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_get_transition_from, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_get_transition_from, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_transition_to: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transition_to")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 659327637)!
            }
            
        }
        
    }()
    
    /// Returns the given transition's end node.
    public final func getTransitionTo (idx: Int32)-> StringName {
        let _result: StringName = StringName ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_get_transition_to, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_idx)
        return _result
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_get_transition_to, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_transition_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transition_count")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of connections in the graph.
    public final func getTransitionCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_get_transition_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_remove_transition_by_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_transition_by_index")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Deletes the given transition by index.
    public final func removeTransitionByIndex (idx: Int32) {
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_remove_transition_by_index, UnsafeMutableRawPointer (mutating: handle), nil, &copy_idx)
        
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_remove_transition_by_index, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_transition: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_transition")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3740211285)!
            }
            
        }
        
    }()
    
    /// Deletes the transition between the two specified animation nodes.
    public final func removeTransition (from: StringName, to: StringName) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_remove_transition, UnsafeMutableRawPointer (mutating: handle), nil, &from.content, &to.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &from.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &to.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_remove_transition, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_graph_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_graph_offset")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    /// Sets the draw offset of the graph. Used for display in the editor.
    public final func setGraphOffset (_ offset: Vector2) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_set_graph_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_set_graph_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_graph_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_graph_offset")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    /// Returns the draw offset of the graph. Used for display in the editor.
    public final func getGraphOffset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_get_graph_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_state_machine_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_state_machine_type")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2584759088)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_state_machine_type (_ stateMachineType: AnimationNodeStateMachine.StateMachineType) {
        #if true
        
        var copy_state_machine_type = Int64 (stateMachineType.rawValue)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_set_state_machine_type, UnsafeMutableRawPointer (mutating: handle), nil, &copy_state_machine_type)
        
        #else
        
        var copy_state_machine_type = Int64 (stateMachineType.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_state_machine_type) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_set_state_machine_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_state_machine_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_state_machine_type")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1140726469)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_state_machine_type ()-> AnimationNodeStateMachine.StateMachineType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_get_state_machine_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AnimationNodeStateMachine.StateMachineType (rawValue: _result)!
    }
    
    fileprivate static var method_set_allow_transition_to_self: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_allow_transition_to_self")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_allow_transition_to_self (_ enable: Bool) {
        #if true
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_set_allow_transition_to_self, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_set_allow_transition_to_self, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_allow_transition_to_self: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_allow_transition_to_self")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_allow_transition_to_self ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_is_allow_transition_to_self, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_reset_ends: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_reset_ends")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_reset_ends (_ enable: Bool) {
        #if true
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (AnimationNodeStateMachine.method_set_reset_ends, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_set_reset_ends, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_are_ends_reset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("are_ends_reset")
        return withUnsafePointer (to: &AnimationNodeStateMachine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func are_ends_reset ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (AnimationNodeStateMachine.method_are_ends_reset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

