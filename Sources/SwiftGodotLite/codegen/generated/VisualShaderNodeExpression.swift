// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A custom visual shader graph expression written in Godot Shading Language.
/// 
/// Custom Godot Shading Language expression, with a custom number of input and output ports.
/// 
/// The provided code is directly injected into the graph's matching shader function (`vertex`, `fragment`, or `light`), so it cannot be used to declare functions, varyings, uniforms, or global constants. See ``VisualShaderNodeGlobalExpression`` for such global definitions.
/// 
open class VisualShaderNodeExpression: VisualShaderNodeGroupBase {
    override open class var godotClassName: StringName { "VisualShaderNodeExpression" }
    
    /* Properties */
    
    /// An expression in Godot Shading Language, which will be injected at the start of the graph's matching shader function (`vertex`, `fragment`, or `light`), and thus cannot be used to declare functions, varyings, uniforms, or global constants.
    final public var expression: String {
        get {
            return get_expression ()
        }
        
        set {
            set_expression (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_expression: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_expression")
        return withUnsafePointer (to: &VisualShaderNodeExpression.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_expression (_ expression: String) {
        #if true
        
        let gstr_expression = GString (expression)
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeExpression.method_set_expression, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_expression.content)
        
        #else
        
        let gstr_expression = GString (expression)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_expression.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeExpression.method_set_expression, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_expression: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_expression")
        return withUnsafePointer (to: &VisualShaderNodeExpression.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_expression ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (VisualShaderNodeExpression.method_get_expression, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
}

