// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Button for touch screen devices for gameplay use.
/// 
/// TouchScreenButton allows you to create on-screen buttons for touch devices. It's intended for gameplay use, such as a unit you have to touch to move. Unlike ``Button``, TouchScreenButton supports multitouch out of the box. Several TouchScreenButtons can be pressed at the same time with touch input.
/// 
/// This node inherits from ``Node2D``. Unlike with ``Control`` nodes, you cannot set anchors on it. If you want to create menus or user interfaces, you may want to use ``Button`` nodes instead. To make button nodes react to touch events, you can enable the Emulate Mouse option in the Project Settings.
/// 
/// You can configure TouchScreenButton to be visible only on touch devices, helping you develop your game both for desktop and mobile devices.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``pressed``
/// - ``released``
open class TouchScreenButton: Node2D {
    override open class var godotClassName: StringName { "TouchScreenButton" }
    public enum VisibilityMode: Int64 {
        /// Always visible.
        case always = 0 // VISIBILITY_ALWAYS
        /// Visible on touch screens only.
        case touchscreenOnly = 1 // VISIBILITY_TOUCHSCREEN_ONLY
    }
    
    
    /* Properties */
    
    /// The button's texture for the normal state.
    final public var textureNormal: Texture2D? {
        get {
            return get_texture_normal ()
        }
        
        set {
            set_texture_normal (newValue)
        }
        
    }
    
    /// The button's texture for the pressed state.
    final public var texturePressed: Texture2D? {
        get {
            return get_texture_pressed ()
        }
        
        set {
            set_texture_pressed (newValue)
        }
        
    }
    
    /// The button's bitmask.
    final public var bitmask: BitMap? {
        get {
            return get_bitmask ()
        }
        
        set {
            set_bitmask (newValue)
        }
        
    }
    
    /// The button's shape.
    final public var shape: Shape2D? {
        get {
            return get_shape ()
        }
        
        set {
            set_shape (newValue)
        }
        
    }
    
    /// If `true`, the button's shape is centered in the provided texture. If no texture is used, this property has no effect.
    final public var shapeCentered: Bool {
        get {
            return is_shape_centered ()
        }
        
        set {
            set_shape_centered (newValue)
        }
        
    }
    
    /// If `true`, the button's shape is visible in the editor.
    final public var shapeVisible: Bool {
        get {
            return is_shape_visible ()
        }
        
        set {
            set_shape_visible (newValue)
        }
        
    }
    
    /// If `true`, the [signal pressed] and [signal released] signals are emitted whenever a pressed finger goes in and out of the button, even if the pressure started outside the active area of the button.
    /// 
    /// > Note: This is a "pass-by" (not "bypass") press mode.
    /// 
    final public var passbyPress: Bool {
        get {
            return is_passby_press_enabled ()
        }
        
        set {
            set_passby_press (newValue)
        }
        
    }
    
    /// The button's action. Actions can be handled with ``InputEventAction``.
    final public var action: String {
        get {
            return get_action ()
        }
        
        set {
            set_action (newValue)
        }
        
    }
    
    /// The button's visibility mode. See ``TouchScreenButton/VisibilityMode`` for possible values.
    final public var visibilityMode: TouchScreenButton.VisibilityMode {
        get {
            return get_visibility_mode ()
        }
        
        set {
            set_visibility_mode (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_texture_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_normal")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_normal (_ texture: Texture2D?) {
        #if true
        
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (TouchScreenButton.method_set_texture_normal, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: texture?.handle) { p0 in
        _args.append (texture == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TouchScreenButton.method_set_texture_normal, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_normal")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_normal ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TouchScreenButton.method_get_texture_normal, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_texture_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_pressed")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_pressed (_ texture: Texture2D?) {
        #if true
        
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (TouchScreenButton.method_set_texture_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: texture?.handle) { p0 in
        _args.append (texture == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TouchScreenButton.method_set_texture_pressed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_pressed")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_pressed ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TouchScreenButton.method_get_texture_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_bitmask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bitmask")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 698588216)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bitmask (_ bitmask: BitMap?) {
        #if true
        
        var copy_bitmask_handle = bitmask?.handle
        
        gi.object_method_bind_ptrcall_v (TouchScreenButton.method_set_bitmask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bitmask_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: bitmask?.handle) { p0 in
        _args.append (bitmask == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TouchScreenButton.method_set_bitmask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bitmask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bitmask")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2459671998)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bitmask ()-> BitMap? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TouchScreenButton.method_get_bitmask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shape")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 771364740)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shape (_ shape: Shape2D?) {
        #if true
        
        var copy_shape_handle = shape?.handle
        
        gi.object_method_bind_ptrcall_v (TouchScreenButton.method_set_shape, UnsafeMutableRawPointer (mutating: handle), nil, &copy_shape_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: shape?.handle) { p0 in
        _args.append (shape == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TouchScreenButton.method_set_shape, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shape")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 522005891)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shape ()-> Shape2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TouchScreenButton.method_get_shape, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_shape_centered: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shape_centered")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shape_centered (_ bool: Bool) {
        #if true
        
        var copy_bool = bool
        
        gi.object_method_bind_ptrcall_v (TouchScreenButton.method_set_shape_centered, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bool)
        
        #else
        
        var copy_bool = bool
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bool) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TouchScreenButton.method_set_shape_centered, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_shape_centered: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_shape_centered")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_shape_centered ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TouchScreenButton.method_is_shape_centered, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shape_visible: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shape_visible")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shape_visible (_ bool: Bool) {
        #if true
        
        var copy_bool = bool
        
        gi.object_method_bind_ptrcall_v (TouchScreenButton.method_set_shape_visible, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bool)
        
        #else
        
        var copy_bool = bool
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bool) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TouchScreenButton.method_set_shape_visible, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_shape_visible: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_shape_visible")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_shape_visible ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TouchScreenButton.method_is_shape_visible, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_action: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_action")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_action (_ action: String) {
        #if true
        
        let gstr_action = GString (action)
        
        gi.object_method_bind_ptrcall_v (TouchScreenButton.method_set_action, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_action.content)
        
        #else
        
        let gstr_action = GString (action)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_action.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TouchScreenButton.method_set_action, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_action: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_action")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_action ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (TouchScreenButton.method_get_action, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_visibility_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_visibility_mode")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3031128463)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_visibility_mode (_ mode: TouchScreenButton.VisibilityMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (TouchScreenButton.method_set_visibility_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TouchScreenButton.method_set_visibility_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_visibility_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_visibility_mode")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2558996468)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_visibility_mode ()-> TouchScreenButton.VisibilityMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TouchScreenButton.method_get_visibility_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TouchScreenButton.VisibilityMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_passby_press: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_passby_press")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_passby_press (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (TouchScreenButton.method_set_passby_press, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TouchScreenButton.method_set_passby_press, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_passby_press_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_passby_press_enabled")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_passby_press_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TouchScreenButton.method_is_passby_press_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_pressed")
        return withUnsafePointer (to: &TouchScreenButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if this button is currently pressed.
    public final func isPressed ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TouchScreenButton.method_is_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when the button is pressed (down).
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.pressed.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var pressed: SimpleSignal { SimpleSignal (target: self, signalName: "pressed") }
    
    /// Emitted when the button is released (up).
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.released.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var released: SimpleSignal { SimpleSignal (target: self, signalName: "released") }
    
}

