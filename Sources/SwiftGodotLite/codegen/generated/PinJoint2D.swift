// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A physics joint that attaches two 2D physics bodies at a single point, allowing them to freely rotate.
/// 
/// A physics joint that attaches two 2D physics bodies at a single point, allowing them to freely rotate. For example, a ``RigidBody2D`` can be attached to a ``StaticBody2D`` to create a pendulum or a seesaw.
open class PinJoint2D: Joint2D {
    override open class var godotClassName: StringName { "PinJoint2D" }
    
    /* Properties */
    
    /// The higher this value, the more the bond to the pinned partner can flex.
    final public var softness: Double {
        get {
            return get_softness ()
        }
        
        set {
            set_softness (newValue)
        }
        
    }
    
    /// If `true`, the pin maximum and minimum rotation, defined by ``angularLimitLower`` and ``angularLimitUpper`` are applied.
    final public var angularLimitEnabled: Bool {
        get {
            return is_angular_limit_enabled ()
        }
        
        set {
            set_angular_limit_enabled (newValue)
        }
        
    }
    
    /// The minimum rotation. Only active if ``angularLimitEnabled`` is `true`.
    final public var angularLimitLower: Double {
        get {
            return get_angular_limit_lower ()
        }
        
        set {
            set_angular_limit_lower (newValue)
        }
        
    }
    
    /// The maximum rotation. Only active if ``angularLimitEnabled`` is `true`.
    final public var angularLimitUpper: Double {
        get {
            return get_angular_limit_upper ()
        }
        
        set {
            set_angular_limit_upper (newValue)
        }
        
    }
    
    /// When activated, a motor turns the pin.
    final public var motorEnabled: Bool {
        get {
            return is_motor_enabled ()
        }
        
        set {
            set_motor_enabled (newValue)
        }
        
    }
    
    /// Target speed for the motor. In radians per second.
    final public var motorTargetVelocity: Double {
        get {
            return get_motor_target_velocity ()
        }
        
        set {
            set_motor_target_velocity (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_softness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_softness")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_softness (_ softness: Double) {
        #if true
        
        var copy_softness = softness
        
        gi.object_method_bind_ptrcall_v (PinJoint2D.method_set_softness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_softness)
        
        #else
        
        var copy_softness = softness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_softness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PinJoint2D.method_set_softness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_softness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_softness")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_softness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PinJoint2D.method_get_softness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_limit_lower: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_limit_lower")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_limit_lower (_ angularLimitLower: Double) {
        #if true
        
        var copy_angular_limit_lower = angularLimitLower
        
        gi.object_method_bind_ptrcall_v (PinJoint2D.method_set_angular_limit_lower, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angular_limit_lower)
        
        #else
        
        var copy_angular_limit_lower = angularLimitLower
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angular_limit_lower) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PinJoint2D.method_set_angular_limit_lower, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_limit_lower: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_limit_lower")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_limit_lower ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PinJoint2D.method_get_angular_limit_lower, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_limit_upper: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_limit_upper")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_limit_upper (_ angularLimitUpper: Double) {
        #if true
        
        var copy_angular_limit_upper = angularLimitUpper
        
        gi.object_method_bind_ptrcall_v (PinJoint2D.method_set_angular_limit_upper, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angular_limit_upper)
        
        #else
        
        var copy_angular_limit_upper = angularLimitUpper
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angular_limit_upper) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PinJoint2D.method_set_angular_limit_upper, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_limit_upper: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_limit_upper")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_limit_upper ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PinJoint2D.method_get_angular_limit_upper, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_motor_target_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_motor_target_velocity")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_motor_target_velocity (_ motorTargetVelocity: Double) {
        #if true
        
        var copy_motor_target_velocity = motorTargetVelocity
        
        gi.object_method_bind_ptrcall_v (PinJoint2D.method_set_motor_target_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_motor_target_velocity)
        
        #else
        
        var copy_motor_target_velocity = motorTargetVelocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_motor_target_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PinJoint2D.method_set_motor_target_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_motor_target_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_motor_target_velocity")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_motor_target_velocity ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PinJoint2D.method_get_motor_target_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_motor_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_motor_enabled")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_motor_enabled (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (PinJoint2D.method_set_motor_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PinJoint2D.method_set_motor_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_motor_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_motor_enabled")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_motor_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PinJoint2D.method_is_motor_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_limit_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_limit_enabled")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_limit_enabled (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (PinJoint2D.method_set_angular_limit_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PinJoint2D.method_set_angular_limit_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_angular_limit_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_angular_limit_enabled")
        return withUnsafePointer (to: &PinJoint2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_angular_limit_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PinJoint2D.method_is_angular_limit_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

