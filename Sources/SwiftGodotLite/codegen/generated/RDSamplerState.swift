// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Sampler state (used by ``RenderingDevice``).
/// 
/// This object is used by ``RenderingDevice``.
open class RDSamplerState: RefCounted {
    override open class var godotClassName: StringName { "RDSamplerState" }
    
    /* Properties */
    
    /// The sampler's magnification filter.
    final public var magFilter: RenderingDevice.SamplerFilter {
        get {
            return get_mag_filter ()
        }
        
        set {
            set_mag_filter (newValue)
        }
        
    }
    
    final public var minFilter: RenderingDevice.SamplerFilter {
        get {
            return get_min_filter ()
        }
        
        set {
            set_min_filter (newValue)
        }
        
    }
    
    /// The filtering method to use for mipmaps.
    final public var mipFilter: RenderingDevice.SamplerFilter {
        get {
            return get_mip_filter ()
        }
        
        set {
            set_mip_filter (newValue)
        }
        
    }
    
    /// The repeat mode to use along the U axis of UV coordinates. This affects the returned values if sampling outside the UV bounds.
    final public var repeatU: RenderingDevice.SamplerRepeatMode {
        get {
            return get_repeat_u ()
        }
        
        set {
            set_repeat_u (newValue)
        }
        
    }
    
    /// The repeat mode to use along the V axis of UV coordinates. This affects the returned values if sampling outside the UV bounds.
    final public var repeatV: RenderingDevice.SamplerRepeatMode {
        get {
            return get_repeat_v ()
        }
        
        set {
            set_repeat_v (newValue)
        }
        
    }
    
    /// The repeat mode to use along the W axis of UV coordinates. This affects the returned values if sampling outside the UV bounds. Only effective for 3D samplers.
    final public var repeatW: RenderingDevice.SamplerRepeatMode {
        get {
            return get_repeat_w ()
        }
        
        set {
            set_repeat_w (newValue)
        }
        
    }
    
    /// The mipmap LOD bias to use. Positive values will make the sampler blurrier at a given distance, while negative values will make the sampler sharper at a given distance (at the risk of looking grainy). Recommended values are between `-0.5` and `0.0`. Only effective if the sampler has mipmaps available.
    final public var lodBias: Double {
        get {
            return get_lod_bias ()
        }
        
        set {
            set_lod_bias (newValue)
        }
        
    }
    
    /// If `true`, perform anisotropic sampling. See ``anisotropyMax``.
    final public var useAnisotropy: Bool {
        get {
            return get_use_anisotropy ()
        }
        
        set {
            set_use_anisotropy (newValue)
        }
        
    }
    
    /// Maximum anisotropy that can be used when sampling. Only effective if ``useAnisotropy`` is `true`. Higher values result in a sharper sampler at oblique angles, at the cost of performance (due to memory bandwidth). This value may be limited by the graphics hardware in use. Most graphics hardware only supports values up to `16.0`.
    /// 
    /// If ``anisotropyMax`` is `1.0`, forcibly disables anisotropy even if ``useAnisotropy`` is `true`.
    /// 
    final public var anisotropyMax: Double {
        get {
            return get_anisotropy_max ()
        }
        
        set {
            set_anisotropy_max (newValue)
        }
        
    }
    
    /// If `true`, returned values will be based on the comparison operation defined in ``compareOp``. This is a hardware-based approach and is therefore faster than performing this manually in a shader. For example, compare operations are used for shadow map rendering by comparing depth values from a shadow sampler.
    final public var enableCompare: Bool {
        get {
            return get_enable_compare ()
        }
        
        set {
            set_enable_compare (newValue)
        }
        
    }
    
    /// The compare operation to use. Only effective if ``enableCompare`` is `true`.
    final public var compareOp: RenderingDevice.CompareOperator {
        get {
            return get_compare_op ()
        }
        
        set {
            set_compare_op (newValue)
        }
        
    }
    
    /// The minimum mipmap LOD bias to display (highest resolution). Only effective if the sampler has mipmaps available.
    final public var minLod: Double {
        get {
            return get_min_lod ()
        }
        
        set {
            set_min_lod (newValue)
        }
        
    }
    
    /// The maximum mipmap LOD bias to display (lowest resolution). Only effective if the sampler has mipmaps available.
    final public var maxLod: Double {
        get {
            return get_max_lod ()
        }
        
        set {
            set_max_lod (newValue)
        }
        
    }
    
    /// The border color that will be returned when sampling outside the sampler's bounds and the ``repeatU``, ``repeatV`` or ``repeatW`` modes have repeating disabled.
    final public var borderColor: RenderingDevice.SamplerBorderColor {
        get {
            return get_border_color ()
        }
        
        set {
            set_border_color (newValue)
        }
        
    }
    
    final public var unnormalizedUvw: Bool {
        get {
            return get_unnormalized_uvw ()
        }
        
        set {
            set_unnormalized_uvw (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_mag_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mag_filter")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1493420382)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mag_filter (_ pMember: RenderingDevice.SamplerFilter) {
        #if true
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_mag_filter, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_mag_filter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mag_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mag_filter")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2209202801)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mag_filter ()-> RenderingDevice.SamplerFilter {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_mag_filter, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.SamplerFilter (rawValue: _result)!
    }
    
    fileprivate static var method_set_min_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_min_filter")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1493420382)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_min_filter (_ pMember: RenderingDevice.SamplerFilter) {
        #if true
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_min_filter, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_min_filter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_min_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_min_filter")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2209202801)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_min_filter ()-> RenderingDevice.SamplerFilter {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_min_filter, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.SamplerFilter (rawValue: _result)!
    }
    
    fileprivate static var method_set_mip_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mip_filter")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1493420382)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mip_filter (_ pMember: RenderingDevice.SamplerFilter) {
        #if true
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_mip_filter, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_mip_filter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mip_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mip_filter")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2209202801)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mip_filter ()-> RenderingDevice.SamplerFilter {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_mip_filter, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.SamplerFilter (rawValue: _result)!
    }
    
    fileprivate static var method_set_repeat_u: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_repeat_u")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 246127626)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_repeat_u (_ pMember: RenderingDevice.SamplerRepeatMode) {
        #if true
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_repeat_u, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_repeat_u, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_repeat_u: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_repeat_u")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227895872)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_repeat_u ()-> RenderingDevice.SamplerRepeatMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_repeat_u, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.SamplerRepeatMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_repeat_v: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_repeat_v")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 246127626)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_repeat_v (_ pMember: RenderingDevice.SamplerRepeatMode) {
        #if true
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_repeat_v, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_repeat_v, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_repeat_v: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_repeat_v")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227895872)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_repeat_v ()-> RenderingDevice.SamplerRepeatMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_repeat_v, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.SamplerRepeatMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_repeat_w: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_repeat_w")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 246127626)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_repeat_w (_ pMember: RenderingDevice.SamplerRepeatMode) {
        #if true
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_repeat_w, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_repeat_w, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_repeat_w: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_repeat_w")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227895872)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_repeat_w ()-> RenderingDevice.SamplerRepeatMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_repeat_w, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.SamplerRepeatMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_lod_bias: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_lod_bias")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_lod_bias (_ pMember: Double) {
        #if true
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_lod_bias, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_lod_bias, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_lod_bias: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_lod_bias")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_lod_bias ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_lod_bias, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_use_anisotropy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_anisotropy")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_anisotropy (_ pMember: Bool) {
        #if true
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_use_anisotropy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_use_anisotropy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_use_anisotropy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_use_anisotropy")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_use_anisotropy ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_use_anisotropy, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_anisotropy_max: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_anisotropy_max")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_anisotropy_max (_ pMember: Double) {
        #if true
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_anisotropy_max, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_anisotropy_max, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_anisotropy_max: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_anisotropy_max")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_anisotropy_max ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_anisotropy_max, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_enable_compare: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_compare")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_compare (_ pMember: Bool) {
        #if true
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_enable_compare, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_enable_compare, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_compare: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_compare")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_compare ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_enable_compare, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_compare_op: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_compare_op")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2573711505)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_compare_op (_ pMember: RenderingDevice.CompareOperator) {
        #if true
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_compare_op, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_compare_op, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_compare_op: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_compare_op")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 269730778)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_compare_op ()-> RenderingDevice.CompareOperator {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_compare_op, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.CompareOperator (rawValue: _result)!
    }
    
    fileprivate static var method_set_min_lod: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_min_lod")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_min_lod (_ pMember: Double) {
        #if true
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_min_lod, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_min_lod, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_min_lod: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_min_lod")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_min_lod ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_min_lod, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_max_lod: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_max_lod")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_max_lod (_ pMember: Double) {
        #if true
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_max_lod, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_max_lod, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_max_lod: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_max_lod")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_max_lod ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_max_lod, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_border_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_border_color")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1115869595)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_border_color (_ pMember: RenderingDevice.SamplerBorderColor) {
        #if true
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_border_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_border_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_border_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_border_color")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3514246478)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_border_color ()-> RenderingDevice.SamplerBorderColor {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_border_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.SamplerBorderColor (rawValue: _result)!
    }
    
    fileprivate static var method_set_unnormalized_uvw: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_unnormalized_uvw")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_unnormalized_uvw (_ pMember: Bool) {
        #if true
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDSamplerState.method_set_unnormalized_uvw, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDSamplerState.method_set_unnormalized_uvw, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_unnormalized_uvw: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_unnormalized_uvw")
        return withUnsafePointer (to: &RDSamplerState.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_unnormalized_uvw ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDSamplerState.method_get_unnormalized_uvw, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

