// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Provides the content of a ``Viewport`` as a dynamic texture.
/// 
/// Provides the content of a ``Viewport`` as a dynamic ``Texture2D``. This can be used to mix controls, 2D game objects, and 3D game objects in the same scene.
/// 
/// To create a ``ViewportTexture`` in code, use the ``Viewport/getTexture()`` method on the target viewport.
/// 
/// > Note: A ``ViewportTexture`` is always local to its scene (see ``Resource/resourceLocalToScene``). If the scene root is not ready, it may return incorrect data (see [signal Node.ready]).
/// 
open class ViewportTexture: Texture2D {
    override open class var godotClassName: StringName { "ViewportTexture" }
    
    /* Properties */
    
    /// The path to the ``Viewport`` node to display. This is relative to the scene root, not to the node that uses the texture.
    /// 
    /// > Note: In the editor, this path is automatically updated when the target viewport or one of its ancestors is renamed or moved. At runtime, the path may not be able to automatically update due to the inability to determine the scene root.
    /// 
    final public var viewportPath: NodePath {
        get {
            return get_viewport_path_in_scene ()
        }
        
        set {
            set_viewport_path_in_scene (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_viewport_path_in_scene: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_viewport_path_in_scene")
        return withUnsafePointer (to: &ViewportTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_viewport_path_in_scene (_ path: NodePath) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (ViewportTexture.method_set_viewport_path_in_scene, UnsafeMutableRawPointer (mutating: handle), nil, &path.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ViewportTexture.method_set_viewport_path_in_scene, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_viewport_path_in_scene: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_viewport_path_in_scene")
        return withUnsafePointer (to: &ViewportTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_viewport_path_in_scene ()-> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall (ViewportTexture.method_get_viewport_path_in_scene, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
}

