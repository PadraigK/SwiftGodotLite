// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Helper class to handle INI-style files.
/// 
/// This helper class can be used to store ``Variant`` values on the filesystem using INI-style formatting. The stored values are identified by a section and a key:
/// 
/// The stored data can be saved to or parsed from a file, though ConfigFile objects can also be used directly without accessing the filesystem.
/// 
/// The following example shows how to create a simple ``ConfigFile`` and save it on disc:
/// 
/// This example shows how the above file could be loaded:
/// 
/// Any operation that mutates the ConfigFile such as ``setValue(section:key:value:)``, ``clear()``, or ``eraseSection(_:)``, only changes what is loaded in memory. If you want to write the change to a file, you have to save the changes with ``save(path:)``, ``saveEncrypted(path:key:)``, or ``saveEncryptedPass(path:password:)``.
/// 
/// Keep in mind that section and property names can't contain spaces. Anything after a space will be ignored on save and on load.
/// 
/// ConfigFiles can also contain manually written comment lines starting with a semicolon (`;`). Those lines will be ignored when parsing the file. Note that comments will be lost when saving the ConfigFile. This can still be useful for dedicated server configuration files, which are typically never overwritten without explicit user action.
/// 
/// > Note: The file extension given to a ConfigFile does not have any impact on its formatting or behavior. By convention, the `.cfg` extension is used here, but any other extension such as `.ini` is also valid. Since neither `.cfg` nor `.ini` are standardized, Godot's ConfigFile formatting may differ from files written by other programs.
/// 
open class ConfigFile: RefCounted {
    override open class var godotClassName: StringName { "ConfigFile" }
    /* Methods */
    fileprivate static var method_set_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_value")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2504492430)!
            }
            
        }
        
    }()
    
    /// Assigns a value to the specified key of the specified section. If either the section or the key do not exist, they are created. Passing a `null` value deletes the specified key if it exists, and deletes the section if it ends up empty once the key has been removed.
    public final func setValue (section: String, key: String, value: Variant) {
        #if true
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_set_value, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_section.content, &gstr_key.content, &value.content)
        
        #else
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_section.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_key.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &value.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (ConfigFile.method_set_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_value")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 89809366)!
            }
            
        }
        
    }()
    
    /// Returns the current value for the specified section and key. If either the section or the key do not exist, the method returns the fallback `default` value. If `default` is not specified or set to `null`, an error is also raised.
    public final func getValue (section: String, key: String, `default`: Variant)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_get_value, UnsafeMutableRawPointer (mutating: handle), &_result.content, &gstr_section.content, &gstr_key.content, &`default`.content)
        return _result
        #else
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_section.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_key.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &`default`.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (ConfigFile.method_get_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_has_section: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_section")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified section exists.
    public final func hasSection (_ section: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_section = GString (section)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_has_section, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_section.content)
        return _result
        #else
        
        let gstr_section = GString (section)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_section.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ConfigFile.method_has_section, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_has_section_key: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_section_key")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 820780508)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified section-key pair exists.
    public final func hasSectionKey (section: String, key: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_has_section_key, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_section.content, &gstr_key.content)
        return _result
        #else
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_section.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_key.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ConfigFile.method_has_section_key, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_sections: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sections")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns an array of all defined section identifiers.
    public final func getSections ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (ConfigFile.method_get_sections, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_section_keys: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_section_keys")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4291131558)!
            }
            
        }
        
    }()
    
    /// Returns an array of all defined key identifiers in the specified section. Raises an error and returns an empty array if the section does not exist.
    public final func getSectionKeys (section: String)-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        #if true
        
        let gstr_section = GString (section)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_get_section_keys, UnsafeMutableRawPointer (mutating: handle), &_result.content, &gstr_section.content)
        return _result
        #else
        
        let gstr_section = GString (section)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_section.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ConfigFile.method_get_section_keys, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_erase_section: GDExtensionMethodBindPtr = {
        let methodName = StringName ("erase_section")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Deletes the specified section along with all the key-value pairs inside. Raises an error if the section does not exist.
    public final func eraseSection (_ section: String) {
        #if true
        
        let gstr_section = GString (section)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_erase_section, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_section.content)
        
        #else
        
        let gstr_section = GString (section)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_section.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ConfigFile.method_erase_section, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_erase_section_key: GDExtensionMethodBindPtr = {
        let methodName = StringName ("erase_section_key")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3186203200)!
            }
            
        }
        
    }()
    
    /// Deletes the specified key in a section. Raises an error if either the section or the key do not exist.
    public final func eraseSectionKey (section: String, key: String) {
        #if true
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_erase_section_key, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_section.content, &gstr_key.content)
        
        #else
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_section.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_key.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ConfigFile.method_erase_section_key, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_load: GDExtensionMethodBindPtr = {
        let methodName = StringName ("load")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Loads the config file specified as a parameter. The file's contents are parsed and loaded in the ``ConfigFile`` object which the method was called on.
    /// 
    /// Returns ``GodotError/ok`` on success, or one of the other ``GodotError`` values if the operation failed.
    /// 
    public final func load (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_load, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ConfigFile.method_load, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_parse: GDExtensionMethodBindPtr = {
        let methodName = StringName ("parse")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Parses the passed string as the contents of a config file. The string is parsed and loaded in the ConfigFile object which the method was called on.
    /// 
    /// Returns ``GodotError/ok`` on success, or one of the other ``GodotError`` values if the operation failed.
    /// 
    public final func parse (data: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_data = GString (data)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_parse, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_data.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_data = GString (data)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_data.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ConfigFile.method_parse, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_save: GDExtensionMethodBindPtr = {
        let methodName = StringName ("save")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Saves the contents of the ``ConfigFile`` object to the file specified as a parameter. The output file uses an INI-style structure.
    /// 
    /// Returns ``GodotError/ok`` on success, or one of the other ``GodotError`` values if the operation failed.
    /// 
    public final func save (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_save, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ConfigFile.method_save, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_encode_to_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("encode_to_text")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Obtain the text version of this config file (the same text that would be written to a file).
    public final func encodeToText ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (ConfigFile.method_encode_to_text, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_load_encrypted: GDExtensionMethodBindPtr = {
        let methodName = StringName ("load_encrypted")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 887037711)!
            }
            
        }
        
    }()
    
    /// Loads the encrypted config file specified as a parameter, using the provided `key` to decrypt it. The file's contents are parsed and loaded in the ``ConfigFile`` object which the method was called on.
    /// 
    /// Returns ``GodotError/ok`` on success, or one of the other ``GodotError`` values if the operation failed.
    /// 
    public final func loadEncrypted (path: String, key: PackedByteArray)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_load_encrypted, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content, &key.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &key.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ConfigFile.method_load_encrypted, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_load_encrypted_pass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("load_encrypted_pass")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 852856452)!
            }
            
        }
        
    }()
    
    /// Loads the encrypted config file specified as a parameter, using the provided `password` to decrypt it. The file's contents are parsed and loaded in the ``ConfigFile`` object which the method was called on.
    /// 
    /// Returns ``GodotError/ok`` on success, or one of the other ``GodotError`` values if the operation failed.
    /// 
    public final func loadEncryptedPass (path: String, password: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        let gstr_password = GString (password)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_load_encrypted_pass, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content, &gstr_password.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        let gstr_password = GString (password)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_password.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ConfigFile.method_load_encrypted_pass, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_save_encrypted: GDExtensionMethodBindPtr = {
        let methodName = StringName ("save_encrypted")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 887037711)!
            }
            
        }
        
    }()
    
    /// Saves the contents of the ``ConfigFile`` object to the AES-256 encrypted file specified as a parameter, using the provided `key` to encrypt it. The output file uses an INI-style structure.
    /// 
    /// Returns ``GodotError/ok`` on success, or one of the other ``GodotError`` values if the operation failed.
    /// 
    public final func saveEncrypted (path: String, key: PackedByteArray)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_save_encrypted, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content, &key.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &key.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ConfigFile.method_save_encrypted, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_save_encrypted_pass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("save_encrypted_pass")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 852856452)!
            }
            
        }
        
    }()
    
    /// Saves the contents of the ``ConfigFile`` object to the AES-256 encrypted file specified as a parameter, using the provided `password` to encrypt it. The output file uses an INI-style structure.
    /// 
    /// Returns ``GodotError/ok`` on success, or one of the other ``GodotError`` values if the operation failed.
    /// 
    public final func saveEncryptedPass (path: String, password: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        let gstr_password = GString (password)
        
        gi.object_method_bind_ptrcall_v (ConfigFile.method_save_encrypted_pass, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content, &gstr_password.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        let gstr_password = GString (password)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_password.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ConfigFile.method_save_encrypted_pass, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear")
        return withUnsafePointer (to: &ConfigFile.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Removes the entire contents of the config.
    public final func clear () {
        gi.object_method_bind_ptrcall (ConfigFile.method_clear, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
}

