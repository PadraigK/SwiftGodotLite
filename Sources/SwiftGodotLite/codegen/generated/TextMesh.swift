// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Generate an ``PrimitiveMesh`` from the text.
/// 
/// Generate an ``PrimitiveMesh`` from the text.
/// 
/// TextMesh can be generated only when using dynamic fonts with vector glyph contours. Bitmap fonts (including bitmap data in the TrueType/OpenType containers, like color emoji fonts) are not supported.
/// 
/// The UV layout is arranged in 4 horizontal strips, top to bottom: 40% of the height for the front face, 40% for the back face, 10% for the outer edges and 10% for the inner edges.
/// 
open class TextMesh: PrimitiveMesh {
    override open class var godotClassName: StringName { "TextMesh" }
    
    /* Properties */
    
    /// The text to generate mesh from.
    final public var text: String {
        get {
            return get_text ()
        }
        
        set {
            set_text (newValue)
        }
        
    }
    
    /// Font configuration used to display text.
    final public var font: Font? {
        get {
            return get_font ()
        }
        
        set {
            set_font (newValue)
        }
        
    }
    
    /// Font size of the ``TextMesh``'s text.
    final public var fontSize: Int32 {
        get {
            return get_font_size ()
        }
        
        set {
            set_font_size (newValue)
        }
        
    }
    
    /// Controls the text's horizontal alignment. Supports left, center, right, and fill, or justify. Set it to one of the ``HorizontalAlignment`` constants.
    final public var horizontalAlignment: HorizontalAlignment {
        get {
            return get_horizontal_alignment ()
        }
        
        set {
            set_horizontal_alignment (newValue)
        }
        
    }
    
    /// Controls the text's vertical alignment. Supports top, center, bottom. Set it to one of the ``VerticalAlignment`` constants.
    final public var verticalAlignment: VerticalAlignment {
        get {
            return get_vertical_alignment ()
        }
        
        set {
            set_vertical_alignment (newValue)
        }
        
    }
    
    /// If `true`, all the text displays as UPPERCASE.
    final public var uppercase: Bool {
        get {
            return is_uppercase ()
        }
        
        set {
            set_uppercase (newValue)
        }
        
    }
    
    /// Vertical space between lines in multiline ``TextMesh``.
    final public var lineSpacing: Double {
        get {
            return get_line_spacing ()
        }
        
        set {
            set_line_spacing (newValue)
        }
        
    }
    
    /// If set to something other than ``TextServer/AutowrapMode/autowrapOff``, the text gets wrapped inside the node's bounding rectangle. If you resize the node, it will change its height automatically to show all the text. To see how each mode behaves, see ``TextServer.AutowrapMode``.
    final public var autowrapMode: TextServer.AutowrapMode {
        get {
            return get_autowrap_mode ()
        }
        
        set {
            set_autowrap_mode (newValue)
        }
        
    }
    
    /// Line fill alignment rules. For more info see ``TextServer.JustificationFlag``.
    final public var justificationFlags: TextServer.JustificationFlag {
        get {
            return get_justification_flags ()
        }
        
        set {
            set_justification_flags (newValue)
        }
        
    }
    
    /// The size of one pixel's width on the text to scale it in 3D.
    final public var pixelSize: Double {
        get {
            return get_pixel_size ()
        }
        
        set {
            set_pixel_size (newValue)
        }
        
    }
    
    /// Step (in pixels) used to approximate BÃ©zier curves.
    final public var curveStep: Double {
        get {
            return get_curve_step ()
        }
        
        set {
            set_curve_step (newValue)
        }
        
    }
    
    /// Depths of the mesh, if set to `0.0` only front surface, is generated, and UV layout is changed to use full texture for the front face only.
    final public var depth: Double {
        get {
            return get_depth ()
        }
        
        set {
            set_depth (newValue)
        }
        
    }
    
    /// Text width (in pixels), used for fill alignment.
    final public var width: Double {
        get {
            return get_width ()
        }
        
        set {
            set_width (newValue)
        }
        
    }
    
    /// The text drawing offset (in pixels).
    final public var offset: Vector2 {
        get {
            return get_offset ()
        }
        
        set {
            set_offset (newValue)
        }
        
    }
    
    /// Base text writing direction.
    final public var textDirection: TextServer.Direction {
        get {
            return get_text_direction ()
        }
        
        set {
            set_text_direction (newValue)
        }
        
    }
    
    /// Language code used for text shaping algorithms, if left empty current locale is used instead.
    final public var language: String {
        get {
            return get_language ()
        }
        
        set {
            set_language (newValue)
        }
        
    }
    
    /// Set BiDi algorithm override for the structured text.
    final public var structuredTextBidiOverride: TextServer.StructuredTextParser {
        get {
            return get_structured_text_bidi_override ()
        }
        
        set {
            set_structured_text_bidi_override (newValue)
        }
        
    }
    
    /// Set additional options for BiDi override.
    final public var structuredTextBidiOverrideOptions: GArray {
        get {
            return get_structured_text_bidi_override_options ()
        }
        
        set {
            set_structured_text_bidi_override_options (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_horizontal_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_horizontal_alignment")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2312603777)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_horizontal_alignment (_ alignment: HorizontalAlignment) {
        #if true
        
        var copy_alignment = Int64 (alignment.rawValue)
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_horizontal_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &copy_alignment)
        
        #else
        
        var copy_alignment = Int64 (alignment.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_alignment) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_horizontal_alignment, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_horizontal_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_horizontal_alignment")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 341400642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_horizontal_alignment ()-> HorizontalAlignment {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TextMesh.method_get_horizontal_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return HorizontalAlignment (rawValue: _result)!
    }
    
    fileprivate static var method_set_vertical_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_vertical_alignment")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1796458609)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_vertical_alignment (_ alignment: VerticalAlignment) {
        #if true
        
        var copy_alignment = Int64 (alignment.rawValue)
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_vertical_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &copy_alignment)
        
        #else
        
        var copy_alignment = Int64 (alignment.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_alignment) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_vertical_alignment, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_vertical_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_vertical_alignment")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3274884059)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_vertical_alignment ()-> VerticalAlignment {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TextMesh.method_get_vertical_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VerticalAlignment (rawValue: _result)!
    }
    
    fileprivate static var method_set_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_text (_ text: String) {
        #if true
        
        let gstr_text = GString (text)
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_text, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_text.content)
        
        #else
        
        let gstr_text = GString (text)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_text.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_text, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_text ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (TextMesh.method_get_text, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_font: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1262170328)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font (_ font: Font?) {
        #if true
        
        var copy_font_handle = font?.handle
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_font, UnsafeMutableRawPointer (mutating: handle), nil, &copy_font_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: font?.handle) { p0 in
        _args.append (font == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_font, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_font: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3229501585)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_font ()-> Font? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TextMesh.method_get_font, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_font_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_font_size")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_font_size (_ fontSize: Int32) {
        #if true
        
        var copy_font_size: Int = Int (fontSize)
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_font_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_font_size)
        
        #else
        
        var copy_font_size: Int = Int (fontSize)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_font_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_font_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_font_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_font_size")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_font_size ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TextMesh.method_get_font_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_line_spacing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_line_spacing")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_line_spacing (_ lineSpacing: Double) {
        #if true
        
        var copy_line_spacing = lineSpacing
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_line_spacing, UnsafeMutableRawPointer (mutating: handle), nil, &copy_line_spacing)
        
        #else
        
        var copy_line_spacing = lineSpacing
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_line_spacing) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_line_spacing, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_line_spacing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_line_spacing")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_line_spacing ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextMesh.method_get_line_spacing, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_autowrap_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_autowrap_mode")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3289138044)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_autowrap_mode (_ autowrapMode: TextServer.AutowrapMode) {
        #if true
        
        var copy_autowrap_mode = Int64 (autowrapMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_autowrap_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_autowrap_mode)
        
        #else
        
        var copy_autowrap_mode = Int64 (autowrapMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_autowrap_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_autowrap_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_autowrap_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_autowrap_mode")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1549071663)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_autowrap_mode ()-> TextServer.AutowrapMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TextMesh.method_get_autowrap_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.AutowrapMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_justification_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_justification_flags")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2877345813)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_justification_flags (_ justificationFlags: TextServer.JustificationFlag) {
        #if true
        
        var copy_justification_flags = justificationFlags
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_justification_flags, UnsafeMutableRawPointer (mutating: handle), nil, &copy_justification_flags)
        
        #else
        
        var copy_justification_flags = justificationFlags
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_justification_flags) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_justification_flags, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_justification_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_justification_flags")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1583363614)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_justification_flags ()-> TextServer.JustificationFlag {
        var _result: TextServer.JustificationFlag = TextServer.JustificationFlag ()
        gi.object_method_bind_ptrcall (TextMesh.method_get_justification_flags, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_depth: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_depth")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_depth (_ depth: Double) {
        #if true
        
        var copy_depth = depth
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_depth, UnsafeMutableRawPointer (mutating: handle), nil, &copy_depth)
        
        #else
        
        var copy_depth = depth
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_depth) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_depth, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_depth: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_depth")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_depth ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextMesh.method_get_depth, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_width")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_width (_ width: Double) {
        #if true
        
        var copy_width = width
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_width, UnsafeMutableRawPointer (mutating: handle), nil, &copy_width)
        
        #else
        
        var copy_width = width
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_width, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_width")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_width ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextMesh.method_get_width, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_pixel_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pixel_size")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pixel_size (_ pixelSize: Double) {
        #if true
        
        var copy_pixel_size = pixelSize
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_pixel_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pixel_size)
        
        #else
        
        var copy_pixel_size = pixelSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pixel_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_pixel_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_pixel_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pixel_size")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pixel_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextMesh.method_get_pixel_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_offset")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_offset (_ offset: Vector2) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_offset")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (TextMesh.method_get_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_curve_step: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_curve_step")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_curve_step (_ curveStep: Double) {
        #if true
        
        var copy_curve_step = curveStep
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_curve_step, UnsafeMutableRawPointer (mutating: handle), nil, &copy_curve_step)
        
        #else
        
        var copy_curve_step = curveStep
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_curve_step) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_curve_step, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_curve_step: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_curve_step")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_curve_step ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextMesh.method_get_curve_step, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_text_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text_direction")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1418190634)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_text_direction (_ direction: TextServer.Direction) {
        #if true
        
        var copy_direction = Int64 (direction.rawValue)
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_text_direction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_direction)
        
        #else
        
        var copy_direction = Int64 (direction.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_direction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_text_direction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_text_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text_direction")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2516697328)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_text_direction ()-> TextServer.Direction {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TextMesh.method_get_text_direction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.Direction (rawValue: _result)!
    }
    
    fileprivate static var method_set_language: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_language")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_language (_ language: String) {
        #if true
        
        let gstr_language = GString (language)
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_language, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_language.content)
        
        #else
        
        let gstr_language = GString (language)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_language.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_language, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_language: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_language")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_language ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (TextMesh.method_get_language, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_structured_text_bidi_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_structured_text_bidi_override")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 55961453)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_structured_text_bidi_override (_ parser: TextServer.StructuredTextParser) {
        #if true
        
        var copy_parser = Int64 (parser.rawValue)
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), nil, &copy_parser)
        
        #else
        
        var copy_parser = Int64 (parser.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_parser) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_structured_text_bidi_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_structured_text_bidi_override")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3385126229)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_structured_text_bidi_override ()-> TextServer.StructuredTextParser {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TextMesh.method_get_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.StructuredTextParser (rawValue: _result)!
    }
    
    fileprivate static var method_set_structured_text_bidi_override_options: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_structured_text_bidi_override_options")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_structured_text_bidi_override_options (_ args: GArray) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), nil, &args.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &args.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_structured_text_bidi_override_options: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_structured_text_bidi_override_options")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_structured_text_bidi_override_options ()-> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall (TextMesh.method_get_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_uppercase: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_uppercase")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_uppercase (_ enable: Bool) {
        #if true
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (TextMesh.method_set_uppercase, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextMesh.method_set_uppercase, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_uppercase: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_uppercase")
        return withUnsafePointer (to: &TextMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_uppercase ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TextMesh.method_is_uppercase, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

