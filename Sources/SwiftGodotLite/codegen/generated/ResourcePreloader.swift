// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A node used to preload sub-resources inside a scene.
/// 
/// This node is used to preload sub-resources inside a scene, so when the scene is loaded, all the resources are ready to use and can be retrieved from the preloader. You can add the resources using the ResourcePreloader tab when the node is selected.
/// 
/// GDScript has a simplified ``@GDScript.preload`` built-in method which can be used in most situations, leaving the use of ``ResourcePreloader`` for more advanced scenarios.
/// 
open class ResourcePreloader: Node {
    override open class var godotClassName: StringName { "ResourcePreloader" }
    
    /* Properties */
    
    /* Methods */
    fileprivate static var method_add_resource: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_resource")
        return withUnsafePointer (to: &ResourcePreloader.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1168801743)!
            }
            
        }
        
    }()
    
    /// Adds a resource to the preloader with the given `name`. If a resource with the given `name` already exists, the new resource will be renamed to "`name` N" where N is an incrementing number starting from 2.
    public final func addResource (name: StringName, resource: Resource?) {
        #if false
        
        var copy_resource_handle = resource?.handle
        
        gi.object_method_bind_ptrcall_v (ResourcePreloader.method_add_resource, UnsafeMutableRawPointer (mutating: handle), nil, &name.content, &copy_resource_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: resource?.handle) { p1 in
            _args.append (resource == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (ResourcePreloader.method_add_resource, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_resource: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_resource")
        return withUnsafePointer (to: &ResourcePreloader.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    /// Removes the resource associated to `name` from the preloader.
    public final func removeResource (name: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (ResourcePreloader.method_remove_resource, UnsafeMutableRawPointer (mutating: handle), nil, &name.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ResourcePreloader.method_remove_resource, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_rename_resource: GDExtensionMethodBindPtr = {
        let methodName = StringName ("rename_resource")
        return withUnsafePointer (to: &ResourcePreloader.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3740211285)!
            }
            
        }
        
    }()
    
    /// Renames a resource inside the preloader from `name` to `newname`.
    public final func renameResource (name: StringName, newname: StringName) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (ResourcePreloader.method_rename_resource, UnsafeMutableRawPointer (mutating: handle), nil, &name.content, &newname.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &newname.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ResourcePreloader.method_rename_resource, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_has_resource: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_resource")
        return withUnsafePointer (to: &ResourcePreloader.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the preloader contains a resource associated to `name`.
    public final func hasResource (name: StringName)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (ResourcePreloader.method_has_resource, UnsafeMutableRawPointer (mutating: handle), &_result, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ResourcePreloader.method_has_resource, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_resource: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_resource")
        return withUnsafePointer (to: &ResourcePreloader.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3742749261)!
            }
            
        }
        
    }()
    
    /// Returns the resource associated to `name`.
    public final func getResource (name: StringName)-> Resource? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        
        gi.object_method_bind_ptrcall_v (ResourcePreloader.method_get_resource, UnsafeMutableRawPointer (mutating: handle), &_result, &name.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ResourcePreloader.method_get_resource, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_resource_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_resource_list")
        return withUnsafePointer (to: &ResourcePreloader.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns the list of resources inside the preloader.
    public final func getResourceList ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (ResourcePreloader.method_get_resource_list, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
}

