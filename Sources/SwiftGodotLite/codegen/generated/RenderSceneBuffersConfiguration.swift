// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Configuration object used to setup a ``RenderSceneBuffers`` object.
/// 
/// This configuration object is created and populated by the render engine on a viewport change and used to (re)configure a ``RenderSceneBuffers`` object.
open class RenderSceneBuffersConfiguration: RefCounted {
    override open class var godotClassName: StringName { "RenderSceneBuffersConfiguration" }
    
    /* Properties */
    
    /// The render target associated with these buffer.
    final public var renderTarget: RID {
        get {
            return get_render_target ()
        }
        
        set {
            set_render_target (newValue)
        }
        
    }
    
    /// The size of the 3D render buffer used for rendering.
    final public var internalSize: Vector2i {
        get {
            return get_internal_size ()
        }
        
        set {
            set_internal_size (newValue)
        }
        
    }
    
    /// The target (upscale) size if scaling is used.
    final public var targetSize: Vector2i {
        get {
            return get_target_size ()
        }
        
        set {
            set_target_size (newValue)
        }
        
    }
    
    /// The number of views we're rendering.
    final public var viewCount: UInt32 {
        get {
            return get_view_count ()
        }
        
        set {
            set_view_count (newValue)
        }
        
    }
    
    /// The requested scaling mode with which we upscale/downscale if ``internalSize`` and ``targetSize`` are not equal.
    final public var scaling3dMode: RenderingServer.ViewportScaling3DMode {
        get {
            return get_scaling_3d_mode ()
        }
        
        set {
            set_scaling_3d_mode (newValue)
        }
        
    }
    
    /// The MSAA mode we're using for 3D rendering.
    final public var msaa3d: RenderingServer.ViewportMSAA {
        get {
            return get_msaa_3d ()
        }
        
        set {
            set_msaa_3d (newValue)
        }
        
    }
    
    /// The requested screen space AA applied in post processing.
    final public var screenSpaceAa: RenderingServer.ViewportScreenSpaceAA {
        get {
            return get_screen_space_aa ()
        }
        
        set {
            set_screen_space_aa (newValue)
        }
        
    }
    
    /// FSR Sharpness applicable if FSR upscaling is used.
    final public var fsrSharpness: Double {
        get {
            return get_fsr_sharpness ()
        }
        
        set {
            set_fsr_sharpness (newValue)
        }
        
    }
    
    /// Bias applied to mipmaps.
    final public var textureMipmapBias: Double {
        get {
            return get_texture_mipmap_bias ()
        }
        
        set {
            set_texture_mipmap_bias (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_render_target: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_render_target")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_render_target ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_get_render_target, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_render_target: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_render_target")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_render_target (_ renderTarget: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersConfiguration.method_set_render_target, UnsafeMutableRawPointer (mutating: handle), nil, &renderTarget.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &renderTarget.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_set_render_target, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_internal_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_internal_size")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_internal_size ()-> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_get_internal_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_internal_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_internal_size")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130785943)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_internal_size (_ internalSize: Vector2i) {
        #if false
        
        var copy_internal_size = internalSize
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersConfiguration.method_set_internal_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_internal_size)
        
        #else
        
        var copy_internal_size = internalSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_internal_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_set_internal_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_target_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_target_size")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_target_size ()-> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_get_target_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_target_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_target_size")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130785943)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_target_size (_ targetSize: Vector2i) {
        #if false
        
        var copy_target_size = targetSize
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersConfiguration.method_set_target_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_target_size)
        
        #else
        
        var copy_target_size = targetSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_target_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_set_target_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_view_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_view_count")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_view_count ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_get_view_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_view_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_view_count")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_view_count (_ viewCount: UInt32) {
        #if false
        
        var copy_view_count: Int = Int (viewCount)
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersConfiguration.method_set_view_count, UnsafeMutableRawPointer (mutating: handle), nil, &copy_view_count)
        
        #else
        
        var copy_view_count: Int = Int (viewCount)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_view_count) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_set_view_count, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_scaling_3d_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_scaling_3d_mode")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 976778074)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_scaling_3d_mode ()-> RenderingServer.ViewportScaling3DMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_get_scaling_3d_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingServer.ViewportScaling3DMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_scaling_3d_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_scaling_3d_mode")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 447477857)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_scaling_3d_mode (_ scaling3dMode: RenderingServer.ViewportScaling3DMode) {
        #if false
        
        var copy_scaling_3d_mode = Int64 (scaling3dMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersConfiguration.method_set_scaling_3d_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scaling_3d_mode)
        
        #else
        
        var copy_scaling_3d_mode = Int64 (scaling3dMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_scaling_3d_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_set_scaling_3d_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_msaa_3d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_msaa_3d")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3109158617)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_msaa_3d ()-> RenderingServer.ViewportMSAA {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_get_msaa_3d, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingServer.ViewportMSAA (rawValue: _result)!
    }
    
    fileprivate static var method_set_msaa_3d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_msaa_3d")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3952630748)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_msaa_3d (_ msaa3d: RenderingServer.ViewportMSAA) {
        #if false
        
        var copy_msaa_3d = Int64 (msaa3d.rawValue)
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersConfiguration.method_set_msaa_3d, UnsafeMutableRawPointer (mutating: handle), nil, &copy_msaa_3d)
        
        #else
        
        var copy_msaa_3d = Int64 (msaa3d.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_msaa_3d) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_set_msaa_3d, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_screen_space_aa: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_screen_space_aa")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 641513172)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_screen_space_aa ()-> RenderingServer.ViewportScreenSpaceAA {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_get_screen_space_aa, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingServer.ViewportScreenSpaceAA (rawValue: _result)!
    }
    
    fileprivate static var method_set_screen_space_aa: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_screen_space_aa")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 139543108)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_screen_space_aa (_ screenSpaceAa: RenderingServer.ViewportScreenSpaceAA) {
        #if false
        
        var copy_screen_space_aa = Int64 (screenSpaceAa.rawValue)
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersConfiguration.method_set_screen_space_aa, UnsafeMutableRawPointer (mutating: handle), nil, &copy_screen_space_aa)
        
        #else
        
        var copy_screen_space_aa = Int64 (screenSpaceAa.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_screen_space_aa) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_set_screen_space_aa, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fsr_sharpness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fsr_sharpness")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fsr_sharpness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_get_fsr_sharpness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fsr_sharpness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fsr_sharpness")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fsr_sharpness (_ fsrSharpness: Double) {
        #if false
        
        var copy_fsr_sharpness = fsrSharpness
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersConfiguration.method_set_fsr_sharpness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fsr_sharpness)
        
        #else
        
        var copy_fsr_sharpness = fsrSharpness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fsr_sharpness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_set_fsr_sharpness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_mipmap_bias: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_mipmap_bias")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_mipmap_bias ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_get_texture_mipmap_bias, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_texture_mipmap_bias: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_mipmap_bias")
        return withUnsafePointer (to: &RenderSceneBuffersConfiguration.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_mipmap_bias (_ textureMipmapBias: Double) {
        #if false
        
        var copy_texture_mipmap_bias = textureMipmapBias
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffersConfiguration.method_set_texture_mipmap_bias, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_mipmap_bias)
        
        #else
        
        var copy_texture_mipmap_bias = textureMipmapBias
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_texture_mipmap_bias) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffersConfiguration.method_set_texture_mipmap_bias, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

