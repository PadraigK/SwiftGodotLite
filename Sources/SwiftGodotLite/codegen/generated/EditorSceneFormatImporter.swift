// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Imports scenes from third-parties' 3D files.
/// 
/// ``EditorSceneFormatImporter`` allows to define an importer script for a third-party 3D format.
/// 
/// To use ``EditorSceneFormatImporter``, register it using the ``EditorPlugin/addSceneFormatImporterPlugin(sceneFormatImporter:firstPriority:)`` method first.
/// 
open class EditorSceneFormatImporter: RefCounted {
    override open class var godotClassName: StringName { "EditorSceneFormatImporter" }
    /* Constants */
    /// 
    public static let importScene = 1
    /// 
    public static let importAnimation = 2
    /// 
    public static let importFailOnMissingDependencies = 4
    /// 
    public static let importGenerateTangentArrays = 8
    /// 
    public static let importUseNamedSkinBinds = 16
    /// 
    public static let importDiscardMeshesAndMaterials = 32
    /// 
    public static let importForceDisableMeshCompression = 64
    /* Methods */
    /// 
    @_documentation(visibility: public)
    open func _getImportFlags ()-> UInt32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getExtensions ()-> PackedStringArray {
        return PackedStringArray ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _importScene (path: String, flags: UInt32, options: GDictionary)-> Object? {
        return Object ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getImportOptions (path: String) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getOptionVisibility (path: String, forAnimation: Bool, option: String)-> Variant {
        return Variant ()
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_get_extensions":
                return _EditorSceneFormatImporter_proxy_get_extensions
            case "_get_import_flags":
                return _EditorSceneFormatImporter_proxy_get_import_flags
            case "_get_import_options":
                return _EditorSceneFormatImporter_proxy_get_import_options
            case "_get_option_visibility":
                return _EditorSceneFormatImporter_proxy_get_option_visibility
            case "_import_scene":
                return _EditorSceneFormatImporter_proxy_import_scene
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _EditorSceneFormatImporter_proxy_get_extensions (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorSceneFormatImporter>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getExtensions ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

func _EditorSceneFormatImporter_proxy_get_import_flags (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorSceneFormatImporter>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getImportFlags ()
    retPtr!.storeBytes (of: ret, as: UInt32.self)
}

func _EditorSceneFormatImporter_proxy_get_import_options (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorSceneFormatImporter>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._getImportOptions (path: GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
}

func _EditorSceneFormatImporter_proxy_get_option_visibility (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorSceneFormatImporter>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getOptionVisibility (path: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", forAnimation: args [1]!.assumingMemoryBound (to: Bool.self).pointee, option: GString.stringFromGStringPtr (ptr: args [2]!) ?? "")
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Variant
    ret.content = Variant.zero
}

func _EditorSceneFormatImporter_proxy_import_scene (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorSceneFormatImporter>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._importScene (path: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", flags: args [1]!.assumingMemoryBound (to: UInt32.self).pointee, options: GDictionary (content: args [2]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // Object
}

