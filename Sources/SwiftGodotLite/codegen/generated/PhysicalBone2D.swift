// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A ``RigidBody2D``-derived node used to make ``Bone2D``s in a ``Skeleton2D`` react to physics.
/// 
/// The ``PhysicalBone2D`` node is a ``RigidBody2D``-based node that can be used to make ``Bone2D``s in a ``Skeleton2D`` react to physics.
/// 
/// > Note: To make the ``Bone2D``s visually follow the ``PhysicalBone2D`` node, use a ``SkeletonModification2DPhysicalBones`` modification on the ``Skeleton2D`` parent.
/// 
/// > Note: The ``PhysicalBone2D`` node does not automatically create a ``Joint2D`` node to keep ``PhysicalBone2D`` nodes together. They must be created manually. For most cases, you want to use a ``PinJoint2D`` node. The ``PhysicalBone2D`` node will automatically configure the ``Joint2D`` node once it's been added as a child node.
/// 
open class PhysicalBone2D: RigidBody2D {
    override open class var godotClassName: StringName { "PhysicalBone2D" }
    
    /* Properties */
    
    /// The ``NodePath`` to the ``Bone2D`` that this ``PhysicalBone2D`` should simulate.
    final public var bone2dNodepath: NodePath {
        get {
            return get_bone2d_nodepath ()
        }
        
        set {
            set_bone2d_nodepath (newValue)
        }
        
    }
    
    /// The index of the ``Bone2D`` that this ``PhysicalBone2D`` should simulate.
    final public var bone2dIndex: Int32 {
        get {
            return get_bone2d_index ()
        }
        
        set {
            set_bone2d_index (newValue)
        }
        
    }
    
    /// If `true`, the ``PhysicalBone2D`` will automatically configure the first ``Joint2D`` child node. The automatic configuration is limited to setting up the node properties and positioning the ``Joint2D``.
    final public var autoConfigureJoint: Bool {
        get {
            return get_auto_configure_joint ()
        }
        
        set {
            set_auto_configure_joint (newValue)
        }
        
    }
    
    /// If `true`, the ``PhysicalBone2D`` will start simulating using physics. If `false`, the ``PhysicalBone2D`` will follow the transform of the ``Bone2D`` node.
    /// 
    /// > Note: To have the ``Bone2D``s visually follow the ``PhysicalBone2D``, use a ``SkeletonModification2DPhysicalBones`` modification on the ``Skeleton2D`` node with the ``Bone2D`` nodes.
    /// 
    final public var simulatePhysics: Bool {
        get {
            return get_simulate_physics ()
        }
        
        set {
            set_simulate_physics (newValue)
        }
        
    }
    
    /// If `true`, the ``PhysicalBone2D`` will keep the transform of the bone it is bound to when simulating physics.
    final public var followBoneWhenSimulating: Bool {
        get {
            return get_follow_bone_when_simulating ()
        }
        
        set {
            set_follow_bone_when_simulating (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_joint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_joint")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3582132112)!
            }
            
        }
        
    }()
    
    /// Returns the first ``Joint2D`` child node, if one exists. This is mainly a helper function to make it easier to get the ``Joint2D`` that the ``PhysicalBone2D`` is autoconfiguring.
    public final func getJoint ()-> Joint2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (PhysicalBone2D.method_get_joint, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_auto_configure_joint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_auto_configure_joint")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_auto_configure_joint ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicalBone2D.method_get_auto_configure_joint, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_auto_configure_joint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_auto_configure_joint")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_auto_configure_joint (_ autoConfigureJoint: Bool) {
        #if false
        
        var copy_auto_configure_joint = autoConfigureJoint
        
        gi.object_method_bind_ptrcall_v (PhysicalBone2D.method_set_auto_configure_joint, UnsafeMutableRawPointer (mutating: handle), nil, &copy_auto_configure_joint)
        
        #else
        
        var copy_auto_configure_joint = autoConfigureJoint
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_auto_configure_joint) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone2D.method_set_auto_configure_joint, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_simulate_physics: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_simulate_physics")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_simulate_physics (_ simulatePhysics: Bool) {
        #if false
        
        var copy_simulate_physics = simulatePhysics
        
        gi.object_method_bind_ptrcall_v (PhysicalBone2D.method_set_simulate_physics, UnsafeMutableRawPointer (mutating: handle), nil, &copy_simulate_physics)
        
        #else
        
        var copy_simulate_physics = simulatePhysics
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_simulate_physics) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone2D.method_set_simulate_physics, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_simulate_physics: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_simulate_physics")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_simulate_physics ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicalBone2D.method_get_simulate_physics, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_simulating_physics: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_simulating_physics")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns a boolean that indicates whether the ``PhysicalBone2D`` is running and simulating using the Godot 2D physics engine. When `true`, the PhysicalBone2D node is using physics.
    public final func isSimulatingPhysics ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicalBone2D.method_is_simulating_physics, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bone2d_nodepath: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone2d_nodepath")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1348162250)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bone2d_nodepath (_ nodepath: NodePath) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicalBone2D.method_set_bone2d_nodepath, UnsafeMutableRawPointer (mutating: handle), nil, &nodepath.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &nodepath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone2D.method_set_bone2d_nodepath, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone2d_nodepath: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone2d_nodepath")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4075236667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bone2d_nodepath ()-> NodePath {
        let _result: NodePath = NodePath ()
        gi.object_method_bind_ptrcall (PhysicalBone2D.method_get_bone2d_nodepath, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_bone2d_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone2d_index")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bone2d_index (_ boneIndex: Int32) {
        #if false
        
        var copy_bone_index: Int = Int (boneIndex)
        
        gi.object_method_bind_ptrcall_v (PhysicalBone2D.method_set_bone2d_index, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_index)
        
        #else
        
        var copy_bone_index: Int = Int (boneIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone2D.method_set_bone2d_index, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone2d_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone2d_index")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bone2d_index ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (PhysicalBone2D.method_get_bone2d_index, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_follow_bone_when_simulating: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_follow_bone_when_simulating")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_follow_bone_when_simulating (_ followBone: Bool) {
        #if false
        
        var copy_follow_bone = followBone
        
        gi.object_method_bind_ptrcall_v (PhysicalBone2D.method_set_follow_bone_when_simulating, UnsafeMutableRawPointer (mutating: handle), nil, &copy_follow_bone)
        
        #else
        
        var copy_follow_bone = followBone
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_follow_bone) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicalBone2D.method_set_follow_bone_when_simulating, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_follow_bone_when_simulating: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_follow_bone_when_simulating")
        return withUnsafePointer (to: &PhysicalBone2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_follow_bone_when_simulating ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicalBone2D.method_get_follow_bone_when_simulating, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

