// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract base class for 3D particle attractors.
/// 
/// Particle attractors can be used to attract particles towards the attractor's origin, or to push them away from the attractor's origin.
/// 
/// Particle attractors work in real-time and can be moved, rotated and scaled during gameplay. Unlike collision shapes, non-uniform scaling of attractors is also supported.
/// 
/// Attractors can be temporarily disabled by hiding them, or by setting their ``strength`` to `0.0`.
/// 
/// > Note: Particle attractors only affect ``GPUParticles3D``, not ``CPUParticles3D``.
/// 
open class GPUParticlesAttractor3D: VisualInstance3D {
    override open class var godotClassName: StringName { "GPUParticlesAttractor3D" }
    
    /* Properties */
    
    /// Adjusts the strength of the attractor. If ``strength`` is negative, particles will be pushed in the opposite direction. Particles will be pushed _away_ from the attractor's origin if ``directionality`` is `0.0`, or towards local +Z if ``directionality`` is greater than `0.0`.
    final public var strength: Double {
        get {
            return get_strength ()
        }
        
        set {
            set_strength (newValue)
        }
        
    }
    
    /// The particle attractor's attenuation. Higher values result in more gradual pushing of particles as they come closer to the attractor's origin. Zero or negative values will cause particles to be pushed very fast as soon as the touch the attractor's edges.
    final public var attenuation: Double {
        get {
            return get_attenuation ()
        }
        
        set {
            set_attenuation (newValue)
        }
        
    }
    
    /// Adjusts how directional the attractor is. At `0.0`, the attractor is not directional at all: it will attract particles towards its center. At `1.0`, the attractor is fully directional: particles will always be pushed towards local -Z (or +Z if ``strength`` is negative).
    /// 
    /// > Note: If ``directionality`` is greater than `0.0`, the direction in which particles are pushed can be changed by rotating the ``GPUParticlesAttractor3D`` node.
    /// 
    final public var directionality: Double {
        get {
            return get_directionality ()
        }
        
        set {
            set_directionality (newValue)
        }
        
    }
    
    /// The particle rendering layers (``VisualInstance3D/layers``) that will be affected by the attractor. By default, all particles are affected by an attractor.
    /// 
    /// After configuring particle nodes accordingly, specific layers can be unchecked to prevent certain particles from being affected by attractors. For example, this can be used if you're using an attractor as part of a spell effect but don't want the attractor to affect unrelated weather particles at the same position.
    /// 
    /// Particle attraction can also be disabled on a per-process material basis by setting ``ParticleProcessMaterial/attractorInteractionEnabled`` on the ``GPUParticles3D`` node.
    /// 
    final public var cullMask: UInt32 {
        get {
            return get_cull_mask ()
        }
        
        set {
            set_cull_mask (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_cull_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cull_mask")
        return withUnsafePointer (to: &GPUParticlesAttractor3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cull_mask (_ mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (GPUParticlesAttractor3D.method_set_cull_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GPUParticlesAttractor3D.method_set_cull_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_cull_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cull_mask")
        return withUnsafePointer (to: &GPUParticlesAttractor3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_cull_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (GPUParticlesAttractor3D.method_get_cull_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_strength")
        return withUnsafePointer (to: &GPUParticlesAttractor3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_strength (_ strength: Double) {
        #if false
        
        var copy_strength = strength
        
        gi.object_method_bind_ptrcall_v (GPUParticlesAttractor3D.method_set_strength, UnsafeMutableRawPointer (mutating: handle), nil, &copy_strength)
        
        #else
        
        var copy_strength = strength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_strength) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GPUParticlesAttractor3D.method_set_strength, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_strength")
        return withUnsafePointer (to: &GPUParticlesAttractor3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_strength ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (GPUParticlesAttractor3D.method_get_strength, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_attenuation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_attenuation")
        return withUnsafePointer (to: &GPUParticlesAttractor3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_attenuation (_ attenuation: Double) {
        #if false
        
        var copy_attenuation = attenuation
        
        gi.object_method_bind_ptrcall_v (GPUParticlesAttractor3D.method_set_attenuation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_attenuation)
        
        #else
        
        var copy_attenuation = attenuation
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_attenuation) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GPUParticlesAttractor3D.method_set_attenuation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_attenuation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_attenuation")
        return withUnsafePointer (to: &GPUParticlesAttractor3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_attenuation ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (GPUParticlesAttractor3D.method_get_attenuation, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_directionality: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_directionality")
        return withUnsafePointer (to: &GPUParticlesAttractor3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_directionality (_ amount: Double) {
        #if false
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (GPUParticlesAttractor3D.method_set_directionality, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GPUParticlesAttractor3D.method_set_directionality, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_directionality: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_directionality")
        return withUnsafePointer (to: &GPUParticlesAttractor3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_directionality ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (GPUParticlesAttractor3D.method_get_directionality, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

