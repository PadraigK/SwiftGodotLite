// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract scene buffers object, created for each viewport for which 3D rendering is done.
/// 
/// Abstract scene buffers object, created for each viewport for which 3D rendering is done. It manages any additional buffers used during rendering and will discard buffers when the viewport is resized.
/// 
/// > Note: this is an internal rendering server object only exposed for GDExtension plugins.
/// 
open class RenderSceneBuffers: RefCounted {
    override open class var godotClassName: StringName { "RenderSceneBuffers" }
    /* Methods */
    fileprivate static var method_configure: GDExtensionMethodBindPtr = {
        let methodName = StringName ("configure")
        return withUnsafePointer (to: &RenderSceneBuffers.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3072623270)!
            }
            
        }
        
    }()
    
    /// This method is called by the rendering server when the associated viewports configuration is changed. It will discard the old buffers and recreate the internal buffers used.
    public final func configure (config: RenderSceneBuffersConfiguration?) {
        #if false
        
        var copy_config_handle = config?.handle
        
        gi.object_method_bind_ptrcall_v (RenderSceneBuffers.method_configure, UnsafeMutableRawPointer (mutating: handle), nil, &copy_config_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: config?.handle) { p0 in
        _args.append (config == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (RenderSceneBuffers.method_configure, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

