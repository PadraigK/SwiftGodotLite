// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Godot editor's control for selecting the `script` property of a ``Node``.
/// 
/// Similar to ``EditorResourcePicker`` this ``Control`` node is used in the editor's Inspector dock, but only to edit the `script` property of a ``Node``. Default options for creating new resources of all possible subtypes are replaced with dedicated buttons that open the "Attach Node Script" dialog. Can be used with ``EditorInspectorPlugin`` to recreate the same behavior.
/// 
/// > Note: You must set the ``scriptOwner`` for the custom context menu items to work.
/// 
open class EditorScriptPicker: EditorResourcePicker {
    override open class var godotClassName: StringName { "EditorScriptPicker" }
    
    /* Properties */
    
    /// The owner ``Node`` of the script property that holds the edited resource.
    final public var scriptOwner: Node? {
        get {
            return get_script_owner ()
        }
        
        set {
            set_script_owner (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_script_owner: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_script_owner")
        return withUnsafePointer (to: &EditorScriptPicker.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_script_owner (_ ownerNode: Node?) {
        #if false
        
        var copy_owner_node_handle = ownerNode?.handle
        
        gi.object_method_bind_ptrcall_v (EditorScriptPicker.method_set_script_owner, UnsafeMutableRawPointer (mutating: handle), nil, &copy_owner_node_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: ownerNode?.handle) { p0 in
        _args.append (ownerNode == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorScriptPicker.method_set_script_owner, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_script_owner: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_script_owner")
        return withUnsafePointer (to: &EditorScriptPicker.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3160264692)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_script_owner ()-> Node? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorScriptPicker.method_get_script_owner, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

