// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Provides methods for managing directories and their content.
/// 
/// This class is used to manage directories and their content, even outside of the project folder.
/// 
/// ``DirAccess`` can't be instantiated directly. Instead it is created with a static method that takes a path for which it will be opened.
/// 
/// Most of the methods have a static alternative that can be used without creating a ``DirAccess``. Static methods only support absolute paths (including `res://` and `user://`).
/// 
/// > Note: Many resources types are imported (e.g. textures or sound files), and their source asset will not be included in the exported game, as only the imported version is used. Use ``ResourceLoader`` to access imported resources.
/// 
/// Here is an example on how to iterate through the files of a directory:
/// 
open class DirAccess: RefCounted {
    override open class var godotClassName: StringName { "DirAccess" }
    
    /* Properties */
    
    /// If `true`, `.` and `..` are included when navigating the directory.
    /// 
    /// Affects ``listDirBegin()`` and ``getDirectories()``.
    /// 
    final public var includeNavigational: Bool {
        get {
            return get_include_navigational ()
        }
        
        set {
            set_include_navigational (newValue)
        }
        
    }
    
    /// If `true`, hidden files are included when navigating the directory.
    /// 
    /// Affects ``listDirBegin()``, ``getDirectories()`` and ``getFiles()``.
    /// 
    final public var includeHidden: Bool {
        get {
            return get_include_hidden ()
        }
        
        set {
            set_include_hidden (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_open: GDExtensionMethodBindPtr = {
        let methodName = StringName ("open")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1923528528)!
            }
            
        }
        
    }()
    
    /// Creates a new ``DirAccess`` object and opens an existing directory of the filesystem. The `path` argument can be within the project tree (`res://folder`), the user directory (`user://folder`) or an absolute path of the user filesystem (e.g. `/tmp/folder` or `C:\tmp\folder`).
    /// 
    /// Returns `null` if opening the directory failed. You can use ``getOpenError()`` to check the error that occurred.
    /// 
    public static func open (path: String)-> DirAccess? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_open, nil, &_result, &gstr_path.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_open, nil, &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_open_error: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_open_error")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166280745)!
            }
            
        }
        
    }()
    
    /// Returns the result of the last ``open(path:)`` call in the current thread.
    public static func getOpenError ()-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (DirAccess.method_get_open_error, nil, nil, &_result)
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_list_dir_begin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("list_dir_begin")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2610976713)!
            }
            
        }
        
    }()
    
    /// Initializes the stream used to list all files and directories using the ``getNext()`` function, closing the currently opened stream if needed. Once the stream has been processed, it should typically be closed with ``listDirEnd()``.
    /// 
    /// Affected by ``includeHidden`` and ``includeNavigational``.
    /// 
    /// > Note: The order of files and directories returned by this method is not deterministic, and can vary between operating systems. If you want a list of all files or folders sorted alphabetically, use ``getFiles()`` or ``getDirectories()``.
    /// 
    public final func listDirBegin ()-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (DirAccess.method_list_dir_begin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_get_next: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_next")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2841200299)!
            }
            
        }
        
    }()
    
    /// Returns the next element (file or directory) in the current directory.
    /// 
    /// The name of the file or directory is returned (and not its full path). Once the stream has been fully processed, the method returns an empty ``String`` and closes the stream automatically (i.e. ``listDirEnd()`` would not be mandatory in such a case).
    /// 
    public final func getNext ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (DirAccess.method_get_next, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_current_is_dir: GDExtensionMethodBindPtr = {
        let methodName = StringName ("current_is_dir")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns whether the current item processed with the last ``getNext()`` call is a directory (`.` and `..` are considered directories).
    public final func currentIsDir ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (DirAccess.method_current_is_dir, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_list_dir_end: GDExtensionMethodBindPtr = {
        let methodName = StringName ("list_dir_end")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Closes the current stream opened with ``listDirBegin()`` (whether it has been fully processed with ``getNext()`` does not matter).
    public final func listDirEnd () {
        gi.object_method_bind_ptrcall (DirAccess.method_list_dir_end, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_get_files: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_files")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2981934095)!
            }
            
        }
        
    }()
    
    /// Returns a ``PackedStringArray`` containing filenames of the directory contents, excluding directories. The array is sorted alphabetically.
    /// 
    /// Affected by ``includeHidden``.
    /// 
    /// > Note: When used on a `res://` path in an exported project, only the files actually included in the PCK at the given folder level are returned. In practice, this means that since imported resources are stored in a top-level `.godot/` folder, only paths to `*.gd` and `*.import` files are returned (plus a few files such as `project.godot` or `project.binary` and the project icon). In an exported project, the list of returned files will also vary depending on whether ``ProjectSettings/editor/export/convertTextResourcesToBinary`` is `true`.
    /// 
    public final func getFiles ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (DirAccess.method_get_files, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_files_at: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_files_at")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3538744774)!
            }
            
        }
        
    }()
    
    /// Returns a ``PackedStringArray`` containing filenames of the directory contents, excluding directories, at the given `path`. The array is sorted alphabetically.
    /// 
    /// Use ``getFiles()`` if you want more control of what gets included.
    /// 
    public static func getFilesAt (path: String)-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_get_files_at, nil, &_result.content, &gstr_path.content)
        return _result
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_get_files_at, nil, &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_directories: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_directories")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2981934095)!
            }
            
        }
        
    }()
    
    /// Returns a ``PackedStringArray`` containing filenames of the directory contents, excluding files. The array is sorted alphabetically.
    /// 
    /// Affected by ``includeHidden`` and ``includeNavigational``.
    /// 
    public final func getDirectories ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (DirAccess.method_get_directories, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_directories_at: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_directories_at")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3538744774)!
            }
            
        }
        
    }()
    
    /// Returns a ``PackedStringArray`` containing filenames of the directory contents, excluding files, at the given `path`. The array is sorted alphabetically.
    /// 
    /// Use ``getDirectories()`` if you want more control of what gets included.
    /// 
    public static func getDirectoriesAt (path: String)-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_get_directories_at, nil, &_result.content, &gstr_path.content)
        return _result
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_get_directories_at, nil, &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_drive_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_drive_count")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// On Windows, returns the number of drives (partitions) mounted on the current filesystem.
    /// 
    /// On macOS, returns the number of mounted volumes.
    /// 
    /// On Linux, returns the number of mounted volumes and GTK 3 bookmarks.
    /// 
    /// On other platforms, the method returns 0.
    /// 
    public static func getDriveCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (DirAccess.method_get_drive_count, nil, nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_drive_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_drive_name")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 990163283)!
            }
            
        }
        
    }()
    
    /// On Windows, returns the name of the drive (partition) passed as an argument (e.g. `C:`).
    /// 
    /// On macOS, returns the path to the mounted volume passed as an argument.
    /// 
    /// On Linux, returns the path to the mounted volume or GTK 3 bookmark passed as an argument.
    /// 
    /// On other platforms, or if the requested drive does not exist, the method returns an empty String.
    /// 
    public static func getDriveName (idx: Int32)-> String {
        let _result = GString ()
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_get_drive_name, nil, &_result.content, &copy_idx)
        return _result.description
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_get_drive_name, nil, &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_get_current_drive: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_drive")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the currently opened directory's drive index. See ``getDriveName(idx:)`` to convert returned index to the name of the drive.
    public final func getCurrentDrive ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (DirAccess.method_get_current_drive, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_change_dir: GDExtensionMethodBindPtr = {
        let methodName = StringName ("change_dir")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Changes the currently opened directory to the one passed as an argument. The argument can be relative to the current directory (e.g. `newdir` or `../newdir`), or an absolute path (e.g. `/tmp/newdir` or `res://somedir/newdir`).
    /// 
    /// Returns one of the ``GodotError`` code constants (``GodotError/ok`` on success).
    /// 
    /// > Note: The new directory must be within the same scope, e.g. when you had opened a directory inside `res://`, you can't change it to `user://` directory. If you need to open a directory in another access scope, use ``open(path:)`` to create a new instance instead.
    /// 
    public final func changeDir (toDir: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_to_dir = GString (toDir)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_change_dir, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_to_dir.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_to_dir = GString (toDir)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_to_dir.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_change_dir, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_current_dir: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_dir")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1287308131)!
            }
            
        }
        
    }()
    
    /// Returns the absolute path to the currently opened directory (e.g. `res://folder` or `C:\tmp\folder`).
    public final func getCurrentDir (includeDrive: Bool = true)-> String {
        let _result = GString ()
        #if true
        
        var copy_include_drive = includeDrive
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_get_current_dir, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_include_drive)
        return _result.description
        #else
        
        var copy_include_drive = includeDrive
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_include_drive) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_get_current_dir, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_make_dir: GDExtensionMethodBindPtr = {
        let methodName = StringName ("make_dir")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Creates a directory. The argument can be relative to the current directory, or an absolute path. The target directory should be placed in an already existing directory (to create the full path recursively, see ``makeDirRecursive(path:)``).
    /// 
    /// Returns one of the ``GodotError`` code constants (``GodotError/ok`` on success).
    /// 
    public final func makeDir (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_make_dir, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_make_dir, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_make_dir_absolute: GDExtensionMethodBindPtr = {
        let methodName = StringName ("make_dir_absolute")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Static version of ``makeDir(path:)``. Supports only absolute paths.
    public static func makeDirAbsolute (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_make_dir_absolute, nil, &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_make_dir_absolute, nil, &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_make_dir_recursive: GDExtensionMethodBindPtr = {
        let methodName = StringName ("make_dir_recursive")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Creates a target directory and all necessary intermediate directories in its path, by calling ``makeDir(path:)`` recursively. The argument can be relative to the current directory, or an absolute path.
    /// 
    /// Returns one of the ``GodotError`` code constants (``GodotError/ok`` on success).
    /// 
    public final func makeDirRecursive (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_make_dir_recursive, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_make_dir_recursive, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_make_dir_recursive_absolute: GDExtensionMethodBindPtr = {
        let methodName = StringName ("make_dir_recursive_absolute")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Static version of ``makeDirRecursive(path:)``. Supports only absolute paths.
    public static func makeDirRecursiveAbsolute (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_make_dir_recursive_absolute, nil, &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_make_dir_recursive_absolute, nil, &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_file_exists: GDExtensionMethodBindPtr = {
        let methodName = StringName ("file_exists")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2323990056)!
            }
            
        }
        
    }()
    
    /// Returns whether the target file exists. The argument can be relative to the current directory, or an absolute path.
    /// 
    /// For a static equivalent, use ``FileAccess/fileExists(path:)``.
    /// 
    public final func fileExists (path: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_file_exists, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return _result
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_file_exists, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_dir_exists: GDExtensionMethodBindPtr = {
        let methodName = StringName ("dir_exists")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2323990056)!
            }
            
        }
        
    }()
    
    /// Returns whether the target directory exists. The argument can be relative to the current directory, or an absolute path.
    public final func dirExists (path: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_dir_exists, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return _result
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_dir_exists, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_dir_exists_absolute: GDExtensionMethodBindPtr = {
        let methodName = StringName ("dir_exists_absolute")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2323990056)!
            }
            
        }
        
    }()
    
    /// Static version of ``dirExists(path:)``. Supports only absolute paths.
    public static func dirExistsAbsolute (path: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_dir_exists_absolute, nil, &_result, &gstr_path.content)
        return _result
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_dir_exists_absolute, nil, &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_space_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_space_left")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the available space on the current directory's disk, in bytes. Returns `0` if the platform-specific method to query the available space fails.
    public final func getSpaceLeft ()-> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall (DirAccess.method_get_space_left, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_copy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("copy")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1063198817)!
            }
            
        }
        
    }()
    
    /// Copies the `from` file to the `to` destination. Both arguments should be paths to files, either relative or absolute. If the destination file exists and is not access-protected, it will be overwritten.
    /// 
    /// If `chmodFlags` is different than `-1`, the Unix permissions for the destination path will be set to the provided value, if available on the current operating system.
    /// 
    /// Returns one of the ``GodotError`` code constants (``GodotError/ok`` on success).
    /// 
    public final func copy (from: String, to: String, chmodFlags: Int32 = -1)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_from = GString (from)
        let gstr_to = GString (to)
        var copy_chmod_flags: Int = Int (chmodFlags)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_copy, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_from.content, &gstr_to.content, &copy_chmod_flags)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_from = GString (from)
        let gstr_to = GString (to)
        var copy_chmod_flags: Int = Int (chmodFlags)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_from.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_to.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_chmod_flags) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (DirAccess.method_copy, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                    return GodotError (rawValue: _result)!
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_copy_absolute: GDExtensionMethodBindPtr = {
        let methodName = StringName ("copy_absolute")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1063198817)!
            }
            
        }
        
    }()
    
    /// Static version of ``copy(from:to:chmodFlags:)``. Supports only absolute paths.
    public static func copyAbsolute (from: String, to: String, chmodFlags: Int32 = -1)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_from = GString (from)
        let gstr_to = GString (to)
        var copy_chmod_flags: Int = Int (chmodFlags)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_copy_absolute, nil, &_result, &gstr_from.content, &gstr_to.content, &copy_chmod_flags)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_from = GString (from)
        let gstr_to = GString (to)
        var copy_chmod_flags: Int = Int (chmodFlags)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_from.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_to.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_chmod_flags) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (DirAccess.method_copy_absolute, nil, &_args, &_result)
                    return GodotError (rawValue: _result)!
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_rename: GDExtensionMethodBindPtr = {
        let methodName = StringName ("rename")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 852856452)!
            }
            
        }
        
    }()
    
    /// Renames (move) the `from` file or directory to the `to` destination. Both arguments should be paths to files or directories, either relative or absolute. If the destination file or directory exists and is not access-protected, it will be overwritten.
    /// 
    /// Returns one of the ``GodotError`` code constants (``GodotError/ok`` on success).
    /// 
    public final func rename (from: String, to: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_from = GString (from)
        let gstr_to = GString (to)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_rename, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_from.content, &gstr_to.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_from = GString (from)
        let gstr_to = GString (to)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_from.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_to.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (DirAccess.method_rename, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_rename_absolute: GDExtensionMethodBindPtr = {
        let methodName = StringName ("rename_absolute")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 852856452)!
            }
            
        }
        
    }()
    
    /// Static version of ``rename(from:to:)``. Supports only absolute paths.
    public static func renameAbsolute (from: String, to: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_from = GString (from)
        let gstr_to = GString (to)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_rename_absolute, nil, &_result, &gstr_from.content, &gstr_to.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_from = GString (from)
        let gstr_to = GString (to)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_from.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_to.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (DirAccess.method_rename_absolute, nil, &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Permanently deletes the target file or an empty directory. The argument can be relative to the current directory, or an absolute path. If the target directory is not empty, the operation will fail.
    /// 
    /// If you don't want to delete the file/directory permanently, use ``OS/moveToTrash(path:)`` instead.
    /// 
    /// Returns one of the ``GodotError`` code constants (``GodotError/ok`` on success).
    /// 
    public final func remove (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_remove, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_remove, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_remove_absolute: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_absolute")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166001499)!
            }
            
        }
        
    }()
    
    /// Static version of ``remove(path:)``. Supports only absolute paths.
    public static func removeAbsolute (path: String)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_remove_absolute, nil, &_result, &gstr_path.content)
        return GodotError (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_remove_absolute, nil, &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_include_navigational: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_include_navigational")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_include_navigational (_ enable: Bool) {
        #if true
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_set_include_navigational, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_set_include_navigational, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_include_navigational: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_include_navigational")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_include_navigational ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (DirAccess.method_get_include_navigational, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_include_hidden: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_include_hidden")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_include_hidden (_ enable: Bool) {
        #if true
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_set_include_hidden, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_set_include_hidden, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_include_hidden: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_include_hidden")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_include_hidden ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (DirAccess.method_get_include_hidden, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_case_sensitive: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_case_sensitive")
        return withUnsafePointer (to: &DirAccess.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the file system or directory use case sensitive file names.
    /// 
    /// > Note: This method is implemented on macOS, Linux (for EXT4 and F2FS filesystems only) and Windows. On other platforms, it always returns `true`.
    /// 
    public final func isCaseSensitive (path: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (DirAccess.method_is_case_sensitive, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_path.content)
        return _result
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (DirAccess.method_is_case_sensitive, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

