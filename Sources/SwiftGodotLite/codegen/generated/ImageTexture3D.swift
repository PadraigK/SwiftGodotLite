// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Texture with 3 dimensions.
/// 
/// ``ImageTexture3D`` is a 3-dimensional ``ImageTexture`` that has a width, height, and depth. See also ``ImageTextureLayered``.
/// 
/// 3D textures are typically used to store density maps for ``FogMaterial``, color correction LUTs for ``Environment``, vector fields for ``GPUParticlesAttractorVectorField3D`` and collision maps for ``GPUParticlesCollisionSDF3D``. 3D textures can also be used in custom shaders.
/// 
open class ImageTexture3D: Texture3D {
    override open class var godotClassName: StringName { "ImageTexture3D" }
    /* Methods */
    fileprivate static var method_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create")
        return withUnsafePointer (to: &ImageTexture3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130379827)!
            }
            
        }
        
    }()
    
    /// Creates the ``ImageTexture3D`` with specified `width`, `height`, and `depth`. See ``Image.Format`` for `format` options. If `useMipmaps` is `true`, then generate mipmaps for the ``ImageTexture3D``.
    public final func create (format: Image.Format, width: Int32, height: Int32, depth: Int32, useMipmaps: Bool, data: ObjectCollection<Image>)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        var copy_format = Int64 (format.rawValue)
        var copy_width: Int = Int (width)
        var copy_height: Int = Int (height)
        var copy_depth: Int = Int (depth)
        var copy_use_mipmaps = useMipmaps
        
        gi.object_method_bind_ptrcall_v (ImageTexture3D.method_create, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_format, &copy_width, &copy_height, &copy_depth, &copy_use_mipmaps, &data.array.content)
        return GodotError (rawValue: _result)!
        #else
        
        var copy_format = Int64 (format.rawValue)
        var copy_width: Int = Int (width)
        var copy_height: Int = Int (height)
        var copy_depth: Int = Int (depth)
        var copy_use_mipmaps = useMipmaps
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_format) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_width) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_height) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_depth) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_use_mipmaps) { p4 in
                            _args.append (p4)
                            return withUnsafePointer (to: &data.array.content) { p5 in
                                _args.append (p5)
        
                                gi.object_method_bind_ptrcall (ImageTexture3D.method_create, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                                return GodotError (rawValue: _result)!
                            }
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_update: GDExtensionMethodBindPtr = {
        let methodName = StringName ("update")
        return withUnsafePointer (to: &ImageTexture3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    /// Replaces the texture's existing data with the layers specified in `data`. The size of `data` must match the parameters that were used for ``create(format:width:height:depth:useMipmaps:data:)``. In other words, the texture cannot be resized or have its format changed by calling ``update(data:)``.
    public final func update (data: ObjectCollection<Image>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (ImageTexture3D.method_update, UnsafeMutableRawPointer (mutating: handle), nil, &data.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &data.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ImageTexture3D.method_update, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

