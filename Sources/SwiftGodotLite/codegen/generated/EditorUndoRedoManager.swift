// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Manages undo history of scenes opened in the editor.
/// 
/// ``EditorUndoRedoManager`` is a manager for ``UndoRedo`` objects associated with edited scenes. Each scene has its own undo history and ``EditorUndoRedoManager`` ensures that each action performed in the editor gets associated with a proper scene. For actions not related to scenes (``ProjectSettings`` edits, external resources, etc.), a separate global history is used.
/// 
/// The usage is mostly the same as ``UndoRedo``. You create and commit actions and the manager automatically decides under-the-hood what scenes it belongs to. The scene is deduced based on the first operation in an action, using the object from the operation. The rules are as follows:
/// 
/// - If the object is a ``Node``, use the currently edited scene;
/// 
/// - If the object is a built-in resource, use the scene from its path;
/// 
/// - If the object is external resource or anything else, use global history.
/// 
/// This guessing can sometimes yield false results, so you can provide a custom context object when creating an action.
/// 
/// ``EditorUndoRedoManager`` is intended to be used by Godot editor plugins. You can obtain it using ``EditorPlugin/getUndoRedo()``. For non-editor uses or plugins that don't need to integrate with the editor's undo history, use ``UndoRedo`` instead.
/// 
/// The manager's API is mostly the same as in ``UndoRedo``, so you can refer to its documentation for more examples. The main difference is that ``EditorUndoRedoManager`` uses object + method name for actions, instead of ``Callable``.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``historyChanged``
/// - ``versionChanged``
open class EditorUndoRedoManager: Object {
    override open class var godotClassName: StringName { "EditorUndoRedoManager" }
    public enum SpecialHistory: Int64 {
        /// Global history not associated with any scene, but with external resources etc.
        case globalHistory = 0 // GLOBAL_HISTORY
        /// History associated with remote inspector. Used when live editing a running project.
        case remoteHistory = -9 // REMOTE_HISTORY
        /// Invalid "null" history. It's a special value, not associated with any object.
        case invalidHistory = -99 // INVALID_HISTORY
    }
    
    /* Methods */
    fileprivate static var method_create_action: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_action")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2107025470)!
            }
            
        }
        
    }()
    
    /// Create a new action. After this is called, do all your calls to ``addDoMethod(object:method:)``, ``addUndoMethod(object:method:)``, ``addDoProperty(object:property:value:)``, and ``addUndoProperty(object:property:value:)``, then commit the action with ``commitAction(execute:)``.
    /// 
    /// The way actions are merged is dictated by the `mergeMode` argument. See ``UndoRedo.MergeMode`` for details.
    /// 
    /// If `customContext` object is provided, it will be used for deducing target history (instead of using the first operation).
    /// 
    /// The way undo operation are ordered in actions is dictated by `backwardUndoOps`. When `backwardUndoOps` is `false` undo option are ordered in the same order they were added. Which means the first operation to be added will be the first to be undone.
    /// 
    public final func createAction (name: String, mergeMode: UndoRedo.MergeMode = .disable, customContext: Object? = nil, backwardUndoOps: Bool = false) {
        #if true
        
        let gstr_name = GString (name)
        var copy_merge_mode = Int64 (mergeMode.rawValue)
        var copy_backward_undo_ops = backwardUndoOps
        var copy_custom_context_handle = customContext?.handle
        
        gi.object_method_bind_ptrcall_v (EditorUndoRedoManager.method_create_action, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content, &copy_merge_mode, &copy_custom_context_handle, &copy_backward_undo_ops)
        
        #else
        
        let gstr_name = GString (name)
        var copy_merge_mode = Int64 (mergeMode.rawValue)
        var copy_backward_undo_ops = backwardUndoOps
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_merge_mode) { p1 in
                _args.append (p1)
                withUnsafePointer (to: customContext?.handle) { p2 in
                _args.append (customContext == nil ? nil : p2)
                    withUnsafePointer (to: &copy_backward_undo_ops) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (EditorUndoRedoManager.method_create_action, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_commit_action: GDExtensionMethodBindPtr = {
        let methodName = StringName ("commit_action")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3216645846)!
            }
            
        }
        
    }()
    
    /// Commit the action. If `execute` is true (default), all "do" methods/properties are called/set when this function is called.
    public final func commitAction (execute: Bool = true) {
        #if true
        
        var copy_execute = execute
        
        gi.object_method_bind_ptrcall_v (EditorUndoRedoManager.method_commit_action, UnsafeMutableRawPointer (mutating: handle), nil, &copy_execute)
        
        #else
        
        var copy_execute = execute
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_execute) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorUndoRedoManager.method_commit_action, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_committing_action: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_committing_action")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the ``EditorUndoRedoManager`` is currently committing the action, i.e. running its "do" method or property change (see ``commitAction(execute:)``).
    public final func isCommittingAction ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EditorUndoRedoManager.method_is_committing_action, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_add_do_method: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_do_method")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1517810467)!
            }
            
        }
        
    }()
    
    /// Register a method that will be called when the action is committed (i.e. the "do" action).
    /// 
    /// If this is the first operation, the `object` will be used to deduce target undo history.
    /// 
    public final func addDoMethod (object: Object?, method: StringName, _ arguments: Variant...) {
        var _result: Variant.ContentType = Variant.zero
        #if false
        
        let copy_object = object == nil ? Variant() : Variant (object!)
        let copy_method = Variant (method)
        
        gi.object_method_bind_call_v (EditorUndoRedoManager.method_add_do_method, UnsafeMutableRawPointer (mutating: handle), &_result, nil, &copy_object.content, &copy_method.content)
        
        #else
        
        let copy_object = object == nil ? Variant() : Variant (object!)
        let copy_method = Variant (method)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_object.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_method.content) { p1 in
                _args.append (p1)
        
        let content = UnsafeMutableBufferPointer<Variant.ContentType>.allocate(capacity: arguments.count)
        defer { content.deallocate () }
        for idx in 0..<arguments.count {
            content [idx] = arguments [idx].content
            _args.append (content.baseAddress! + idx)
        }
        
                gi.object_method_bind_call (EditorUndoRedoManager.method_add_do_method, UnsafeMutableRawPointer (mutating: handle), &_args, Int64 (_args.count), &_result, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_undo_method: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_undo_method")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1517810467)!
            }
            
        }
        
    }()
    
    /// Register a method that will be called when the action is undone (i.e. the "undo" action).
    /// 
    /// If this is the first operation, the `object` will be used to deduce target undo history.
    /// 
    public final func addUndoMethod (object: Object?, method: StringName, _ arguments: Variant...) {
        var _result: Variant.ContentType = Variant.zero
        #if false
        
        let copy_object = object == nil ? Variant() : Variant (object!)
        let copy_method = Variant (method)
        
        gi.object_method_bind_call_v (EditorUndoRedoManager.method_add_undo_method, UnsafeMutableRawPointer (mutating: handle), &_result, nil, &copy_object.content, &copy_method.content)
        
        #else
        
        let copy_object = object == nil ? Variant() : Variant (object!)
        let copy_method = Variant (method)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_object.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_method.content) { p1 in
                _args.append (p1)
        
        let content = UnsafeMutableBufferPointer<Variant.ContentType>.allocate(capacity: arguments.count)
        defer { content.deallocate () }
        for idx in 0..<arguments.count {
            content [idx] = arguments [idx].content
            _args.append (content.baseAddress! + idx)
        }
        
                gi.object_method_bind_call (EditorUndoRedoManager.method_add_undo_method, UnsafeMutableRawPointer (mutating: handle), &_args, Int64 (_args.count), &_result, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_do_property: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_do_property")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1017172818)!
            }
            
        }
        
    }()
    
    /// Register a property value change for "do".
    /// 
    /// If this is the first operation, the `object` will be used to deduce target undo history.
    /// 
    public final func addDoProperty (object: Object?, property: StringName, value: Variant) {
        #if true
        
        var copy_object_handle = object?.handle
        
        gi.object_method_bind_ptrcall_v (EditorUndoRedoManager.method_add_do_property, UnsafeMutableRawPointer (mutating: handle), nil, &copy_object_handle, &property.content, &value.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: object?.handle) { p0 in
        _args.append (object == nil ? nil : p0)
            withUnsafePointer (to: &property.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &value.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (EditorUndoRedoManager.method_add_do_property, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_undo_property: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_undo_property")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1017172818)!
            }
            
        }
        
    }()
    
    /// Register a property value change for "undo".
    /// 
    /// If this is the first operation, the `object` will be used to deduce target undo history.
    /// 
    public final func addUndoProperty (object: Object?, property: StringName, value: Variant) {
        #if true
        
        var copy_object_handle = object?.handle
        
        gi.object_method_bind_ptrcall_v (EditorUndoRedoManager.method_add_undo_property, UnsafeMutableRawPointer (mutating: handle), nil, &copy_object_handle, &property.content, &value.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: object?.handle) { p0 in
        _args.append (object == nil ? nil : p0)
            withUnsafePointer (to: &property.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &value.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (EditorUndoRedoManager.method_add_undo_property, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_do_reference: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_do_reference")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3975164845)!
            }
            
        }
        
    }()
    
    /// Register a reference for "do" that will be erased if the "do" history is lost. This is useful mostly for new nodes created for the "do" call. Do not use for resources.
    public final func addDoReference (object: Object?) {
        #if true
        
        var copy_object_handle = object?.handle
        
        gi.object_method_bind_ptrcall_v (EditorUndoRedoManager.method_add_do_reference, UnsafeMutableRawPointer (mutating: handle), nil, &copy_object_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: object?.handle) { p0 in
        _args.append (object == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorUndoRedoManager.method_add_do_reference, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_undo_reference: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_undo_reference")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3975164845)!
            }
            
        }
        
    }()
    
    /// Register a reference for "undo" that will be erased if the "undo" history is lost. This is useful mostly for nodes removed with the "do" call (not the "undo" call!).
    public final func addUndoReference (object: Object?) {
        #if true
        
        var copy_object_handle = object?.handle
        
        gi.object_method_bind_ptrcall_v (EditorUndoRedoManager.method_add_undo_reference, UnsafeMutableRawPointer (mutating: handle), nil, &copy_object_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: object?.handle) { p0 in
        _args.append (object == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorUndoRedoManager.method_add_undo_reference, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_object_history_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_object_history_id")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1107568780)!
            }
            
        }
        
    }()
    
    /// Returns the history ID deduced from the given `object`. It can be used with ``getHistoryUndoRedo(id:)``.
    public final func getObjectHistoryId (object: Object?)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_object_handle = object?.handle
        
        gi.object_method_bind_ptrcall_v (EditorUndoRedoManager.method_get_object_history_id, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_object_handle)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: object?.handle) { p0 in
        _args.append (object == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorUndoRedoManager.method_get_object_history_id, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_history_undo_redo: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_history_undo_redo")
        return withUnsafePointer (to: &EditorUndoRedoManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2417974513)!
            }
            
        }
        
    }()
    
    /// Returns the ``UndoRedo`` object associated with the given history `id`.
    /// 
    /// `id` above `0` are mapped to the opened scene tabs (but it doesn't match their order). `id` of `0` or lower have special meaning (see ``EditorUndoRedoManager/SpecialHistory``).
    /// 
    /// Best used with ``getObjectHistoryId(object:)``. This method is only provided in case you need some more advanced methods of ``UndoRedo`` (but keep in mind that directly operating on the ``UndoRedo`` object might affect editor's stability).
    /// 
    public final func getHistoryUndoRedo (id: Int32)-> UndoRedo? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_id: Int = Int (id)
        
        gi.object_method_bind_ptrcall_v (EditorUndoRedoManager.method_get_history_undo_redo, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_id)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_id: Int = Int (id)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorUndoRedoManager.method_get_history_undo_redo, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    // Signals 
    /// Emitted when the list of actions in any history has changed, either when an action is committed or a history is cleared.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.historyChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var historyChanged: SimpleSignal { SimpleSignal (target: self, signalName: "history_changed") }
    
    /// Emitted when the version of any history has changed as a result of undo or redo call.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.versionChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var versionChanged: SimpleSignal { SimpleSignal (target: self, signalName: "version_changed") }
    
}

