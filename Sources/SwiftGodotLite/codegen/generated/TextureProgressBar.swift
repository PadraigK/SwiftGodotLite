// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Texture-based progress bar. Useful for loading screens and life or stamina bars.
/// 
/// TextureProgressBar works like ``ProgressBar``, but uses up to 3 textures instead of Godot's ``Theme`` resource. It can be used to create horizontal, vertical and radial progress bars.
open class TextureProgressBar: Range {
    override open class var godotClassName: StringName { "TextureProgressBar" }
    public enum FillMode: Int64 {
        /// The ``textureProgress`` fills from left to right.
        case leftToRight = 0 // FILL_LEFT_TO_RIGHT
        /// The ``textureProgress`` fills from right to left.
        case rightToLeft = 1 // FILL_RIGHT_TO_LEFT
        /// The ``textureProgress`` fills from top to bottom.
        case topToBottom = 2 // FILL_TOP_TO_BOTTOM
        /// The ``textureProgress`` fills from bottom to top.
        case bottomToTop = 3 // FILL_BOTTOM_TO_TOP
        /// Turns the node into a radial bar. The ``textureProgress`` fills clockwise. See ``radialCenterOffset``, ``radialInitialAngle`` and ``radialFillDegrees`` to control the way the bar fills up.
        case clockwise = 4 // FILL_CLOCKWISE
        /// Turns the node into a radial bar. The ``textureProgress`` fills counterclockwise. See ``radialCenterOffset``, ``radialInitialAngle`` and ``radialFillDegrees`` to control the way the bar fills up.
        case counterClockwise = 5 // FILL_COUNTER_CLOCKWISE
        /// The ``textureProgress`` fills from the center, expanding both towards the left and the right.
        case bilinearLeftAndRight = 6 // FILL_BILINEAR_LEFT_AND_RIGHT
        /// The ``textureProgress`` fills from the center, expanding both towards the top and the bottom.
        case bilinearTopAndBottom = 7 // FILL_BILINEAR_TOP_AND_BOTTOM
        /// Turns the node into a radial bar. The ``textureProgress`` fills radially from the center, expanding both clockwise and counterclockwise. See ``radialCenterOffset``, ``radialInitialAngle`` and ``radialFillDegrees`` to control the way the bar fills up.
        case clockwiseAndCounterClockwise = 8 // FILL_CLOCKWISE_AND_COUNTER_CLOCKWISE
    }
    
    
    /* Properties */
    
    /// The fill direction. See ``TextureProgressBar/FillMode`` for possible values.
    final public var fillMode: Int32 {
        get {
            return get_fill_mode ()
        }
        
        set {
            set_fill_mode (newValue)
        }
        
    }
    
    /// If `true`, Godot treats the bar's textures like in ``NinePatchRect``. Use the `stretch_margin_*` properties like ``stretchMarginBottom`` to set up the nine patch's 3Ã—3 grid. When using a radial ``fillMode``, this setting will enable stretching.
    final public var ninePatchStretch: Bool {
        get {
            return get_nine_patch_stretch ()
        }
        
        set {
            set_nine_patch_stretch (newValue)
        }
        
    }
    
    /// The width of the 9-patch's left column.
    final public var stretchMarginLeft: Int32 {
        get {
            return get_stretch_margin (Side (rawValue: 0)!)
        }
        
        set {
            set_stretch_margin (Side (rawValue: 0)!, newValue)
        }
        
    }
    
    /// The height of the 9-patch's top row.
    final public var stretchMarginTop: Int32 {
        get {
            return get_stretch_margin (Side (rawValue: 1)!)
        }
        
        set {
            set_stretch_margin (Side (rawValue: 1)!, newValue)
        }
        
    }
    
    /// The width of the 9-patch's right column.
    final public var stretchMarginRight: Int32 {
        get {
            return get_stretch_margin (Side (rawValue: 2)!)
        }
        
        set {
            set_stretch_margin (Side (rawValue: 2)!, newValue)
        }
        
    }
    
    /// The height of the 9-patch's bottom row. A margin of 16 means the 9-slice's bottom corners and side will have a height of 16 pixels. You can set all 4 margin values individually to create panels with non-uniform borders.
    final public var stretchMarginBottom: Int32 {
        get {
            return get_stretch_margin (Side (rawValue: 3)!)
        }
        
        set {
            set_stretch_margin (Side (rawValue: 3)!, newValue)
        }
        
    }
    
    /// ``Texture2D`` that draws under the progress bar. The bar's background.
    final public var textureUnder: Texture2D? {
        get {
            return get_under_texture ()
        }
        
        set {
            set_under_texture (newValue)
        }
        
    }
    
    /// ``Texture2D`` that draws over the progress bar. Use it to add highlights or an upper-frame that hides part of ``textureProgress``.
    final public var textureOver: Texture2D? {
        get {
            return get_over_texture ()
        }
        
        set {
            set_over_texture (newValue)
        }
        
    }
    
    /// ``Texture2D`` that clips based on the node's `value` and ``fillMode``. As `value` increased, the texture fills up. It shows entirely when `value` reaches `max_value`. It doesn't show at all if `value` is equal to `min_value`.
    /// 
    /// The `value` property comes from ``Range``. See ``Range/value``, ``Range/minValue``, ``Range/maxValue``.
    /// 
    final public var textureProgress: Texture2D? {
        get {
            return get_progress_texture ()
        }
        
        set {
            set_progress_texture (newValue)
        }
        
    }
    
    /// The offset of ``textureProgress``. Useful for ``textureOver`` and ``textureUnder`` with fancy borders, to avoid transparent margins in your progress texture.
    final public var textureProgressOffset: Vector2 {
        get {
            return get_texture_progress_offset ()
        }
        
        set {
            set_texture_progress_offset (newValue)
        }
        
    }
    
    /// Multiplies the color of the bar's ``textureUnder`` texture.
    final public var tintUnder: Color {
        get {
            return get_tint_under ()
        }
        
        set {
            set_tint_under (newValue)
        }
        
    }
    
    /// Multiplies the color of the bar's ``textureOver`` texture. The effect is similar to ``CanvasItem/modulate``, except it only affects this specific texture instead of the entire node.
    final public var tintOver: Color {
        get {
            return get_tint_over ()
        }
        
        set {
            set_tint_over (newValue)
        }
        
    }
    
    /// Multiplies the color of the bar's ``textureProgress`` texture.
    final public var tintProgress: Color {
        get {
            return get_tint_progress ()
        }
        
        set {
            set_tint_progress (newValue)
        }
        
    }
    
    /// Starting angle for the fill of ``textureProgress`` if ``fillMode`` is .fillClockwise or .fillCounterClockwise. When the node's `value` is equal to its `min_value`, the texture doesn't show up at all. When the `value` increases, the texture fills and tends towards ``radialFillDegrees``.
    final public var radialInitialAngle: Double {
        get {
            return get_radial_initial_angle ()
        }
        
        set {
            set_radial_initial_angle (newValue)
        }
        
    }
    
    /// Upper limit for the fill of ``textureProgress`` if ``fillMode`` is .fillClockwise or .fillCounterClockwise. When the node's `value` is equal to its `max_value`, the texture fills up to this angle.
    /// 
    /// See ``Range/value``, ``Range/maxValue``.
    /// 
    final public var radialFillDegrees: Double {
        get {
            return get_fill_degrees ()
        }
        
        set {
            set_fill_degrees (newValue)
        }
        
    }
    
    /// Offsets ``textureProgress`` if ``fillMode`` is .fillClockwise or .fillCounterClockwise.
    final public var radialCenterOffset: Vector2 {
        get {
            return get_radial_center_offset ()
        }
        
        set {
            set_radial_center_offset (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_under_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_under_texture")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_under_texture (_ tex: Texture2D?) {
        #if false
        
        var copy_tex_handle = tex?.handle
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_under_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_tex_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: tex?.handle) { p0 in
        _args.append (tex == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_under_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_under_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_under_texture")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_under_texture ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_under_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_progress_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_progress_texture")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_progress_texture (_ tex: Texture2D?) {
        #if false
        
        var copy_tex_handle = tex?.handle
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_progress_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_tex_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: tex?.handle) { p0 in
        _args.append (tex == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_progress_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_progress_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_progress_texture")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_progress_texture ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_progress_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_over_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_over_texture")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_over_texture (_ tex: Texture2D?) {
        #if false
        
        var copy_tex_handle = tex?.handle
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_over_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_tex_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: tex?.handle) { p0 in
        _args.append (tex == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_over_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_over_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_over_texture")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_over_texture ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_over_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_fill_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fill_mode")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fill_mode (_ mode: Int32) {
        #if false
        
        var copy_mode: Int = Int (mode)
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_fill_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode: Int = Int (mode)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_fill_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fill_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fill_mode")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fill_mode ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_fill_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_tint_under: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tint_under")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tint_under (_ tint: Color) {
        #if false
        
        var copy_tint = tint
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_tint_under, UnsafeMutableRawPointer (mutating: handle), nil, &copy_tint)
        
        #else
        
        var copy_tint = tint
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_tint) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_tint_under, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tint_under: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tint_under")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tint_under ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_tint_under, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_tint_progress: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tint_progress")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tint_progress (_ tint: Color) {
        #if false
        
        var copy_tint = tint
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_tint_progress, UnsafeMutableRawPointer (mutating: handle), nil, &copy_tint)
        
        #else
        
        var copy_tint = tint
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_tint) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_tint_progress, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tint_progress: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tint_progress")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tint_progress ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_tint_progress, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_tint_over: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tint_over")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_tint_over (_ tint: Color) {
        #if false
        
        var copy_tint = tint
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_tint_over, UnsafeMutableRawPointer (mutating: handle), nil, &copy_tint)
        
        #else
        
        var copy_tint = tint
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_tint) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_tint_over, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tint_over: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tint_over")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_tint_over ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_tint_over, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_texture_progress_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_progress_offset")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_progress_offset (_ offset: Vector2) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_texture_progress_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_texture_progress_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_progress_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_progress_offset")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_progress_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_texture_progress_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_radial_initial_angle: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_radial_initial_angle")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_radial_initial_angle (_ mode: Double) {
        #if false
        
        var copy_mode = mode
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_radial_initial_angle, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = mode
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_radial_initial_angle, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_radial_initial_angle: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_radial_initial_angle")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_radial_initial_angle ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_radial_initial_angle, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_radial_center_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_radial_center_offset")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_radial_center_offset (_ mode: Vector2) {
        #if false
        
        var copy_mode = mode
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_radial_center_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = mode
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_radial_center_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_radial_center_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_radial_center_offset")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1497962370)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_radial_center_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_radial_center_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fill_degrees: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fill_degrees")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fill_degrees (_ mode: Double) {
        #if false
        
        var copy_mode = mode
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_fill_degrees, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = mode
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_fill_degrees, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_fill_degrees: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fill_degrees")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fill_degrees ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_fill_degrees, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_stretch_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_stretch_margin")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 437707142)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the stretch margin with the specified index. See ``stretchMarginBottom`` and related properties.
    fileprivate final func set_stretch_margin (_ margin: Side, _ value: Int32) {
        #if false
        
        var copy_margin = Int64 (margin.rawValue)
        var copy_value: Int = Int (value)
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_stretch_margin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_margin, &copy_value)
        
        #else
        
        var copy_margin = Int64 (margin.rawValue)
        var copy_value: Int = Int (value)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TextureProgressBar.method_set_stretch_margin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_stretch_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_stretch_margin")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1983885014)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the stretch margin with the specified index. See ``stretchMarginBottom`` and related properties.
    fileprivate final func get_stretch_margin (_ margin: Side)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_margin = Int64 (margin.rawValue)
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_get_stretch_margin, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_margin)
        return _result
        #else
        
        var copy_margin = Int64 (margin.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_get_stretch_margin, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_nine_patch_stretch: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_nine_patch_stretch")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_nine_patch_stretch (_ stretch: Bool) {
        #if false
        
        var copy_stretch = stretch
        
        gi.object_method_bind_ptrcall_v (TextureProgressBar.method_set_nine_patch_stretch, UnsafeMutableRawPointer (mutating: handle), nil, &copy_stretch)
        
        #else
        
        var copy_stretch = stretch
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_stretch) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextureProgressBar.method_set_nine_patch_stretch, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_nine_patch_stretch: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_nine_patch_stretch")
        return withUnsafePointer (to: &TextureProgressBar.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_nine_patch_stretch ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TextureProgressBar.method_get_nine_patch_stretch, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

