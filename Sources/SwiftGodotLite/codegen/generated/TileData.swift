// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Settings for a single tile in a ``TileSet``.
/// 
/// ``TileData`` object represents a single tile in a ``TileSet``. It is usually edited using the tileset editor, but it can be modified at runtime using ``TileMap/_tileDataRuntimeUpdate(layer:coords:tileData:)``.
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``changed``
open class TileData: Object {
    override open class var godotClassName: StringName { "TileData" }
    
    /* Properties */
    
    /// If `true`, the tile will have its texture flipped horizontally.
    final public var flipH: Bool {
        get {
            return get_flip_h ()
        }
        
        set {
            set_flip_h (newValue)
        }
        
    }
    
    /// If `true`, the tile will have its texture flipped vertically.
    final public var flipV: Bool {
        get {
            return get_flip_v ()
        }
        
        set {
            set_flip_v (newValue)
        }
        
    }
    
    /// If `true`, the tile will display transposed, i.e. with horizontal and vertical texture UVs swapped.
    final public var transpose: Bool {
        get {
            return get_transpose ()
        }
        
        set {
            set_transpose (newValue)
        }
        
    }
    
    /// Offsets the position of where the tile is drawn.
    final public var textureOrigin: Vector2i {
        get {
            return get_texture_origin ()
        }
        
        set {
            set_texture_origin (newValue)
        }
        
    }
    
    /// Color modulation of the tile.
    final public var modulate: Color {
        get {
            return get_modulate ()
        }
        
        set {
            set_modulate (newValue)
        }
        
    }
    
    /// The ``Material`` to use for this ``TileData``. This can be a ``CanvasItemMaterial`` to use the default shader, or a ``ShaderMaterial`` to use a custom shader.
    final public var material: Material? {
        get {
            return get_material ()
        }
        
        set {
            set_material (newValue)
        }
        
    }
    
    /// Ordering index of this tile, relative to ``TileMap``.
    final public var zIndex: Int32 {
        get {
            return get_z_index ()
        }
        
        set {
            set_z_index (newValue)
        }
        
    }
    
    /// Vertical point of the tile used for determining y-sorted order.
    final public var ySortOrigin: Int32 {
        get {
            return get_y_sort_origin ()
        }
        
        set {
            set_y_sort_origin (newValue)
        }
        
    }
    
    /// ID of the terrain set that the tile uses.
    final public var terrainSet: Int32 {
        get {
            return get_terrain_set ()
        }
        
        set {
            set_terrain_set (newValue)
        }
        
    }
    
    /// ID of the terrain from the terrain set that the tile uses.
    final public var terrain: Int32 {
        get {
            return get_terrain ()
        }
        
        set {
            set_terrain (newValue)
        }
        
    }
    
    /// Relative probability of this tile being selected when drawing a pattern of random tiles.
    final public var probability: Double {
        get {
            return get_probability ()
        }
        
        set {
            set_probability (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_flip_h: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_flip_h")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_flip_h (_ flipH: Bool) {
        #if true
        
        var copy_flip_h = flipH
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_flip_h, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flip_h)
        
        #else
        
        var copy_flip_h = flipH
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flip_h) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_flip_h, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_flip_h: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_flip_h")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_flip_h ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TileData.method_get_flip_h, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_flip_v: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_flip_v")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_flip_v (_ flipV: Bool) {
        #if true
        
        var copy_flip_v = flipV
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_flip_v, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flip_v)
        
        #else
        
        var copy_flip_v = flipV
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flip_v) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_flip_v, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_flip_v: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_flip_v")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_flip_v ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TileData.method_get_flip_v, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_transpose: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_transpose")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_transpose (_ transpose: Bool) {
        #if true
        
        var copy_transpose = transpose
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_transpose, UnsafeMutableRawPointer (mutating: handle), nil, &copy_transpose)
        
        #else
        
        var copy_transpose = transpose
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_transpose) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_transpose, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_transpose: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transpose")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_transpose ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TileData.method_get_transpose, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_material: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_material")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2757459619)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_material (_ material: Material?) {
        #if true
        
        var copy_material_handle = material?.handle
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_material, UnsafeMutableRawPointer (mutating: handle), nil, &copy_material_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: material?.handle) { p0 in
        _args.append (material == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_material, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_material: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_material")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 5934680)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_material ()-> Material? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TileData.method_get_material, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_texture_origin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_origin")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130785943)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_origin (_ textureOrigin: Vector2i) {
        #if true
        
        var copy_texture_origin = textureOrigin
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_texture_origin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_origin)
        
        #else
        
        var copy_texture_origin = textureOrigin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_texture_origin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_texture_origin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_origin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_origin")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_origin ()-> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall (TileData.method_get_texture_origin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_modulate")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_modulate (_ modulate: Color) {
        #if true
        
        var copy_modulate = modulate
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &copy_modulate)
        
        #else
        
        var copy_modulate = modulate
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_modulate) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_modulate, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_modulate")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_modulate ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (TileData.method_get_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_z_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_z_index")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_z_index (_ zIndex: Int32) {
        #if true
        
        var copy_z_index: Int = Int (zIndex)
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_z_index, UnsafeMutableRawPointer (mutating: handle), nil, &copy_z_index)
        
        #else
        
        var copy_z_index: Int = Int (zIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_z_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_z_index, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_z_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_z_index")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_z_index ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileData.method_get_z_index, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_y_sort_origin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_y_sort_origin")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_y_sort_origin (_ ySortOrigin: Int32) {
        #if true
        
        var copy_y_sort_origin: Int = Int (ySortOrigin)
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_y_sort_origin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_y_sort_origin)
        
        #else
        
        var copy_y_sort_origin: Int = Int (ySortOrigin)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_y_sort_origin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_y_sort_origin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_y_sort_origin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_y_sort_origin")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_y_sort_origin ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileData.method_get_y_sort_origin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_occluder: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_occluder")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 914399637)!
            }
            
        }
        
    }()
    
    /// Sets the occluder for the TileSet occlusion layer with index `layerId`.
    public final func setOccluder (layerId: Int32, occluderPolygon: OccluderPolygon2D?) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_occluder_polygon_handle = occluderPolygon?.handle
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_occluder, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id, &copy_occluder_polygon_handle)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: occluderPolygon?.handle) { p1 in
            _args.append (occluderPolygon == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (TileData.method_set_occluder, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_occluder: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_occluder")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2458574231)!
            }
            
        }
        
    }()
    
    /// Returns the occluder polygon of the tile for the TileSet occlusion layer with index `layerId`.
    public final func getOccluder (layerId: Int32)-> OccluderPolygon2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        
        gi.object_method_bind_ptrcall_v (TileData.method_get_occluder, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_id)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_get_occluder, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_constant_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constant_linear_velocity")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 163021252)!
            }
            
        }
        
    }()
    
    /// Sets the constant linear velocity. This does not move the tile. This linear velocity is applied to objects colliding with this tile. This is useful to create conveyor belts.
    public final func setConstantLinearVelocity (layerId: Int32, velocity: Vector2) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_constant_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id, &copy_velocity)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_velocity) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileData.method_set_constant_linear_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_constant_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constant_linear_velocity")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2299179447)!
            }
            
        }
        
    }()
    
    /// Returns the constant linear velocity applied to objects colliding with this tile.
    public final func getConstantLinearVelocity (layerId: Int32)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        
        gi.object_method_bind_ptrcall_v (TileData.method_get_constant_linear_velocity, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_id)
        return _result
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_get_constant_linear_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_constant_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constant_angular_velocity")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Sets the constant angular velocity. This does not rotate the tile. This angular velocity is applied to objects colliding with this tile.
    public final func setConstantAngularVelocity (layerId: Int32, velocity: Double) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_constant_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id, &copy_velocity)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_velocity) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileData.method_set_constant_angular_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_constant_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constant_angular_velocity")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns the constant angular velocity applied to objects colliding with this tile.
    public final func getConstantAngularVelocity (layerId: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        
        gi.object_method_bind_ptrcall_v (TileData.method_get_constant_angular_velocity, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_id)
        return _result
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_get_constant_angular_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_collision_polygons_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_polygons_count")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the polygons count for TileSet physics layer with index `layerId`.
    public final func setCollisionPolygonsCount (layerId: Int32, polygonsCount: Int32) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygons_count: Int = Int (polygonsCount)
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_collision_polygons_count, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id, &copy_polygons_count)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygons_count: Int = Int (polygonsCount)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_polygons_count) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileData.method_set_collision_polygons_count, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_polygons_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_polygons_count")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns how many polygons the tile has for TileSet physics layer with index `layerId`.
    public final func getCollisionPolygonsCount (layerId: Int32)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        
        gi.object_method_bind_ptrcall_v (TileData.method_get_collision_polygons_count, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_id)
        return _result
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_get_collision_polygons_count, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_add_collision_polygon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_collision_polygon")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Adds a collision polygon to the tile on the given TileSet physics layer.
    public final func addCollisionPolygon (layerId: Int32) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        
        gi.object_method_bind_ptrcall_v (TileData.method_add_collision_polygon, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_add_collision_polygon, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_collision_polygon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_collision_polygon")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Removes the polygon at index `polygonIndex` for TileSet physics layer with index `layerId`.
    public final func removeCollisionPolygon (layerId: Int32, polygonIndex: Int32) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        
        gi.object_method_bind_ptrcall_v (TileData.method_remove_collision_polygon, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id, &copy_polygon_index)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_polygon_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileData.method_remove_collision_polygon, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_collision_polygon_points: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_polygon_points")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3230546541)!
            }
            
        }
        
    }()
    
    /// Sets the points of the polygon at index `polygonIndex` for TileSet physics layer with index `layerId`.
    public final func setCollisionPolygonPoints (layerId: Int32, polygonIndex: Int32, polygon: PackedVector2Array) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_collision_polygon_points, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id, &copy_polygon_index, &polygon.content)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_polygon_index) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &polygon.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileData.method_set_collision_polygon_points, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_polygon_points: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_polygon_points")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 103942801)!
            }
            
        }
        
    }()
    
    /// Returns the points of the polygon at index `polygonIndex` for TileSet physics layer with index `layerId`.
    public final func getCollisionPolygonPoints (layerId: Int32, polygonIndex: Int32)-> PackedVector2Array {
        let _result: PackedVector2Array = PackedVector2Array ()
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        
        gi.object_method_bind_ptrcall_v (TileData.method_get_collision_polygon_points, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_layer_id, &copy_polygon_index)
        return _result
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_polygon_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileData.method_get_collision_polygon_points, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_collision_polygon_one_way: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_polygon_one_way")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1383440665)!
            }
            
        }
        
    }()
    
    /// Enables/disables one-way collisions on the polygon at index `polygonIndex` for TileSet physics layer with index `layerId`.
    public final func setCollisionPolygonOneWay (layerId: Int32, polygonIndex: Int32, oneWay: Bool) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        var copy_one_way = oneWay
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_collision_polygon_one_way, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id, &copy_polygon_index, &copy_one_way)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        var copy_one_way = oneWay
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_polygon_index) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_one_way) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileData.method_set_collision_polygon_one_way, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_collision_polygon_one_way: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_collision_polygon_one_way")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2522259332)!
            }
            
        }
        
    }()
    
    /// Returns whether one-way collisions are enabled for the polygon at index `polygonIndex` for TileSet physics layer with index `layerId`.
    public final func isCollisionPolygonOneWay (layerId: Int32, polygonIndex: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        
        gi.object_method_bind_ptrcall_v (TileData.method_is_collision_polygon_one_way, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_id, &copy_polygon_index)
        return _result
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_polygon_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileData.method_is_collision_polygon_one_way, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_collision_polygon_one_way_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_polygon_one_way_margin")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3506521499)!
            }
            
        }
        
    }()
    
    /// Enables/disables one-way collisions on the polygon at index `polygonIndex` for TileSet physics layer with index `layerId`.
    public final func setCollisionPolygonOneWayMargin (layerId: Int32, polygonIndex: Int32, oneWayMargin: Double) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        var copy_one_way_margin = oneWayMargin
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_collision_polygon_one_way_margin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id, &copy_polygon_index, &copy_one_way_margin)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        var copy_one_way_margin = oneWayMargin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_polygon_index) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_one_way_margin) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TileData.method_set_collision_polygon_one_way_margin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_polygon_one_way_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_polygon_one_way_margin")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3085491603)!
            }
            
        }
        
    }()
    
    /// Returns the one-way margin (for one-way platforms) of the polygon at index `polygonIndex` for TileSet physics layer with index `layerId`.
    public final func getCollisionPolygonOneWayMargin (layerId: Int32, polygonIndex: Int32)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        
        gi.object_method_bind_ptrcall_v (TileData.method_get_collision_polygon_one_way_margin, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_id, &copy_polygon_index)
        return _result
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var copy_polygon_index: Int = Int (polygonIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_polygon_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileData.method_get_collision_polygon_one_way_margin, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_terrain_set: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_terrain_set")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_terrain_set (_ terrainSet: Int32) {
        #if true
        
        var copy_terrain_set: Int = Int (terrainSet)
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_terrain_set, UnsafeMutableRawPointer (mutating: handle), nil, &copy_terrain_set)
        
        #else
        
        var copy_terrain_set: Int = Int (terrainSet)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_terrain_set) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_terrain_set, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_terrain_set: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_terrain_set")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_terrain_set ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileData.method_get_terrain_set, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_terrain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_terrain")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_terrain (_ terrain: Int32) {
        #if true
        
        var copy_terrain: Int = Int (terrain)
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_terrain, UnsafeMutableRawPointer (mutating: handle), nil, &copy_terrain)
        
        #else
        
        var copy_terrain: Int = Int (terrain)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_terrain) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_terrain, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_terrain: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_terrain")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_terrain ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TileData.method_get_terrain, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_terrain_peering_bit: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_terrain_peering_bit")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1084452308)!
            }
            
        }
        
    }()
    
    /// Sets the tile's terrain bit for the given `peeringBit` direction.
    public final func setTerrainPeeringBit (_ peeringBit: TileSet.CellNeighbor, terrain: Int32) {
        #if true
        
        var copy_peering_bit = Int64 (peeringBit.rawValue)
        var copy_terrain: Int = Int (terrain)
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_terrain_peering_bit, UnsafeMutableRawPointer (mutating: handle), nil, &copy_peering_bit, &copy_terrain)
        
        #else
        
        var copy_peering_bit = Int64 (peeringBit.rawValue)
        var copy_terrain: Int = Int (terrain)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_peering_bit) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_terrain) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileData.method_set_terrain_peering_bit, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_terrain_peering_bit: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_terrain_peering_bit")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3831796792)!
            }
            
        }
        
    }()
    
    /// Returns the tile's terrain bit for the given `peeringBit` direction.
    public final func getTerrainPeeringBit (_ peeringBit: TileSet.CellNeighbor)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_peering_bit = Int64 (peeringBit.rawValue)
        
        gi.object_method_bind_ptrcall_v (TileData.method_get_terrain_peering_bit, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_peering_bit)
        return _result
        #else
        
        var copy_peering_bit = Int64 (peeringBit.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_peering_bit) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_get_terrain_peering_bit, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_navigation_polygon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_navigation_polygon")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2224691167)!
            }
            
        }
        
    }()
    
    /// Sets the navigation polygon for the TileSet navigation layer with index `layerId`.
    public final func setNavigationPolygon (layerId: Int32, navigationPolygon: NavigationPolygon?) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        var copy_navigation_polygon_handle = navigationPolygon?.handle
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_navigation_polygon, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id, &copy_navigation_polygon_handle)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: navigationPolygon?.handle) { p1 in
            _args.append (navigationPolygon == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (TileData.method_set_navigation_polygon, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_navigation_polygon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_navigation_polygon")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3991786031)!
            }
            
        }
        
    }()
    
    /// Returns the navigation polygon of the tile for the TileSet navigation layer with index `layerId`.
    public final func getNavigationPolygon (layerId: Int32)-> NavigationPolygon? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        
        gi.object_method_bind_ptrcall_v (TileData.method_get_navigation_polygon, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_id)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_get_navigation_polygon, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_probability: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_probability")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_probability (_ probability: Double) {
        #if true
        
        var copy_probability = probability
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_probability, UnsafeMutableRawPointer (mutating: handle), nil, &copy_probability)
        
        #else
        
        var copy_probability = probability
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_probability) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_set_probability, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_probability: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_probability")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_probability ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TileData.method_get_probability, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_custom_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_data")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 402577236)!
            }
            
        }
        
    }()
    
    /// Sets the tile's custom data value for the TileSet custom data layer with name `layerName`.
    public final func setCustomData (layerName: String, value: Variant) {
        #if true
        
        let gstr_layer_name = GString (layerName)
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_custom_data, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_layer_name.content, &value.content)
        
        #else
        
        let gstr_layer_name = GString (layerName)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_layer_name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &value.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileData.method_set_custom_data, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_data")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1868160156)!
            }
            
        }
        
    }()
    
    /// Returns the custom data value for custom data layer named `layerName`.
    public final func getCustomData (layerName: String)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        let gstr_layer_name = GString (layerName)
        
        gi.object_method_bind_ptrcall_v (TileData.method_get_custom_data, UnsafeMutableRawPointer (mutating: handle), &_result.content, &gstr_layer_name.content)
        return _result
        #else
        
        let gstr_layer_name = GString (layerName)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_layer_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_get_custom_data, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_custom_data_by_layer_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_data_by_layer_id")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2152698145)!
            }
            
        }
        
    }()
    
    /// Sets the tile's custom data value for the TileSet custom data layer with index `layerId`.
    public final func setCustomDataByLayerId (_ layerId: Int32, value: Variant) {
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        
        gi.object_method_bind_ptrcall_v (TileData.method_set_custom_data_by_layer_id, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_id, &value.content)
        
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &value.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TileData.method_set_custom_data_by_layer_id, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_data_by_layer_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_data_by_layer_id")
        return withUnsafePointer (to: &TileData.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4227898402)!
            }
            
        }
        
    }()
    
    /// Returns the custom data value for custom data layer with index `layerId`.
    public final func getCustomDataByLayerId (_ layerId: Int32)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        var copy_layer_id: Int = Int (layerId)
        
        gi.object_method_bind_ptrcall_v (TileData.method_get_custom_data_by_layer_id, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_layer_id)
        return _result
        #else
        
        var copy_layer_id: Int = Int (layerId)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TileData.method_get_custom_data_by_layer_id, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    // Signals 
    /// Emitted when any of the properties are changed.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.changed.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var changed: SimpleSignal { SimpleSignal (target: self, signalName: "changed") }
    
}

