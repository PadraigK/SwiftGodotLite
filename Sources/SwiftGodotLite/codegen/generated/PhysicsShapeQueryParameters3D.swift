// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Provides parameters for ``PhysicsDirectSpaceState3D/intersectShape(parameters:maxResults:)``.
/// 
/// By changing various properties of this object, such as the shape, you can configure the parameters for ``PhysicsDirectSpaceState3D/intersectShape(parameters:maxResults:)``.
open class PhysicsShapeQueryParameters3D: RefCounted {
    override open class var godotClassName: StringName { "PhysicsShapeQueryParameters3D" }
    
    /* Properties */
    
    /// The physics layers the query will detect (as a bitmask). By default, all collision layers are detected. See [url=$DOCS_URL/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.
    final public var collisionMask: UInt32 {
        get {
            return get_collision_mask ()
        }
        
        set {
            set_collision_mask (newValue)
        }
        
    }
    
    /// The list of object ``RID``s that will be excluded from collisions. Use ``CollisionObject3D/getRid()`` to get the ``RID`` associated with a ``CollisionObject3D``-derived node.
    final public var exclude: VariantCollection<RID> {
        get {
            return get_exclude ()
        }
        
        set {
            set_exclude (newValue)
        }
        
    }
    
    /// The collision margin for the shape.
    final public var margin: Double {
        get {
            return get_margin ()
        }
        
        set {
            set_margin (newValue)
        }
        
    }
    
    /// The motion of the shape being queried for.
    final public var motion: Vector3 {
        get {
            return get_motion ()
        }
        
        set {
            set_motion (newValue)
        }
        
    }
    
    /// The ``Shape3D`` that will be used for collision/intersection queries. This stores the actual reference which avoids the shape to be released while being used for queries, so always prefer using this over ``shapeRid``.
    final public var shape: Resource? {
        get {
            return get_shape ()
        }
        
        set {
            set_shape (newValue)
        }
        
    }
    
    /// The queried shape's ``RID`` that will be used for collision/intersection queries. Use this over ``shape`` if you want to optimize for performance using the Servers API:
    /// 
    final public var shapeRid: RID {
        get {
            return get_shape_rid ()
        }
        
        set {
            set_shape_rid (newValue)
        }
        
    }
    
    /// The queried shape's transform matrix.
    final public var transform: Transform3D {
        get {
            return get_transform ()
        }
        
        set {
            set_transform (newValue)
        }
        
    }
    
    /// If `true`, the query will take ``PhysicsBody3D``s into account.
    final public var collideWithBodies: Bool {
        get {
            return is_collide_with_bodies_enabled ()
        }
        
        set {
            set_collide_with_bodies (newValue)
        }
        
    }
    
    /// If `true`, the query will take ``Area3D``s into account.
    final public var collideWithAreas: Bool {
        get {
            return is_collide_with_areas_enabled ()
        }
        
        set {
            set_collide_with_areas (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shape")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 968641751)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shape (_ shape: Resource?) {
        #if false
        
        var copy_shape_handle = shape?.handle
        
        gi.object_method_bind_ptrcall_v (PhysicsShapeQueryParameters3D.method_set_shape, UnsafeMutableRawPointer (mutating: handle), nil, &copy_shape_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: shape?.handle) { p0 in
        _args.append (shape == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_set_shape, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shape")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 121922552)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shape ()-> Resource? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_get_shape, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_shape_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shape_rid")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shape_rid (_ shape: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsShapeQueryParameters3D.method_set_shape_rid, UnsafeMutableRawPointer (mutating: handle), nil, &shape.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &shape.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_set_shape_rid, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shape_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shape_rid")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shape_rid ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_get_shape_rid, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_transform")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2952846383)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_transform (_ transform: Transform3D) {
        #if false
        
        var copy_transform = transform
        
        gi.object_method_bind_ptrcall_v (PhysicsShapeQueryParameters3D.method_set_transform, UnsafeMutableRawPointer (mutating: handle), nil, &copy_transform)
        
        #else
        
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_transform) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_set_transform, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transform")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3229777777)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_transform ()-> Transform3D {
        var _result: Transform3D = Transform3D ()
        gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_get_transform, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_motion: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_motion")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_motion (_ motion: Vector3) {
        #if false
        
        var copy_motion = motion
        
        gi.object_method_bind_ptrcall_v (PhysicsShapeQueryParameters3D.method_set_motion, UnsafeMutableRawPointer (mutating: handle), nil, &copy_motion)
        
        #else
        
        var copy_motion = motion
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_motion) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_set_motion, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_motion: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_motion")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_motion ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_get_motion, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_margin")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_margin (_ margin: Double) {
        #if false
        
        var copy_margin = margin
        
        gi.object_method_bind_ptrcall_v (PhysicsShapeQueryParameters3D.method_set_margin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_margin)
        
        #else
        
        var copy_margin = margin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_set_margin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_margin")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_margin ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_get_margin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_mask")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_mask (_ collisionMask: UInt32) {
        #if false
        
        var copy_collision_mask: Int = Int (collisionMask)
        
        gi.object_method_bind_ptrcall_v (PhysicsShapeQueryParameters3D.method_set_collision_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_collision_mask)
        
        #else
        
        var copy_collision_mask: Int = Int (collisionMask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_collision_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_set_collision_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_mask")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_get_collision_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_exclude: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_exclude")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_exclude (_ exclude: VariantCollection<RID>) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (PhysicsShapeQueryParameters3D.method_set_exclude, UnsafeMutableRawPointer (mutating: handle), nil, &exclude.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &exclude.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_set_exclude, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_exclude: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_exclude")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_exclude ()-> VariantCollection<RID> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_get_exclude, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<RID>(content: _result)
    }
    
    fileprivate static var method_set_collide_with_bodies: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collide_with_bodies")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collide_with_bodies (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (PhysicsShapeQueryParameters3D.method_set_collide_with_bodies, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_set_collide_with_bodies, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_collide_with_bodies_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_collide_with_bodies_enabled")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_collide_with_bodies_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_is_collide_with_bodies_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collide_with_areas: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collide_with_areas")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collide_with_areas (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (PhysicsShapeQueryParameters3D.method_set_collide_with_areas, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_set_collide_with_areas, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_collide_with_areas_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_collide_with_areas_enabled")
        return withUnsafePointer (to: &PhysicsShapeQueryParameters3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_collide_with_areas_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicsShapeQueryParameters3D.method_is_collide_with_areas_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

