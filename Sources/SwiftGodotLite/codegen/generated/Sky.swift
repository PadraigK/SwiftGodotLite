// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Defines a 3D environment's background by using a ``Material``.
/// 
/// The ``Sky`` class uses a ``Material`` to render a 3D environment's background and the light it emits by updating the reflection/radiance cubemaps.
open class Sky: Resource {
    override open class var godotClassName: StringName { "Sky" }
    public enum RadianceSize: Int64 {
        /// Radiance texture size is 32×32 pixels.
        case radianceSize32 = 0 // RADIANCE_SIZE_32
        /// Radiance texture size is 64×64 pixels.
        case radianceSize64 = 1 // RADIANCE_SIZE_64
        /// Radiance texture size is 128×128 pixels.
        case radianceSize128 = 2 // RADIANCE_SIZE_128
        /// Radiance texture size is 256×256 pixels.
        case radianceSize256 = 3 // RADIANCE_SIZE_256
        /// Radiance texture size is 512×512 pixels.
        case radianceSize512 = 4 // RADIANCE_SIZE_512
        /// Radiance texture size is 1024×1024 pixels.
        case radianceSize1024 = 5 // RADIANCE_SIZE_1024
        /// Radiance texture size is 2048×2048 pixels.
        case radianceSize2048 = 6 // RADIANCE_SIZE_2048
        /// Represents the size of the ``Sky/RadianceSize`` enum.
        case max = 7 // RADIANCE_SIZE_MAX
    }
    
    public enum ProcessMode: Int64 {
        /// Automatically selects the appropriate process mode based on your sky shader. If your shader uses `TIME` or `POSITION`, this will use .realtime. If your shader uses any of the `LIGHT_*` variables or any custom uniforms, this uses .incremental. Otherwise, this defaults to .quality.
        case automatic = 0 // PROCESS_MODE_AUTOMATIC
        /// Uses high quality importance sampling to process the radiance map. In general, this results in much higher quality than .realtime but takes much longer to generate. This should not be used if you plan on changing the sky at runtime. If you are finding that the reflection is not blurry enough and is showing sparkles or fireflies, try increasing ``ProjectSettings/rendering/reflections/skyReflections/ggxSamples``.
        case quality = 1 // PROCESS_MODE_QUALITY
        /// Uses the same high quality importance sampling to process the radiance map as .quality, but updates over several frames. The number of frames is determined by ``ProjectSettings/rendering/reflections/skyReflections/roughnessLayers``. Use this when you need highest quality radiance maps, but have a sky that updates slowly.
        case incremental = 2 // PROCESS_MODE_INCREMENTAL
        /// Uses the fast filtering algorithm to process the radiance map. In general this results in lower quality, but substantially faster run times. If you need better quality, but still need to update the sky every frame, consider turning on ``ProjectSettings/rendering/reflections/skyReflections/fastFilterHighQuality``.
        /// 
        /// > Note: The fast filtering algorithm is limited to 256×256 cubemaps, so ``radianceSize`` must be set to .radianceSize256. Otherwise, a warning is printed and the overridden radiance size is ignored.
        /// 
        case realtime = 3 // PROCESS_MODE_REALTIME
    }
    
    
    /* Properties */
    
    /// ``Material`` used to draw the background. Can be ``PanoramaSkyMaterial``, ``ProceduralSkyMaterial``, ``PhysicalSkyMaterial``, or even a ``ShaderMaterial`` if you want to use your own custom shader.
    final public var skyMaterial: Material? {
        get {
            return get_material ()
        }
        
        set {
            set_material (newValue)
        }
        
    }
    
    /// Sets the method for generating the radiance map from the sky. The radiance map is a cubemap with increasingly blurry versions of the sky corresponding to different levels of roughness. Radiance maps can be expensive to calculate. See ``Sky/ProcessMode`` for options.
    final public var processMode: Sky.ProcessMode {
        get {
            return get_process_mode ()
        }
        
        set {
            set_process_mode (newValue)
        }
        
    }
    
    /// The ``Sky``'s radiance map size. The higher the radiance map size, the more detailed the lighting from the ``Sky`` will be.
    /// 
    /// See ``Sky/RadianceSize`` constants for values.
    /// 
    /// > Note: Some hardware will have trouble with higher radiance sizes, especially .radianceSize512 and above. Only use such high values on high-end hardware.
    /// 
    final public var radianceSize: Sky.RadianceSize {
        get {
            return get_radiance_size ()
        }
        
        set {
            set_radiance_size (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_radiance_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_radiance_size")
        return withUnsafePointer (to: &Sky.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1512957179)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_radiance_size (_ size: Sky.RadianceSize) {
        #if true
        
        var copy_size = Int64 (size.rawValue)
        
        gi.object_method_bind_ptrcall_v (Sky.method_set_radiance_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = Int64 (size.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Sky.method_set_radiance_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_radiance_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_radiance_size")
        return withUnsafePointer (to: &Sky.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2708733976)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_radiance_size ()-> Sky.RadianceSize {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Sky.method_get_radiance_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Sky.RadianceSize (rawValue: _result)!
    }
    
    fileprivate static var method_set_process_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_process_mode")
        return withUnsafePointer (to: &Sky.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 875986769)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_process_mode (_ mode: Sky.ProcessMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Sky.method_set_process_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Sky.method_set_process_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_process_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_process_mode")
        return withUnsafePointer (to: &Sky.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 731245043)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_process_mode ()-> Sky.ProcessMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Sky.method_get_process_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Sky.ProcessMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_material: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_material")
        return withUnsafePointer (to: &Sky.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2757459619)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_material (_ material: Material?) {
        #if true
        
        var copy_material_handle = material?.handle
        
        gi.object_method_bind_ptrcall_v (Sky.method_set_material, UnsafeMutableRawPointer (mutating: handle), nil, &copy_material_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: material?.handle) { p0 in
        _args.append (material == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Sky.method_set_material, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_material: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_material")
        return withUnsafePointer (to: &Sky.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 5934680)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_material ()-> Material? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Sky.method_get_material, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

