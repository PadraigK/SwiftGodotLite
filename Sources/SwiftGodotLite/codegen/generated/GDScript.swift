// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A script implemented in the GDScript programming language.
/// 
/// A script implemented in the GDScript programming language, saved with the `.gd` extension. The script extends the functionality of all objects that instantiate it.
/// 
/// Calling ``new()`` creates a new instance of the script. ``Object/setScript(_:)`` extends an existing object, if that object's class matches one of the script's base classes.
/// 
/// If you are looking for GDScript's built-in functions, see [@GDScript] instead.
/// 
open class GDScript: Script {
    override open class var godotClassName: StringName { "GDScript" }
    /* Methods */
    fileprivate static var method_new: GDExtensionMethodBindPtr = {
        let methodName = StringName ("new")
        return withUnsafePointer (to: &GDScript.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1545262638)!
            }
            
        }
        
    }()
    
    /// Returns a new instance of the script.
    /// 
    /// For example:
    /// 
    public final func new (_ arguments: Variant...)-> Variant {
        var _result: Variant.ContentType = Variant.zero
        var _args: [UnsafeRawPointer?] = []
        
        let content = UnsafeMutableBufferPointer<Variant.ContentType>.allocate(capacity: arguments.count)
        defer { content.deallocate () }
        for idx in 0..<arguments.count {
            content [idx] = arguments [idx].content
            _args.append (content.baseAddress! + idx)
        }
        
        gi.object_method_bind_call (GDScript.method_new, UnsafeMutableRawPointer (mutating: handle), &_args, Int64 (_args.count), &_result, nil)
        return Variant (fromContentPtr: &_result)
    }
    
}

