// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// The CSG base class.
/// 
/// This is the CSG base class that provides CSG operation support to the various CSG nodes in Godot.
/// 
/// > Note: CSG nodes are intended to be used for level prototyping. Creating CSG nodes has a significant CPU cost compared to creating a ``MeshInstance3D`` with a ``PrimitiveMesh``. Moving a CSG node within another CSG node also has a significant CPU cost, so it should be avoided during gameplay.
/// 
open class CSGShape3D: GeometryInstance3D {
    override open class var godotClassName: StringName { "CSGShape3D" }
    public enum Operation: Int64 {
        /// Geometry of both primitives is merged, intersecting geometry is removed.
        case union = 0 // OPERATION_UNION
        /// Only intersecting geometry remains, the rest is removed.
        case intersection = 1 // OPERATION_INTERSECTION
        /// The second shape is subtracted from the first, leaving a dent with its shape.
        case subtraction = 2 // OPERATION_SUBTRACTION
    }
    
    
    /* Properties */
    
    /// The operation that is performed on this shape. This is ignored for the first CSG child node as the operation is between this node and the previous child of this nodes parent.
    final public var operation: CSGShape3D.Operation {
        get {
            return get_operation ()
        }
        
        set {
            set_operation (newValue)
        }
        
    }
    
    /// Snap makes the mesh vertices snap to a given distance so that the faces of two meshes can be perfectly aligned. A lower value results in greater precision but may be harder to adjust.
    final public var snap: Double {
        get {
            return get_snap ()
        }
        
        set {
            set_snap (newValue)
        }
        
    }
    
    /// Calculate tangents for the CSG shape which allows the use of normal maps. This is only applied on the root shape, this setting is ignored on any child.
    final public var calculateTangents: Bool {
        get {
            return is_calculating_tangents ()
        }
        
        set {
            set_calculate_tangents (newValue)
        }
        
    }
    
    /// Adds a collision shape to the physics engine for our CSG shape. This will always act like a static body. Note that the collision shape is still active even if the CSG shape itself is hidden. See also ``collisionMask`` and ``collisionPriority``.
    final public var useCollision: Bool {
        get {
            return is_using_collision ()
        }
        
        set {
            set_use_collision (newValue)
        }
        
    }
    
    /// The physics layers this area is in.
    /// 
    /// Collidable objects can exist in any of 32 different layers. These layers work like a tagging system, and are not visual. A collidable can use these layers to select with which objects it can collide, using the collision_mask property.
    /// 
    /// A contact is detected if object A is in any of the layers that object B scans, or object B is in any layer scanned by object A. See [url=$DOCS_URL/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.
    /// 
    final public var collisionLayer: UInt32 {
        get {
            return get_collision_layer ()
        }
        
        set {
            set_collision_layer (newValue)
        }
        
    }
    
    /// The physics layers this CSG shape scans for collisions. Only effective if ``useCollision`` is `true`. See [url=$DOCS_URL/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.
    final public var collisionMask: UInt32 {
        get {
            return get_collision_mask ()
        }
        
        set {
            set_collision_mask (newValue)
        }
        
    }
    
    /// The priority used to solve colliding when occurring penetration. Only effective if ``useCollision`` is `true`. The higher the priority is, the lower the penetration into the object will be. This can for example be used to prevent the player from breaking through the boundaries of a level.
    final public var collisionPriority: Double {
        get {
            return get_collision_priority ()
        }
        
        set {
            set_collision_priority (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_is_root_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_root_shape")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if this is a root shape and is thus the object that is rendered.
    public final func isRootShape ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CSGShape3D.method_is_root_shape, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_operation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_operation")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 811425055)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_operation (_ operation: CSGShape3D.Operation) {
        #if false
        
        var copy_operation = Int64 (operation.rawValue)
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_set_operation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_operation)
        
        #else
        
        var copy_operation = Int64 (operation.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_operation) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGShape3D.method_set_operation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_operation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_operation")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2662425879)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_operation ()-> CSGShape3D.Operation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (CSGShape3D.method_get_operation, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return CSGShape3D.Operation (rawValue: _result)!
    }
    
    fileprivate static var method_set_snap: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_snap")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_snap (_ snap: Double) {
        #if false
        
        var copy_snap = snap
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_set_snap, UnsafeMutableRawPointer (mutating: handle), nil, &copy_snap)
        
        #else
        
        var copy_snap = snap
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_snap) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGShape3D.method_set_snap, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_snap: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_snap")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_snap ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CSGShape3D.method_get_snap, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_use_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_use_collision")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_use_collision (_ operation: Bool) {
        #if false
        
        var copy_operation = operation
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_set_use_collision, UnsafeMutableRawPointer (mutating: handle), nil, &copy_operation)
        
        #else
        
        var copy_operation = operation
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_operation) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGShape3D.method_set_use_collision, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_using_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_using_collision")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_using_collision ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CSGShape3D.method_is_using_collision, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_layer")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_layer (_ layer: UInt32) {
        #if false
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_set_collision_layer, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer)
        
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGShape3D.method_set_collision_layer, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_layer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_layer")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_layer ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (CSGShape3D.method_get_collision_layer, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_mask")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_mask (_ mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_set_collision_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGShape3D.method_set_collision_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_mask")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (CSGShape3D.method_get_collision_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_mask_value")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``collisionMask``, given a `layerNumber` between 1 and 32.
    public final func setCollisionMaskValue (layerNumber: Int32, value: Bool) {
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_set_collision_mask_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_number, &copy_value)
        
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (CSGShape3D.method_set_collision_mask_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_mask_value")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``collisionMask`` is enabled, given a `layerNumber` between 1 and 32.
    public final func getCollisionMaskValue (layerNumber: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_get_collision_mask_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_number)
        return _result
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGShape3D.method_get_collision_mask_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_collision_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_layer_value")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``collisionLayer``, given a `layerNumber` between 1 and 32.
    public final func setCollisionLayerValue (layerNumber: Int32, value: Bool) {
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_set_collision_layer_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_number, &copy_value)
        
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (CSGShape3D.method_set_collision_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_layer_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_layer_value")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``collisionLayer`` is enabled, given a `layerNumber` between 1 and 32.
    public final func getCollisionLayerValue (layerNumber: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_get_collision_layer_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_number)
        return _result
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGShape3D.method_get_collision_layer_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_collision_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_priority")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_priority (_ priority: Double) {
        #if false
        
        var copy_priority = priority
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_set_collision_priority, UnsafeMutableRawPointer (mutating: handle), nil, &copy_priority)
        
        #else
        
        var copy_priority = priority
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_priority) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGShape3D.method_set_collision_priority, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_priority")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_priority ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CSGShape3D.method_get_collision_priority, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_calculate_tangents: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_calculate_tangents")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_calculate_tangents (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (CSGShape3D.method_set_calculate_tangents, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CSGShape3D.method_set_calculate_tangents, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_calculating_tangents: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_calculating_tangents")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_calculating_tangents ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CSGShape3D.method_is_calculating_tangents, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_meshes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_meshes")
        return withUnsafePointer (to: &CSGShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns an ``GArray`` with two elements, the first is the ``Transform3D`` of this node and the second is the root ``Mesh`` of this node. Only works when this node is the root shape.
    public final func getMeshes ()-> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall (CSGShape3D.method_get_meshes, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
}

