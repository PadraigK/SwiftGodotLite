// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Used by the editor to extend its functionality.
/// 
/// Plugins are used by the editor to extend functionality. The most common types of plugins are those which edit a given node or resource type, import plugins and export plugins. See also ``EditorScript`` to add functions to the editor.
/// 
/// > Note: Some names in this class contain "left" or "right" (e.g. .leftUl). These APIs assume left-to-right layout, and would be backwards when using right-to-left layout. These names are kept for compatibility reasons.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``sceneChanged``
/// - ``sceneClosed``
/// - ``mainScreenChanged``
/// - ``resourceSaved``
/// - ``projectSettingsChanged``
open class EditorPlugin: Node {
    override open class var godotClassName: StringName { "EditorPlugin" }
    public enum CustomControlContainer: Int64 {
        /// Main editor toolbar, next to play buttons.
        case toolbar = 0 // CONTAINER_TOOLBAR
        /// The toolbar that appears when 3D editor is active.
        case spatialEditorMenu = 1 // CONTAINER_SPATIAL_EDITOR_MENU
        /// Left sidebar of the 3D editor.
        case spatialEditorSideLeft = 2 // CONTAINER_SPATIAL_EDITOR_SIDE_LEFT
        /// Right sidebar of the 3D editor.
        case spatialEditorSideRight = 3 // CONTAINER_SPATIAL_EDITOR_SIDE_RIGHT
        /// Bottom panel of the 3D editor.
        case spatialEditorBottom = 4 // CONTAINER_SPATIAL_EDITOR_BOTTOM
        /// The toolbar that appears when 2D editor is active.
        case canvasEditorMenu = 5 // CONTAINER_CANVAS_EDITOR_MENU
        /// Left sidebar of the 2D editor.
        case canvasEditorSideLeft = 6 // CONTAINER_CANVAS_EDITOR_SIDE_LEFT
        /// Right sidebar of the 2D editor.
        case canvasEditorSideRight = 7 // CONTAINER_CANVAS_EDITOR_SIDE_RIGHT
        /// Bottom panel of the 2D editor.
        case canvasEditorBottom = 8 // CONTAINER_CANVAS_EDITOR_BOTTOM
        /// Bottom section of the inspector.
        case inspectorBottom = 9 // CONTAINER_INSPECTOR_BOTTOM
        /// Tab of Project Settings dialog, to the left of other tabs.
        case projectSettingTabLeft = 10 // CONTAINER_PROJECT_SETTING_TAB_LEFT
        /// Tab of Project Settings dialog, to the right of other tabs.
        case projectSettingTabRight = 11 // CONTAINER_PROJECT_SETTING_TAB_RIGHT
    }
    
    public enum DockSlot: Int64 {
        /// Dock slot, left side, upper-left (empty in default layout).
        case leftUl = 0 // DOCK_SLOT_LEFT_UL
        /// Dock slot, left side, bottom-left (empty in default layout).
        case leftBl = 1 // DOCK_SLOT_LEFT_BL
        /// Dock slot, left side, upper-right (in default layout includes Scene and Import docks).
        case leftUr = 2 // DOCK_SLOT_LEFT_UR
        /// Dock slot, left side, bottom-right (in default layout includes FileSystem dock).
        case leftBr = 3 // DOCK_SLOT_LEFT_BR
        /// Dock slot, right side, upper-left (in default layout includes Inspector, Node, and History docks).
        case rightUl = 4 // DOCK_SLOT_RIGHT_UL
        /// Dock slot, right side, bottom-left (empty in default layout).
        case rightBl = 5 // DOCK_SLOT_RIGHT_BL
        /// Dock slot, right side, upper-right (empty in default layout).
        case rightUr = 6 // DOCK_SLOT_RIGHT_UR
        /// Dock slot, right side, bottom-right (empty in default layout).
        case rightBr = 7 // DOCK_SLOT_RIGHT_BR
        /// Represents the size of the ``EditorPlugin/DockSlot`` enum.
        case max = 8 // DOCK_SLOT_MAX
    }
    
    public enum AfterGUIInput: Int64 {
        /// Forwards the ``InputEvent`` to other EditorPlugins.
        case pass = 0 // AFTER_GUI_INPUT_PASS
        /// Prevents the ``InputEvent`` from reaching other Editor classes.
        case stop = 1 // AFTER_GUI_INPUT_STOP
        /// Pass the ``InputEvent`` to other editor plugins except the main ``Node3D`` one. This can be used to prevent node selection changes and work with sub-gizmos instead.
        case custom = 2 // AFTER_GUI_INPUT_CUSTOM
    }
    
    /* Methods */
    /// Called when there is a root node in the current edited scene, ``_handles(object:)`` is implemented and an ``InputEvent`` happens in the 2D viewport. Intercepts the ``InputEvent``, if `return true` ``EditorPlugin`` consumes the `event`, otherwise forwards `event` to other Editor classes.
    /// 
    /// **Example:**
    /// 
    /// Must `return false` in order to forward the ``InputEvent`` to other Editor classes.
    /// 
    /// **Example:**
    /// 
    @_documentation(visibility: public)
    open func _forwardCanvasGuiInput (event: InputEvent?)-> Bool {
        return false
    }
    
    /// Called by the engine when the 2D editor's viewport is updated. Use the `overlay` ``Control`` for drawing. You can update the viewport manually by calling ``updateOverlays()``.
    /// 
    @_documentation(visibility: public)
    open func _forwardCanvasDrawOverViewport (viewportControl: Control?) {
    }
    
    /// This method is the same as ``_forwardCanvasDrawOverViewport(viewportControl:)``, except it draws on top of everything. Useful when you need an extra layer that shows over anything else.
    /// 
    /// You need to enable calling of this method by using ``setForceDrawOverForwardingEnabled()``.
    /// 
    @_documentation(visibility: public)
    open func _forwardCanvasForceDrawOverViewport (viewportControl: Control?) {
    }
    
    /// Called when there is a root node in the current edited scene, ``_handles(object:)`` is implemented, and an ``InputEvent`` happens in the 3D viewport. The return value decides whether the ``InputEvent`` is consumed or forwarded to other ``EditorPlugin``s. See ``EditorPlugin/AfterGUIInput`` for options.
    /// 
    /// **Example:**
    /// 
    /// Must `return EditorPlugin.AFTER_GUI_INPUT_PASS` in order to forward the ``InputEvent`` to other Editor classes.
    /// 
    /// **Example:**
    /// 
    @_documentation(visibility: public)
    open func _forward3dGuiInput (viewportCamera: Camera3D?, event: InputEvent?)-> Int32 {
        return 0
    }
    
    /// Called by the engine when the 3D editor's viewport is updated. Use the `overlay` ``Control`` for drawing. You can update the viewport manually by calling ``updateOverlays()``.
    /// 
    @_documentation(visibility: public)
    open func _forward3dDrawOverViewport (viewportControl: Control?) {
    }
    
    /// This method is the same as ``_forward3dDrawOverViewport(viewportControl:)``, except it draws on top of everything. Useful when you need an extra layer that shows over anything else.
    /// 
    /// You need to enable calling of this method by using ``setForceDrawOverForwardingEnabled()``.
    /// 
    @_documentation(visibility: public)
    open func _forward3dForceDrawOverViewport (viewportControl: Control?) {
    }
    
    /// Override this method in your plugin to provide the name of the plugin when displayed in the Godot editor.
    /// 
    /// For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons.
    /// 
    @_documentation(visibility: public)
    open func _getPluginName ()-> String {
        return String ()
    }
    
    /// Override this method in your plugin to return a ``Texture2D`` in order to give it an icon.
    /// 
    /// For main screen plugins, this appears at the top of the screen, to the right of the "2D", "3D", "Script", and "AssetLib" buttons.
    /// 
    /// Ideally, the plugin icon should be white with a transparent background and 16x16 pixels in size.
    /// 
    @_documentation(visibility: public)
    open func _getPluginIcon ()-> Texture2D? {
        return Texture2D ()
    }
    
    /// Returns `true` if this is a main screen editor plugin (it goes in the workspace selector together with **2D**, **3D**, **Script** and **AssetLib**).
    /// 
    /// When the plugin's workspace is selected, other main screen plugins will be hidden, but your plugin will not appear automatically. It needs to be added as a child of ``EditorInterface/getBaseControl()`` and made visible inside ``_makeVisible(_:)``.
    /// 
    /// Use ``_getPluginName()`` and ``_getPluginIcon()`` to customize the plugin button's appearance.
    /// 
    @_documentation(visibility: public)
    open func _hasMainScreen ()-> Bool {
        return false
    }
    
    /// This function will be called when the editor is requested to become visible. It is used for plugins that edit a specific object type.
    /// 
    /// Remember that you have to manage the visibility of all your editor controls manually.
    /// 
    @_documentation(visibility: public)
    open func _makeVisible (_ visible: Bool) {
    }
    
    /// This function is used for plugins that edit specific object types (nodes or resources). It requests the editor to edit the given object.
    /// 
    /// `object` can be `null` if the plugin was editing an object, but there is no longer any selected object handled by this plugin. It can be used to cleanup editing state.
    /// 
    @_documentation(visibility: public)
    open func _edit (object: Object?) {
    }
    
    /// Implement this function if your plugin edits a specific type of object (Resource or Node). If you return `true`, then you will get the functions ``_edit(object:)`` and ``_makeVisible(_:)`` called when the editor requests them. If you have declared the methods ``_forwardCanvasGuiInput(event:)`` and ``_forward3dGuiInput(viewportCamera:event:)`` these will be called too.
    /// 
    /// > Note: Each plugin should handle only one type of objects at a time. If a plugin handes more types of objects and they are edited at the same time, it will result in errors.
    /// 
    @_documentation(visibility: public)
    open func _handles (object: Object?)-> Bool {
        return false
    }
    
    /// Override this method to provide a state data you want to be saved, like view position, grid settings, folding, etc. This is used when saving the scene (so state is kept when opening it again) and for switching tabs (so state can be restored when the tab returns). This data is automatically saved for each scene in an `editstate` file in the editor metadata folder. If you want to store global (scene-independent) editor data for your plugin, you can use ``_getWindowLayout(configuration:)`` instead.
    /// 
    /// Use ``_setState(_:)`` to restore your saved state.
    /// 
    /// > Note: This method should not be used to save important settings that should persist with the project.
    /// 
    /// > Note: You must implement ``_getPluginName()`` for the state to be stored and restored correctly.
    /// 
    @_documentation(visibility: public)
    open func _getState ()-> GDictionary {
        return GDictionary ()
    }
    
    /// Restore the state saved by ``_getState()``. This method is called when the current scene tab is changed in the editor.
    /// 
    /// > Note: Your plugin must implement ``_getPluginName()``, otherwise it will not be recognized and this method will not be called.
    /// 
    @_documentation(visibility: public)
    open func _setState (_ state: GDictionary) {
    }
    
    /// Clear all the state and reset the object being edited to zero. This ensures your plugin does not keep editing a currently existing node, or a node from the wrong scene.
    @_documentation(visibility: public)
    open func _clear () {
    }
    
    /// Override this method to provide a custom message that lists unsaved changes. The editor will call this method when exiting or when closing a scene, and display the returned string in a confirmation dialog. Return empty string if the plugin has no unsaved changes.
    /// 
    /// When closing a scene, `forScene` is the path to the scene being closed. You can use it to handle built-in resources in that scene.
    /// 
    /// If the user confirms saving, ``_saveExternalData()`` will be called, before closing the editor.
    /// 
    /// If the plugin has no scene-specific changes, you can ignore the calls when closing scenes:
    /// 
    @_documentation(visibility: public)
    open func _getUnsavedStatus (forScene: String)-> String {
        return String ()
    }
    
    /// This method is called after the editor saves the project or when it's closed. It asks the plugin to save edited external scenes/resources.
    @_documentation(visibility: public)
    open func _saveExternalData () {
    }
    
    /// This method is called when the editor is about to save the project, switch to another tab, etc. It asks the plugin to apply any pending state changes to ensure consistency.
    /// 
    /// This is used, for example, in shader editors to let the plugin know that it must apply the shader code being written by the user to the object.
    /// 
    @_documentation(visibility: public)
    open func _applyChanges () {
    }
    
    /// This is for editors that edit script-based objects. You can return a list of breakpoints in the format (`script:line`), for example: `res://path_to_script.gd:25`.
    @_documentation(visibility: public)
    open func _getBreakpoints ()-> PackedStringArray {
        return PackedStringArray ()
    }
    
    /// Restore the plugin GUI layout and data saved by ``_getWindowLayout(configuration:)``. This method is called for every plugin on editor startup. Use the provided `configuration` file to read your saved data.
    /// 
    @_documentation(visibility: public)
    open func _setWindowLayout (configuration: ConfigFile?) {
    }
    
    /// Override this method to provide the GUI layout of the plugin or any other data you want to be stored. This is used to save the project's editor layout when ``queueSaveLayout()`` is called or the editor layout was changed (for example changing the position of a dock). The data is stored in the `editor_layout.cfg` file in the editor metadata directory.
    /// 
    /// Use ``_setWindowLayout(configuration:)`` to restore your saved layout.
    /// 
    @_documentation(visibility: public)
    open func _getWindowLayout (configuration: ConfigFile?) {
    }
    
    /// This method is called when the editor is about to run the project. The plugin can then perform required operations before the project runs.
    /// 
    /// This method must return a boolean. If this method returns `false`, the project will not run. The run is aborted immediately, so this also prevents all other plugins' ``_build()`` methods from running.
    /// 
    @_documentation(visibility: public)
    open func _build ()-> Bool {
        return false
    }
    
    /// Called by the engine when the user enables the ``EditorPlugin`` in the Plugin tab of the project settings window.
    @_documentation(visibility: public)
    open func _enablePlugin () {
    }
    
    /// Called by the engine when the user disables the ``EditorPlugin`` in the Plugin tab of the project settings window.
    @_documentation(visibility: public)
    open func _disablePlugin () {
    }
    
    fileprivate static var method_add_control_to_container: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_control_to_container")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3092750152)!
            }
            
        }
        
    }()
    
    /// Adds a custom control to a container (see ``EditorPlugin/CustomControlContainer``). There are many locations where custom controls can be added in the editor UI.
    /// 
    /// Please remember that you have to manage the visibility of your custom controls yourself (and likely hide it after adding it).
    /// 
    /// When your plugin is deactivated, make sure to remove your custom control with ``removeControlFromContainer(_:control:)`` and free it with ``Node/queueFree()``.
    /// 
    public final func addControlToContainer (_ container: EditorPlugin.CustomControlContainer, control: Control?) {
        #if true
        
        var copy_container = Int64 (container.rawValue)
        var copy_control_handle = control?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_control_to_container, UnsafeMutableRawPointer (mutating: handle), nil, &copy_container, &copy_control_handle)
        
        #else
        
        var copy_container = Int64 (container.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_container) { p0 in
            _args.append (p0)
            withUnsafePointer (to: control?.handle) { p1 in
            _args.append (control == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (EditorPlugin.method_add_control_to_container, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_control_to_bottom_panel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_control_to_bottom_panel")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3526039376)!
            }
            
        }
        
    }()
    
    /// Adds a control to the bottom panel (together with Output, Debug, Animation, etc). Returns a reference to the button added. It's up to you to hide/show the button when needed. When your plugin is deactivated, make sure to remove your custom control with ``removeControlFromBottomPanel(control:)`` and free it with ``Node/queueFree()``.
    public final func addControlToBottomPanel (control: Control?, title: String)-> Button? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        let gstr_title = GString (title)
        var copy_control_handle = control?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_control_to_bottom_panel, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_control_handle, &gstr_title.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        let gstr_title = GString (title)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: control?.handle) { p0 in
        _args.append (control == nil ? nil : p0)
            return withUnsafePointer (to: &gstr_title.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorPlugin.method_add_control_to_bottom_panel, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_control_to_dock: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_control_to_dock")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3354871258)!
            }
            
        }
        
    }()
    
    /// Adds the control to a specific dock slot (see ``EditorPlugin/DockSlot`` for options).
    /// 
    /// If the dock is repositioned and as long as the plugin is active, the editor will save the dock position on further sessions.
    /// 
    /// When your plugin is deactivated, make sure to remove your custom control with ``removeControlFromDocks(control:)`` and free it with ``Node/queueFree()``.
    /// 
    public final func addControlToDock (slot: EditorPlugin.DockSlot, control: Control?) {
        #if true
        
        var copy_slot = Int64 (slot.rawValue)
        var copy_control_handle = control?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_control_to_dock, UnsafeMutableRawPointer (mutating: handle), nil, &copy_slot, &copy_control_handle)
        
        #else
        
        var copy_slot = Int64 (slot.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_slot) { p0 in
            _args.append (p0)
            withUnsafePointer (to: control?.handle) { p1 in
            _args.append (control == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (EditorPlugin.method_add_control_to_dock, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_control_from_docks: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_control_from_docks")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1496901182)!
            }
            
        }
        
    }()
    
    /// Removes the control from the dock. You have to manually ``Node/queueFree()`` the control.
    public final func removeControlFromDocks (control: Control?) {
        #if true
        
        var copy_control_handle = control?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_control_from_docks, UnsafeMutableRawPointer (mutating: handle), nil, &copy_control_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: control?.handle) { p0 in
        _args.append (control == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_control_from_docks, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_control_from_bottom_panel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_control_from_bottom_panel")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1496901182)!
            }
            
        }
        
    }()
    
    /// Removes the control from the bottom panel. You have to manually ``Node/queueFree()`` the control.
    public final func removeControlFromBottomPanel (control: Control?) {
        #if true
        
        var copy_control_handle = control?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_control_from_bottom_panel, UnsafeMutableRawPointer (mutating: handle), nil, &copy_control_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: control?.handle) { p0 in
        _args.append (control == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_control_from_bottom_panel, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_control_from_container: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_control_from_container")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3092750152)!
            }
            
        }
        
    }()
    
    /// Removes the control from the specified container. You have to manually ``Node/queueFree()`` the control.
    public final func removeControlFromContainer (_ container: EditorPlugin.CustomControlContainer, control: Control?) {
        #if true
        
        var copy_container = Int64 (container.rawValue)
        var copy_control_handle = control?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_control_from_container, UnsafeMutableRawPointer (mutating: handle), nil, &copy_container, &copy_control_handle)
        
        #else
        
        var copy_container = Int64 (container.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_container) { p0 in
            _args.append (p0)
            withUnsafePointer (to: control?.handle) { p1 in
            _args.append (control == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (EditorPlugin.method_remove_control_from_container, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_tool_menu_item: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_tool_menu_item")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2137474292)!
            }
            
        }
        
    }()
    
    /// Adds a custom menu item to **Project > Tools** named `name`. When clicked, the provided `callable` will be called.
    public final func addToolMenuItem (name: String, callable: Callable) {
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_tool_menu_item, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content, &callable.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &callable.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorPlugin.method_add_tool_menu_item, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_tool_submenu_item: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_tool_submenu_item")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1019428915)!
            }
            
        }
        
    }()
    
    /// Adds a custom ``PopupMenu`` submenu under **Project > Tools >** `name`. Use ``removeToolMenuItem(name:)`` on plugin clean up to remove the menu.
    public final func addToolSubmenuItem (name: String, submenu: PopupMenu?) {
        #if true
        
        let gstr_name = GString (name)
        var copy_submenu_handle = submenu?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_tool_submenu_item, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content, &copy_submenu_handle)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: submenu?.handle) { p1 in
            _args.append (submenu == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (EditorPlugin.method_add_tool_submenu_item, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_tool_menu_item: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_tool_menu_item")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Removes a menu `name` from **Project > Tools**.
    public final func removeToolMenuItem (name: String) {
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_tool_menu_item, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_tool_menu_item, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_export_as_menu: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_export_as_menu")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1775878644)!
            }
            
        }
        
    }()
    
    /// Returns the ``PopupMenu`` under **Scene > Export As...**.
    public final func getExportAsMenu ()-> PopupMenu? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorPlugin.method_get_export_as_menu, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_add_custom_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_custom_type")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1986814599)!
            }
            
        }
        
    }()
    
    /// Adds a custom type, which will appear in the list of nodes or resources. An icon can be optionally passed.
    /// 
    /// When a given node or resource is selected, the base type will be instantiated (e.g. "Node3D", "Control", "Resource"), then the script will be loaded and set to this object.
    /// 
    /// > Note: The base type is the base engine class which this type's class hierarchy inherits, not any custom type parent classes.
    /// 
    /// You can use the virtual method ``_handles(object:)`` to check if your custom object is being edited by checking the script or using the `is` keyword.
    /// 
    /// During run-time, this will be a simple object with a script so this function does not need to be called then.
    /// 
    /// > Note: Custom types added this way are not true classes. They are just a helper to create a node with specific script.
    /// 
    public final func addCustomType (_ type: String, base: String, script: Script?, icon: Texture2D?) {
        #if true
        
        let gstr_type = GString (type)
        let gstr_base = GString (base)
        var copy_script_handle = script?.handle
        var copy_icon_handle = icon?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_custom_type, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_type.content, &gstr_base.content, &copy_script_handle, &copy_icon_handle)
        
        #else
        
        let gstr_type = GString (type)
        let gstr_base = GString (base)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_type.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_base.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: script?.handle) { p2 in
                _args.append (script == nil ? nil : p2)
                    withUnsafePointer (to: icon?.handle) { p3 in
                    _args.append (icon == nil ? nil : p3)
        
                        gi.object_method_bind_ptrcall (EditorPlugin.method_add_custom_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_custom_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_custom_type")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Removes a custom type added by ``addCustomType(_:base:script:icon:)``.
    public final func removeCustomType (_ type: String) {
        #if true
        
        let gstr_type = GString (type)
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_custom_type, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_type.content)
        
        #else
        
        let gstr_type = GString (type)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_type.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_custom_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_autoload_singleton: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_autoload_singleton")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3186203200)!
            }
            
        }
        
    }()
    
    /// Adds a script at `path` to the Autoload list as `name`.
    public final func addAutoloadSingleton (name: String, path: String) {
        #if true
        
        let gstr_name = GString (name)
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_autoload_singleton, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content, &gstr_path.content)
        
        #else
        
        let gstr_name = GString (name)
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_path.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorPlugin.method_add_autoload_singleton, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_autoload_singleton: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_autoload_singleton")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Removes an Autoload `name` from the list.
    public final func removeAutoloadSingleton (name: String) {
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_autoload_singleton, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_autoload_singleton, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_update_overlays: GDExtensionMethodBindPtr = {
        let methodName = StringName ("update_overlays")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Updates the overlays of the 2D and 3D editor viewport. Causes methods ``_forwardCanvasDrawOverViewport(viewportControl:)``, ``_forwardCanvasForceDrawOverViewport(viewportControl:)``, ``_forward3dDrawOverViewport(viewportControl:)`` and ``_forward3dForceDrawOverViewport(viewportControl:)`` to be called.
    public final func updateOverlays ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (EditorPlugin.method_update_overlays, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_make_bottom_panel_item_visible: GDExtensionMethodBindPtr = {
        let methodName = StringName ("make_bottom_panel_item_visible")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1496901182)!
            }
            
        }
        
    }()
    
    /// Makes a specific item in the bottom panel visible.
    public final func makeBottomPanelItemVisible (item: Control?) {
        #if true
        
        var copy_item_handle = item?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_make_bottom_panel_item_visible, UnsafeMutableRawPointer (mutating: handle), nil, &copy_item_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: item?.handle) { p0 in
        _args.append (item == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_make_bottom_panel_item_visible, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_hide_bottom_panel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("hide_bottom_panel")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Minimizes the bottom panel.
    public final func hideBottomPanel () {
        gi.object_method_bind_ptrcall (EditorPlugin.method_hide_bottom_panel, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_get_undo_redo: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_undo_redo")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 773492341)!
            }
            
        }
        
    }()
    
    /// Gets the undo/redo object. Most actions in the editor can be undoable, so use this object to make sure this happens when it's worth it.
    public final func getUndoRedo ()-> EditorUndoRedoManager? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorPlugin.method_get_undo_redo, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_add_undo_redo_inspector_hook_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_undo_redo_inspector_hook_callback")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1611583062)!
            }
            
        }
        
    }()
    
    /// Hooks a callback into the undo/redo action creation when a property is modified in the inspector. This allows, for example, to save other properties that may be lost when a given property is modified.
    /// 
    /// The callback should have 4 arguments: ``Object`` `undo_redo`, ``Object`` `modified_object`, ``String`` `property` and ``Variant`` `new_value`. They are, respectively, the ``UndoRedo`` object used by the inspector, the currently modified object, the name of the modified property and the new value the property is about to take.
    /// 
    public final func addUndoRedoInspectorHookCallback (callable: Callable) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_undo_redo_inspector_hook_callback, UnsafeMutableRawPointer (mutating: handle), nil, &callable.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &callable.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_add_undo_redo_inspector_hook_callback, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_undo_redo_inspector_hook_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_undo_redo_inspector_hook_callback")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1611583062)!
            }
            
        }
        
    }()
    
    /// Removes a callback previously added by ``addUndoRedoInspectorHookCallback(callable:)``.
    public final func removeUndoRedoInspectorHookCallback (callable: Callable) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_undo_redo_inspector_hook_callback, UnsafeMutableRawPointer (mutating: handle), nil, &callable.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &callable.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_undo_redo_inspector_hook_callback, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_queue_save_layout: GDExtensionMethodBindPtr = {
        let methodName = StringName ("queue_save_layout")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Queue save the project's editor layout.
    public final func queueSaveLayout () {
        gi.object_method_bind_ptrcall (EditorPlugin.method_queue_save_layout, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_add_translation_parser_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_translation_parser_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3116463128)!
            }
            
        }
        
    }()
    
    /// Registers a custom translation parser plugin for extracting translatable strings from custom files.
    public final func addTranslationParserPlugin (parser: EditorTranslationParserPlugin?) {
        #if true
        
        var copy_parser_handle = parser?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_translation_parser_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_parser_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: parser?.handle) { p0 in
        _args.append (parser == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_add_translation_parser_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_translation_parser_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_translation_parser_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3116463128)!
            }
            
        }
        
    }()
    
    /// Removes a custom translation parser plugin registered by ``addTranslationParserPlugin(parser:)``.
    public final func removeTranslationParserPlugin (parser: EditorTranslationParserPlugin?) {
        #if true
        
        var copy_parser_handle = parser?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_translation_parser_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_parser_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: parser?.handle) { p0 in
        _args.append (parser == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_translation_parser_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_import_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_import_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3113975762)!
            }
            
        }
        
    }()
    
    /// Registers a new ``EditorImportPlugin``. Import plugins are used to import custom and unsupported assets as a custom ``Resource`` type.
    /// 
    /// If `firstPriority` is `true`, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins.
    /// 
    /// > Note: If you want to import custom 3D asset formats use ``addSceneFormatImporterPlugin(sceneFormatImporter:firstPriority:)`` instead.
    /// 
    /// See ``addInspectorPlugin(_:)`` for an example of how to register a plugin.
    /// 
    public final func addImportPlugin (importer: EditorImportPlugin?, firstPriority: Bool = false) {
        #if true
        
        var copy_first_priority = firstPriority
        var copy_importer_handle = importer?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_import_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_importer_handle, &copy_first_priority)
        
        #else
        
        var copy_first_priority = firstPriority
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: importer?.handle) { p0 in
        _args.append (importer == nil ? nil : p0)
            withUnsafePointer (to: &copy_first_priority) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorPlugin.method_add_import_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_import_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_import_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2312482773)!
            }
            
        }
        
    }()
    
    /// Removes an import plugin registered by ``addImportPlugin(importer:firstPriority:)``.
    public final func removeImportPlugin (importer: EditorImportPlugin?) {
        #if true
        
        var copy_importer_handle = importer?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_import_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_importer_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: importer?.handle) { p0 in
        _args.append (importer == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_import_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_scene_format_importer_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_scene_format_importer_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2764104752)!
            }
            
        }
        
    }()
    
    /// Registers a new ``EditorSceneFormatImporter``. Scene importers are used to import custom 3D asset formats as scenes.
    /// 
    /// If `firstPriority` is `true`, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins.
    /// 
    public final func addSceneFormatImporterPlugin (sceneFormatImporter: EditorSceneFormatImporter?, firstPriority: Bool = false) {
        #if true
        
        var copy_first_priority = firstPriority
        var copy_scene_format_importer_handle = sceneFormatImporter?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_scene_format_importer_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scene_format_importer_handle, &copy_first_priority)
        
        #else
        
        var copy_first_priority = firstPriority
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: sceneFormatImporter?.handle) { p0 in
        _args.append (sceneFormatImporter == nil ? nil : p0)
            withUnsafePointer (to: &copy_first_priority) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorPlugin.method_add_scene_format_importer_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_scene_format_importer_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_scene_format_importer_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2637776123)!
            }
            
        }
        
    }()
    
    /// Removes a scene format importer registered by ``addSceneFormatImporterPlugin(sceneFormatImporter:firstPriority:)``.
    public final func removeSceneFormatImporterPlugin (sceneFormatImporter: EditorSceneFormatImporter?) {
        #if true
        
        var copy_scene_format_importer_handle = sceneFormatImporter?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_scene_format_importer_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scene_format_importer_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: sceneFormatImporter?.handle) { p0 in
        _args.append (sceneFormatImporter == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_scene_format_importer_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_scene_post_import_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_scene_post_import_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3492436322)!
            }
            
        }
        
    }()
    
    /// Add a ``EditorScenePostImportPlugin``. These plugins allow customizing the import process of 3D assets by adding new options to the import dialogs.
    /// 
    /// If `firstPriority` is `true`, the new import plugin is inserted first in the list and takes precedence over pre-existing plugins.
    /// 
    public final func addScenePostImportPlugin (sceneImportPlugin: EditorScenePostImportPlugin?, firstPriority: Bool = false) {
        #if true
        
        var copy_first_priority = firstPriority
        var copy_scene_import_plugin_handle = sceneImportPlugin?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_scene_post_import_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scene_import_plugin_handle, &copy_first_priority)
        
        #else
        
        var copy_first_priority = firstPriority
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: sceneImportPlugin?.handle) { p0 in
        _args.append (sceneImportPlugin == nil ? nil : p0)
            withUnsafePointer (to: &copy_first_priority) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorPlugin.method_add_scene_post_import_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_remove_scene_post_import_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_scene_post_import_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3045178206)!
            }
            
        }
        
    }()
    
    /// Remove the ``EditorScenePostImportPlugin``, added with ``addScenePostImportPlugin(sceneImportPlugin:firstPriority:)``.
    public final func removeScenePostImportPlugin (sceneImportPlugin: EditorScenePostImportPlugin?) {
        #if true
        
        var copy_scene_import_plugin_handle = sceneImportPlugin?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_scene_post_import_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scene_import_plugin_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: sceneImportPlugin?.handle) { p0 in
        _args.append (sceneImportPlugin == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_scene_post_import_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_export_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_export_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4095952207)!
            }
            
        }
        
    }()
    
    /// Registers a new ``EditorExportPlugin``. Export plugins are used to perform tasks when the project is being exported.
    /// 
    /// See ``addInspectorPlugin(_:)`` for an example of how to register a plugin.
    /// 
    public final func addExportPlugin (_ plugin: EditorExportPlugin?) {
        #if true
        
        var copy_plugin_handle = plugin?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_export_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_plugin_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: plugin?.handle) { p0 in
        _args.append (plugin == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_add_export_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_export_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_export_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4095952207)!
            }
            
        }
        
    }()
    
    /// Removes an export plugin registered by ``addExportPlugin(_:)``.
    public final func removeExportPlugin (_ plugin: EditorExportPlugin?) {
        #if true
        
        var copy_plugin_handle = plugin?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_export_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_plugin_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: plugin?.handle) { p0 in
        _args.append (plugin == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_export_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_node_3d_gizmo_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_node_3d_gizmo_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1541015022)!
            }
            
        }
        
    }()
    
    /// Registers a new ``EditorNode3DGizmoPlugin``. Gizmo plugins are used to add custom gizmos to the 3D preview viewport for a ``Node3D``.
    /// 
    /// See ``addInspectorPlugin(_:)`` for an example of how to register a plugin.
    /// 
    public final func addNode3dGizmoPlugin (_ plugin: EditorNode3DGizmoPlugin?) {
        #if true
        
        var copy_plugin_handle = plugin?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_node_3d_gizmo_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_plugin_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: plugin?.handle) { p0 in
        _args.append (plugin == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_add_node_3d_gizmo_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_node_3d_gizmo_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_node_3d_gizmo_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1541015022)!
            }
            
        }
        
    }()
    
    /// Removes a gizmo plugin registered by ``addNode3dGizmoPlugin(_:)``.
    public final func removeNode3dGizmoPlugin (_ plugin: EditorNode3DGizmoPlugin?) {
        #if true
        
        var copy_plugin_handle = plugin?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_node_3d_gizmo_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_plugin_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: plugin?.handle) { p0 in
        _args.append (plugin == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_node_3d_gizmo_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_inspector_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_inspector_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 546395733)!
            }
            
        }
        
    }()
    
    /// Registers a new ``EditorInspectorPlugin``. Inspector plugins are used to extend ``EditorInspector`` and provide custom configuration tools for your object's properties.
    /// 
    /// > Note: Always use ``removeInspectorPlugin(_:)`` to remove the registered ``EditorInspectorPlugin`` when your ``EditorPlugin`` is disabled to prevent leaks and an unexpected behavior.
    /// 
    public final func addInspectorPlugin (_ plugin: EditorInspectorPlugin?) {
        #if true
        
        var copy_plugin_handle = plugin?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_inspector_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_plugin_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: plugin?.handle) { p0 in
        _args.append (plugin == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_add_inspector_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_inspector_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_inspector_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 546395733)!
            }
            
        }
        
    }()
    
    /// Removes an inspector plugin registered by ``addImportPlugin(importer:firstPriority:)``
    public final func removeInspectorPlugin (_ plugin: EditorInspectorPlugin?) {
        #if true
        
        var copy_plugin_handle = plugin?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_inspector_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_plugin_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: plugin?.handle) { p0 in
        _args.append (plugin == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_inspector_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_resource_conversion_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_resource_conversion_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2124849111)!
            }
            
        }
        
    }()
    
    /// Registers a new ``EditorResourceConversionPlugin``. Resource conversion plugins are used to add custom resource converters to the editor inspector.
    /// 
    /// See ``EditorResourceConversionPlugin`` for an example of how to create a resource conversion plugin.
    /// 
    public final func addResourceConversionPlugin (_ plugin: EditorResourceConversionPlugin?) {
        #if true
        
        var copy_plugin_handle = plugin?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_resource_conversion_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_plugin_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: plugin?.handle) { p0 in
        _args.append (plugin == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_add_resource_conversion_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_resource_conversion_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_resource_conversion_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2124849111)!
            }
            
        }
        
    }()
    
    /// Removes a resource conversion plugin registered by ``addResourceConversionPlugin(_:)``.
    public final func removeResourceConversionPlugin (_ plugin: EditorResourceConversionPlugin?) {
        #if true
        
        var copy_plugin_handle = plugin?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_resource_conversion_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_plugin_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: plugin?.handle) { p0 in
        _args.append (plugin == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_resource_conversion_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_input_event_forwarding_always_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_input_event_forwarding_always_enabled")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Use this method if you always want to receive inputs from 3D view screen inside ``_forward3dGuiInput(viewportCamera:event:)``. It might be especially usable if your plugin will want to use raycast in the scene.
    public final func setInputEventForwardingAlwaysEnabled () {
        gi.object_method_bind_ptrcall (EditorPlugin.method_set_input_event_forwarding_always_enabled, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_force_draw_over_forwarding_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_force_draw_over_forwarding_enabled")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Enables calling of ``_forwardCanvasForceDrawOverViewport(viewportControl:)`` for the 2D editor and ``_forward3dForceDrawOverViewport(viewportControl:)`` for the 3D editor when their viewports are updated. You need to call this method only once and it will work permanently for this plugin.
    public final func setForceDrawOverForwardingEnabled () {
        gi.object_method_bind_ptrcall (EditorPlugin.method_set_force_draw_over_forwarding_enabled, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_get_editor_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_editor_interface")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4223731786)!
            }
            
        }
        
    }()
    
    /// Returns the ``EditorInterface`` singleton instance.
    /// 
    /// _Deprecated._ ``EditorInterface`` is a global singleton and can be accessed directly by its name.
    /// 
    public final func getEditorInterface ()-> EditorInterface? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorPlugin.method_get_editor_interface, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_script_create_dialog: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_script_create_dialog")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3121871482)!
            }
            
        }
        
    }()
    
    /// Gets the Editor's dialog used for making scripts.
    /// 
    /// > Note: Users can configure it before use.
    /// 
    /// > Warning: Removing and freeing this node will render a part of the editor useless and may cause a crash.
    /// 
    public final func getScriptCreateDialog ()-> ScriptCreateDialog? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorPlugin.method_get_script_create_dialog, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_add_debugger_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_debugger_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3749880309)!
            }
            
        }
        
    }()
    
    /// Adds a ``Script`` as debugger plugin to the Debugger. The script must extend ``EditorDebuggerPlugin``.
    public final func addDebuggerPlugin (script: EditorDebuggerPlugin?) {
        #if true
        
        var copy_script_handle = script?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_add_debugger_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_script_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: script?.handle) { p0 in
        _args.append (script == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_add_debugger_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_debugger_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_debugger_plugin")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3749880309)!
            }
            
        }
        
    }()
    
    /// Removes the debugger plugin with given script from the Debugger.
    public final func removeDebuggerPlugin (script: EditorDebuggerPlugin?) {
        #if true
        
        var copy_script_handle = script?.handle
        
        gi.object_method_bind_ptrcall_v (EditorPlugin.method_remove_debugger_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_script_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: script?.handle) { p0 in
        _args.append (script == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorPlugin.method_remove_debugger_plugin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_plugin_version: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_plugin_version")
        return withUnsafePointer (to: &EditorPlugin.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Provide the version of the plugin declared in the `plugin.cfg` config file.
    public final func getPluginVersion ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (EditorPlugin.method_get_plugin_version, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_apply_changes":
                return _EditorPlugin_proxy_apply_changes
            case "_build":
                return _EditorPlugin_proxy_build
            case "_clear":
                return _EditorPlugin_proxy_clear
            case "_disable_plugin":
                return _EditorPlugin_proxy_disable_plugin
            case "_edit":
                return _EditorPlugin_proxy_edit
            case "_enable_plugin":
                return _EditorPlugin_proxy_enable_plugin
            case "_forward_3d_draw_over_viewport":
                return _EditorPlugin_proxy_forward_3d_draw_over_viewport
            case "_forward_3d_force_draw_over_viewport":
                return _EditorPlugin_proxy_forward_3d_force_draw_over_viewport
            case "_forward_3d_gui_input":
                return _EditorPlugin_proxy_forward_3d_gui_input
            case "_forward_canvas_draw_over_viewport":
                return _EditorPlugin_proxy_forward_canvas_draw_over_viewport
            case "_forward_canvas_force_draw_over_viewport":
                return _EditorPlugin_proxy_forward_canvas_force_draw_over_viewport
            case "_forward_canvas_gui_input":
                return _EditorPlugin_proxy_forward_canvas_gui_input
            case "_get_breakpoints":
                return _EditorPlugin_proxy_get_breakpoints
            case "_get_plugin_icon":
                return _EditorPlugin_proxy_get_plugin_icon
            case "_get_plugin_name":
                return _EditorPlugin_proxy_get_plugin_name
            case "_get_state":
                return _EditorPlugin_proxy_get_state
            case "_get_unsaved_status":
                return _EditorPlugin_proxy_get_unsaved_status
            case "_get_window_layout":
                return _EditorPlugin_proxy_get_window_layout
            case "_handles":
                return _EditorPlugin_proxy_handles
            case "_has_main_screen":
                return _EditorPlugin_proxy_has_main_screen
            case "_make_visible":
                return _EditorPlugin_proxy_make_visible
            case "_save_external_data":
                return _EditorPlugin_proxy_save_external_data
            case "_set_state":
                return _EditorPlugin_proxy_set_state
            case "_set_window_layout":
                return _EditorPlugin_proxy_set_window_layout
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ sceneRoot: Node) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                var ptr_0: UnsafeMutableRawPointer?
                args [0].toType (Variant.GType.object, dest: &ptr_0)
                let arg_0 = lookupLiveObject (handleAddress: ptr_0!) as? Node ?? Node (nativeHandle: ptr_0!)
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the scene is changed in the editor. The argument will return the root node of the scene that has just become active. If this scene is new and empty, the argument will be `null`.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.sceneChanged.connect { sceneRoot in
    ///    print ("caught signal")
    /// }
    /// ```
    public var sceneChanged: Signal1 { Signal1 (target: self, signalName: "scene_changed") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal2/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal2/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal2/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal2 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal2 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ filepath: String) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = GString (args [0])!.description
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when user closes a scene. The argument is file path to a closed scene.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.sceneClosed.connect { filepath in
    ///    print ("caught signal")
    /// }
    /// ```
    public var sceneClosed: Signal2 { Signal2 (target: self, signalName: "scene_closed") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal3/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal3/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal3/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal3 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal3 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ screenName: String) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = GString (args [0])!.description
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when user changes the workspace (**2D**, **3D**, **Script**, **AssetLib**). Also works with custom screens defined by plugins.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.mainScreenChanged.connect { screenName in
    ///    print ("caught signal")
    /// }
    /// ```
    public var mainScreenChanged: Signal3 { Signal3 (target: self, signalName: "main_screen_changed") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal4/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal4/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal4/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal4 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal4 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ resource: Resource) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                var ptr_0: UnsafeMutableRawPointer?
                args [0].toType (Variant.GType.object, dest: &ptr_0)
                let arg_0 = lookupLiveObject (handleAddress: ptr_0!) as? Resource ?? Resource (nativeHandle: ptr_0!)
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the given `resource` was saved on disc.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.resourceSaved.connect { resource in
    ///    print ("caught signal")
    /// }
    /// ```
    public var resourceSaved: Signal4 { Signal4 (target: self, signalName: "resource_saved") }
    
    /// Emitted when any project setting has changed.
    /// 
    /// _Deprecated._ Use [signal ProjectSettings.settings_changed] instead.
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.projectSettingsChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var projectSettingsChanged: SimpleSignal { SimpleSignal (target: self, signalName: "project_settings_changed") }
    
}

// Support methods for proxies
func _EditorPlugin_proxy_apply_changes (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._applyChanges ()
}

func _EditorPlugin_proxy_build (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._build ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _EditorPlugin_proxy_clear (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._clear ()
}

func _EditorPlugin_proxy_disable_plugin (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._disablePlugin ()
}

func _EditorPlugin_proxy_edit (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._edit (object: lookupLiveObject (handleAddress: resolved_0) as? Object ?? Object (nativeHandle: resolved_0))
}

func _EditorPlugin_proxy_enable_plugin (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._enablePlugin ()
}

func _EditorPlugin_proxy_forward_3d_draw_over_viewport (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._forward3dDrawOverViewport (viewportControl: lookupLiveObject (handleAddress: resolved_0) as? Control ?? Control (nativeHandle: resolved_0))
}

func _EditorPlugin_proxy_forward_3d_force_draw_over_viewport (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._forward3dForceDrawOverViewport (viewportControl: lookupLiveObject (handleAddress: resolved_0) as? Control ?? Control (nativeHandle: resolved_0))
}

func _EditorPlugin_proxy_forward_3d_gui_input (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    let resolved_1 = args [1]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._forward3dGuiInput (viewportCamera: lookupLiveObject (handleAddress: resolved_0) as? Camera3D ?? Camera3D (nativeHandle: resolved_0), event: lookupLiveObject (handleAddress: resolved_1) as? InputEvent ?? InputEvent (nativeHandle: resolved_1))
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _EditorPlugin_proxy_forward_canvas_draw_over_viewport (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._forwardCanvasDrawOverViewport (viewportControl: lookupLiveObject (handleAddress: resolved_0) as? Control ?? Control (nativeHandle: resolved_0))
}

func _EditorPlugin_proxy_forward_canvas_force_draw_over_viewport (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._forwardCanvasForceDrawOverViewport (viewportControl: lookupLiveObject (handleAddress: resolved_0) as? Control ?? Control (nativeHandle: resolved_0))
}

func _EditorPlugin_proxy_forward_canvas_gui_input (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._forwardCanvasGuiInput (event: lookupLiveObject (handleAddress: resolved_0) as? InputEvent ?? InputEvent (nativeHandle: resolved_0))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _EditorPlugin_proxy_get_breakpoints (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getBreakpoints ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

func _EditorPlugin_proxy_get_plugin_icon (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPluginIcon ()
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // Texture2D
}

func _EditorPlugin_proxy_get_plugin_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getPluginName ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _EditorPlugin_proxy_get_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getState ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _EditorPlugin_proxy_get_unsaved_status (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getUnsavedStatus (forScene: GString.stringFromGStringPtr (ptr: args [0]!) ?? ""))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _EditorPlugin_proxy_get_window_layout (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._getWindowLayout (configuration: lookupLiveObject (handleAddress: resolved_0) as? ConfigFile ?? ConfigFile (nativeHandle: resolved_0))
}

func _EditorPlugin_proxy_handles (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._handles (object: lookupLiveObject (handleAddress: resolved_0) as? Object ?? Object (nativeHandle: resolved_0))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _EditorPlugin_proxy_has_main_screen (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._hasMainScreen ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _EditorPlugin_proxy_make_visible (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._makeVisible (args [0]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _EditorPlugin_proxy_save_external_data (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._saveExternalData ()
}

func _EditorPlugin_proxy_set_state (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setState (GDictionary (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _EditorPlugin_proxy_set_window_layout (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorPlugin>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._setWindowLayout (configuration: lookupLiveObject (handleAddress: resolved_0) as? ConfigFile ?? ConfigFile (nativeHandle: resolved_0))
}

