// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Godot editor's popup dialog for creating new ``Script`` files.
/// 
/// The ``ScriptCreateDialog`` creates script files according to a given template for a given scripting language. The standard use is to configure its fields prior to calling one of the ``Window/popup(rect:)`` methods.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``scriptCreated``
open class ScriptCreateDialog: ConfirmationDialog {
    override open class var godotClassName: StringName { "ScriptCreateDialog" }
    /* Methods */
    fileprivate static var method_config: GDExtensionMethodBindPtr = {
        let methodName = StringName ("config")
        return withUnsafePointer (to: &ScriptCreateDialog.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 869314288)!
            }
            
        }
        
    }()
    
    /// Prefills required fields to configure the ScriptCreateDialog for use.
    public final func config (inherits: String, path: String, builtInEnabled: Bool = true, loadEnabled: Bool = true) {
        #if false
        
        let gstr_inherits = GString (inherits)
        let gstr_path = GString (path)
        var copy_built_in_enabled = builtInEnabled
        var copy_load_enabled = loadEnabled
        
        gi.object_method_bind_ptrcall_v (ScriptCreateDialog.method_config, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_inherits.content, &gstr_path.content, &copy_built_in_enabled, &copy_load_enabled)
        
        #else
        
        let gstr_inherits = GString (inherits)
        let gstr_path = GString (path)
        var copy_built_in_enabled = builtInEnabled
        var copy_load_enabled = loadEnabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_inherits.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_path.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_built_in_enabled) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_load_enabled) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (ScriptCreateDialog.method_config, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ script: Script) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                var ptr_0: UnsafeMutableRawPointer?
                args [0].toType (Variant.GType.object, dest: &ptr_0)
                let arg_0 = lookupLiveObject (handleAddress: ptr_0!) as? Script ?? Script (nativeHandle: ptr_0!)
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when the user clicks the OK button.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.scriptCreated.connect { script in
    ///    print ("caught signal")
    /// }
    /// ```
    public var scriptCreated: Signal1 { Signal1 (target: self, signalName: "script_created") }
    
}

