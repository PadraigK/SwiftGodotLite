// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Base script that can be used to add extension functions to the editor.
/// 
/// Scripts extending this class and implementing its ``_run()`` method can be executed from the Script Editor's **File > Run** menu option (or by pressing [kbd]Ctrl + Shift + X[/kbd]) while the editor is running. This is useful for adding custom in-editor functionality to Godot. For more complex additions, consider using ``EditorPlugin``s instead.
/// 
/// > Note: Extending scripts need to have `tool` mode enabled.
/// 
/// **Example script:**
/// 
/// > Note: The script is run in the Editor context, which means the output is visible in the console window started with the Editor (stdout) instead of the usual Godot **Output** dock.
/// 
/// > Note: EditorScript is ``RefCounted``, meaning it is destroyed when nothing references it. This can cause errors during asynchronous operations if there are no references to the script.
/// 
open class EditorScript: RefCounted {
    override open class var godotClassName: StringName { "EditorScript" }
    /* Methods */
    /// This method is executed by the Editor when **File > Run** is used.
    @_documentation(visibility: public)
    open func _run () {
    }
    
    fileprivate static var method_add_root_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_root_node")
        return withUnsafePointer (to: &EditorScript.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    /// Adds `node` as a child of the root node in the editor context.
    /// 
    /// > Warning: The implementation of this method is currently disabled.
    /// 
    public final func addRootNode (_ node: Node?) {
        #if false
        
        var copy_node_handle = node?.handle
        
        gi.object_method_bind_ptrcall_v (EditorScript.method_add_root_node, UnsafeMutableRawPointer (mutating: handle), nil, &copy_node_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: node?.handle) { p0 in
        _args.append (node == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorScript.method_add_root_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_scene: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_scene")
        return withUnsafePointer (to: &EditorScript.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3160264692)!
            }
            
        }
        
    }()
    
    /// Returns the Editor's currently active scene.
    public final func getScene ()-> Node? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorScript.method_get_scene, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_editor_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_editor_interface")
        return withUnsafePointer (to: &EditorScript.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1976662476)!
            }
            
        }
        
    }()
    
    /// Returns the ``EditorInterface`` singleton instance.
    /// 
    /// _Deprecated._ ``EditorInterface`` is a global singleton and can be accessed directly by its name.
    /// 
    public final func getEditorInterface ()-> EditorInterface? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorScript.method_get_editor_interface, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_run":
                return _EditorScript_proxy_run
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _EditorScript_proxy_run (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorScript>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._run ()
}

