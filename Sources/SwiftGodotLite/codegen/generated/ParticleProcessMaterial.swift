// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Holds a particle configuration for ``GPUParticles2D`` or ``GPUParticles3D`` nodes.
/// 
/// ``ParticleProcessMaterial`` defines particle properties and behavior. It is used in the `process_material` of the ``GPUParticles2D`` and ``GPUParticles3D`` nodes. Some of this material's properties are applied to each particle when emitted, while others can have a ``CurveTexture`` or a ``GradientTexture1D`` applied to vary numerical or color values over the lifetime of the particle.
open class ParticleProcessMaterial: Material {
    override open class var godotClassName: StringName { "ParticleProcessMaterial" }
    public enum Parameter: Int64 {
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set initial velocity properties.
        case initialLinearVelocity = 0 // PARAM_INITIAL_LINEAR_VELOCITY
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set angular velocity properties.
        case angularVelocity = 1 // PARAM_ANGULAR_VELOCITY
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set orbital velocity properties.
        case orbitVelocity = 2 // PARAM_ORBIT_VELOCITY
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set linear acceleration properties.
        case linearAccel = 3 // PARAM_LINEAR_ACCEL
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set radial acceleration properties.
        case radialAccel = 4 // PARAM_RADIAL_ACCEL
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set tangential acceleration properties.
        case tangentialAccel = 5 // PARAM_TANGENTIAL_ACCEL
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set damping properties.
        case damping = 6 // PARAM_DAMPING
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set angle properties.
        case angle = 7 // PARAM_ANGLE
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set scale properties.
        case scale = 8 // PARAM_SCALE
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set hue variation properties.
        case hueVariation = 9 // PARAM_HUE_VARIATION
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set animation speed properties.
        case animSpeed = 10 // PARAM_ANIM_SPEED
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set animation offset properties.
        case animOffset = 11 // PARAM_ANIM_OFFSET
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set radial velocity properties.
        case radialVelocity = 15 // PARAM_RADIAL_VELOCITY
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set directional velocity properties.
        case directionalVelocity = 16 // PARAM_DIRECTIONAL_VELOCITY
        /// Use with ``setParamMin(param:value:)``, ``setParamMax(param:value:)``, and ``setParamTexture(param:texture:)`` to set scale over velocity properties.
        case scaleOverVelocity = 17 // PARAM_SCALE_OVER_VELOCITY
        /// Represents the size of the ``ParticleProcessMaterial/Parameter`` enum.
        case max = 18 // PARAM_MAX
        /// Use with ``setParamMin(param:value:)`` and ``setParamMax(param:value:)`` to set the turbulence minimum und maximum influence on each particles velocity.
        case turbVelInfluence = 13 // PARAM_TURB_VEL_INFLUENCE
        /// Use with ``setParamMin(param:value:)`` and ``setParamMax(param:value:)`` to set the turbulence minimum and maximum displacement of the particles spawn position.
        case turbInitDisplacement = 14 // PARAM_TURB_INIT_DISPLACEMENT
        /// Use with ``setParamTexture(param:texture:)`` to set the turbulence influence over the particles life time.
        case turbInfluenceOverLife = 12 // PARAM_TURB_INFLUENCE_OVER_LIFE
    }
    
    public enum ParticleFlags: Int64 {
        /// Use with ``setParticleFlag(_:enable:)`` to set ``particleFlagAlignY``.
        case alignYToVelocity = 0 // PARTICLE_FLAG_ALIGN_Y_TO_VELOCITY
        /// Use with ``setParticleFlag(_:enable:)`` to set ``particleFlagRotateY``.
        case rotateY = 1 // PARTICLE_FLAG_ROTATE_Y
        /// Use with ``setParticleFlag(_:enable:)`` to set ``particleFlagDisableZ``.
        case disableZ = 2 // PARTICLE_FLAG_DISABLE_Z
        /// 
        case dampingAsFriction = 3 // PARTICLE_FLAG_DAMPING_AS_FRICTION
        /// Represents the size of the ``ParticleProcessMaterial/ParticleFlags`` enum.
        case max = 4 // PARTICLE_FLAG_MAX
    }
    
    public enum EmissionShape: Int64 {
        /// All particles will be emitted from a single point.
        case point = 0 // EMISSION_SHAPE_POINT
        /// Particles will be emitted in the volume of a sphere.
        case sphere = 1 // EMISSION_SHAPE_SPHERE
        /// Particles will be emitted on the surface of a sphere.
        case sphereSurface = 2 // EMISSION_SHAPE_SPHERE_SURFACE
        /// Particles will be emitted in the volume of a box.
        case box = 3 // EMISSION_SHAPE_BOX
        /// Particles will be emitted at a position determined by sampling a random point on the ``emissionPointTexture``. Particle color will be modulated by ``emissionColorTexture``.
        case points = 4 // EMISSION_SHAPE_POINTS
        /// Particles will be emitted at a position determined by sampling a random point on the ``emissionPointTexture``. Particle velocity and rotation will be set based on ``emissionNormalTexture``. Particle color will be modulated by ``emissionColorTexture``.
        case directedPoints = 5 // EMISSION_SHAPE_DIRECTED_POINTS
        /// Particles will be emitted in a ring or cylinder.
        case ring = 6 // EMISSION_SHAPE_RING
        /// Represents the size of the ``ParticleProcessMaterial/EmissionShape`` enum.
        case max = 7 // EMISSION_SHAPE_MAX
    }
    
    public enum SubEmitterMode: Int64 {
        /// 
        case disabled = 0 // SUB_EMITTER_DISABLED
        /// 
        case constant = 1 // SUB_EMITTER_CONSTANT
        /// 
        case atEnd = 2 // SUB_EMITTER_AT_END
        /// 
        case atCollision = 3 // SUB_EMITTER_AT_COLLISION
        /// Represents the size of the ``ParticleProcessMaterial/SubEmitterMode`` enum.
        case max = 4 // SUB_EMITTER_MAX
    }
    
    public enum CollisionMode: Int64 {
        /// No collision for particles. Particles will go through ``GPUParticlesCollision3D`` nodes.
        case disabled = 0 // COLLISION_DISABLED
        /// ``RigidBody3D``-style collision for particles using ``GPUParticlesCollision3D`` nodes.
        case rigid = 1 // COLLISION_RIGID
        /// Hide particles instantly when colliding with a ``GPUParticlesCollision3D`` node. This can be combined with a subemitter that uses the .collisionRigid collision mode to "replace" the parent particle with the subemitter on impact.
        case hideOnContact = 2 // COLLISION_HIDE_ON_CONTACT
        /// Represents the size of the ``ParticleProcessMaterial/CollisionMode`` enum.
        case max = 3 // COLLISION_MAX
    }
    
    
    /* Properties */
    
    /// Particle lifetime randomness ratio. The equation for the lifetime of a particle is `lifetime * (1.0 - randf() * lifetime_randomness)`. For example, a ``lifetimeRandomness`` of `0.4` scales the lifetime between `0.6` to `1.0` of its original value.
    final public var lifetimeRandomness: Double {
        get {
            return get_lifetime_randomness ()
        }
        
        set {
            set_lifetime_randomness (newValue)
        }
        
    }
    
    /// Align Y axis of particle with the direction of its velocity.
    final public var particleFlagAlignY: Bool {
        get {
            return get_particle_flag (ParticleProcessMaterial.ParticleFlags (rawValue: 0)!)
        }
        
        set {
            set_particle_flag (ParticleProcessMaterial.ParticleFlags (rawValue: 0)!, newValue)
        }
        
    }
    
    /// If `true`, particles rotate around Y axis by ``angleMin``.
    final public var particleFlagRotateY: Bool {
        get {
            return get_particle_flag (ParticleProcessMaterial.ParticleFlags (rawValue: 1)!)
        }
        
        set {
            set_particle_flag (ParticleProcessMaterial.ParticleFlags (rawValue: 1)!, newValue)
        }
        
    }
    
    /// If `true`, particles will not move on the z axis.
    final public var particleFlagDisableZ: Bool {
        get {
            return get_particle_flag (ParticleProcessMaterial.ParticleFlags (rawValue: 2)!)
        }
        
        set {
            set_particle_flag (ParticleProcessMaterial.ParticleFlags (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Changes the behavior of the damping properties from a linear deceleration to a deceleration based on speed percentage.
    final public var particleFlagDampingAsFriction: Bool {
        get {
            return get_particle_flag (ParticleProcessMaterial.ParticleFlags (rawValue: 3)!)
        }
        
        set {
            set_particle_flag (ParticleProcessMaterial.ParticleFlags (rawValue: 3)!, newValue)
        }
        
    }
    
    /// The offset for the ``emissionShape``, in local space.
    final public var emissionShapeOffset: Vector3 {
        get {
            return get_emission_shape_offset ()
        }
        
        set {
            set_emission_shape_offset (newValue)
        }
        
    }
    
    /// The scale of the ``emissionShape``, in local space.
    final public var emissionShapeScale: Vector3 {
        get {
            return get_emission_shape_scale ()
        }
        
        set {
            set_emission_shape_scale (newValue)
        }
        
    }
    
    /// Particles will be emitted inside this region. Use ``ParticleProcessMaterial/EmissionShape`` constants for values.
    final public var emissionShape: ParticleProcessMaterial.EmissionShape {
        get {
            return get_emission_shape ()
        }
        
        set {
            set_emission_shape (newValue)
        }
        
    }
    
    /// The sphere's radius if ``emissionShape`` is set to .sphere.
    final public var emissionSphereRadius: Double {
        get {
            return get_emission_sphere_radius ()
        }
        
        set {
            set_emission_sphere_radius (newValue)
        }
        
    }
    
    /// The box's extents if ``emissionShape`` is set to .box.
    final public var emissionBoxExtents: Vector3 {
        get {
            return get_emission_box_extents ()
        }
        
        set {
            set_emission_box_extents (newValue)
        }
        
    }
    
    /// Particles will be emitted at positions determined by sampling this texture at a random position. Used with .points and .directedPoints. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.
    final public var emissionPointTexture: Texture2D? {
        get {
            return get_emission_point_texture ()
        }
        
        set {
            set_emission_point_texture (newValue)
        }
        
    }
    
    /// Particle velocity and rotation will be set by sampling this texture at the same point as the ``emissionPointTexture``. Used only in .directedPoints. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.
    final public var emissionNormalTexture: Texture2D? {
        get {
            return get_emission_normal_texture ()
        }
        
        set {
            set_emission_normal_texture (newValue)
        }
        
    }
    
    /// Particle color will be modulated by color determined by sampling this texture at the same point as the ``emissionPointTexture``.
    /// 
    /// > Note: ``emissionColorTexture`` multiplies the particle mesh's vertex colors. To have a visible effect on a ``BaseMaterial3D``, ``BaseMaterial3D/vertexColorUseAsAlbedo`` _must_ be `true`. For a ``ShaderMaterial``, `ALBEDO *= COLOR.rgb;` must be inserted in the shader's `fragment()` function. Otherwise, ``emissionColorTexture`` will have no visible effect.
    /// 
    final public var emissionColorTexture: Texture2D? {
        get {
            return get_emission_color_texture ()
        }
        
        set {
            set_emission_color_texture (newValue)
        }
        
    }
    
    /// The number of emission points if ``emissionShape`` is set to .points or .directedPoints.
    final public var emissionPointCount: Int32 {
        get {
            return get_emission_point_count ()
        }
        
        set {
            set_emission_point_count (newValue)
        }
        
    }
    
    /// The axis of the ring when using the emitter .ring.
    final public var emissionRingAxis: Vector3 {
        get {
            return get_emission_ring_axis ()
        }
        
        set {
            set_emission_ring_axis (newValue)
        }
        
    }
    
    /// The height of the ring when using the emitter .ring.
    final public var emissionRingHeight: Double {
        get {
            return get_emission_ring_height ()
        }
        
        set {
            set_emission_ring_height (newValue)
        }
        
    }
    
    /// The radius of the ring when using the emitter .ring.
    final public var emissionRingRadius: Double {
        get {
            return get_emission_ring_radius ()
        }
        
        set {
            set_emission_ring_radius (newValue)
        }
        
    }
    
    /// The inner radius of the ring when using the emitter .ring.
    final public var emissionRingInnerRadius: Double {
        get {
            return get_emission_ring_inner_radius ()
        }
        
        set {
            set_emission_ring_inner_radius (newValue)
        }
        
    }
    
    /// Minimum equivalent of ``angleMax``.
    final public var angleMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 7)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 7)!, newValue)
        }
        
    }
    
    /// Maximum initial rotation applied to each particle, in degrees.
    /// 
    /// Only applied when ``particleFlagDisableZ`` or ``particleFlagRotateY`` are `true` or the ``BaseMaterial3D`` being used to draw the particle is using ``BaseMaterial3D/BillboardMode/billboardParticles``.
    /// 
    final public var angleMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 7)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 7)!, newValue)
        }
        
    }
    
    /// Each particle's rotation will be animated along this ``CurveTexture``.
    final public var angleCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 7)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 7)!, newValue)
        }
        
    }
    
    /// Percentage of the velocity of the respective ``GPUParticles2D`` or ``GPUParticles3D`` inherited by each particle when spawning.
    final public var inheritVelocityRatio: Double {
        get {
            return get_inherit_velocity_ratio ()
        }
        
        set {
            set_inherit_velocity_ratio (newValue)
        }
        
    }
    
    /// A pivot point used to calculate radial and orbital velocity of particles.
    final public var velocityPivot: Vector3 {
        get {
            return get_velocity_pivot ()
        }
        
        set {
            set_velocity_pivot (newValue)
        }
        
    }
    
    /// Unit vector specifying the particles' emission direction.
    final public var direction: Vector3 {
        get {
            return get_direction ()
        }
        
        set {
            set_direction (newValue)
        }
        
    }
    
    /// Each particle's initial direction range from `+spread` to `-spread` degrees.
    final public var spread: Double {
        get {
            return get_spread ()
        }
        
        set {
            set_spread (newValue)
        }
        
    }
    
    /// Amount of ``spread`` along the Y axis.
    final public var flatness: Double {
        get {
            return get_flatness ()
        }
        
        set {
            set_flatness (newValue)
        }
        
    }
    
    /// Minimum equivalent of ``initialVelocityMax``.
    final public var initialVelocityMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 0)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 0)!, newValue)
        }
        
    }
    
    /// Maximum initial velocity magnitude for each particle. Direction comes from ``direction`` and ``spread``.
    final public var initialVelocityMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 0)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 0)!, newValue)
        }
        
    }
    
    /// Minimum equivalent of ``angularVelocityMax``.
    final public var angularVelocityMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 1)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Maximum initial angular velocity (rotation speed) applied to each particle in _degrees_ per second.
    /// 
    /// Only applied when ``particleFlagDisableZ`` or ``particleFlagRotateY`` are `true` or the ``BaseMaterial3D`` being used to draw the particle is using ``BaseMaterial3D/BillboardMode/billboardParticles``.
    /// 
    final public var angularVelocityMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 1)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Each particle's angular velocity (rotation speed) will vary along this ``CurveTexture`` over its lifetime.
    final public var angularVelocityCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 1)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Minimum directional velocity value, which is multiplied by ``directionalVelocityCurve``.
    /// 
    /// > Note: Animated velocities will not be affected by damping, use ``velocityLimitCurve`` instead.
    /// 
    final public var directionalVelocityMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 16)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 16)!, newValue)
        }
        
    }
    
    /// Maximum directional velocity value, which is multiplied by ``directionalVelocityCurve``.
    /// 
    /// > Note: Animated velocities will not be affected by damping, use ``velocityLimitCurve`` instead.
    /// 
    final public var directionalVelocityMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 16)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 16)!, newValue)
        }
        
    }
    
    /// A curve that specifies the velocity along each of the axes of the particle system along its lifetime.
    /// 
    /// > Note: Animated velocities will not be affected by damping, use ``velocityLimitCurve`` instead.
    /// 
    final public var directionalVelocityCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 16)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 16)!, newValue)
        }
        
    }
    
    /// Minimum equivalent of ``orbitVelocityMax``.
    /// 
    /// > Note: Animated velocities will not be affected by damping, use ``velocityLimitCurve`` instead.
    /// 
    final public var orbitVelocityMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 2)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Maximum orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second.
    /// 
    /// > Note: Animated velocities will not be affected by damping, use ``velocityLimitCurve`` instead.
    /// 
    final public var orbitVelocityMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 2)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Each particle's orbital velocity will vary along this ``CurveTexture``.
    /// 
    /// > Note: For 3D orbital velocity, use a ``CurveXYZTexture``.
    /// 
    /// > Note: Animated velocities will not be affected by damping, use ``velocityLimitCurve`` instead.
    /// 
    final public var orbitVelocityCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 2)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Minimum radial velocity applied to each particle. Makes particles move away from the ``velocityPivot``, or toward it if negative.
    /// 
    /// > Note: Animated velocities will not be affected by damping, use ``velocityLimitCurve`` instead.
    /// 
    final public var radialVelocityMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 15)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 15)!, newValue)
        }
        
    }
    
    /// Maximum radial velocity applied to each particle. Makes particles move away from the ``velocityPivot``, or toward it if negative.
    /// 
    /// > Note: Animated velocities will not be affected by damping, use ``velocityLimitCurve`` instead.
    /// 
    final public var radialVelocityMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 15)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 15)!, newValue)
        }
        
    }
    
    /// A ``CurveTexture`` that defines the velocity over the particle's lifetime away (or toward) the ``velocityPivot``.
    /// 
    /// > Note: Animated velocities will not be affected by damping, use ``velocityLimitCurve`` instead.
    /// 
    final public var radialVelocityCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 15)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 15)!, newValue)
        }
        
    }
    
    /// A ``CurveTexture`` that defines the maximum velocity of a particle during its lifetime.
    final public var velocityLimitCurve: Texture2D? {
        get {
            return get_velocity_limit_curve ()
        }
        
        set {
            set_velocity_limit_curve (newValue)
        }
        
    }
    
    /// Gravity applied to every particle.
    final public var gravity: Vector3 {
        get {
            return get_gravity ()
        }
        
        set {
            set_gravity (newValue)
        }
        
    }
    
    /// Minimum equivalent of ``linearAccelMax``.
    final public var linearAccelMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 3)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 3)!, newValue)
        }
        
    }
    
    /// Maximum linear acceleration applied to each particle in the direction of motion.
    final public var linearAccelMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 3)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 3)!, newValue)
        }
        
    }
    
    /// Each particle's linear acceleration will vary along this ``CurveTexture``.
    final public var linearAccelCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 3)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 3)!, newValue)
        }
        
    }
    
    /// Minimum equivalent of ``radialAccelMax``.
    final public var radialAccelMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 4)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 4)!, newValue)
        }
        
    }
    
    /// Maximum radial acceleration applied to each particle. Makes particle accelerate away from the origin or towards it if negative.
    final public var radialAccelMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 4)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 4)!, newValue)
        }
        
    }
    
    /// Each particle's radial acceleration will vary along this ``CurveTexture``.
    final public var radialAccelCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 4)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 4)!, newValue)
        }
        
    }
    
    /// Minimum equivalent of ``tangentialAccelMax``.
    final public var tangentialAccelMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 5)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 5)!, newValue)
        }
        
    }
    
    /// Maximum tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.
    final public var tangentialAccelMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 5)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 5)!, newValue)
        }
        
    }
    
    /// Each particle's tangential acceleration will vary along this ``CurveTexture``.
    final public var tangentialAccelCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 5)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 5)!, newValue)
        }
        
    }
    
    /// Minimum equivalent of ``dampingMax``.
    final public var dampingMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 6)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 6)!, newValue)
        }
        
    }
    
    /// The maximum rate at which particles lose velocity. For example value of `100` means that the particle will go from `100` velocity to `0` in `1` second.
    final public var dampingMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 6)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 6)!, newValue)
        }
        
    }
    
    /// Damping will vary along this ``CurveTexture``.
    final public var dampingCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 6)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 6)!, newValue)
        }
        
    }
    
    /// If `true`, interaction with particle attractors is enabled. In 3D, attraction only occurs within the area defined by the ``GPUParticles3D`` node's ``GPUParticles3D/visibilityAabb``.
    final public var attractorInteractionEnabled: Bool {
        get {
            return is_attractor_interaction_enabled ()
        }
        
        set {
            set_attractor_interaction_enabled (newValue)
        }
        
    }
    
    /// Minimum equivalent of ``scaleMax``.
    final public var scaleMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 8)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 8)!, newValue)
        }
        
    }
    
    /// Maximum initial scale applied to each particle.
    final public var scaleMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 8)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 8)!, newValue)
        }
        
    }
    
    /// Each particle's scale will vary along this ``CurveTexture``. If a ``CurveXYZTexture`` is supplied instead, the scale will be separated per-axis.
    final public var scaleCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 8)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 8)!, newValue)
        }
        
    }
    
    /// Minimum velocity value reference for ``scaleOverVelocityCurve``.
    /// 
    /// ``scaleOverVelocityCurve`` will be interpolated between ``scaleOverVelocityMin`` and ``scaleOverVelocityMax``.
    /// 
    final public var scaleOverVelocityMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 17)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 17)!, newValue)
        }
        
    }
    
    /// Maximum velocity value reference for ``scaleOverVelocityCurve``.
    /// 
    /// ``scaleOverVelocityCurve`` will be interpolated between ``scaleOverVelocityMin`` and ``scaleOverVelocityMax``.
    /// 
    final public var scaleOverVelocityMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 17)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 17)!, newValue)
        }
        
    }
    
    /// Either a ``CurveTexture`` or a ``CurveXYZTexture`` that scales each particle based on its velocity.
    final public var scaleOverVelocityCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 17)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 17)!, newValue)
        }
        
    }
    
    /// Each particle's initial color. If the ``GPUParticles2D``'s `texture` is defined, it will be multiplied by this color.
    /// 
    /// > Note: ``color`` multiplies the particle mesh's vertex colors. To have a visible effect on a ``BaseMaterial3D``, ``BaseMaterial3D/vertexColorUseAsAlbedo`` _must_ be `true`. For a ``ShaderMaterial``, `ALBEDO *= COLOR.rgb;` must be inserted in the shader's `fragment()` function. Otherwise, ``color`` will have no visible effect.
    /// 
    final public var color: Color {
        get {
            return get_color ()
        }
        
        set {
            set_color (newValue)
        }
        
    }
    
    /// Each particle's color will vary along this ``GradientTexture1D`` over its lifetime (multiplied with ``color``).
    /// 
    /// > Note: ``colorRamp`` multiplies the particle mesh's vertex colors. To have a visible effect on a ``BaseMaterial3D``, ``BaseMaterial3D/vertexColorUseAsAlbedo`` _must_ be `true`. For a ``ShaderMaterial``, `ALBEDO *= COLOR.rgb;` must be inserted in the shader's `fragment()` function. Otherwise, ``colorRamp`` will have no visible effect.
    /// 
    final public var colorRamp: Texture2D? {
        get {
            return get_color_ramp ()
        }
        
        set {
            set_color_ramp (newValue)
        }
        
    }
    
    /// Each particle's initial color will vary along this ``GradientTexture1D`` (multiplied with ``color``).
    /// 
    /// > Note: ``colorInitialRamp`` multiplies the particle mesh's vertex colors. To have a visible effect on a ``BaseMaterial3D``, ``BaseMaterial3D/vertexColorUseAsAlbedo`` _must_ be `true`. For a ``ShaderMaterial``, `ALBEDO *= COLOR.rgb;` must be inserted in the shader's `fragment()` function. Otherwise, ``colorInitialRamp`` will have no visible effect.
    /// 
    final public var colorInitialRamp: Texture2D? {
        get {
            return get_color_initial_ramp ()
        }
        
        set {
            set_color_initial_ramp (newValue)
        }
        
    }
    
    /// The alpha value of each particle's color will be multiplied by this ``CurveTexture`` over its lifetime.
    final public var alphaCurve: Texture2D? {
        get {
            return get_alpha_curve ()
        }
        
        set {
            set_alpha_curve (newValue)
        }
        
    }
    
    /// Each particle's color will be multiplied by this ``CurveTexture`` over its lifetime.
    /// 
    /// > Note: This property won't have a visible effect unless the render material is marked as unshaded.
    /// 
    final public var emissionCurve: Texture2D? {
        get {
            return get_emission_curve ()
        }
        
        set {
            set_emission_curve (newValue)
        }
        
    }
    
    /// Minimum equivalent of ``hueVariationMax``.
    final public var hueVariationMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 9)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 9)!, newValue)
        }
        
    }
    
    /// Maximum initial hue variation applied to each particle. It will shift the particle color's hue.
    final public var hueVariationMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 9)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 9)!, newValue)
        }
        
    }
    
    /// Each particle's hue will vary along this ``CurveTexture``.
    final public var hueVariationCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 9)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 9)!, newValue)
        }
        
    }
    
    /// Minimum equivalent of ``animSpeedMax``.
    final public var animSpeedMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 10)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 10)!, newValue)
        }
        
    }
    
    /// Maximum particle animation speed. Animation speed of `1` means that the particles will make full `0` to `1` offset cycle during lifetime, `2` means `2` cycles etc.
    /// 
    /// With animation speed greater than `1`, remember to enable ``CanvasItemMaterial/particlesAnimLoop`` property if you want the animation to repeat.
    /// 
    final public var animSpeedMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 10)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 10)!, newValue)
        }
        
    }
    
    /// Each particle's animation speed will vary along this ``CurveTexture``.
    final public var animSpeedCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 10)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 10)!, newValue)
        }
        
    }
    
    /// Minimum equivalent of ``animOffsetMax``.
    final public var animOffsetMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 11)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 11)!, newValue)
        }
        
    }
    
    /// Maximum animation offset that corresponds to frame index in the texture. `0` is the first frame, `1` is the last one. See ``CanvasItemMaterial/particlesAnimation``.
    final public var animOffsetMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 11)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 11)!, newValue)
        }
        
    }
    
    /// Each particle's animation offset will vary along this ``CurveTexture``.
    final public var animOffsetCurve: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 11)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 11)!, newValue)
        }
        
    }
    
    /// If `true`, enables turbulence for the particle system. Turbulence can be used to vary particle movement according to its position (based on a 3D noise pattern). In 3D, ``GPUParticlesAttractorVectorField3D`` with ``NoiseTexture3D`` can be used as an alternative to turbulence that works in world space and with multiple particle systems reacting in the same way.
    /// 
    /// > Note: Enabling turbulence has a high performance cost on the GPU. Only enable turbulence on a few particle systems at once at most, and consider disabling it when targeting mobile/web platforms.
    /// 
    final public var turbulenceEnabled: Bool {
        get {
            return get_turbulence_enabled ()
        }
        
        set {
            set_turbulence_enabled (newValue)
        }
        
    }
    
    /// The turbulence noise strength. Increasing this will result in a stronger, more contrasting, flow pattern.
    final public var turbulenceNoiseStrength: Double {
        get {
            return get_turbulence_noise_strength ()
        }
        
        set {
            set_turbulence_noise_strength (newValue)
        }
        
    }
    
    /// This value controls the overall scale/frequency of the turbulence noise pattern.
    /// 
    /// A small scale will result in smaller features with more detail while a high scale will result in smoother noise with larger features.
    /// 
    final public var turbulenceNoiseScale: Double {
        get {
            return get_turbulence_noise_scale ()
        }
        
        set {
            set_turbulence_noise_scale (newValue)
        }
        
    }
    
    /// A scrolling velocity for the turbulence field. This sets a directional trend for the pattern to move in over time.
    /// 
    /// The default value of `Vector3(0, 0, 0)` turns off the scrolling.
    /// 
    final public var turbulenceNoiseSpeed: Vector3 {
        get {
            return get_turbulence_noise_speed ()
        }
        
        set {
            set_turbulence_noise_speed (newValue)
        }
        
    }
    
    /// The in-place rate of change of the turbulence field. This defines how quickly the noise pattern varies over time.
    /// 
    /// A value of 0.0 will result in a fixed pattern.
    /// 
    final public var turbulenceNoiseSpeedRandom: Double {
        get {
            return get_turbulence_noise_speed_random ()
        }
        
        set {
            set_turbulence_noise_speed_random (newValue)
        }
        
    }
    
    /// Minimum turbulence influence on each particle.
    /// 
    /// The actual amount of turbulence influence on each particle is calculated as a random value between ``turbulenceInfluenceMin`` and ``turbulenceInfluenceMax`` and multiplied by the amount of turbulence influence from ``turbulenceInfluenceOverLife``.
    /// 
    final public var turbulenceInfluenceMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 13)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 13)!, newValue)
        }
        
    }
    
    /// Maximum turbulence influence on each particle.
    /// 
    /// The actual amount of turbulence influence on each particle is calculated as a random value between ``turbulenceInfluenceMin`` and ``turbulenceInfluenceMax`` and multiplied by the amount of turbulence influence from ``turbulenceInfluenceOverLife``.
    /// 
    final public var turbulenceInfluenceMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 13)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 13)!, newValue)
        }
        
    }
    
    /// Minimum displacement of each particle's spawn position by the turbulence.
    /// 
    /// The actual amount of displacement will be a factor of the underlying turbulence multiplied by a random value between ``turbulenceInitialDisplacementMin`` and ``turbulenceInitialDisplacementMax``.
    /// 
    final public var turbulenceInitialDisplacementMin: Double {
        get {
            return get_param_min (ParticleProcessMaterial.Parameter (rawValue: 14)!)
        }
        
        set {
            set_param_min (ParticleProcessMaterial.Parameter (rawValue: 14)!, newValue)
        }
        
    }
    
    /// Maximum displacement of each particle's spawn position by the turbulence.
    /// 
    /// The actual amount of displacement will be a factor of the underlying turbulence multiplied by a random value between ``turbulenceInitialDisplacementMin`` and ``turbulenceInitialDisplacementMax``.
    /// 
    final public var turbulenceInitialDisplacementMax: Double {
        get {
            return get_param_max (ParticleProcessMaterial.Parameter (rawValue: 14)!)
        }
        
        set {
            set_param_max (ParticleProcessMaterial.Parameter (rawValue: 14)!, newValue)
        }
        
    }
    
    /// Each particle's amount of turbulence will be influenced along this ``CurveTexture`` over its life time.
    final public var turbulenceInfluenceOverLife: Texture2D? {
        get {
            return get_param_texture (ParticleProcessMaterial.Parameter (rawValue: 12)!)
        }
        
        set {
            set_param_texture (ParticleProcessMaterial.Parameter (rawValue: 12)!, newValue)
        }
        
    }
    
    /// The particles' collision mode.
    /// 
    /// > Note: 3D Particles can only collide with ``GPUParticlesCollision3D`` nodes, not ``PhysicsBody3D`` nodes. To make particles collide with various objects, you can add ``GPUParticlesCollision3D`` nodes as children of ``PhysicsBody3D`` nodes. In 3D, collisions only occur within the area defined by the ``GPUParticles3D`` node's ``GPUParticles3D/visibilityAabb``.
    /// 
    /// > Note: 2D Particles can only collide with ``LightOccluder2D`` nodes, not ``PhysicsBody2D`` nodes.
    /// 
    final public var collisionMode: ParticleProcessMaterial.CollisionMode {
        get {
            return get_collision_mode ()
        }
        
        set {
            set_collision_mode (newValue)
        }
        
    }
    
    /// The particles' friction. Values range from `0` (frictionless) to `1` (maximum friction). Only effective if ``collisionMode`` is .collisionRigid.
    final public var collisionFriction: Double {
        get {
            return get_collision_friction ()
        }
        
        set {
            set_collision_friction (newValue)
        }
        
    }
    
    /// The particles' bounciness. Values range from `0` (no bounce) to `1` (full bounciness). Only effective if ``collisionMode`` is .collisionRigid.
    final public var collisionBounce: Double {
        get {
            return get_collision_bounce ()
        }
        
        set {
            set_collision_bounce (newValue)
        }
        
    }
    
    /// If `true`, ``GPUParticles3D/collisionBaseSize`` is multiplied by the particle's effective scale (see ``scaleMin``, ``scaleMax``, ``scaleCurve``, and ``scaleOverVelocityCurve``).
    final public var collisionUseScale: Bool {
        get {
            return is_collision_using_scale ()
        }
        
        set {
            set_collision_use_scale (newValue)
        }
        
    }
    
    /// The particle subemitter mode (see ``GPUParticles2D/subEmitter`` and ``GPUParticles3D/subEmitter``).
    final public var subEmitterMode: ParticleProcessMaterial.SubEmitterMode {
        get {
            return get_sub_emitter_mode ()
        }
        
        set {
            set_sub_emitter_mode (newValue)
        }
        
    }
    
    /// The frequency at which particles should be emitted from the subemitter node. One particle will be spawned every ``subEmitterFrequency`` seconds.
    /// 
    /// > Note: This value shouldn't exceed ``GPUParticles2D/amount`` or ``GPUParticles3D/amount`` defined on the _subemitter node_ (not the main node), relative to the subemitter's particle lifetime. If the number of particles is exceeded, no new particles will spawn from the subemitter until enough particles have expired.
    /// 
    final public var subEmitterFrequency: Double {
        get {
            return get_sub_emitter_frequency ()
        }
        
        set {
            set_sub_emitter_frequency (newValue)
        }
        
    }
    
    /// The amount of particles to spawn from the subemitter node when the particle expires.
    /// 
    /// > Note: This value shouldn't exceed ``GPUParticles2D/amount`` or ``GPUParticles3D/amount`` defined on the _subemitter node_ (not the main node), relative to the subemitter's particle lifetime. If the number of particles is exceeded, no new particles will spawn from the subemitter until enough particles have expired.
    /// 
    final public var subEmitterAmountAtEnd: Int32 {
        get {
            return get_sub_emitter_amount_at_end ()
        }
        
        set {
            set_sub_emitter_amount_at_end (newValue)
        }
        
    }
    
    /// The amount of particles to spawn from the subemitter node when a collision occurs. When combined with .collisionHideOnContact on the main particles material, this can be used to achieve effects such as raindrops hitting the ground.
    /// 
    /// > Note: This value shouldn't exceed ``GPUParticles2D/amount`` or ``GPUParticles3D/amount`` defined on the _subemitter node_ (not the main node), relative to the subemitter's particle lifetime. If the number of particles is exceeded, no new particles will spawn from the subemitter until enough particles have expired.
    /// 
    final public var subEmitterAmountAtCollision: Int32 {
        get {
            return get_sub_emitter_amount_at_collision ()
        }
        
        set {
            set_sub_emitter_amount_at_collision (newValue)
        }
        
    }
    
    /// If `true`, the subemitter inherits the parent particle's velocity when it spawns.
    final public var subEmitterKeepVelocity: Bool {
        get {
            return get_sub_emitter_keep_velocity ()
        }
        
        set {
            set_sub_emitter_keep_velocity (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_direction")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_direction (_ degrees: Vector3) {
        #if false
        
        var copy_degrees = degrees
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_direction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_degrees)
        
        #else
        
        var copy_degrees = degrees
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_degrees) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_direction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_direction")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_direction ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_direction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_inherit_velocity_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_inherit_velocity_ratio")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_inherit_velocity_ratio (_ ratio: Double) {
        #if false
        
        var copy_ratio = ratio
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_inherit_velocity_ratio, UnsafeMutableRawPointer (mutating: handle), nil, &copy_ratio)
        
        #else
        
        var copy_ratio = ratio
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_ratio) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_inherit_velocity_ratio, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_inherit_velocity_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_inherit_velocity_ratio")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_inherit_velocity_ratio ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_inherit_velocity_ratio, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_spread: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_spread")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_spread (_ degrees: Double) {
        #if false
        
        var copy_degrees = degrees
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_spread, UnsafeMutableRawPointer (mutating: handle), nil, &copy_degrees)
        
        #else
        
        var copy_degrees = degrees
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_degrees) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_spread, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_spread: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_spread")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_spread ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_spread, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_flatness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_flatness")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_flatness (_ amount: Double) {
        #if false
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_flatness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_flatness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_flatness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_flatness")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_flatness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_flatness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_param_min: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_param_min")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2295964248)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the minimum value range for the given parameter.
    fileprivate final func set_param_min (_ param: ParticleProcessMaterial.Parameter, _ value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_param_min, UnsafeMutableRawPointer (mutating: handle), nil, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_param_min, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_param_min: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_param_min")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3903786503)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the minimum value range for the given parameter.
    fileprivate final func get_param_min (_ param: ParticleProcessMaterial.Parameter)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_get_param_min, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_param_min, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_param_max: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_param_max")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2295964248)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the maximum value range for the given parameter.
    fileprivate final func set_param_max (_ param: ParticleProcessMaterial.Parameter, _ value: Double) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_param_max, UnsafeMutableRawPointer (mutating: handle), nil, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_param_max, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_param_max: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_param_max")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3903786503)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the maximum value range for the given parameter.
    fileprivate final func get_param_max (_ param: ParticleProcessMaterial.Parameter)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_get_param_max, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_param_max, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_param_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_param_texture")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 526976089)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the ``Texture2D`` for the specified ``ParticleProcessMaterial/Parameter``.
    fileprivate final func set_param_texture (_ param: ParticleProcessMaterial.Parameter, _ texture: Texture2D?) {
        #if false
        
        var copy_param = Int64 (param.rawValue)
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_param_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_param, &copy_texture_handle)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
            withUnsafePointer (to: texture?.handle) { p1 in
            _args.append (texture == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_param_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_param_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_param_texture")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3489372978)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the ``Texture2D`` used by the specified parameter.
    fileprivate final func get_param_texture (_ param: ParticleProcessMaterial.Parameter)-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_get_param_texture, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_param)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_param_texture, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_color")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_color (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_color")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_color_ramp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_color_ramp")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_color_ramp (_ ramp: Texture2D?) {
        #if false
        
        var copy_ramp_handle = ramp?.handle
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_color_ramp, UnsafeMutableRawPointer (mutating: handle), nil, &copy_ramp_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: ramp?.handle) { p0 in
        _args.append (ramp == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_color_ramp, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_color_ramp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_color_ramp")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_color_ramp ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_color_ramp, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_alpha_curve: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_curve")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_curve (_ curve: Texture2D?) {
        #if false
        
        var copy_curve_handle = curve?.handle
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_alpha_curve, UnsafeMutableRawPointer (mutating: handle), nil, &copy_curve_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: curve?.handle) { p0 in
        _args.append (curve == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_alpha_curve, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_curve: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_curve")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_curve ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_alpha_curve, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_emission_curve: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_curve")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_curve (_ curve: Texture2D?) {
        #if false
        
        var copy_curve_handle = curve?.handle
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_curve, UnsafeMutableRawPointer (mutating: handle), nil, &copy_curve_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: curve?.handle) { p0 in
        _args.append (curve == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_curve, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_curve: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_curve")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_curve ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_curve, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_color_initial_ramp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_color_initial_ramp")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_color_initial_ramp (_ ramp: Texture2D?) {
        #if false
        
        var copy_ramp_handle = ramp?.handle
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_color_initial_ramp, UnsafeMutableRawPointer (mutating: handle), nil, &copy_ramp_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: ramp?.handle) { p0 in
        _args.append (ramp == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_color_initial_ramp, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_color_initial_ramp: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_color_initial_ramp")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_color_initial_ramp ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_color_initial_ramp, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_velocity_limit_curve: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_velocity_limit_curve")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_velocity_limit_curve (_ curve: Texture2D?) {
        #if false
        
        var copy_curve_handle = curve?.handle
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_velocity_limit_curve, UnsafeMutableRawPointer (mutating: handle), nil, &copy_curve_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: curve?.handle) { p0 in
        _args.append (curve == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_velocity_limit_curve, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_velocity_limit_curve: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_velocity_limit_curve")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_velocity_limit_curve ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_velocity_limit_curve, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_particle_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_particle_flag")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1711815571)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// If `true`, enables the specified particle flag. See ``ParticleProcessMaterial/ParticleFlags`` for options.
    fileprivate final func set_particle_flag (_ particleFlag: ParticleProcessMaterial.ParticleFlags, _ enable: Bool) {
        #if false
        
        var copy_particle_flag = Int64 (particleFlag.rawValue)
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_particle_flag, UnsafeMutableRawPointer (mutating: handle), nil, &copy_particle_flag, &copy_enable)
        
        #else
        
        var copy_particle_flag = Int64 (particleFlag.rawValue)
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_particle_flag) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_particle_flag, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_particle_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_particle_flag")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3895316907)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns `true` if the specified particle flag is enabled. See ``ParticleProcessMaterial/ParticleFlags`` for options.
    fileprivate final func get_particle_flag (_ particleFlag: ParticleProcessMaterial.ParticleFlags)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_particle_flag = Int64 (particleFlag.rawValue)
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_get_particle_flag, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_particle_flag)
        return _result
        #else
        
        var copy_particle_flag = Int64 (particleFlag.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_particle_flag) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_particle_flag, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_velocity_pivot: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_velocity_pivot")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_velocity_pivot (_ pivot: Vector3) {
        #if false
        
        var copy_pivot = pivot
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_velocity_pivot, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pivot)
        
        #else
        
        var copy_pivot = pivot
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pivot) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_velocity_pivot, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_velocity_pivot: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_velocity_pivot")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3783033775)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_velocity_pivot ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_velocity_pivot, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_shape")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 461501442)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_shape (_ shape: ParticleProcessMaterial.EmissionShape) {
        #if false
        
        var copy_shape = Int64 (shape.rawValue)
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_shape, UnsafeMutableRawPointer (mutating: handle), nil, &copy_shape)
        
        #else
        
        var copy_shape = Int64 (shape.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_shape) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_shape, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_shape: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_shape")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3719733018)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_shape ()-> ParticleProcessMaterial.EmissionShape {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_shape, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ParticleProcessMaterial.EmissionShape (rawValue: _result)!
    }
    
    fileprivate static var method_set_emission_sphere_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_sphere_radius")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_sphere_radius (_ radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_sphere_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_sphere_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_sphere_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_sphere_radius")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_sphere_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_sphere_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_box_extents: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_box_extents")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_box_extents (_ extents: Vector3) {
        #if false
        
        var copy_extents = extents
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_box_extents, UnsafeMutableRawPointer (mutating: handle), nil, &copy_extents)
        
        #else
        
        var copy_extents = extents
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_extents) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_box_extents, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_box_extents: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_box_extents")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_box_extents ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_box_extents, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_point_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_point_texture")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_point_texture (_ texture: Texture2D?) {
        #if false
        
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_point_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: texture?.handle) { p0 in
        _args.append (texture == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_point_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_point_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_point_texture")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_point_texture ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_point_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_emission_normal_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_normal_texture")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_normal_texture (_ texture: Texture2D?) {
        #if false
        
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_normal_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: texture?.handle) { p0 in
        _args.append (texture == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_normal_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_normal_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_normal_texture")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_normal_texture ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_normal_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_emission_color_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_color_texture")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4051416890)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_color_texture (_ texture: Texture2D?) {
        #if false
        
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_color_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_texture_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: texture?.handle) { p0 in
        _args.append (texture == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_color_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_color_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_color_texture")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3635182373)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_color_texture ()-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_color_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_emission_point_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_point_count")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_point_count (_ pointCount: Int32) {
        #if false
        
        var copy_point_count: Int = Int (pointCount)
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_point_count, UnsafeMutableRawPointer (mutating: handle), nil, &copy_point_count)
        
        #else
        
        var copy_point_count: Int = Int (pointCount)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_point_count) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_point_count, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_point_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_point_count")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_point_count ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_point_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_ring_axis: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_ring_axis")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_ring_axis (_ axis: Vector3) {
        #if false
        
        var copy_axis = axis
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_ring_axis, UnsafeMutableRawPointer (mutating: handle), nil, &copy_axis)
        
        #else
        
        var copy_axis = axis
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_axis) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_ring_axis, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_ring_axis: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_ring_axis")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_ring_axis ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_ring_axis, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_ring_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_ring_height")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_ring_height (_ height: Double) {
        #if false
        
        var copy_height = height
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_ring_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_height)
        
        #else
        
        var copy_height = height
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_height) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_ring_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_ring_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_ring_height")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_ring_height ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_ring_height, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_ring_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_ring_radius")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_ring_radius (_ radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_ring_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_ring_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_ring_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_ring_radius")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_ring_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_ring_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_ring_inner_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_ring_inner_radius")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_ring_inner_radius (_ innerRadius: Double) {
        #if false
        
        var copy_inner_radius = innerRadius
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_ring_inner_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_inner_radius)
        
        #else
        
        var copy_inner_radius = innerRadius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_inner_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_ring_inner_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_ring_inner_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_ring_inner_radius")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_ring_inner_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_ring_inner_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_shape_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_shape_offset")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_shape_offset (_ emissionShapeOffset: Vector3) {
        #if false
        
        var copy_emission_shape_offset = emissionShapeOffset
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_shape_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_emission_shape_offset)
        
        #else
        
        var copy_emission_shape_offset = emissionShapeOffset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_emission_shape_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_shape_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_shape_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_shape_offset")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_shape_offset ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_shape_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_shape_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_shape_scale")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_shape_scale (_ emissionShapeScale: Vector3) {
        #if false
        
        var copy_emission_shape_scale = emissionShapeScale
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_emission_shape_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_emission_shape_scale)
        
        #else
        
        var copy_emission_shape_scale = emissionShapeScale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_emission_shape_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_emission_shape_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_shape_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_shape_scale")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_shape_scale ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_emission_shape_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_turbulence_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_turbulence_enabled")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_turbulence_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_turbulence_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_turbulence_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_turbulence_enabled")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_turbulence_enabled (_ turbulenceEnabled: Bool) {
        #if false
        
        var copy_turbulence_enabled = turbulenceEnabled
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_turbulence_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_turbulence_enabled)
        
        #else
        
        var copy_turbulence_enabled = turbulenceEnabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_turbulence_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_turbulence_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_turbulence_noise_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_turbulence_noise_strength")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_turbulence_noise_strength ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_turbulence_noise_strength, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_turbulence_noise_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_turbulence_noise_strength")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_turbulence_noise_strength (_ turbulenceNoiseStrength: Double) {
        #if false
        
        var copy_turbulence_noise_strength = turbulenceNoiseStrength
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_turbulence_noise_strength, UnsafeMutableRawPointer (mutating: handle), nil, &copy_turbulence_noise_strength)
        
        #else
        
        var copy_turbulence_noise_strength = turbulenceNoiseStrength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_turbulence_noise_strength) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_turbulence_noise_strength, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_turbulence_noise_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_turbulence_noise_scale")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_turbulence_noise_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_turbulence_noise_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_turbulence_noise_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_turbulence_noise_scale")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_turbulence_noise_scale (_ turbulenceNoiseScale: Double) {
        #if false
        
        var copy_turbulence_noise_scale = turbulenceNoiseScale
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_turbulence_noise_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_turbulence_noise_scale)
        
        #else
        
        var copy_turbulence_noise_scale = turbulenceNoiseScale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_turbulence_noise_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_turbulence_noise_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_turbulence_noise_speed_random: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_turbulence_noise_speed_random")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_turbulence_noise_speed_random ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_turbulence_noise_speed_random, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_turbulence_noise_speed_random: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_turbulence_noise_speed_random")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_turbulence_noise_speed_random (_ turbulenceNoiseSpeedRandom: Double) {
        #if false
        
        var copy_turbulence_noise_speed_random = turbulenceNoiseSpeedRandom
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_turbulence_noise_speed_random, UnsafeMutableRawPointer (mutating: handle), nil, &copy_turbulence_noise_speed_random)
        
        #else
        
        var copy_turbulence_noise_speed_random = turbulenceNoiseSpeedRandom
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_turbulence_noise_speed_random) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_turbulence_noise_speed_random, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_turbulence_noise_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_turbulence_noise_speed")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_turbulence_noise_speed ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_turbulence_noise_speed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_turbulence_noise_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_turbulence_noise_speed")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_turbulence_noise_speed (_ turbulenceNoiseSpeed: Vector3) {
        #if false
        
        var copy_turbulence_noise_speed = turbulenceNoiseSpeed
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_turbulence_noise_speed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_turbulence_noise_speed)
        
        #else
        
        var copy_turbulence_noise_speed = turbulenceNoiseSpeed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_turbulence_noise_speed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_turbulence_noise_speed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_gravity")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_gravity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_gravity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_gravity")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_gravity (_ accelVec: Vector3) {
        #if false
        
        var copy_accel_vec = accelVec
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_gravity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_accel_vec)
        
        #else
        
        var copy_accel_vec = accelVec
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_accel_vec) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_gravity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_lifetime_randomness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_lifetime_randomness")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_lifetime_randomness (_ randomness: Double) {
        #if false
        
        var copy_randomness = randomness
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_lifetime_randomness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_randomness)
        
        #else
        
        var copy_randomness = randomness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_randomness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_lifetime_randomness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_lifetime_randomness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_lifetime_randomness")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_lifetime_randomness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_lifetime_randomness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_sub_emitter_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sub_emitter_mode")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2399052877)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sub_emitter_mode ()-> ParticleProcessMaterial.SubEmitterMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_sub_emitter_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ParticleProcessMaterial.SubEmitterMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_sub_emitter_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sub_emitter_mode")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2161806672)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sub_emitter_mode (_ mode: ParticleProcessMaterial.SubEmitterMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_sub_emitter_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_sub_emitter_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sub_emitter_frequency: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sub_emitter_frequency")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sub_emitter_frequency ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_sub_emitter_frequency, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sub_emitter_frequency: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sub_emitter_frequency")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sub_emitter_frequency (_ hz: Double) {
        #if false
        
        var copy_hz = hz
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_sub_emitter_frequency, UnsafeMutableRawPointer (mutating: handle), nil, &copy_hz)
        
        #else
        
        var copy_hz = hz
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_hz) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_sub_emitter_frequency, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sub_emitter_amount_at_end: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sub_emitter_amount_at_end")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sub_emitter_amount_at_end ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_sub_emitter_amount_at_end, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sub_emitter_amount_at_end: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sub_emitter_amount_at_end")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sub_emitter_amount_at_end (_ amount: Int32) {
        #if false
        
        var copy_amount: Int = Int (amount)
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_sub_emitter_amount_at_end, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount: Int = Int (amount)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_sub_emitter_amount_at_end, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sub_emitter_amount_at_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sub_emitter_amount_at_collision")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sub_emitter_amount_at_collision ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_sub_emitter_amount_at_collision, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sub_emitter_amount_at_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sub_emitter_amount_at_collision")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sub_emitter_amount_at_collision (_ amount: Int32) {
        #if false
        
        var copy_amount: Int = Int (amount)
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_sub_emitter_amount_at_collision, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount: Int = Int (amount)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_sub_emitter_amount_at_collision, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_sub_emitter_keep_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_sub_emitter_keep_velocity")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_sub_emitter_keep_velocity ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_sub_emitter_keep_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_sub_emitter_keep_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_sub_emitter_keep_velocity")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_sub_emitter_keep_velocity (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_sub_emitter_keep_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_sub_emitter_keep_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_attractor_interaction_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_attractor_interaction_enabled")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_attractor_interaction_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_attractor_interaction_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_attractor_interaction_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_attractor_interaction_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_attractor_interaction_enabled")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_attractor_interaction_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_is_attractor_interaction_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_mode")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 653804659)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_mode (_ mode: ParticleProcessMaterial.CollisionMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_collision_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_collision_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_mode")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 139371864)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_mode ()-> ParticleProcessMaterial.CollisionMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_collision_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ParticleProcessMaterial.CollisionMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_collision_use_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_use_scale")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_use_scale (_ radius: Bool) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_collision_use_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_collision_use_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_collision_using_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_collision_using_scale")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_collision_using_scale ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_is_collision_using_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_friction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_friction")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_friction (_ friction: Double) {
        #if false
        
        var copy_friction = friction
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_collision_friction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_friction)
        
        #else
        
        var copy_friction = friction
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_friction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_collision_friction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_friction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_friction")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_friction ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_collision_friction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collision_bounce: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collision_bounce")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collision_bounce (_ bounce: Double) {
        #if false
        
        var copy_bounce = bounce
        
        gi.object_method_bind_ptrcall_v (ParticleProcessMaterial.method_set_collision_bounce, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bounce)
        
        #else
        
        var copy_bounce = bounce
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bounce) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_set_collision_bounce, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_collision_bounce: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_collision_bounce")
        return withUnsafePointer (to: &ParticleProcessMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_collision_bounce ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (ParticleProcessMaterial.method_get_collision_bounce, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

