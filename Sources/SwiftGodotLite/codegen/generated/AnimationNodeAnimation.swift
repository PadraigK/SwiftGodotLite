// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// An input animation for an ``AnimationNodeBlendTree``.
/// 
/// A resource to add to an ``AnimationNodeBlendTree``. Only has one output port using the ``animation`` property. Used as an input for ``AnimationNode``s that blend animations together.
open class AnimationNodeAnimation: AnimationRootNode {
    override open class var godotClassName: StringName { "AnimationNodeAnimation" }
    public enum PlayMode: Int64 {
        /// Plays animation in forward direction.
        case forward = 0 // PLAY_MODE_FORWARD
        /// Plays animation in backward direction.
        case backward = 1 // PLAY_MODE_BACKWARD
    }
    
    
    /* Properties */
    
    /// Animation to use as an output. It is one of the animations provided by ``AnimationTree/animPlayer``.
    final public var animation: StringName {
        get {
            return get_animation ()
        }
        
        set {
            set_animation (newValue)
        }
        
    }
    
    /// Determines the playback direction of the animation.
    final public var playMode: AnimationNodeAnimation.PlayMode {
        get {
            return get_play_mode ()
        }
        
        set {
            set_play_mode (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_animation")
        return withUnsafePointer (to: &AnimationNodeAnimation.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3304788590)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_animation (_ name: StringName) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (AnimationNodeAnimation.method_set_animation, UnsafeMutableRawPointer (mutating: handle), nil, &name.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeAnimation.method_set_animation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_animation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_animation")
        return withUnsafePointer (to: &AnimationNodeAnimation.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2002593661)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_animation ()-> StringName {
        let _result: StringName = StringName ()
        gi.object_method_bind_ptrcall (AnimationNodeAnimation.method_get_animation, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_play_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_play_mode")
        return withUnsafePointer (to: &AnimationNodeAnimation.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3347718873)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_play_mode (_ mode: AnimationNodeAnimation.PlayMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (AnimationNodeAnimation.method_set_play_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AnimationNodeAnimation.method_set_play_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_play_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_play_mode")
        return withUnsafePointer (to: &AnimationNodeAnimation.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2061244637)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_play_mode ()-> AnimationNodeAnimation.PlayMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AnimationNodeAnimation.method_get_play_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AnimationNodeAnimation.PlayMode (rawValue: _result)!
    }
    
}

