// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Pipeline color blend state attachment (used by ``RenderingDevice``).
/// 
/// Controls how blending between source and destination fragments is performed when using ``RenderingDevice``.
/// 
/// For reference, this is how common user-facing blend modes are implemented in Godot's 2D renderer:
/// 
/// **Mix:**
/// 
/// **Add:**
/// 
/// **Subtract:**
/// 
/// **Multiply:**
/// 
/// **Pre-multiplied alpha:**
/// 
open class RDPipelineColorBlendStateAttachment: RefCounted {
    override open class var godotClassName: StringName { "RDPipelineColorBlendStateAttachment" }
    
    /* Properties */
    
    /// If `true`, performs blending between the source and destination according to the factors defined in ``srcColorBlendFactor``, ``dstColorBlendFactor``, ``srcAlphaBlendFactor`` and ``dstAlphaBlendFactor``. The blend modes ``colorBlendOp`` and ``alphaBlendOp`` are also taken into account, with ``writeR``, ``writeG``, ``writeB`` and ``writeA`` controlling the output.
    final public var enableBlend: Bool {
        get {
            return get_enable_blend ()
        }
        
        set {
            set_enable_blend (newValue)
        }
        
    }
    
    /// Controls how the blend factor for the color channels is determined based on the source's fragments.
    final public var srcColorBlendFactor: RenderingDevice.BlendFactor {
        get {
            return get_src_color_blend_factor ()
        }
        
        set {
            set_src_color_blend_factor (newValue)
        }
        
    }
    
    /// Controls how the blend factor for the color channels is determined based on the destination's fragments.
    final public var dstColorBlendFactor: RenderingDevice.BlendFactor {
        get {
            return get_dst_color_blend_factor ()
        }
        
        set {
            set_dst_color_blend_factor (newValue)
        }
        
    }
    
    /// The blend mode to use for the red/green/blue color channels.
    final public var colorBlendOp: RenderingDevice.BlendOperation {
        get {
            return get_color_blend_op ()
        }
        
        set {
            set_color_blend_op (newValue)
        }
        
    }
    
    /// Controls how the blend factor for the alpha channel is determined based on the source's fragments.
    final public var srcAlphaBlendFactor: RenderingDevice.BlendFactor {
        get {
            return get_src_alpha_blend_factor ()
        }
        
        set {
            set_src_alpha_blend_factor (newValue)
        }
        
    }
    
    /// Controls how the blend factor for the alpha channel is determined based on the destination's fragments.
    final public var dstAlphaBlendFactor: RenderingDevice.BlendFactor {
        get {
            return get_dst_alpha_blend_factor ()
        }
        
        set {
            set_dst_alpha_blend_factor (newValue)
        }
        
    }
    
    /// The blend mode to use for the alpha channel.
    final public var alphaBlendOp: RenderingDevice.BlendOperation {
        get {
            return get_alpha_blend_op ()
        }
        
        set {
            set_alpha_blend_op (newValue)
        }
        
    }
    
    /// If `true`, writes the new red color channel to the final result.
    final public var writeR: Bool {
        get {
            return get_write_r ()
        }
        
        set {
            set_write_r (newValue)
        }
        
    }
    
    /// If `true`, writes the new green color channel to the final result.
    final public var writeG: Bool {
        get {
            return get_write_g ()
        }
        
        set {
            set_write_g (newValue)
        }
        
    }
    
    /// If `true`, writes the new blue color channel to the final result.
    final public var writeB: Bool {
        get {
            return get_write_b ()
        }
        
        set {
            set_write_b (newValue)
        }
        
    }
    
    /// If `true`, writes the new alpha channel to the final result.
    final public var writeA: Bool {
        get {
            return get_write_a ()
        }
        
        set {
            set_write_a (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_as_mix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_as_mix")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Convenience method to perform standard mix blending with straight (non-premultiplied) alpha. This sets ``enableBlend`` to `true`, ``srcColorBlendFactor`` to ``RenderingDevice/BlendFactor/srcAlpha``, ``dstColorBlendFactor`` to ``RenderingDevice/BlendFactor/oneMinusSrcAlpha``, ``srcAlphaBlendFactor`` to ``RenderingDevice/BlendFactor/srcAlpha`` and ``dstAlphaBlendFactor`` to ``RenderingDevice/BlendFactor/oneMinusSrcAlpha``.
    public final func setAsMix () {
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_as_mix, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_enable_blend: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enable_blend")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enable_blend (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_enable_blend, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_enable_blend, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_enable_blend: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_enable_blend")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_enable_blend ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_enable_blend, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_src_color_blend_factor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_src_color_blend_factor")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2251019273)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_src_color_blend_factor (_ pMember: RenderingDevice.BlendFactor) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_src_color_blend_factor, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_src_color_blend_factor, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_src_color_blend_factor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_src_color_blend_factor")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3691288359)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_src_color_blend_factor ()-> RenderingDevice.BlendFactor {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_src_color_blend_factor, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.BlendFactor (rawValue: _result)!
    }
    
    fileprivate static var method_set_dst_color_blend_factor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_dst_color_blend_factor")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2251019273)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_dst_color_blend_factor (_ pMember: RenderingDevice.BlendFactor) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_dst_color_blend_factor, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_dst_color_blend_factor, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_dst_color_blend_factor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_dst_color_blend_factor")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3691288359)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_dst_color_blend_factor ()-> RenderingDevice.BlendFactor {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_dst_color_blend_factor, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.BlendFactor (rawValue: _result)!
    }
    
    fileprivate static var method_set_color_blend_op: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_color_blend_op")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3073022720)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_color_blend_op (_ pMember: RenderingDevice.BlendOperation) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_color_blend_op, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_color_blend_op, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_color_blend_op: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_color_blend_op")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1385093561)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_color_blend_op ()-> RenderingDevice.BlendOperation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_color_blend_op, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.BlendOperation (rawValue: _result)!
    }
    
    fileprivate static var method_set_src_alpha_blend_factor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_src_alpha_blend_factor")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2251019273)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_src_alpha_blend_factor (_ pMember: RenderingDevice.BlendFactor) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_src_alpha_blend_factor, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_src_alpha_blend_factor, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_src_alpha_blend_factor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_src_alpha_blend_factor")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3691288359)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_src_alpha_blend_factor ()-> RenderingDevice.BlendFactor {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_src_alpha_blend_factor, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.BlendFactor (rawValue: _result)!
    }
    
    fileprivate static var method_set_dst_alpha_blend_factor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_dst_alpha_blend_factor")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2251019273)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_dst_alpha_blend_factor (_ pMember: RenderingDevice.BlendFactor) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_dst_alpha_blend_factor, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_dst_alpha_blend_factor, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_dst_alpha_blend_factor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_dst_alpha_blend_factor")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3691288359)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_dst_alpha_blend_factor ()-> RenderingDevice.BlendFactor {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_dst_alpha_blend_factor, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.BlendFactor (rawValue: _result)!
    }
    
    fileprivate static var method_set_alpha_blend_op: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_blend_op")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3073022720)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_blend_op (_ pMember: RenderingDevice.BlendOperation) {
        #if false
        
        var copy_p_member = Int64 (pMember.rawValue)
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_alpha_blend_op, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = Int64 (pMember.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_alpha_blend_op, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_blend_op: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_blend_op")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1385093561)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_blend_op ()-> RenderingDevice.BlendOperation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_alpha_blend_op, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return RenderingDevice.BlendOperation (rawValue: _result)!
    }
    
    fileprivate static var method_set_write_r: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_write_r")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_write_r (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_write_r, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_write_r, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_write_r: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_write_r")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_write_r ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_write_r, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_write_g: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_write_g")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_write_g (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_write_g, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_write_g, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_write_g: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_write_g")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_write_g ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_write_g, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_write_b: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_write_b")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_write_b (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_write_b, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_write_b, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_write_b: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_write_b")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_write_b ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_write_b, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_write_a: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_write_a")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_write_a (_ pMember: Bool) {
        #if false
        
        var copy_p_member = pMember
        
        gi.object_method_bind_ptrcall_v (RDPipelineColorBlendStateAttachment.method_set_write_a, UnsafeMutableRawPointer (mutating: handle), nil, &copy_p_member)
        
        #else
        
        var copy_p_member = pMember
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_p_member) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_set_write_a, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_write_a: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_write_a")
        return withUnsafePointer (to: &RDPipelineColorBlendStateAttachment.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_write_a ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (RDPipelineColorBlendStateAttachment.method_get_write_a, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

