// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// One-shot timer.
/// 
/// A one-shot timer managed by the scene tree, which emits [signal timeout] on completion. See also ``SceneTree/createTimer(timeSec:processAlways:processInPhysics:ignoreTimeScale:)``.
/// 
/// As opposed to ``Timer``, it does not require the instantiation of a node. Commonly used to create a one-shot delay timer as in the following example:
/// 
/// The timer will be dereferenced after its time elapses. To preserve the timer, you can keep a reference to it. See ``RefCounted``.
/// 
/// > Note: The timer is processed after all of the nodes in the current frame, i.e. node's ``Node/_process(delta:)`` method would be called before the timer (or ``Node/_physicsProcess(delta:)`` if `process_in_physics` in ``SceneTree/createTimer(timeSec:processAlways:processInPhysics:ignoreTimeScale:)`` has been set to `true`).
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``timeout``
open class SceneTreeTimer: RefCounted {
    override open class var godotClassName: StringName { "SceneTreeTimer" }
    
    /* Properties */
    
    /// The time remaining (in seconds).
    final public var timeLeft: Double {
        get {
            return get_time_left ()
        }
        
        set {
            set_time_left (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_time_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_time_left")
        return withUnsafePointer (to: &SceneTreeTimer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_time_left (_ time: Double) {
        #if false
        
        var copy_time = time
        
        gi.object_method_bind_ptrcall_v (SceneTreeTimer.method_set_time_left, UnsafeMutableRawPointer (mutating: handle), nil, &copy_time)
        
        #else
        
        var copy_time = time
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_time) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SceneTreeTimer.method_set_time_left, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_time_left: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_time_left")
        return withUnsafePointer (to: &SceneTreeTimer.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_time_left ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (SceneTreeTimer.method_get_time_left, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when the timer reaches 0.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.timeout.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var timeout: SimpleSignal { SimpleSignal (target: self, signalName: "timeout") }
    
}

