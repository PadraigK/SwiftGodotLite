// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// An internal control for a single item inside ``Tree``.
/// 
/// A single item of a ``Tree`` control. It can contain other ``TreeItem``s as children, which allows it to create a hierarchy. It can also contain text and buttons. ``TreeItem`` is not a ``Node``, it is internal to the ``Tree``.
/// 
/// To create a ``TreeItem``, use ``Tree/createItem(parent:index:)`` or ``TreeItem/createChild(index:)``. To remove a ``TreeItem``, use ``Object/free()``.
/// 
/// > Note: The ID values used for buttons are 32-bit, unlike integer which is always 64-bit. They go from `-2147483648` to `2147483647`.
/// 
open class TreeItem: Object {
    override open class var godotClassName: StringName { "TreeItem" }
    public enum TreeCellMode: Int64 {
        /// Cell contains a string.
        case string = 0 // CELL_MODE_STRING
        /// Cell contains a checkbox.
        case check = 1 // CELL_MODE_CHECK
        /// Cell contains a range.
        case range = 2 // CELL_MODE_RANGE
        /// Cell contains an icon.
        case icon = 3 // CELL_MODE_ICON
        /// 
        case custom = 4 // CELL_MODE_CUSTOM
    }
    
    
    /* Properties */
    
    /// If `true`, the TreeItem is collapsed.
    final public var collapsed: Bool {
        get {
            return is_collapsed ()
        }
        
        set {
            set_collapsed (newValue)
        }
        
    }
    
    /// If `true`, the ``TreeItem`` is visible (default).
    /// 
    /// Note that if a ``TreeItem`` is set to not be visible, none of its children will be visible either.
    /// 
    final public var visible: Bool {
        get {
            return is_visible ()
        }
        
        set {
            set_visible (newValue)
        }
        
    }
    
    /// If `true`, folding is disabled for this TreeItem.
    final public var disableFolding: Bool {
        get {
            return is_folding_disabled ()
        }
        
        set {
            set_disable_folding (newValue)
        }
        
    }
    
    /// The custom minimum height.
    final public var customMinimumHeight: Int32 {
        get {
            return get_custom_minimum_height ()
        }
        
        set {
            set_custom_minimum_height (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_cell_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cell_mode")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 289920701)!
            }
            
        }
        
    }()
    
    /// Sets the given column's cell mode to `mode`. See ``TreeItem/TreeCellMode`` constants.
    public final func setCellMode (column: Int32, mode: TreeItem.TreeCellMode) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_cell_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_mode)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mode) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_cell_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_cell_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cell_mode")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3406114978)!
            }
            
        }
        
    }()
    
    /// Returns the column's cell mode.
    public final func getCellMode (column: Int32)-> TreeItem.TreeCellMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_cell_mode, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return TreeItem.TreeCellMode (rawValue: _result)!
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_cell_mode, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return TreeItem.TreeCellMode (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_edit_multiline: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_edit_multiline")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// If `multiline` is `true`, the given `column` is multiline editable.
    /// 
    /// > Note: This option only affects the type of control (``LineEdit`` or ``TextEdit``) that appears when editing the column. You can set multiline values with ``setText(column:text:)`` even if the column is not multiline editable.
    /// 
    public final func setEditMultiline (column: Int32, multiline: Bool) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_multiline = multiline
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_edit_multiline, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_multiline)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_multiline = multiline
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_multiline) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_edit_multiline, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_edit_multiline: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_edit_multiline")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given `column` is multiline editable.
    public final func isEditMultiline (column: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_is_edit_multiline, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_is_edit_multiline, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_checked: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_checked")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// If `checked` is `true`, the given `column` is checked. Clears column's indeterminate status.
    public final func setChecked (column: Int32, checked: Bool) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_checked = checked
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_checked, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_checked)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_checked = checked
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_checked) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_checked, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_indeterminate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_indeterminate")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// If `indeterminate` is `true`, the given `column` is marked indeterminate.
    /// 
    /// > Note: If set `true` from `false`, then column is cleared of checked status.
    /// 
    public final func setIndeterminate (column: Int32, indeterminate: Bool) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_indeterminate = indeterminate
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_indeterminate, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_indeterminate)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_indeterminate = indeterminate
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_indeterminate) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_indeterminate, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_checked: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_checked")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given `column` is checked.
    public final func isChecked (column: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_is_checked, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_is_checked, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_indeterminate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_indeterminate")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given `column` is indeterminate.
    public final func isIndeterminate (column: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_is_indeterminate, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_is_indeterminate, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_propagate_check: GDExtensionMethodBindPtr = {
        let methodName = StringName ("propagate_check")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 972357352)!
            }
            
        }
        
    }()
    
    /// Propagates this item's checked status to its children and parents for the given `column`. It is possible to process the items affected by this method call by connecting to [signal Tree.check_propagated_to_item]. The order that the items affected will be processed is as follows: the item invoking this method, children of that item, and finally parents of that item. If `emitSignal` is `false`, then [signal Tree.check_propagated_to_item] will not be emitted.
    public final func propagateCheck (column: Int32, emitSignal: Bool = true) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_emit_signal = emitSignal
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_propagate_check, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_emit_signal)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_emit_signal = emitSignal
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_emit_signal) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_propagate_check, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 501894301)!
            }
            
        }
        
    }()
    
    /// Sets the given column's text value.
    public final func setText (column: Int32, text: String) {
        #if false
        
        var copy_column: Int = Int (column)
        let gstr_text = GString (text)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_text, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &gstr_text.content)
        
        #else
        
        var copy_column: Int = Int (column)
        let gstr_text = GString (text)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_text.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_text, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 844755477)!
            }
            
        }
        
    }()
    
    /// Returns the given column's text.
    public final func getText (column: Int32)-> String {
        let _result = GString ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_text, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_column)
        return _result.description
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_text, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_set_text_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text_direction")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1707680378)!
            }
            
        }
        
    }()
    
    /// Sets item's text base writing direction.
    public final func setTextDirection (column: Int32, direction: Control.TextDirection) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_direction = Int64 (direction.rawValue)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_text_direction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_direction)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_direction = Int64 (direction.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_direction) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_text_direction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_text_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text_direction")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4235602388)!
            }
            
        }
        
    }()
    
    /// Returns item's text base writing direction.
    public final func getTextDirection (column: Int32)-> Control.TextDirection {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_text_direction, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return Control.TextDirection (rawValue: _result)!
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_text_direction, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return Control.TextDirection (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_autowrap_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_autowrap_mode")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3633006561)!
            }
            
        }
        
    }()
    
    /// Sets the autowrap mode in the given `column`. If set to something other than ``TextServer/AutowrapMode/autowrapOff``, the text gets wrapped inside the cell's bounding rectangle.
    public final func setAutowrapMode (column: Int32, autowrapMode: TextServer.AutowrapMode) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_autowrap_mode = Int64 (autowrapMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_autowrap_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_autowrap_mode)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_autowrap_mode = Int64 (autowrapMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_autowrap_mode) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_autowrap_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_autowrap_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_autowrap_mode")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2902757236)!
            }
            
        }
        
    }()
    
    /// Returns the text autowrap mode in the given `column`. By default it is ``TextServer/AutowrapMode/autowrapOff``.
    public final func getAutowrapMode (column: Int32)-> TextServer.AutowrapMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_autowrap_mode, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return TextServer.AutowrapMode (rawValue: _result)!
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_autowrap_mode, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return TextServer.AutowrapMode (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_text_overrun_behavior: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text_overrun_behavior")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1940772195)!
            }
            
        }
        
    }()
    
    /// Sets the clipping behavior when the text exceeds the item's bounding rectangle in the given `column`.
    public final func setTextOverrunBehavior (column: Int32, overrunBehavior: TextServer.OverrunBehavior) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_overrun_behavior = Int64 (overrunBehavior.rawValue)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_text_overrun_behavior, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_overrun_behavior)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_overrun_behavior = Int64 (overrunBehavior.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_overrun_behavior) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_text_overrun_behavior, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_text_overrun_behavior: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text_overrun_behavior")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3782727860)!
            }
            
        }
        
    }()
    
    /// Returns the clipping behavior when the text exceeds the item's bounding rectangle in the given `column`. By default it is ``TextServer/OverrunBehavior/overrunTrimEllipsis``.
    public final func getTextOverrunBehavior (column: Int32)-> TextServer.OverrunBehavior {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_text_overrun_behavior, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return TextServer.OverrunBehavior (rawValue: _result)!
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_text_overrun_behavior, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return TextServer.OverrunBehavior (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_structured_text_bidi_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_structured_text_bidi_override")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 868756907)!
            }
            
        }
        
    }()
    
    /// 
    public final func setStructuredTextBidiOverride (column: Int32, parser: TextServer.StructuredTextParser) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_parser = Int64 (parser.rawValue)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_parser)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_parser = Int64 (parser.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_parser) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_structured_text_bidi_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_structured_text_bidi_override")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3377823772)!
            }
            
        }
        
    }()
    
    /// 
    public final func getStructuredTextBidiOverride (column: Int32)-> TextServer.StructuredTextParser {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return TextServer.StructuredTextParser (rawValue: _result)!
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return TextServer.StructuredTextParser (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_structured_text_bidi_override_options: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_structured_text_bidi_override_options")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 537221740)!
            }
            
        }
        
    }()
    
    /// 
    public final func setStructuredTextBidiOverrideOptions (column: Int32, args: GArray) {
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &args.content)
        
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &args.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_structured_text_bidi_override_options: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_structured_text_bidi_override_options")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 663333327)!
            }
            
        }
        
    }()
    
    /// 
    public final func getStructuredTextBidiOverrideOptions (column: Int32)-> GArray {
        let _result: GArray = GArray ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_language: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_language")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 501894301)!
            }
            
        }
        
    }()
    
    /// Sets language code of item's text used for line-breaking and text shaping algorithms, if left empty current locale is used instead.
    public final func setLanguage (column: Int32, language: String) {
        #if false
        
        var copy_column: Int = Int (column)
        let gstr_language = GString (language)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_language, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &gstr_language.content)
        
        #else
        
        var copy_column: Int = Int (column)
        let gstr_language = GString (language)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_language.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_language, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_language: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_language")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 844755477)!
            }
            
        }
        
    }()
    
    /// Returns item's text language code.
    public final func getLanguage (column: Int32)-> String {
        let _result = GString ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_language, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_column)
        return _result.description
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_language, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_set_suffix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_suffix")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 501894301)!
            }
            
        }
        
    }()
    
    /// Sets a string to be shown after a column's value (for example, a unit abbreviation).
    public final func setSuffix (column: Int32, text: String) {
        #if false
        
        var copy_column: Int = Int (column)
        let gstr_text = GString (text)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_suffix, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &gstr_text.content)
        
        #else
        
        var copy_column: Int = Int (column)
        let gstr_text = GString (text)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_text.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_suffix, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_suffix: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_suffix")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 844755477)!
            }
            
        }
        
    }()
    
    /// Gets the suffix string shown after the column value.
    public final func getSuffix (column: Int32)-> String {
        let _result = GString ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_suffix, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_column)
        return _result.description
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_suffix, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_set_icon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_icon")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 666127730)!
            }
            
        }
        
    }()
    
    /// Sets the given column's icon ``Texture2D``.
    public final func setIcon (column: Int32, texture: Texture2D?) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_icon, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_texture_handle)
        
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: texture?.handle) { p1 in
            _args.append (texture == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_icon, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_icon: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_icon")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3536238170)!
            }
            
        }
        
    }()
    
    /// Returns the given column's icon ``Texture2D``. Error if no icon is set.
    public final func getIcon (column: Int32)-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_icon, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_icon, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_icon_region: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_icon_region")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1356297692)!
            }
            
        }
        
    }()
    
    /// Sets the given column's icon's texture region.
    public final func setIconRegion (column: Int32, region: Rect2) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_region = region
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_icon_region, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_region)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_region = region
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_region) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_icon_region, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_icon_region: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_icon_region")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3327874267)!
            }
            
        }
        
    }()
    
    /// Returns the icon ``Texture2D`` region as ``Rect2``.
    public final func getIconRegion (column: Int32)-> Rect2 {
        var _result: Rect2 = Rect2 ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_icon_region, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_icon_region, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_icon_max_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_icon_max_width")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the maximum allowed width of the icon in the given `column`. This limit is applied on top of the default size of the icon and on top of [theme_item Tree.icon_max_width]. The height is adjusted according to the icon's ratio.
    public final func setIconMaxWidth (column: Int32, width: Int32) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_width: Int = Int (width)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_icon_max_width, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_width)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_width: Int = Int (width)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_width) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_icon_max_width, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_icon_max_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_icon_max_width")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the maximum allowed width of the icon in the given `column`.
    public final func getIconMaxWidth (column: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_icon_max_width, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_icon_max_width, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_icon_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_icon_modulate")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2878471219)!
            }
            
        }
        
    }()
    
    /// Modulates the given column's icon with `modulate`.
    public final func setIconModulate (column: Int32, modulate: Color) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_modulate = modulate
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_icon_modulate, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_modulate)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_modulate = modulate
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_modulate) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_icon_modulate, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_icon_modulate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_icon_modulate")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3457211756)!
            }
            
        }
        
    }()
    
    /// Returns the ``Color`` modulating the column's icon.
    public final func getIconModulate (column: Int32)-> Color {
        var _result: Color = Color ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_icon_modulate, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_icon_modulate, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_range")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1602489585)!
            }
            
        }
        
    }()
    
    /// Sets the value of a .cellModeRange column.
    public final func setRange (column: Int32, value: Double) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_range, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_value)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_range, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_range")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2339986948)!
            }
            
        }
        
    }()
    
    /// Returns the value of a .cellModeRange column.
    public final func getRange (column: Int32)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_range, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_range, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_range_config: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_range_config")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1547181014)!
            }
            
        }
        
    }()
    
    /// Sets the range of accepted values for a column. The column must be in the .cellModeRange mode.
    /// 
    /// If `expr` is `true`, the edit mode slider will use an exponential scale as with ``Range/expEdit``.
    /// 
    public final func setRangeConfig (column: Int32, min: Double, max: Double, step: Double, expr: Bool = false) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_min = min
        var copy_max = max
        var copy_step = step
        var copy_expr = expr
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_range_config, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_min, &copy_max, &copy_step, &copy_expr)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_min = min
        var copy_max = max
        var copy_step = step
        var copy_expr = expr
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_min) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_max) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_step) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_expr) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (TreeItem.method_set_range_config, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_range_config: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_range_config")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3554694381)!
            }
            
        }
        
    }()
    
    /// Returns a dictionary containing the range parameters for a given column. The keys are "min", "max", "step", and "expr".
    public final func getRangeConfig (column: Int32)-> GDictionary {
        let _result: GDictionary = GDictionary ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_range_config, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_range_config, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_metadata: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_metadata")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2152698145)!
            }
            
        }
        
    }()
    
    /// Sets the metadata value for the given column, which can be retrieved later using ``getMetadata(column:)``. This can be used, for example, to store a reference to the original data.
    public final func setMetadata (column: Int32, meta: Variant) {
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_metadata, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &meta.content)
        
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &meta.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_metadata, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_metadata: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_metadata")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4227898402)!
            }
            
        }
        
    }()
    
    /// Returns the metadata value that was set for the given column using ``setMetadata(column:meta:)``.
    public final func getMetadata (column: Int32)-> Variant {
        let _result: Variant = Variant ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_metadata, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_metadata, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_custom_draw: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_draw")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 272420368)!
            }
            
        }
        
    }()
    
    /// Sets the given column's custom draw callback to `callback` method on `object`.
    /// 
    /// The `callback` should accept two arguments: the ``TreeItem`` that is drawn and its position and size as a ``Rect2``.
    /// 
    public final func setCustomDraw (column: Int32, object: Object?, callback: StringName) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_object_handle = object?.handle
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_custom_draw, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_object_handle, &callback.content)
        
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: object?.handle) { p1 in
            _args.append (object == nil ? nil : p1)
                withUnsafePointer (to: &callback.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TreeItem.method_set_custom_draw, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_collapsed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collapsed")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_collapsed (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_collapsed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_set_collapsed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_collapsed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_collapsed")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_collapsed ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TreeItem.method_is_collapsed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_collapsed_recursive: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_collapsed_recursive")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// Collapses or uncollapses this ``TreeItem`` and all the descendants of this item.
    public final func setCollapsedRecursive (enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_collapsed_recursive, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_set_collapsed_recursive, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_any_collapsed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_any_collapsed")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2595650253)!
            }
            
        }
        
    }()
    
    /// Returns `true` if this ``TreeItem``, or any of its descendants, is collapsed.
    /// 
    /// If `onlyVisible` is `true` it ignores non-visible ``TreeItem``s.
    /// 
    public final func isAnyCollapsed (onlyVisible: Bool = false)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_only_visible = onlyVisible
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_is_any_collapsed, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_only_visible)
        return _result
        #else
        
        var copy_only_visible = onlyVisible
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_only_visible) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_is_any_collapsed, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_visible: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_visible")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_visible (_ enable: Bool) {
        #if false
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_visible, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_set_visible, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_visible: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_visible")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_visible ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TreeItem.method_is_visible, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_uncollapse_tree: GDExtensionMethodBindPtr = {
        let methodName = StringName ("uncollapse_tree")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// 
    public final func uncollapseTree () {
        gi.object_method_bind_ptrcall (TreeItem.method_uncollapse_tree, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_custom_minimum_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_minimum_height")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_custom_minimum_height (_ height: Int32) {
        #if false
        
        var copy_height: Int = Int (height)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_custom_minimum_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_height)
        
        #else
        
        var copy_height: Int = Int (height)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_height) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_set_custom_minimum_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_minimum_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_minimum_height")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_custom_minimum_height ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TreeItem.method_get_custom_minimum_height, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_selectable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_selectable")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// If `selectable` is `true`, the given `column` is selectable.
    public final func setSelectable (column: Int32, selectable: Bool) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_selectable = selectable
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_selectable, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_selectable)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_selectable = selectable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_selectable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_selectable, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_selectable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_selectable")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given `column` is selectable.
    public final func isSelectable (column: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_is_selectable, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_is_selectable, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_selected: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_selected")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3067735520)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given `column` is selected.
    public final func isSelected (column: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_is_selected, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_is_selected, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_select: GDExtensionMethodBindPtr = {
        let methodName = StringName ("select")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Selects the given `column`.
    public final func select (column: Int32) {
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_select, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column)
        
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_select, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_deselect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("deselect")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Deselects the given column.
    public final func deselect (column: Int32) {
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_deselect, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column)
        
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_deselect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_editable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_editable")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the given `column` is editable.
    public final func setEditable (column: Int32, enabled: Bool) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_editable, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_enabled)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_editable, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_editable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_editable")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3067735520)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given `column` is editable.
    public final func isEditable (column: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_is_editable, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_is_editable, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_custom_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_color")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2878471219)!
            }
            
        }
        
    }()
    
    /// Sets the given column's custom color.
    public final func setCustomColor (column: Int32, color: Color) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_custom_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_color)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_color) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_custom_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_color")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3457211756)!
            }
            
        }
        
    }()
    
    /// Returns the custom color of column `column`.
    public final func getCustomColor (column: Int32)-> Color {
        var _result: Color = Color ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_custom_color, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_custom_color, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_clear_custom_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_custom_color")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Resets the color for the given column to default.
    public final func clearCustomColor (column: Int32) {
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_clear_custom_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column)
        
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_clear_custom_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_custom_font: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_font")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2637609184)!
            }
            
        }
        
    }()
    
    /// Sets custom font used to draw text in the given `column`.
    public final func setCustomFont (column: Int32, font: Font?) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_font_handle = font?.handle
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_custom_font, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_font_handle)
        
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: font?.handle) { p1 in
            _args.append (font == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_custom_font, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_font: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_font")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4244553094)!
            }
            
        }
        
    }()
    
    /// Returns custom font used to draw text in the column `column`.
    public final func getCustomFont (column: Int32)-> Font? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_custom_font, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_custom_font, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_custom_font_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_font_size")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets custom font size used to draw text in the given `column`.
    public final func setCustomFontSize (column: Int32, fontSize: Int32) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_font_size: Int = Int (fontSize)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_custom_font_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_font_size)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_font_size: Int = Int (fontSize)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_font_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_custom_font_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_font_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_font_size")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns custom font size used to draw text in the column `column`.
    public final func getCustomFontSize (column: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_custom_font_size, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_custom_font_size, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_custom_bg_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_bg_color")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 894174518)!
            }
            
        }
        
    }()
    
    /// Sets the given column's custom background color and whether to just use it as an outline.
    public final func setCustomBgColor (column: Int32, color: Color, justOutline: Bool = false) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_color = color
        var copy_just_outline = justOutline
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_custom_bg_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_color, &copy_just_outline)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_color = color
        var copy_just_outline = justOutline
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_color) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_just_outline) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TreeItem.method_set_custom_bg_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_clear_custom_bg_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_custom_bg_color")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Resets the background color for the given column to default.
    public final func clearCustomBgColor (column: Int32) {
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_clear_custom_bg_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column)
        
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_clear_custom_bg_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_bg_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_bg_color")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3457211756)!
            }
            
        }
        
    }()
    
    /// Returns the custom background color of column `column`.
    public final func getCustomBgColor (column: Int32)-> Color {
        var _result: Color = Color ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_custom_bg_color, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_custom_bg_color, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_custom_as_button: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_as_button")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// 
    public final func setCustomAsButton (column: Int32, enable: Bool) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_custom_as_button, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_enable)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_custom_as_button, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_custom_set_as_button: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_custom_set_as_button")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// 
    public final func isCustomSetAsButton (column: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_is_custom_set_as_button, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_is_custom_set_as_button, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_add_button: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_button")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1688223362)!
            }
            
        }
        
    }()
    
    /// Adds a button with ``Texture2D`` `button` at column `column`. The `id` is used to identify the button in the according [signal Tree.button_clicked] signal and can be different from the buttons index. If not specified, the next available index is used, which may be retrieved by calling ``getButtonCount(column:)`` immediately before this method. Optionally, the button can be `disabled` and have a `tooltipText`.
    public final func addButton (column: Int32, button: Texture2D?, id: Int32 = -1, disabled: Bool = false, tooltipText: String = "") {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_id: Int = Int (id)
        var copy_disabled = disabled
        let gstr_tooltip_text = GString (tooltipText)
        var copy_button_handle = button?.handle
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_add_button, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_button_handle, &copy_id, &copy_disabled, &gstr_tooltip_text.content)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_id: Int = Int (id)
        var copy_disabled = disabled
        let gstr_tooltip_text = GString (tooltipText)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: button?.handle) { p1 in
            _args.append (button == nil ? nil : p1)
                withUnsafePointer (to: &copy_id) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_disabled) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &gstr_tooltip_text.content) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (TreeItem.method_add_button, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_button_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_button_count")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the number of buttons in column `column`.
    public final func getButtonCount (column: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_button_count, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_button_count, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_button_tooltip_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_button_tooltip_text")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1391810591)!
            }
            
        }
        
    }()
    
    /// Returns the tooltip text for the button at index `buttonIndex` in column `column`.
    public final func getButtonTooltipText (column: Int32, buttonIndex: Int32)-> String {
        let _result = GString ()
        #if false
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_button_tooltip_text, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_column, &copy_button_index)
        return _result.description
        #else
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_button_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_get_button_tooltip_text, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                return _result.description
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_button_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_button_id")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3175239445)!
            }
            
        }
        
    }()
    
    /// Returns the ID for the button at index `buttonIndex` in column `column`.
    public final func getButtonId (column: Int32, buttonIndex: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_button_id, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column, &copy_button_index)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_button_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_get_button_id, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_button_by_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_button_by_id")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3175239445)!
            }
            
        }
        
    }()
    
    /// Returns the button index if there is a button with ID `id` in column `column`, otherwise returns -1.
    public final func getButtonById (column: Int32, id: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_column: Int = Int (column)
        var copy_id: Int = Int (id)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_button_by_id, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column, &copy_id)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var copy_id: Int = Int (id)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_get_button_by_id, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_button: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_button")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2584904275)!
            }
            
        }
        
    }()
    
    /// Returns the ``Texture2D`` of the button at index `buttonIndex` in column `column`.
    public final func getButton (column: Int32, buttonIndex: Int32)-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_button, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column, &copy_button_index)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_button_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_get_button, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_button_tooltip_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_button_tooltip_text")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2285447957)!
            }
            
        }
        
    }()
    
    /// Sets the tooltip text for the button at index `buttonIndex` in the given `column`.
    public final func setButtonTooltipText (column: Int32, buttonIndex: Int32, tooltip: String) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        let gstr_tooltip = GString (tooltip)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_button_tooltip_text, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_button_index, &gstr_tooltip.content)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        let gstr_tooltip = GString (tooltip)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_button_index) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &gstr_tooltip.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TreeItem.method_set_button_tooltip_text, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_button: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_button")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 176101966)!
            }
            
        }
        
    }()
    
    /// Sets the given column's button ``Texture2D`` at index `buttonIndex` to `button`.
    public final func setButton (column: Int32, buttonIndex: Int32, button: Texture2D?) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var copy_button_handle = button?.handle
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_button, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_button_index, &copy_button_handle)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_button_index) { p1 in
                _args.append (p1)
                withUnsafePointer (to: button?.handle) { p2 in
                _args.append (button == nil ? nil : p2)
        
                    gi.object_method_bind_ptrcall (TreeItem.method_set_button, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_erase_button: GDExtensionMethodBindPtr = {
        let methodName = StringName ("erase_button")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Removes the button at index `buttonIndex` in column `column`.
    public final func eraseButton (column: Int32, buttonIndex: Int32) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_erase_button, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_button_index)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_button_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_erase_button, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_button_disabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_button_disabled")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1383440665)!
            }
            
        }
        
    }()
    
    /// If `true`, disables the button at index `buttonIndex` in the given `column`.
    public final func setButtonDisabled (column: Int32, buttonIndex: Int32, disabled: Bool) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var copy_disabled = disabled
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_button_disabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_button_index, &copy_disabled)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var copy_disabled = disabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_button_index) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_disabled) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TreeItem.method_set_button_disabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_button_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_button_color")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3733378741)!
            }
            
        }
        
    }()
    
    /// Sets the given column's button color at index `buttonIndex` to `color`.
    public final func setButtonColor (column: Int32, buttonIndex: Int32, color: Color) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_button_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_button_index, &copy_color)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_button_index) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_color) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TreeItem.method_set_button_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_button_disabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_button_disabled")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2522259332)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the button at index `buttonIndex` for the given `column` is disabled.
    public final func isButtonDisabled (column: Int32, buttonIndex: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_is_button_disabled, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column, &copy_button_index)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var copy_button_index: Int = Int (buttonIndex)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_button_index) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_is_button_disabled, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_tooltip_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_tooltip_text")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 501894301)!
            }
            
        }
        
    }()
    
    /// Sets the given column's tooltip text.
    public final func setTooltipText (column: Int32, tooltip: String) {
        #if false
        
        var copy_column: Int = Int (column)
        let gstr_tooltip = GString (tooltip)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_tooltip_text, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &gstr_tooltip.content)
        
        #else
        
        var copy_column: Int = Int (column)
        let gstr_tooltip = GString (tooltip)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_tooltip.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_tooltip_text, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_tooltip_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tooltip_text")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 844755477)!
            }
            
        }
        
    }()
    
    /// Returns the given column's tooltip text.
    public final func getTooltipText (column: Int32)-> String {
        let _result = GString ()
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_tooltip_text, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_column)
        return _result.description
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_tooltip_text, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_set_text_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text_alignment")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3276431499)!
            }
            
        }
        
    }()
    
    /// Sets the given column's text alignment. See ``HorizontalAlignment`` for possible values.
    public final func setTextAlignment (column: Int32, textAlignment: HorizontalAlignment) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_text_alignment = Int64 (textAlignment.rawValue)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_text_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_text_alignment)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_text_alignment = Int64 (textAlignment.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_text_alignment) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_text_alignment, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_text_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text_alignment")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4171562184)!
            }
            
        }
        
    }()
    
    /// Returns the given column's text alignment.
    public final func getTextAlignment (column: Int32)-> HorizontalAlignment {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_text_alignment, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return HorizontalAlignment (rawValue: _result)!
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_text_alignment, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return HorizontalAlignment (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_expand_right: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_expand_right")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// If `enable` is `true`, the given `column` is expanded to the right.
    public final func setExpandRight (column: Int32, enable: Bool) {
        #if false
        
        var copy_column: Int = Int (column)
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_expand_right, UnsafeMutableRawPointer (mutating: handle), nil, &copy_column, &copy_enable)
        
        #else
        
        var copy_column: Int = Int (column)
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (TreeItem.method_set_expand_right, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_expand_right: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_expand_right")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns `true` if `expand_right` is set.
    public final func getExpandRight (column: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_column: Int = Int (column)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_expand_right, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_column)
        return _result
        #else
        
        var copy_column: Int = Int (column)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_column) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_expand_right, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_disable_folding: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_disable_folding")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_disable_folding (_ disable: Bool) {
        #if false
        
        var copy_disable = disable
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_set_disable_folding, UnsafeMutableRawPointer (mutating: handle), nil, &copy_disable)
        
        #else
        
        var copy_disable = disable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_disable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_set_disable_folding, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_folding_disabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_folding_disabled")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_folding_disabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TreeItem.method_is_folding_disabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_create_child: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_child")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 954243986)!
            }
            
        }
        
    }()
    
    /// Creates an item and adds it as a child.
    /// 
    /// The new item will be inserted as position `index` (the default value `-1` means the last position), or it will be the last child if `index` is higher than the child count.
    /// 
    public final func createChild (index: Int32 = -1)-> TreeItem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_index: Int = Int (index)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_create_child, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_index)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_create_child, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_add_child: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_child")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1819951137)!
            }
            
        }
        
    }()
    
    /// Adds a previously unparented ``TreeItem`` as a direct child of this one. The `child` item must not be a part of any ``Tree`` or parented to any ``TreeItem``. See also ``removeChild(_:)``.
    public final func addChild (_ child: TreeItem?) {
        #if false
        
        var copy_child_handle = child?.handle
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_add_child, UnsafeMutableRawPointer (mutating: handle), nil, &copy_child_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: child?.handle) { p0 in
        _args.append (child == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_add_child, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_remove_child: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_child")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1819951137)!
            }
            
        }
        
    }()
    
    /// Removes the given child ``TreeItem`` and all its children from the ``Tree``. Note that it doesn't free the item from memory, so it can be reused later (see ``addChild(_:)``). To completely remove a ``TreeItem`` use ``Object/free()``.
    /// 
    /// > Note: If you want to move a child from one ``Tree`` to another, then instead of removing and adding it manually you can use ``moveBefore(item:)`` or ``moveAfter(item:)``.
    /// 
    public final func removeChild (_ child: TreeItem?) {
        #if false
        
        var copy_child_handle = child?.handle
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_remove_child, UnsafeMutableRawPointer (mutating: handle), nil, &copy_child_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: child?.handle) { p0 in
        _args.append (child == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_remove_child, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_tree: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_tree")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2243340556)!
            }
            
        }
        
    }()
    
    /// Returns the ``Tree`` that owns this TreeItem.
    public final func getTree ()-> Tree? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TreeItem.method_get_tree, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_next: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_next")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1514277247)!
            }
            
        }
        
    }()
    
    /// Returns the next sibling TreeItem in the tree or a null object if there is none.
    public final func getNext ()-> TreeItem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TreeItem.method_get_next, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_prev: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_prev")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2768121250)!
            }
            
        }
        
    }()
    
    /// Returns the previous sibling TreeItem in the tree or a null object if there is none.
    public final func getPrev ()-> TreeItem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TreeItem.method_get_prev, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_parent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_parent")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1514277247)!
            }
            
        }
        
    }()
    
    /// Returns the parent TreeItem or a null object if there is none.
    public final func getParent ()-> TreeItem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TreeItem.method_get_parent, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_first_child: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_first_child")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1514277247)!
            }
            
        }
        
    }()
    
    /// Returns the TreeItem's first child.
    public final func getFirstChild ()-> TreeItem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TreeItem.method_get_first_child, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_next_in_tree: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_next_in_tree")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1666920593)!
            }
            
        }
        
    }()
    
    /// Returns the next TreeItem in the tree (in the context of a depth-first search) or a `null` object if there is none.
    /// 
    /// If `wrap` is enabled, the method will wrap around to the first element in the tree when called on the last element, otherwise it returns `null`.
    /// 
    public final func getNextInTree (wrap: Bool = false)-> TreeItem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_wrap = wrap
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_next_in_tree, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_wrap)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_wrap = wrap
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_wrap) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_next_in_tree, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_prev_in_tree: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_prev_in_tree")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1666920593)!
            }
            
        }
        
    }()
    
    /// Returns the previous TreeItem in the tree (in the context of a depth-first search) or a `null` object if there is none.
    /// 
    /// If `wrap` is enabled, the method will wrap around to the last element in the tree when called on the first visible element, otherwise it returns `null`.
    /// 
    public final func getPrevInTree (wrap: Bool = false)-> TreeItem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_wrap = wrap
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_prev_in_tree, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_wrap)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_wrap = wrap
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_wrap) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_prev_in_tree, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_next_visible: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_next_visible")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1666920593)!
            }
            
        }
        
    }()
    
    /// Returns the next visible TreeItem in the tree (in the context of a depth-first search) or a `null` object if there is none.
    /// 
    /// If `wrap` is enabled, the method will wrap around to the first visible element in the tree when called on the last visible element, otherwise it returns `null`.
    /// 
    public final func getNextVisible (wrap: Bool = false)-> TreeItem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_wrap = wrap
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_next_visible, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_wrap)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_wrap = wrap
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_wrap) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_next_visible, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_prev_visible: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_prev_visible")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1666920593)!
            }
            
        }
        
    }()
    
    /// Returns the previous visible sibling TreeItem in the tree (in the context of a depth-first search) or a `null` object if there is none.
    /// 
    /// If `wrap` is enabled, the method will wrap around to the last visible element in the tree when called on the first visible element, otherwise it returns `null`.
    /// 
    public final func getPrevVisible (wrap: Bool = false)-> TreeItem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_wrap = wrap
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_prev_visible, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_wrap)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_wrap = wrap
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_wrap) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_prev_visible, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_child: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_child")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 306700752)!
            }
            
        }
        
    }()
    
    /// Returns a child item by its `index` (see ``getChildCount()``). This method is often used for iterating all children of an item.
    /// 
    /// Negative indices access the children from the last one.
    /// 
    public final func getChild (index: Int32)-> TreeItem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_index: Int = Int (index)
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_get_child, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_index)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_index: Int = Int (index)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_get_child, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_child_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_child_count")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the number of child items.
    public final func getChildCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TreeItem.method_get_child_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_children: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_children")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    /// Returns an array of references to the item's children.
    public final func getChildren ()-> ObjectCollection<TreeItem> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (TreeItem.method_get_children, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<TreeItem>(content: _result)
    }
    
    fileprivate static var method_get_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_index")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2455072627)!
            }
            
        }
        
    }()
    
    /// Returns the node's order in the tree. For example, if called on the first child item the position is `0`.
    public final func getIndex ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TreeItem.method_get_index, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_move_before: GDExtensionMethodBindPtr = {
        let methodName = StringName ("move_before")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1819951137)!
            }
            
        }
        
    }()
    
    /// Moves this TreeItem right before the given `item`.
    /// 
    /// > Note: You can't move to the root or move the root.
    /// 
    public final func moveBefore (item: TreeItem?) {
        #if false
        
        var copy_item_handle = item?.handle
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_move_before, UnsafeMutableRawPointer (mutating: handle), nil, &copy_item_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: item?.handle) { p0 in
        _args.append (item == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_move_before, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_move_after: GDExtensionMethodBindPtr = {
        let methodName = StringName ("move_after")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1819951137)!
            }
            
        }
        
    }()
    
    /// Moves this TreeItem right after the given `item`.
    /// 
    /// > Note: You can't move to the root or move the root.
    /// 
    public final func moveAfter (item: TreeItem?) {
        #if false
        
        var copy_item_handle = item?.handle
        
        gi.object_method_bind_ptrcall_v (TreeItem.method_move_after, UnsafeMutableRawPointer (mutating: handle), nil, &copy_item_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: item?.handle) { p0 in
        _args.append (item == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TreeItem.method_move_after, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_call_recursive: GDExtensionMethodBindPtr = {
        let methodName = StringName ("call_recursive")
        return withUnsafePointer (to: &TreeItem.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2866548813)!
            }
            
        }
        
    }()
    
    /// Calls the `method` on the actual TreeItem and its children recursively. Pass parameters as a comma separated list.
    public final func callRecursive (method: StringName, _ arguments: Variant...) {
        var _result: Variant.ContentType = Variant.zero
        #if false
        
        let copy_method = Variant (method)
        
        gi.object_method_bind_call_v (TreeItem.method_call_recursive, UnsafeMutableRawPointer (mutating: handle), &_result, nil, &copy_method.content)
        
        #else
        
        let copy_method = Variant (method)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_method.content) { p0 in
            _args.append (p0)
        
        let content = UnsafeMutableBufferPointer<Variant.ContentType>.allocate(capacity: arguments.count)
        defer { content.deallocate () }
        for idx in 0..<arguments.count {
            content [idx] = arguments [idx].content
            _args.append (content.baseAddress! + idx)
        }
        
            gi.object_method_bind_call (TreeItem.method_call_recursive, UnsafeMutableRawPointer (mutating: handle), &_args, Int64 (_args.count), &_result, nil)
        }
        
        #endif
    }
    
}

