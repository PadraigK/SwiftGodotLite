// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract base class for sliders.
/// 
/// Abstract base class for sliders, used to adjust a value by moving a grabber along a horizontal or vertical axis. Sliders are ``Range``-based controls.
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``dragStarted``
/// - ``dragEnded``
open class Slider: Range {
    override open class var godotClassName: StringName { "Slider" }
    
    /* Properties */
    
    /// If `true`, the slider can be interacted with. If `false`, the value can be changed only by code.
    final public var editable: Bool {
        get {
            return is_editable ()
        }
        
        set {
            set_editable (newValue)
        }
        
    }
    
    /// If `true`, the value can be changed using the mouse wheel.
    final public var scrollable: Bool {
        get {
            return is_scrollable ()
        }
        
        set {
            set_scrollable (newValue)
        }
        
    }
    
    /// Number of ticks displayed on the slider, including border ticks. Ticks are uniformly-distributed value markers.
    final public var tickCount: Int32 {
        get {
            return get_ticks ()
        }
        
        set {
            set_ticks (newValue)
        }
        
    }
    
    /// If `true`, the slider will display ticks for minimum and maximum values.
    final public var ticksOnBorders: Bool {
        get {
            return get_ticks_on_borders ()
        }
        
        set {
            set_ticks_on_borders (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_ticks: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ticks")
        return withUnsafePointer (to: &Slider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ticks (_ count: Int32) {
        #if true
        
        var copy_count: Int = Int (count)
        
        gi.object_method_bind_ptrcall_v (Slider.method_set_ticks, UnsafeMutableRawPointer (mutating: handle), nil, &copy_count)
        
        #else
        
        var copy_count: Int = Int (count)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_count) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Slider.method_set_ticks, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ticks: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ticks")
        return withUnsafePointer (to: &Slider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ticks ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Slider.method_get_ticks, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_ticks_on_borders: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ticks_on_borders")
        return withUnsafePointer (to: &Slider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ticks_on_borders ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Slider.method_get_ticks_on_borders, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_ticks_on_borders: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ticks_on_borders")
        return withUnsafePointer (to: &Slider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ticks_on_borders (_ ticksOnBorder: Bool) {
        #if true
        
        var copy_ticks_on_border = ticksOnBorder
        
        gi.object_method_bind_ptrcall_v (Slider.method_set_ticks_on_borders, UnsafeMutableRawPointer (mutating: handle), nil, &copy_ticks_on_border)
        
        #else
        
        var copy_ticks_on_border = ticksOnBorder
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_ticks_on_border) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Slider.method_set_ticks_on_borders, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_editable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_editable")
        return withUnsafePointer (to: &Slider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_editable (_ editable: Bool) {
        #if true
        
        var copy_editable = editable
        
        gi.object_method_bind_ptrcall_v (Slider.method_set_editable, UnsafeMutableRawPointer (mutating: handle), nil, &copy_editable)
        
        #else
        
        var copy_editable = editable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_editable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Slider.method_set_editable, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_editable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_editable")
        return withUnsafePointer (to: &Slider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_editable ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Slider.method_is_editable, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_scrollable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_scrollable")
        return withUnsafePointer (to: &Slider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_scrollable (_ scrollable: Bool) {
        #if true
        
        var copy_scrollable = scrollable
        
        gi.object_method_bind_ptrcall_v (Slider.method_set_scrollable, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scrollable)
        
        #else
        
        var copy_scrollable = scrollable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_scrollable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Slider.method_set_scrollable, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_scrollable: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_scrollable")
        return withUnsafePointer (to: &Slider.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_scrollable ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Slider.method_is_scrollable, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Emitted when dragging is started.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.dragStarted.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var dragStarted: SimpleSignal { SimpleSignal (target: self, signalName: "drag_started") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ valueChanged: Bool) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Bool (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when dragging stops. If `valueChanged` is true, ``Range/value`` is different from the value when you started the dragging.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.dragEnded.connect { valueChanged in
    ///    print ("caught signal")
    /// }
    /// ```
    public var dragEnded: Signal1 { Signal1 (target: self, signalName: "drag_ended") }
    
}

