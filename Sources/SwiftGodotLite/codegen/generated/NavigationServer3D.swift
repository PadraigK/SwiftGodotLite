// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A server interface for low-level 3D navigation access.
/// 
/// NavigationServer3D is the server that handles navigation maps, regions and agents. It does not handle A* navigation from ``AStar3D``.
/// 
/// Maps are made up of regions, which are made of navigation meshes. Together, they define the navigable areas in the 3D world.
/// 
/// > Note: Most ``NavigationServer3D`` changes take effect after the next physics frame and not immediately. This includes all changes made to maps, regions or agents by navigation-related nodes in the scene tree or made through scripts.
/// 
/// For two regions to be connected to each other, they must share a similar edge. An edge is considered connected to another if both of its two vertices are at a distance less than `edge_connection_margin` to the respective other edge's vertex.
/// 
/// You may assign navigation layers to regions with ``NavigationServer3D/regionSetNavigationLayers(region:navigationLayers:)``, which then can be checked upon when requesting a path with ``NavigationServer3D/mapGetPath(map:origin:destination:optimize:navigationLayers:)``. This can be used to allow or deny certain areas for some objects.
/// 
/// To use the collision avoidance system, you may use agents. You can set an agent's target velocity, then the servers will emit a callback with a modified velocity.
/// 
/// > Note: The collision avoidance system ignores regions. Using the modified velocity directly may move an agent outside of the traversable area. This is a limitation of the collision avoidance system, any more complex situation may require the use of the physics engine.
/// 
/// This server keeps tracks of any call and executes them during the sync phase. This means that you can request any change to the map, using any thread, without worrying.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``mapChanged``
/// - ``navigationDebugChanged``
/// - ``avoidanceDebugChanged``
open class NavigationServer3D: Object {
    /// The shared instance of this class
    public static var shared: NavigationServer3D = {
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { ptr in
            NavigationServer3D (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "NavigationServer3D" }
    public enum ProcessInfo: Int64 {
        /// Constant to get the number of active navigation maps.
        case activeMaps = 0 // INFO_ACTIVE_MAPS
        /// Constant to get the number of active navigation regions.
        case regionCount = 1 // INFO_REGION_COUNT
        /// Constant to get the number of active navigation agents processing avoidance.
        case agentCount = 2 // INFO_AGENT_COUNT
        /// Constant to get the number of active navigation links.
        case linkCount = 3 // INFO_LINK_COUNT
        /// Constant to get the number of navigation mesh polygons.
        case polygonCount = 4 // INFO_POLYGON_COUNT
        /// Constant to get the number of navigation mesh polygon edges.
        case edgeCount = 5 // INFO_EDGE_COUNT
        /// Constant to get the number of navigation mesh polygon edges that were merged due to edge key overlap.
        case edgeMergeCount = 6 // INFO_EDGE_MERGE_COUNT
        /// Constant to get the number of navigation mesh polygon edges that are considered connected by edge proximity.
        case edgeConnectionCount = 7 // INFO_EDGE_CONNECTION_COUNT
        /// Constant to get the number of navigation mesh polygon edges that could not be merged but may be still connected by edge proximity or with links.
        case edgeFreeCount = 8 // INFO_EDGE_FREE_COUNT
    }
    
    /* Methods */
    fileprivate static var method_get_maps: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_maps")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns all created navigation map ``RID``s on the NavigationServer. This returns both 2D and 3D created navigation maps as there is technically no distinction between them.
    public static func getMaps ()-> VariantCollection<RID> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (NavigationServer3D.method_get_maps, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return VariantCollection<RID>(content: _result)
    }
    
    fileprivate static var method_map_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_create")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Create a new map.
    public static func mapCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (NavigationServer3D.method_map_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_map_set_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_set_active")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets the map active.
    public static func mapSetActive (map: RID, active: Bool) {
        #if false
        
        var copy_active = active
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_set_active, UnsafeMutableRawPointer (mutating: shared.handle), nil, &map.content, &copy_active)
        
        #else
        
        var copy_active = active
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_active) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_map_set_active, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_is_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_is_active")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns true if the map is active.
    public static func mapIsActive (map: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_is_active, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_is_active, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_map_set_up: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_set_up")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets the map up direction.
    public static func mapSetUp (map: RID, up: Vector3) {
        #if false
        
        var copy_up = up
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_set_up, UnsafeMutableRawPointer (mutating: shared.handle), nil, &map.content, &copy_up)
        
        #else
        
        var copy_up = up
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_up) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_map_set_up, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_up: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_up")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the map's up direction.
    public static func mapGetUp (map: RID)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_up, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_up, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_map_set_cell_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_set_cell_size")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the map cell size used to rasterize the navigation mesh vertices on the XZ plane. Must match with the cell size of the used navigation meshes.
    public static func mapSetCellSize (map: RID, cellSize: Double) {
        #if false
        
        var copy_cell_size = cellSize
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_set_cell_size, UnsafeMutableRawPointer (mutating: shared.handle), nil, &map.content, &copy_cell_size)
        
        #else
        
        var copy_cell_size = cellSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_cell_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_map_set_cell_size, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_cell_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_cell_size")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the map cell size used to rasterize the navigation mesh vertices on the XZ plane.
    public static func mapGetCellSize (map: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_cell_size, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_cell_size, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_map_set_cell_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_set_cell_height")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the map cell height used to rasterize the navigation mesh vertices on the Y axis. Must match with the cell height of the used navigation meshes.
    public static func mapSetCellHeight (map: RID, cellHeight: Double) {
        #if false
        
        var copy_cell_height = cellHeight
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_set_cell_height, UnsafeMutableRawPointer (mutating: shared.handle), nil, &map.content, &copy_cell_height)
        
        #else
        
        var copy_cell_height = cellHeight
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_cell_height) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_map_set_cell_height, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_cell_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_cell_height")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the map cell height used to rasterize the navigation mesh vertices on the Y axis.
    public static func mapGetCellHeight (map: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_cell_height, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_cell_height, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_map_set_use_edge_connections: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_set_use_edge_connections")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Set the navigation `map` edge connection use. If `enabled` is `true`, the navigation map allows navigation regions to use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
    public static func mapSetUseEdgeConnections (map: RID, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_set_use_edge_connections, UnsafeMutableRawPointer (mutating: shared.handle), nil, &map.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_map_set_use_edge_connections, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_use_edge_connections: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_use_edge_connections")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns true if the navigation `map` allows navigation regions to use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
    public static func mapGetUseEdgeConnections (map: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_use_edge_connections, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_use_edge_connections, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_map_set_edge_connection_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_set_edge_connection_margin")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Set the map edge connection margin used to weld the compatible region edges.
    public static func mapSetEdgeConnectionMargin (map: RID, margin: Double) {
        #if false
        
        var copy_margin = margin
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_set_edge_connection_margin, UnsafeMutableRawPointer (mutating: shared.handle), nil, &map.content, &copy_margin)
        
        #else
        
        var copy_margin = margin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_margin) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_map_set_edge_connection_margin, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_edge_connection_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_edge_connection_margin")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the edge connection margin of the map. This distance is the minimum vertex distance needed to connect two edges from different regions.
    public static func mapGetEdgeConnectionMargin (map: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_edge_connection_margin, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_edge_connection_margin, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_map_set_link_connection_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_set_link_connection_radius")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Set the map's link connection radius used to connect links to navigation polygons.
    public static func mapSetLinkConnectionRadius (map: RID, radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_set_link_connection_radius, UnsafeMutableRawPointer (mutating: shared.handle), nil, &map.content, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_radius) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_map_set_link_connection_radius, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_link_connection_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_link_connection_radius")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the link connection radius of the map. This distance is the maximum range any link will search for navigation mesh polygons to connect to.
    public static func mapGetLinkConnectionRadius (map: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_link_connection_radius, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_link_connection_radius, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_path")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1187418690)!
            }
            
        }
        
    }()
    
    /// Returns the navigation path to reach the destination from the origin. `navigationLayers` is a bitmask of all region navigation layers that are allowed to be in the path.
    public static func mapGetPath (map: RID, origin: Vector3, destination: Vector3, optimize: Bool, navigationLayers: UInt32 = 1)-> PackedVector3Array {
        let _result: PackedVector3Array = PackedVector3Array ()
        #if false
        
        var copy_origin = origin
        var copy_destination = destination
        var copy_optimize = optimize
        var copy_navigation_layers: Int = Int (navigationLayers)
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_path, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &map.content, &copy_origin, &copy_destination, &copy_optimize, &copy_navigation_layers)
        return _result
        #else
        
        var copy_origin = origin
        var copy_destination = destination
        var copy_optimize = optimize
        var copy_navigation_layers: Int = Int (navigationLayers)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_origin) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_destination) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_optimize) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_navigation_layers) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_path, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                            return _result
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_closest_point_to_segment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_closest_point_to_segment")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3830095642)!
            }
            
        }
        
    }()
    
    /// Returns the closest point between the navigation surface and the segment.
    public static func mapGetClosestPointToSegment (map: RID, start: Vector3, end: Vector3, useCollision: Bool = false)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_start = start
        var copy_end = end
        var copy_use_collision = useCollision
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_closest_point_to_segment, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content, &copy_start, &copy_end, &copy_use_collision)
        return _result
        #else
        
        var copy_start = start
        var copy_end = end
        var copy_use_collision = useCollision
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_start) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_end) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_use_collision) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_closest_point_to_segment, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                        return _result
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_closest_point: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_closest_point")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2056183332)!
            }
            
        }
        
    }()
    
    /// Returns the point closest to the provided `toPoint` on the navigation mesh surface.
    public static func mapGetClosestPoint (map: RID, toPoint: Vector3)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_to_point = toPoint
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_closest_point, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content, &copy_to_point)
        return _result
        #else
        
        var copy_to_point = toPoint
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_to_point) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_closest_point, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_closest_point_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_closest_point_normal")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2056183332)!
            }
            
        }
        
    }()
    
    /// Returns the normal for the point returned by ``mapGetClosestPoint(map:toPoint:)``.
    public static func mapGetClosestPointNormal (map: RID, toPoint: Vector3)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_to_point = toPoint
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_closest_point_normal, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content, &copy_to_point)
        return _result
        #else
        
        var copy_to_point = toPoint
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_to_point) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_closest_point_normal, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_closest_point_owner: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_closest_point_owner")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 553364610)!
            }
            
        }
        
    }()
    
    /// Returns the owner region RID for the point returned by ``mapGetClosestPoint(map:toPoint:)``.
    public static func mapGetClosestPointOwner (map: RID, toPoint: Vector3)-> RID {
        let _result: RID = RID ()
        #if false
        
        var copy_to_point = toPoint
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_closest_point_owner, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &map.content, &copy_to_point)
        return _result
        #else
        
        var copy_to_point = toPoint
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_to_point) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_closest_point_owner, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_links: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_links")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2684255073)!
            }
            
        }
        
    }()
    
    /// Returns all navigation link ``RID``s that are currently assigned to the requested navigation `map`.
    public static func mapGetLinks (map: RID)-> VariantCollection<RID> {
        var _result: Int64 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_links, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return VariantCollection<RID>(content: _result)
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_links, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return VariantCollection<RID>(content: _result)
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_regions: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_regions")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2684255073)!
            }
            
        }
        
    }()
    
    /// Returns all navigation regions ``RID``s that are currently assigned to the requested navigation `map`.
    public static func mapGetRegions (map: RID)-> VariantCollection<RID> {
        var _result: Int64 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_regions, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return VariantCollection<RID>(content: _result)
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_regions, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return VariantCollection<RID>(content: _result)
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_agents: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_agents")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2684255073)!
            }
            
        }
        
    }()
    
    /// Returns all navigation agents ``RID``s that are currently assigned to the requested navigation `map`.
    public static func mapGetAgents (map: RID)-> VariantCollection<RID> {
        var _result: Int64 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_agents, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return VariantCollection<RID>(content: _result)
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_agents, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return VariantCollection<RID>(content: _result)
        }
        
        #endif
    }
    
    fileprivate static var method_map_get_obstacles: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_get_obstacles")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2684255073)!
            }
            
        }
        
    }()
    
    /// Returns all navigation obstacle ``RID``s that are currently assigned to the requested navigation `map`.
    public static func mapGetObstacles (map: RID)-> VariantCollection<RID> {
        var _result: Int64 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_get_obstacles, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &map.content)
        return VariantCollection<RID>(content: _result)
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_get_obstacles, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return VariantCollection<RID>(content: _result)
        }
        
        #endif
    }
    
    fileprivate static var method_map_force_update: GDExtensionMethodBindPtr = {
        let methodName = StringName ("map_force_update")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// This function immediately forces synchronization of the specified navigation `map` ``RID``. By default navigation maps are only synchronized at the end of each physics frame. This function can be used to immediately (re)calculate all the navigation meshes and region connections of the navigation map. This makes it possible to query a navigation path for a changed map immediately and in the same frame (multiple times if needed).
    /// 
    /// Due to technical restrictions the current NavigationServer command queue will be flushed. This means all already queued update commands for this physics frame will be executed, even those intended for other maps, regions and agents not part of the specified map. The expensive computation of the navigation meshes and region connections of a map will only be done for the specified map. Other maps will receive the normal synchronization at the end of the physics frame. Should the specified map receive changes after the forced update it will update again as well when the other maps receive their update.
    /// 
    /// Avoidance processing and dispatch of the `safe_velocity` signals is untouched by this function and continues to happen for all maps and agents at the end of the physics frame.
    /// 
    /// > Note: With great power comes great responsibility. This function should only be used by users that really know what they are doing and have a good reason for it. Forcing an immediate update of a navigation map requires locking the NavigationServer and flushing the entire NavigationServer command queue. Not only can this severely impact the performance of a game but it can also introduce bugs if used inappropriately without much foresight.
    /// 
    public static func mapForceUpdate (map: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_map_force_update, UnsafeMutableRawPointer (mutating: shared.handle), nil, &map.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &map.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_map_force_update, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_query_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("query_path")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3415008901)!
            }
            
        }
        
    }()
    
    /// Queries a path in a given navigation map. Start and target position and other parameters are defined through ``NavigationPathQueryParameters3D``. Updates the provided ``NavigationPathQueryResult3D`` result object with the path among other results requested by the query.
    public static func queryPath (parameters: NavigationPathQueryParameters3D?, result: NavigationPathQueryResult3D?) {
        #if false
        
        var copy_parameters_handle = parameters?.handle
        var copy_result_handle = result?.handle
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_query_path, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_parameters_handle, &copy_result_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: parameters?.handle) { p0 in
        _args.append (parameters == nil ? nil : p0)
            withUnsafePointer (to: result?.handle) { p1 in
            _args.append (result == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_query_path, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_create")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a new region.
    public static func regionCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (NavigationServer3D.method_region_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_region_set_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_set_enabled")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the specified `region` will contribute to its current navigation map.
    public static func regionSetEnabled (region: RID, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_set_enabled, UnsafeMutableRawPointer (mutating: shared.handle), nil, &region.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_set_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_get_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_get_enabled")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified `region` is enabled.
    public static func regionGetEnabled (region: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_get_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &region.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_region_get_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_region_set_use_edge_connections: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_set_use_edge_connections")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the navigation `region` will use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
    public static func regionSetUseEdgeConnections (region: RID, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_set_use_edge_connections, UnsafeMutableRawPointer (mutating: shared.handle), nil, &region.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_set_use_edge_connections, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_get_use_edge_connections: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_get_use_edge_connections")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns true if the navigation `region` is set to use edge connections to connect with other navigation regions within proximity of the navigation map edge connection margin.
    public static func regionGetUseEdgeConnections (region: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_get_use_edge_connections, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &region.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_region_get_use_edge_connections, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_region_set_enter_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_set_enter_cost")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the `enterCost` for this `region`.
    public static func regionSetEnterCost (region: RID, enterCost: Double) {
        #if false
        
        var copy_enter_cost = enterCost
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_set_enter_cost, UnsafeMutableRawPointer (mutating: shared.handle), nil, &region.content, &copy_enter_cost)
        
        #else
        
        var copy_enter_cost = enterCost
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enter_cost) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_set_enter_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_get_enter_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_get_enter_cost")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the enter cost of this `region`.
    public static func regionGetEnterCost (region: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_get_enter_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &region.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_region_get_enter_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_region_set_travel_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_set_travel_cost")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the `travelCost` for this `region`.
    public static func regionSetTravelCost (region: RID, travelCost: Double) {
        #if false
        
        var copy_travel_cost = travelCost
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_set_travel_cost, UnsafeMutableRawPointer (mutating: shared.handle), nil, &region.content, &copy_travel_cost)
        
        #else
        
        var copy_travel_cost = travelCost
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_travel_cost) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_set_travel_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_get_travel_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_get_travel_cost")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the travel cost of this `region`.
    public static func regionGetTravelCost (region: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_get_travel_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &region.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_region_get_travel_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_region_set_owner_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_set_owner_id")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the `ObjectID` of the object which manages this region.
    public static func regionSetOwnerId (region: RID, ownerId: UInt) {
        #if false
        
        var copy_owner_id = ownerId
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_set_owner_id, UnsafeMutableRawPointer (mutating: shared.handle), nil, &region.content, &copy_owner_id)
        
        #else
        
        var copy_owner_id = ownerId
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_owner_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_set_owner_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_get_owner_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_get_owner_id")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `ObjectID` of the object which manages this region.
    public static func regionGetOwnerId (region: RID)-> UInt {
        var _result: UInt = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_get_owner_id, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &region.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_region_get_owner_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_region_owns_point: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_owns_point")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2360011153)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided `point` in world space is currently owned by the provided navigation `region`. Owned in this context means that one of the region's navigation mesh polygon faces has a possible position at the closest distance to this point compared to all other navigation meshes from other navigation regions that are also registered on the navigation map of the provided region.
    /// 
    /// If multiple navigation meshes have positions at equal distance the navigation region whose polygons are processed first wins the ownership. Polygons are processed in the same order that navigation regions were registered on the NavigationServer.
    /// 
    /// > Note: If navigation meshes from different navigation regions overlap (which should be avoided in general) the result might not be what is expected.
    /// 
    public static func regionOwnsPoint (region: RID, point: Vector3)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_point = point
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_owns_point, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &region.content, &copy_point)
        return _result
        #else
        
        var copy_point = point
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_point) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_owns_point, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_set_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_set_map")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Sets the map for the region.
    public static func regionSetMap (region: RID, map: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_set_map, UnsafeMutableRawPointer (mutating: shared.handle), nil, &region.content, &map.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &map.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_set_map, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_get_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_get_map")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the navigation map ``RID`` the requested `region` is currently assigned to.
    public static func regionGetMap (region: RID)-> RID {
        let _result: RID = RID ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_get_map, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &region.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_region_get_map, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_region_set_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_set_navigation_layers")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the region's navigation layers. This allows selecting regions from a path request (when using ``NavigationServer3D/mapGetPath(map:origin:destination:optimize:navigationLayers:)``).
    public static func regionSetNavigationLayers (region: RID, navigationLayers: UInt32) {
        #if false
        
        var copy_navigation_layers: Int = Int (navigationLayers)
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_set_navigation_layers, UnsafeMutableRawPointer (mutating: shared.handle), nil, &region.content, &copy_navigation_layers)
        
        #else
        
        var copy_navigation_layers: Int = Int (navigationLayers)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_navigation_layers) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_set_navigation_layers, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_get_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_get_navigation_layers")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the region's navigation layers.
    public static func regionGetNavigationLayers (region: RID)-> UInt32 {
        var _result: UInt32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_get_navigation_layers, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &region.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_region_get_navigation_layers, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_region_set_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_set_transform")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3935195649)!
            }
            
        }
        
    }()
    
    /// Sets the global transformation for the region.
    public static func regionSetTransform (region: RID, transform: Transform3D) {
        #if false
        
        var copy_transform = transform
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_set_transform, UnsafeMutableRawPointer (mutating: shared.handle), nil, &region.content, &copy_transform)
        
        #else
        
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_transform) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_set_transform, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_set_navigation_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_set_navigation_mesh")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2764952978)!
            }
            
        }
        
    }()
    
    /// Sets the navigation mesh for the region.
    public static func regionSetNavigationMesh (region: RID, navigationMesh: NavigationMesh?) {
        #if false
        
        var copy_navigation_mesh_handle = navigationMesh?.handle
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_set_navigation_mesh, UnsafeMutableRawPointer (mutating: shared.handle), nil, &region.content, &copy_navigation_mesh_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: navigationMesh?.handle) { p1 in
            _args.append (navigationMesh == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_set_navigation_mesh, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_bake_navigation_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_bake_navigation_mesh")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1401173477)!
            }
            
        }
        
    }()
    
    /// Bakes the `navigationMesh` with bake source geometry collected starting from the `rootNode`.
    /// 
    /// _Deprecated._ This function is deprecated due to core threading changes. To upgrade existing code, first create a ``NavigationMeshSourceGeometryData3D`` resource. Use this resource with ``parseSourceGeometryData(navigationMesh:sourceGeometryData:rootNode:callback:)`` to parse the SceneTree for nodes that should contribute to the navigation mesh baking. The SceneTree parsing needs to happen on the main thread. After the parsing is finished use the resource with ``bakeFromSourceGeometryData(navigationMesh:sourceGeometryData:callback:)`` to bake a navigation mesh.
    /// 
    public static func regionBakeNavigationMesh (_ navigationMesh: NavigationMesh?, rootNode: Node?) {
        #if false
        
        var copy_navigation_mesh_handle = navigationMesh?.handle
        var copy_root_node_handle = rootNode?.handle
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_bake_navigation_mesh, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_navigation_mesh_handle, &copy_root_node_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: navigationMesh?.handle) { p0 in
        _args.append (navigationMesh == nil ? nil : p0)
            withUnsafePointer (to: rootNode?.handle) { p1 in
            _args.append (rootNode == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_bake_navigation_mesh, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_get_connections_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_get_connections_count")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns how many connections this `region` has with other regions in the map.
    public static func regionGetConnectionsCount (region: RID)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_get_connections_count, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &region.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_region_get_connections_count, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_region_get_connection_pathway_start: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_get_connection_pathway_start")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3440143363)!
            }
            
        }
        
    }()
    
    /// Returns the starting point of a connection door. `connection` is an index between 0 and the return value of ``regionGetConnectionsCount(region:)``.
    public static func regionGetConnectionPathwayStart (region: RID, connection: Int32)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_connection: Int = Int (connection)
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_get_connection_pathway_start, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &region.content, &copy_connection)
        return _result
        #else
        
        var copy_connection: Int = Int (connection)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_connection) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_get_connection_pathway_start, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_region_get_connection_pathway_end: GDExtensionMethodBindPtr = {
        let methodName = StringName ("region_get_connection_pathway_end")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3440143363)!
            }
            
        }
        
    }()
    
    /// Returns the ending point of a connection door. `connection` is an index between 0 and the return value of ``regionGetConnectionsCount(region:)``.
    public static func regionGetConnectionPathwayEnd (region: RID, connection: Int32)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_connection: Int = Int (connection)
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_region_get_connection_pathway_end, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &region.content, &copy_connection)
        return _result
        #else
        
        var copy_connection: Int = Int (connection)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &region.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_connection) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_region_get_connection_pathway_end, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_link_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_create")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Create a new link between two positions on a map.
    public static func linkCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (NavigationServer3D.method_link_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_link_set_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_set_map")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Sets the navigation map ``RID`` for the link.
    public static func linkSetMap (link: RID, map: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_set_map, UnsafeMutableRawPointer (mutating: shared.handle), nil, &link.content, &map.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &map.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_link_set_map, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_link_get_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_get_map")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the navigation map ``RID`` the requested `link` is currently assigned to.
    public static func linkGetMap (link: RID)-> RID {
        let _result: RID = RID ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_get_map, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &link.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_link_get_map, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_link_set_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_set_enabled")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the specified `link` will contribute to its current navigation map.
    public static func linkSetEnabled (link: RID, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_set_enabled, UnsafeMutableRawPointer (mutating: shared.handle), nil, &link.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_link_set_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_link_get_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_get_enabled")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified `link` is enabled.
    public static func linkGetEnabled (link: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_get_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &link.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_link_get_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_link_set_bidirectional: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_set_bidirectional")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets whether this `link` can be travelled in both directions.
    public static func linkSetBidirectional (link: RID, bidirectional: Bool) {
        #if false
        
        var copy_bidirectional = bidirectional
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_set_bidirectional, UnsafeMutableRawPointer (mutating: shared.handle), nil, &link.content, &copy_bidirectional)
        
        #else
        
        var copy_bidirectional = bidirectional
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_bidirectional) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_link_set_bidirectional, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_link_is_bidirectional: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_is_bidirectional")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns whether this `link` can be travelled in both directions.
    public static func linkIsBidirectional (link: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_is_bidirectional, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &link.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_link_is_bidirectional, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_link_set_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_set_navigation_layers")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the links's navigation layers. This allows selecting links from a path request (when using ``NavigationServer3D/mapGetPath(map:origin:destination:optimize:navigationLayers:)``).
    public static func linkSetNavigationLayers (link: RID, navigationLayers: UInt32) {
        #if false
        
        var copy_navigation_layers: Int = Int (navigationLayers)
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_set_navigation_layers, UnsafeMutableRawPointer (mutating: shared.handle), nil, &link.content, &copy_navigation_layers)
        
        #else
        
        var copy_navigation_layers: Int = Int (navigationLayers)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_navigation_layers) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_link_set_navigation_layers, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_link_get_navigation_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_get_navigation_layers")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the navigation layers for this `link`.
    public static func linkGetNavigationLayers (link: RID)-> UInt32 {
        var _result: UInt32 = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_get_navigation_layers, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &link.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_link_get_navigation_layers, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_link_set_start_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_set_start_position")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets the entry position for this `link`.
    public static func linkSetStartPosition (link: RID, position: Vector3) {
        #if false
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_set_start_position, UnsafeMutableRawPointer (mutating: shared.handle), nil, &link.content, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_link_set_start_position, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_link_get_start_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_get_start_position")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the starting position of this `link`.
    public static func linkGetStartPosition (link: RID)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_get_start_position, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &link.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_link_get_start_position, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_link_set_end_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_set_end_position")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets the exit position for the `link`.
    public static func linkSetEndPosition (link: RID, position: Vector3) {
        #if false
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_set_end_position, UnsafeMutableRawPointer (mutating: shared.handle), nil, &link.content, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_link_set_end_position, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_link_get_end_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_get_end_position")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 531438156)!
            }
            
        }
        
    }()
    
    /// Returns the ending position of this `link`.
    public static func linkGetEndPosition (link: RID)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_get_end_position, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &link.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_link_get_end_position, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_link_set_enter_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_set_enter_cost")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the `enterCost` for this `link`.
    public static func linkSetEnterCost (link: RID, enterCost: Double) {
        #if false
        
        var copy_enter_cost = enterCost
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_set_enter_cost, UnsafeMutableRawPointer (mutating: shared.handle), nil, &link.content, &copy_enter_cost)
        
        #else
        
        var copy_enter_cost = enterCost
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enter_cost) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_link_set_enter_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_link_get_enter_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_get_enter_cost")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the enter cost of this `link`.
    public static func linkGetEnterCost (link: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_get_enter_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &link.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_link_get_enter_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_link_set_travel_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_set_travel_cost")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the `travelCost` for this `link`.
    public static func linkSetTravelCost (link: RID, travelCost: Double) {
        #if false
        
        var copy_travel_cost = travelCost
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_set_travel_cost, UnsafeMutableRawPointer (mutating: shared.handle), nil, &link.content, &copy_travel_cost)
        
        #else
        
        var copy_travel_cost = travelCost
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_travel_cost) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_link_set_travel_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_link_get_travel_cost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_get_travel_cost")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 866169185)!
            }
            
        }
        
    }()
    
    /// Returns the travel cost of this `link`.
    public static func linkGetTravelCost (link: RID)-> Double {
        var _result: Double = 0.0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_get_travel_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &link.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_link_get_travel_cost, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_link_set_owner_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_set_owner_id")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the `ObjectID` of the object which manages this link.
    public static func linkSetOwnerId (link: RID, ownerId: UInt) {
        #if false
        
        var copy_owner_id = ownerId
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_set_owner_id, UnsafeMutableRawPointer (mutating: shared.handle), nil, &link.content, &copy_owner_id)
        
        #else
        
        var copy_owner_id = ownerId
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_owner_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_link_set_owner_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_link_get_owner_id: GDExtensionMethodBindPtr = {
        let methodName = StringName ("link_get_owner_id")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2198884583)!
            }
            
        }
        
    }()
    
    /// Returns the `ObjectID` of the object which manages this link.
    public static func linkGetOwnerId (link: RID)-> UInt {
        var _result: UInt = 0
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_link_get_owner_id, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &link.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &link.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_link_get_owner_id, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_agent_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_create")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates the agent.
    public static func agentCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_agent_set_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_avoidance_enabled")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the provided `agent` calculates avoidance.
    public static func agentSetAvoidanceEnabled (agent: RID, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_avoidance_enabled, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_avoidance_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_get_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_get_avoidance_enabled")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided `agent` has avoidance enabled.
    public static func agentGetAvoidanceEnabled (agent: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_get_avoidance_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &agent.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_get_avoidance_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_use_3d_avoidance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_use_3d_avoidance")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets if the agent uses the 2D avoidance or the 3D avoidance while avoidance is enabled.
    /// 
    /// If `true` the agent calculates avoidance velocities in 3D for the xyz-axis, e.g. for games that take place in air, unterwater or space. The 3D using agent only avoids other 3D avoidance using agent's. The 3D using agent only reacts to radius based avoidance obstacles. The 3D using agent ignores any vertices based obstacles. The 3D using agent only avoids other 3D using agent's.
    /// 
    /// If `false` the agent calculates avoidance velocities in 2D along the xz-axis ignoring the y-axis. The 2D using agent only avoids other 2D avoidance using agent's. The 2D using agent reacts to radius avoidance obstacles. The 2D using agent reacts to vertices based avoidance obstacles. The 2D using agent only avoids other 2D using agent's. 2D using agents will ignore other 2D using agents or obstacles that are below their current position or above their current position including the agents height in 2D avoidance.
    /// 
    public static func agentSetUse3dAvoidance (agent: RID, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_use_3d_avoidance, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_use_3d_avoidance, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_get_use_3d_avoidance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_get_use_3d_avoidance")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided `agent` uses avoidance in 3D space Vector3(x,y,z) instead of horizontal 2D Vector2(x,y) / Vector3(x,0.0,z).
    public static func agentGetUse3dAvoidance (agent: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_get_use_3d_avoidance, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &agent.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_get_use_3d_avoidance, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_map")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Puts the agent in the map.
    public static func agentSetMap (agent: RID, map: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_map, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &map.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &map.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_map, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_get_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_get_map")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the navigation map ``RID`` the requested `agent` is currently assigned to.
    public static func agentGetMap (agent: RID)-> RID {
        let _result: RID = RID ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_get_map, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &agent.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_get_map, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_paused: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_paused")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `paused` is true the specified `agent` will not be processed, e.g. calculate avoidance velocities or receive avoidance callbacks.
    public static func agentSetPaused (agent: RID, paused: Bool) {
        #if false
        
        var copy_paused = paused
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_paused, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_paused)
        
        #else
        
        var copy_paused = paused
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_paused) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_paused, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_get_paused: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_get_paused")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified `agent` is paused.
    public static func agentGetPaused (agent: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_get_paused, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &agent.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_get_paused, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_neighbor_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_neighbor_distance")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the maximum distance to other agents this agent takes into account in the navigation. The larger this number, the longer the running time of the simulation. If the number is too low, the simulation will not be safe.
    public static func agentSetNeighborDistance (agent: RID, distance: Double) {
        #if false
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_neighbor_distance, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_distance) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_neighbor_distance, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_max_neighbors: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_max_neighbors")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Sets the maximum number of other agents the agent takes into account in the navigation. The larger this number, the longer the running time of the simulation. If the number is too low, the simulation will not be safe.
    public static func agentSetMaxNeighbors (agent: RID, count: Int32) {
        #if false
        
        var copy_count: Int = Int (count)
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_max_neighbors, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_count)
        
        #else
        
        var copy_count: Int = Int (count)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_count) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_max_neighbors, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_time_horizon_agents: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_time_horizon_agents")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// The minimal amount of time for which the agent's velocities that are computed by the simulation are safe with respect to other agents. The larger this number, the sooner this agent will respond to the presence of other agents, but the less freedom this agent has in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive.
    public static func agentSetTimeHorizonAgents (agent: RID, timeHorizon: Double) {
        #if false
        
        var copy_time_horizon = timeHorizon
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_time_horizon_agents, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_time_horizon)
        
        #else
        
        var copy_time_horizon = timeHorizon
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_time_horizon) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_time_horizon_agents, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_time_horizon_obstacles: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_time_horizon_obstacles")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// The minimal amount of time for which the agent's velocities that are computed by the simulation are safe with respect to static avoidance obstacles. The larger this number, the sooner this agent will respond to the presence of static avoidance obstacles, but the less freedom this agent has in choosing its velocities. A too high value will slow down agents movement considerably. Must be positive.
    public static func agentSetTimeHorizonObstacles (agent: RID, timeHorizon: Double) {
        #if false
        
        var copy_time_horizon = timeHorizon
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_time_horizon_obstacles, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_time_horizon)
        
        #else
        
        var copy_time_horizon = timeHorizon
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_time_horizon) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_time_horizon_obstacles, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_radius")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the radius of the agent.
    public static func agentSetRadius (agent: RID, radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_radius, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_radius) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_radius, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_height")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Updates the provided `agent` `height`.
    public static func agentSetHeight (agent: RID, height: Double) {
        #if false
        
        var copy_height = height
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_height, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_height)
        
        #else
        
        var copy_height = height
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_height) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_height, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_max_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_max_speed")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the maximum speed of the agent. Must be positive.
    public static func agentSetMaxSpeed (agent: RID, maxSpeed: Double) {
        #if false
        
        var copy_max_speed = maxSpeed
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_max_speed, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_max_speed)
        
        #else
        
        var copy_max_speed = maxSpeed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_max_speed) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_max_speed, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_velocity_forced: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_velocity_forced")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Replaces the internal velocity in the collision avoidance simulation with `velocity` for the specified `agent`. When an agent is teleported to a new position this function should be used in the same frame. If called frequently this function can get agents stuck.
    public static func agentSetVelocityForced (agent: RID, velocity: Vector3) {
        #if false
        
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_velocity_forced, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_velocity)
        
        #else
        
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_velocity) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_velocity_forced, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_velocity")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets `velocity` as the new wanted velocity for the specified `agent`. The avoidance simulation will try to fulfill this velocity if possible but will modify it to avoid collision with other agent's and obstacles. When an agent is teleported to a new position use ``agentSetVelocityForced(agent:velocity:)`` as well to reset the internal simulation velocity.
    public static func agentSetVelocity (agent: RID, velocity: Vector3) {
        #if false
        
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_velocity, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_velocity)
        
        #else
        
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_velocity) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_velocity, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_position")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets the position of the agent in world space.
    public static func agentSetPosition (agent: RID, position: Vector3) {
        #if false
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_position, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_position, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_is_map_changed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_is_map_changed")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns true if the map got changed the previous frame.
    public static func agentIsMapChanged (agent: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_is_map_changed, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &agent.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_is_map_changed, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_avoidance_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_avoidance_callback")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3379118538)!
            }
            
        }
        
    }()
    
    /// Sets the callback ``Callable`` that gets called after each avoidance processing step for the `agent`. The calculated `safe_velocity` will be dispatched with a signal to the object just before the physics calculations.
    /// 
    /// > Note: Created callbacks are always processed independently of the SceneTree state as long as the agent is on a navigation map and not freed. To disable the dispatch of a callback from an agent use ``agentSetAvoidanceCallback(agent:callback:)`` again with an empty ``Callable``.
    /// 
    public static func agentSetAvoidanceCallback (agent: RID, callback: Callable) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_avoidance_callback, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &callback.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &callback.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_avoidance_callback, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_avoidance_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_avoidance_layers")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the agent's `avoidance_layers` bitmask.
    public static func agentSetAvoidanceLayers (agent: RID, layers: UInt32) {
        #if false
        
        var copy_layers: Int = Int (layers)
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_avoidance_layers, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_layers)
        
        #else
        
        var copy_layers: Int = Int (layers)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_layers) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_avoidance_layers, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_avoidance_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_avoidance_mask")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the agent's `avoidance_mask` bitmask.
    public static func agentSetAvoidanceMask (agent: RID, mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_avoidance_mask, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_mask) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_avoidance_mask, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_agent_set_avoidance_priority: GDExtensionMethodBindPtr = {
        let methodName = StringName ("agent_set_avoidance_priority")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Set the agent's `avoidance_priority` with a `priority` between 0.0 (lowest priority) to 1.0 (highest priority).
    /// 
    /// The specified `agent` does not adjust the velocity for other agents that would match the `avoidance_mask` but have a lower ` avoidance_priority`. This in turn makes the other agents with lower priority adjust their velocities even more to avoid collision with this agent.
    /// 
    public static func agentSetAvoidancePriority (agent: RID, priority: Double) {
        #if false
        
        var copy_priority = priority
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_agent_set_avoidance_priority, UnsafeMutableRawPointer (mutating: shared.handle), nil, &agent.content, &copy_priority)
        
        #else
        
        var copy_priority = priority
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &agent.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_priority) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_agent_set_avoidance_priority, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_create: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_create")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Creates a new obstacle.
    public static func obstacleCreate ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_create, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_obstacle_set_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_set_avoidance_enabled")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `enabled` is `true`, the provided `obstacle` affects avoidance using agents.
    public static func obstacleSetAvoidanceEnabled (obstacle: RID, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_set_avoidance_enabled, UnsafeMutableRawPointer (mutating: shared.handle), nil, &obstacle.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_set_avoidance_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_get_avoidance_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_get_avoidance_enabled")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided `obstacle` has avoidance enabled.
    public static func obstacleGetAvoidanceEnabled (obstacle: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_get_avoidance_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &obstacle.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_get_avoidance_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_set_use_3d_avoidance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_set_use_3d_avoidance")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// Sets if the `obstacle` uses the 2D avoidance or the 3D avoidance while avoidance is enabled.
    public static func obstacleSetUse3dAvoidance (obstacle: RID, enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_set_use_3d_avoidance, UnsafeMutableRawPointer (mutating: shared.handle), nil, &obstacle.content, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_set_use_3d_avoidance, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_get_use_3d_avoidance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_get_use_3d_avoidance")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the provided `obstacle` uses avoidance in 3D space Vector3(x,y,z) instead of horizontal 2D Vector2(x,y) / Vector3(x,0.0,z).
    public static func obstacleGetUse3dAvoidance (obstacle: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_get_use_3d_avoidance, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &obstacle.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_get_use_3d_avoidance, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_set_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_set_map")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 395945892)!
            }
            
        }
        
    }()
    
    /// Assigns the `obstacle` to a navigation map.
    public static func obstacleSetMap (obstacle: RID, map: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_set_map, UnsafeMutableRawPointer (mutating: shared.handle), nil, &obstacle.content, &map.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &map.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_set_map, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_get_map: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_get_map")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3814569979)!
            }
            
        }
        
    }()
    
    /// Returns the navigation map ``RID`` the requested `obstacle` is currently assigned to.
    public static func obstacleGetMap (obstacle: RID)-> RID {
        let _result: RID = RID ()
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_get_map, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &obstacle.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_get_map, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_set_paused: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_set_paused")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1265174801)!
            }
            
        }
        
    }()
    
    /// If `paused` is true the specified `obstacle` will not be processed, e.g. affect avoidance velocities.
    public static func obstacleSetPaused (obstacle: RID, paused: Bool) {
        #if false
        
        var copy_paused = paused
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_set_paused, UnsafeMutableRawPointer (mutating: shared.handle), nil, &obstacle.content, &copy_paused)
        
        #else
        
        var copy_paused = paused
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_paused) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_set_paused, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_get_paused: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_get_paused")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155700596)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified `obstacle` is paused.
    public static func obstacleGetPaused (obstacle: RID)-> Bool {
        var _result: Bool = false
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_get_paused, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &obstacle.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_get_paused, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_set_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_set_radius")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the radius of the dynamic obstacle.
    public static func obstacleSetRadius (obstacle: RID, radius: Double) {
        #if false
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_set_radius, UnsafeMutableRawPointer (mutating: shared.handle), nil, &obstacle.content, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_radius) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_set_radius, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_set_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_set_height")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1794382983)!
            }
            
        }
        
    }()
    
    /// Sets the `height` for the `obstacle`. In 3D agents will ignore obstacles that are above or below them while using 2D avoidance.
    public static func obstacleSetHeight (obstacle: RID, height: Double) {
        #if false
        
        var copy_height = height
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_set_height, UnsafeMutableRawPointer (mutating: shared.handle), nil, &obstacle.content, &copy_height)
        
        #else
        
        var copy_height = height
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_height) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_set_height, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_set_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_set_velocity")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Sets `velocity` of the dynamic `obstacle`. Allows other agents to better predict the movement of the dynamic obstacle. Only works in combination with the radius of the obstacle.
    public static func obstacleSetVelocity (obstacle: RID, velocity: Vector3) {
        #if false
        
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_set_velocity, UnsafeMutableRawPointer (mutating: shared.handle), nil, &obstacle.content, &copy_velocity)
        
        #else
        
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_velocity) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_set_velocity, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_set_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_set_position")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3227306858)!
            }
            
        }
        
    }()
    
    /// Updates the `position` in world space for the `obstacle`.
    public static func obstacleSetPosition (obstacle: RID, position: Vector3) {
        #if false
        
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_set_position, UnsafeMutableRawPointer (mutating: shared.handle), nil, &obstacle.content, &copy_position)
        
        #else
        
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_set_position, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_set_vertices: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_set_vertices")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4030257846)!
            }
            
        }
        
    }()
    
    /// Sets the outline vertices for the obstacle. If the vertices are winded in clockwise order agents will be pushed in by the obstacle, else they will be pushed out.
    public static func obstacleSetVertices (obstacle: RID, vertices: PackedVector3Array) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_set_vertices, UnsafeMutableRawPointer (mutating: shared.handle), nil, &obstacle.content, &vertices.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &vertices.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_set_vertices, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_obstacle_set_avoidance_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("obstacle_set_avoidance_layers")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3411492887)!
            }
            
        }
        
    }()
    
    /// Set the obstacles's `avoidance_layers` bitmask.
    public static func obstacleSetAvoidanceLayers (obstacle: RID, layers: UInt32) {
        #if false
        
        var copy_layers: Int = Int (layers)
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_obstacle_set_avoidance_layers, UnsafeMutableRawPointer (mutating: shared.handle), nil, &obstacle.content, &copy_layers)
        
        #else
        
        var copy_layers: Int = Int (layers)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &obstacle.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_layers) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (NavigationServer3D.method_obstacle_set_avoidance_layers, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_parse_source_geometry_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("parse_source_geometry_data")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 685862123)!
            }
            
        }
        
    }()
    
    /// Parses the ``SceneTree`` for source geometry according to the properties of `navigationMesh`. Updates the provided `sourceGeometryData` resource with the resulting data. The resource can then be used to bake a navigation mesh with ``bakeFromSourceGeometryData(navigationMesh:sourceGeometryData:callback:)``. After the process is finished the optional `callback` will be called.
    /// 
    /// > Note: This function needs to run on the main thread or with a deferred call as the SceneTree is not thread-safe.
    /// 
    /// **Performance:** While convenient, reading data arrays from ``Mesh`` resources can affect the frame rate negatively. The data needs to be received from the GPU, stalling the ``RenderingServer`` in the process. For performance prefer the use of e.g. collision shapes or creating the data arrays entirely in code.
    /// 
    public static func parseSourceGeometryData (navigationMesh: NavigationMesh?, sourceGeometryData: NavigationMeshSourceGeometryData3D?, rootNode: Node?, callback: Callable = Callable()) {
        #if false
        
        var copy_navigation_mesh_handle = navigationMesh?.handle
        var copy_source_geometry_data_handle = sourceGeometryData?.handle
        var copy_root_node_handle = rootNode?.handle
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_parse_source_geometry_data, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_navigation_mesh_handle, &copy_source_geometry_data_handle, &copy_root_node_handle, &callback.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: navigationMesh?.handle) { p0 in
        _args.append (navigationMesh == nil ? nil : p0)
            withUnsafePointer (to: sourceGeometryData?.handle) { p1 in
            _args.append (sourceGeometryData == nil ? nil : p1)
                withUnsafePointer (to: rootNode?.handle) { p2 in
                _args.append (rootNode == nil ? nil : p2)
                    withUnsafePointer (to: &callback.content) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (NavigationServer3D.method_parse_source_geometry_data, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_bake_from_source_geometry_data: GDExtensionMethodBindPtr = {
        let methodName = StringName ("bake_from_source_geometry_data")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2469318639)!
            }
            
        }
        
    }()
    
    /// Bakes the provided `navigationMesh` with the data from the provided `sourceGeometryData`. After the process is finished the optional `callback` will be called.
    public static func bakeFromSourceGeometryData (navigationMesh: NavigationMesh?, sourceGeometryData: NavigationMeshSourceGeometryData3D?, callback: Callable = Callable()) {
        #if false
        
        var copy_navigation_mesh_handle = navigationMesh?.handle
        var copy_source_geometry_data_handle = sourceGeometryData?.handle
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_bake_from_source_geometry_data, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_navigation_mesh_handle, &copy_source_geometry_data_handle, &callback.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: navigationMesh?.handle) { p0 in
        _args.append (navigationMesh == nil ? nil : p0)
            withUnsafePointer (to: sourceGeometryData?.handle) { p1 in
            _args.append (sourceGeometryData == nil ? nil : p1)
                withUnsafePointer (to: &callback.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (NavigationServer3D.method_bake_from_source_geometry_data, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_bake_from_source_geometry_data_async: GDExtensionMethodBindPtr = {
        let methodName = StringName ("bake_from_source_geometry_data_async")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2469318639)!
            }
            
        }
        
    }()
    
    /// Bakes the provided `navigationMesh` with the data from the provided `sourceGeometryData` as an async task running on a background thread. After the process is finished the optional `callback` will be called.
    public static func bakeFromSourceGeometryDataAsync (navigationMesh: NavigationMesh?, sourceGeometryData: NavigationMeshSourceGeometryData3D?, callback: Callable = Callable()) {
        #if false
        
        var copy_navigation_mesh_handle = navigationMesh?.handle
        var copy_source_geometry_data_handle = sourceGeometryData?.handle
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_bake_from_source_geometry_data_async, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_navigation_mesh_handle, &copy_source_geometry_data_handle, &callback.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: navigationMesh?.handle) { p0 in
        _args.append (navigationMesh == nil ? nil : p0)
            withUnsafePointer (to: sourceGeometryData?.handle) { p1 in
            _args.append (sourceGeometryData == nil ? nil : p1)
                withUnsafePointer (to: &callback.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (NavigationServer3D.method_bake_from_source_geometry_data_async, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_free_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("free_rid")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Destroys the given RID.
    public static func freeRid (_ rid: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_free_rid, UnsafeMutableRawPointer (mutating: shared.handle), nil, &rid.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &rid.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_free_rid, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_active")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// Control activation of this server.
    public static func setActive (_ active: Bool) {
        #if false
        
        var copy_active = active
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_set_active, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_active)
        
        #else
        
        var copy_active = active
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_active) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_set_active, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_debug_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_debug_enabled")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// If `true` enables debug mode on the NavigationServer.
    public static func setDebugEnabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_set_debug_enabled, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_set_debug_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_debug_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_debug_enabled")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` when the NavigationServer has debug enabled.
    public static func getDebugEnabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (NavigationServer3D.method_get_debug_enabled, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_process_info: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_process_info")
        return withUnsafePointer (to: &NavigationServer3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1938440894)!
            }
            
        }
        
    }()
    
    /// Returns information about the current state of the NavigationServer. See ``NavigationServer3D/ProcessInfo`` for a list of available states.
    public static func getProcessInfo (_ processInfo: NavigationServer3D.ProcessInfo)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_process_info = Int64 (processInfo.rawValue)
        
        gi.object_method_bind_ptrcall_v (NavigationServer3D.method_get_process_info, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_process_info)
        return _result
        #else
        
        var copy_process_info = Int64 (processInfo.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_process_info) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (NavigationServer3D.method_get_process_info, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ map: RID) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = RID (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when a navigation map is updated, when a region moves or is modified.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.mapChanged.connect { map in
    ///    print ("caught signal")
    /// }
    /// ```
    public var mapChanged: Signal1 { Signal1 (target: self, signalName: "map_changed") }
    
    /// Emitted when navigation debug settings are changed. Only available in debug builds.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.navigationDebugChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var navigationDebugChanged: SimpleSignal { SimpleSignal (target: self, signalName: "navigation_debug_changed") }
    
    /// Emitted when avoidance debug settings are changed. Only available in debug builds.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.avoidanceDebugChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var avoidanceDebugChanged: SimpleSignal { SimpleSignal (target: self, signalName: "avoidance_debug_changed") }
    
}

