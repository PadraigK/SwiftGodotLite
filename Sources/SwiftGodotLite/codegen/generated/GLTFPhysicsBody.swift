// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Represents a GLTF physics body.
/// 
/// Represents a physics body as defined by the `OMI_physics_body` GLTF extension. This class is an intermediary between the GLTF data and Godot's nodes, and it's abstracted in a way that allows adding support for different GLTF physics extensions in the future.
open class GLTFPhysicsBody: Resource {
    override open class var godotClassName: StringName { "GLTFPhysicsBody" }
    
    /* Properties */
    
    /// The type of the body. When importing, this controls what type of ``CollisionObject3D`` node Godot should generate. Valid values are "static", "kinematic", "character", "rigid", "vehicle", and "trigger".
    final public var bodyType: String {
        get {
            return get_body_type ()
        }
        
        set {
            set_body_type (newValue)
        }
        
    }
    
    /// The mass of the physics body, in kilograms. This is only used when the body type is "rigid" or "vehicle".
    final public var mass: Double {
        get {
            return get_mass ()
        }
        
        set {
            set_mass (newValue)
        }
        
    }
    
    /// The linear velocity of the physics body, in meters per second. This is only used when the body type is "rigid" or "vehicle".
    final public var linearVelocity: Vector3 {
        get {
            return get_linear_velocity ()
        }
        
        set {
            set_linear_velocity (newValue)
        }
        
    }
    
    /// The angular velocity of the physics body, in radians per second. This is only used when the body type is "rigid" or "vehicle".
    final public var angularVelocity: Vector3 {
        get {
            return get_angular_velocity ()
        }
        
        set {
            set_angular_velocity (newValue)
        }
        
    }
    
    /// The center of mass of the body, in meters. This is in local space relative to the body. By default, the center of the mass is the body's origin.
    final public var centerOfMass: Vector3 {
        get {
            return get_center_of_mass ()
        }
        
        set {
            set_center_of_mass (newValue)
        }
        
    }
    
    /// The inertia tensor of the physics body, in kilogram meter squared (kg⋅m²). This is only used when the body type is "rigid" or "vehicle".
    /// 
    /// When converted to a Godot ``RigidBody3D`` node, if this value is zero, then the inertia will be calculated automatically.
    /// 
    final public var inertiaTensor: Basis {
        get {
            return get_inertia_tensor ()
        }
        
        set {
            set_inertia_tensor (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_from_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("from_node")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 420544174)!
            }
            
        }
        
    }()
    
    /// Create a new GLTFPhysicsBody instance from the given Godot ``CollisionObject3D`` node.
    public static func fromNode (bodyNode: CollisionObject3D?)-> GLTFPhysicsBody? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_body_node_handle = bodyNode?.handle
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsBody.method_from_node, nil, &_result, &copy_body_node_handle)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: bodyNode?.handle) { p0 in
        _args.append (bodyNode == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_from_node, nil, &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_to_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("to_node")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3224013656)!
            }
            
        }
        
    }()
    
    /// Converts this GLTFPhysicsBody instance into a Godot ``CollisionObject3D`` node.
    public final func toNode ()-> CollisionObject3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_to_node, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_from_dictionary: GDExtensionMethodBindPtr = {
        let methodName = StringName ("from_dictionary")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1177544336)!
            }
            
        }
        
    }()
    
    /// Creates a new GLTFPhysicsBody instance by parsing the given ``GDictionary``.
    public static func fromDictionary (_ dictionary: GDictionary)-> GLTFPhysicsBody? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsBody.method_from_dictionary, nil, &_result, &dictionary.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &dictionary.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_from_dictionary, nil, &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_to_dictionary: GDExtensionMethodBindPtr = {
        let methodName = StringName ("to_dictionary")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3102165223)!
            }
            
        }
        
    }()
    
    /// Serializes this GLTFPhysicsBody instance into a ``GDictionary``.
    public final func toDictionary ()-> GDictionary {
        let _result: GDictionary = GDictionary ()
        gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_to_dictionary, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_body_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_body_type")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_body_type ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_get_body_type, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_body_type: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_body_type")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_body_type (_ bodyType: String) {
        #if true
        
        let gstr_body_type = GString (bodyType)
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsBody.method_set_body_type, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_body_type.content)
        
        #else
        
        let gstr_body_type = GString (bodyType)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_body_type.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_set_body_type, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_mass")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_mass ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_get_mass, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_mass")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_mass (_ mass: Double) {
        #if true
        
        var copy_mass = mass
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsBody.method_set_mass, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mass)
        
        #else
        
        var copy_mass = mass
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mass) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_set_mass, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_linear_velocity")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_linear_velocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_get_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_linear_velocity")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_linear_velocity (_ linearVelocity: Vector3) {
        #if true
        
        var copy_linear_velocity = linearVelocity
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsBody.method_set_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_linear_velocity)
        
        #else
        
        var copy_linear_velocity = linearVelocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_linear_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_set_linear_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_angular_velocity")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_angular_velocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_get_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_angular_velocity")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_angular_velocity (_ angularVelocity: Vector3) {
        #if true
        
        var copy_angular_velocity = angularVelocity
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsBody.method_set_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_angular_velocity)
        
        #else
        
        var copy_angular_velocity = angularVelocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_angular_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_set_angular_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_center_of_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_center_of_mass")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_center_of_mass ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_get_center_of_mass, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_center_of_mass: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_center_of_mass")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_center_of_mass (_ centerOfMass: Vector3) {
        #if true
        
        var copy_center_of_mass = centerOfMass
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsBody.method_set_center_of_mass, UnsafeMutableRawPointer (mutating: handle), nil, &copy_center_of_mass)
        
        #else
        
        var copy_center_of_mass = centerOfMass
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_center_of_mass) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_set_center_of_mass, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_inertia_tensor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_inertia_tensor")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2716978435)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_inertia_tensor ()-> Basis {
        var _result: Basis = Basis ()
        gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_get_inertia_tensor, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_inertia_tensor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_inertia_tensor")
        return withUnsafePointer (to: &GLTFPhysicsBody.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1055510324)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_inertia_tensor (_ inertiaTensor: Basis) {
        #if true
        
        var copy_inertia_tensor = inertiaTensor
        
        gi.object_method_bind_ptrcall_v (GLTFPhysicsBody.method_set_inertia_tensor, UnsafeMutableRawPointer (mutating: handle), nil, &copy_inertia_tensor)
        
        #else
        
        var copy_inertia_tensor = inertiaTensor
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_inertia_tensor) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GLTFPhysicsBody.method_set_inertia_tensor, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

