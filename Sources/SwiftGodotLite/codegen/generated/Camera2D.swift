// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Camera node for 2D scenes.
/// 
/// Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of ``CanvasItem``-based nodes.
/// 
/// Cameras register themselves in the nearest ``Viewport`` node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport.
/// 
/// This node is intended to be a simple helper to get things going quickly, but more functionality may be desired to change how the camera works. To make your own custom camera node, inherit it from ``Node2D`` and change the transform of the canvas by setting ``Viewport/canvasTransform`` in ``Viewport`` (you can obtain the current ``Viewport`` by using ``Node/getViewport()``).
/// 
/// Note that the ``Camera2D`` node's `position` doesn't represent the actual position of the screen, which may differ due to applied smoothing or limits. You can use ``getScreenCenterPosition()`` to get the real position.
/// 
open class Camera2D: Node2D {
    override open class var godotClassName: StringName { "Camera2D" }
    public enum AnchorMode: Int64 {
        /// The camera's position is fixed so that the top-left corner is always at the origin.
        case fixedTopLeft = 0 // ANCHOR_MODE_FIXED_TOP_LEFT
        /// The camera's position takes into account vertical/horizontal offsets and the screen size.
        case dragCenter = 1 // ANCHOR_MODE_DRAG_CENTER
    }
    
    public enum Camera2DProcessCallback: Int64 {
        /// The camera updates during physics frames (see ``Node/``notificationInternalPhysicsProcess````).
        case physics = 0 // CAMERA2D_PROCESS_PHYSICS
        /// The camera updates during process frames (see ``Node/``notificationInternalProcess````).
        case idle = 1 // CAMERA2D_PROCESS_IDLE
    }
    
    
    /* Properties */
    
    /// The camera's relative offset. Useful for looking around or camera shake animations. The offsetted camera can go past the limits defined in ``limitTop``, ``limitBottom``, ``limitLeft`` and ``limitRight``.
    final public var offset: Vector2 {
        get {
            return get_offset ()
        }
        
        set {
            set_offset (newValue)
        }
        
    }
    
    /// The Camera2D's anchor point. See ``Camera2D/AnchorMode`` constants.
    final public var anchorMode: Camera2D.AnchorMode {
        get {
            return get_anchor_mode ()
        }
        
        set {
            set_anchor_mode (newValue)
        }
        
    }
    
    /// If `true`, the camera's rendered view is not affected by its ``Node2D/rotation`` and ``Node2D/globalRotation``.
    final public var ignoreRotation: Bool {
        get {
            return is_ignoring_rotation ()
        }
        
        set {
            set_ignore_rotation (newValue)
        }
        
    }
    
    /// Controls whether the camera can be active or not. If `true`, the ``Camera2D`` will become the main camera when it enters the scene tree and there is no active camera currently (see ``Viewport/getCamera2d()``).
    /// 
    /// When the camera is currently active and ``enabled`` is set to `false`, the next enabled ``Camera2D`` in the scene tree will become active.
    /// 
    final public var enabled: Bool {
        get {
            return is_enabled ()
        }
        
        set {
            set_enabled (newValue)
        }
        
    }
    
    /// The camera's zoom. A zoom of `Vector(2, 2)` doubles the size seen in the viewport. A zoom of `Vector(0.5, 0.5)` halves the size seen in the viewport.
    /// 
    /// > Note: ``FontFile/oversampling`` does _not_ take ``Camera2D`` zoom into account. This means that zooming in/out will cause bitmap fonts and rasterized (non-MSDF) dynamic fonts to appear blurry or pixelated unless the font is part of a ``CanvasLayer`` that makes it ignore camera zoom. To ensure text remains crisp regardless of zoom, you can enable MSDF font rendering by enabling ``ProjectSettings/gui/theme/defaultFontMultichannelSignedDistanceField`` (applies to the default project font only), or enabling **Multichannel Signed Distance Field** in the import options of a DynamicFont for custom fonts. On system fonts, ``SystemFont/multichannelSignedDistanceField`` can be enabled in the inspector.
    /// 
    final public var zoom: Vector2 {
        get {
            return get_zoom ()
        }
        
        set {
            set_zoom (newValue)
        }
        
    }
    
    /// The custom ``Viewport`` node attached to the ``Camera2D``. If `null` or not a ``Viewport``, uses the default viewport instead.
    final public var customViewport: Node? {
        get {
            return get_custom_viewport ()
        }
        
        set {
            set_custom_viewport (newValue)
        }
        
    }
    
    /// The camera's process callback. See ``Camera2D/Camera2DProcessCallback``.
    final public var processCallback: Camera2D.Camera2DProcessCallback {
        get {
            return get_process_callback ()
        }
        
        set {
            set_process_callback (newValue)
        }
        
    }
    
    /// Left scroll limit in pixels. The camera stops moving when reaching this value, but ``offset`` can push the view past the limit.
    final public var limitLeft: Int32 {
        get {
            return get_limit (Side (rawValue: 0)!)
        }
        
        set {
            set_limit (Side (rawValue: 0)!, newValue)
        }
        
    }
    
    /// Top scroll limit in pixels. The camera stops moving when reaching this value, but ``offset`` can push the view past the limit.
    final public var limitTop: Int32 {
        get {
            return get_limit (Side (rawValue: 1)!)
        }
        
        set {
            set_limit (Side (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Right scroll limit in pixels. The camera stops moving when reaching this value, but ``offset`` can push the view past the limit.
    final public var limitRight: Int32 {
        get {
            return get_limit (Side (rawValue: 2)!)
        }
        
        set {
            set_limit (Side (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Bottom scroll limit in pixels. The camera stops moving when reaching this value, but ``offset`` can push the view past the limit.
    final public var limitBottom: Int32 {
        get {
            return get_limit (Side (rawValue: 3)!)
        }
        
        set {
            set_limit (Side (rawValue: 3)!, newValue)
        }
        
    }
    
    /// If `true`, the camera smoothly stops when reaches its limits.
    /// 
    /// This property has no effect if ``positionSmoothingEnabled`` is `false`.
    /// 
    /// > Note: To immediately update the camera's position to be within limits without smoothing, even with this setting enabled, invoke ``resetSmoothing()``.
    /// 
    final public var limitSmoothed: Bool {
        get {
            return is_limit_smoothing_enabled ()
        }
        
        set {
            set_limit_smoothing_enabled (newValue)
        }
        
    }
    
    /// If `true`, the camera's view smoothly moves towards its target position at ``positionSmoothingSpeed``.
    final public var positionSmoothingEnabled: Bool {
        get {
            return is_position_smoothing_enabled ()
        }
        
        set {
            set_position_smoothing_enabled (newValue)
        }
        
    }
    
    /// Speed in pixels per second of the camera's smoothing effect when ``positionSmoothingEnabled`` is `true`.
    final public var positionSmoothingSpeed: Double {
        get {
            return get_position_smoothing_speed ()
        }
        
        set {
            set_position_smoothing_speed (newValue)
        }
        
    }
    
    /// If `true`, the camera's view smoothly rotates, via asymptotic smoothing, to align with its target rotation at ``rotationSmoothingSpeed``.
    /// 
    /// > Note: This property has no effect if ``ignoreRotation`` is `true`.
    /// 
    final public var rotationSmoothingEnabled: Bool {
        get {
            return is_rotation_smoothing_enabled ()
        }
        
        set {
            set_rotation_smoothing_enabled (newValue)
        }
        
    }
    
    /// The angular, asymptotic speed of the camera's rotation smoothing effect when ``rotationSmoothingEnabled`` is `true`.
    final public var rotationSmoothingSpeed: Double {
        get {
            return get_rotation_smoothing_speed ()
        }
        
        set {
            set_rotation_smoothing_speed (newValue)
        }
        
    }
    
    /// If `true`, the camera only moves when reaching the horizontal (left and right) drag margins. If `false`, the camera moves horizontally regardless of margins.
    final public var dragHorizontalEnabled: Bool {
        get {
            return is_drag_horizontal_enabled ()
        }
        
        set {
            set_drag_horizontal_enabled (newValue)
        }
        
    }
    
    /// If `true`, the camera only moves when reaching the vertical (top and bottom) drag margins. If `false`, the camera moves vertically regardless of the drag margins.
    final public var dragVerticalEnabled: Bool {
        get {
            return is_drag_vertical_enabled ()
        }
        
        set {
            set_drag_vertical_enabled (newValue)
        }
        
    }
    
    /// The relative horizontal drag offset of the camera between the right (`-1`) and left (`1`) drag margins.
    /// 
    /// > Note: Used to set the initial horizontal drag offset; determine the current offset; or force the current offset. It's not automatically updated when ``dragHorizontalEnabled`` is `true` or the drag margins are changed.
    /// 
    final public var dragHorizontalOffset: Double {
        get {
            return get_drag_horizontal_offset ()
        }
        
        set {
            set_drag_horizontal_offset (newValue)
        }
        
    }
    
    /// The relative vertical drag offset of the camera between the bottom (`-1`) and top (`1`) drag margins.
    /// 
    /// > Note: Used to set the initial vertical drag offset; determine the current offset; or force the current offset. It's not automatically updated when ``dragVerticalEnabled`` is `true` or the drag margins are changed.
    /// 
    final public var dragVerticalOffset: Double {
        get {
            return get_drag_vertical_offset ()
        }
        
        set {
            set_drag_vertical_offset (newValue)
        }
        
    }
    
    /// Left margin needed to drag the camera. A value of `1` makes the camera move only when reaching the left edge of the screen.
    final public var dragLeftMargin: Double {
        get {
            return get_drag_margin (Side (rawValue: 0)!)
        }
        
        set {
            set_drag_margin (Side (rawValue: 0)!, newValue)
        }
        
    }
    
    /// Top margin needed to drag the camera. A value of `1` makes the camera move only when reaching the top edge of the screen.
    final public var dragTopMargin: Double {
        get {
            return get_drag_margin (Side (rawValue: 1)!)
        }
        
        set {
            set_drag_margin (Side (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Right margin needed to drag the camera. A value of `1` makes the camera move only when reaching the right edge of the screen.
    final public var dragRightMargin: Double {
        get {
            return get_drag_margin (Side (rawValue: 2)!)
        }
        
        set {
            set_drag_margin (Side (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Bottom margin needed to drag the camera. A value of `1` makes the camera move only when reaching the bottom edge of the screen.
    final public var dragBottomMargin: Double {
        get {
            return get_drag_margin (Side (rawValue: 3)!)
        }
        
        set {
            set_drag_margin (Side (rawValue: 3)!, newValue)
        }
        
    }
    
    /// If `true`, draws the camera's screen rectangle in the editor.
    final public var editorDrawScreen: Bool {
        get {
            return is_screen_drawing_enabled ()
        }
        
        set {
            set_screen_drawing_enabled (newValue)
        }
        
    }
    
    /// If `true`, draws the camera's limits rectangle in the editor.
    final public var editorDrawLimits: Bool {
        get {
            return is_limit_drawing_enabled ()
        }
        
        set {
            set_limit_drawing_enabled (newValue)
        }
        
    }
    
    /// If `true`, draws the camera's drag margin rectangle in the editor.
    final public var editorDrawDragMargin: Bool {
        get {
            return is_margin_drawing_enabled ()
        }
        
        set {
            set_margin_drawing_enabled (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_offset")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_offset (_ offset: Vector2) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_offset")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (Camera2D.method_get_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_anchor_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_anchor_mode")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2050398218)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_anchor_mode (_ anchorMode: Camera2D.AnchorMode) {
        #if false
        
        var copy_anchor_mode = Int64 (anchorMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_anchor_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_anchor_mode)
        
        #else
        
        var copy_anchor_mode = Int64 (anchorMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_anchor_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_anchor_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_anchor_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_anchor_mode")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 155978067)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_anchor_mode ()-> Camera2D.AnchorMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Camera2D.method_get_anchor_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Camera2D.AnchorMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_ignore_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ignore_rotation")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ignore_rotation (_ ignore: Bool) {
        #if false
        
        var copy_ignore = ignore
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_ignore_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_ignore)
        
        #else
        
        var copy_ignore = ignore
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_ignore) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_ignore_rotation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_ignoring_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_ignoring_rotation")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_ignoring_rotation ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_ignoring_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_process_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_process_callback")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4201947462)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_process_callback (_ mode: Camera2D.Camera2DProcessCallback) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_process_callback, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_process_callback, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_process_callback: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_process_callback")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2325344499)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_process_callback ()-> Camera2D.Camera2DProcessCallback {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Camera2D.method_get_process_callback, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Camera2D.Camera2DProcessCallback (rawValue: _result)!
    }
    
    fileprivate static var method_set_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_make_current: GDExtensionMethodBindPtr = {
        let methodName = StringName ("make_current")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Forces this ``Camera2D`` to become the current active one. ``enabled`` must be `true`.
    public final func makeCurrent () {
        gi.object_method_bind_ptrcall (Camera2D.method_make_current, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_is_current: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_current")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if this ``Camera2D`` is the active camera (see ``Viewport/getCamera2d()``).
    public final func isCurrent ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_current, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_limit: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_limit")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 437707142)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the camera limit for the specified ``Side``. See also ``limitBottom``, ``limitTop``, ``limitLeft``, and ``limitRight``.
    fileprivate final func set_limit (_ margin: Side, _ limit: Int32) {
        #if false
        
        var copy_margin = Int64 (margin.rawValue)
        var copy_limit: Int = Int (limit)
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_limit, UnsafeMutableRawPointer (mutating: handle), nil, &copy_margin, &copy_limit)
        
        #else
        
        var copy_margin = Int64 (margin.rawValue)
        var copy_limit: Int = Int (limit)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_limit) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Camera2D.method_set_limit, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_limit: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_limit")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1983885014)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the camera limit for the specified ``Side``. See also ``limitBottom``, ``limitTop``, ``limitLeft``, and ``limitRight``.
    fileprivate final func get_limit (_ margin: Side)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_margin = Int64 (margin.rawValue)
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_get_limit, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_margin)
        return _result
        #else
        
        var copy_margin = Int64 (margin.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_get_limit, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_limit_smoothing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_limit_smoothing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_limit_smoothing_enabled (_ limitSmoothingEnabled: Bool) {
        #if false
        
        var copy_limit_smoothing_enabled = limitSmoothingEnabled
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_limit_smoothing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_limit_smoothing_enabled)
        
        #else
        
        var copy_limit_smoothing_enabled = limitSmoothingEnabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_limit_smoothing_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_limit_smoothing_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_limit_smoothing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_limit_smoothing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_limit_smoothing_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_limit_smoothing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_drag_vertical_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_drag_vertical_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_drag_vertical_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_drag_vertical_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_drag_vertical_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_drag_vertical_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_drag_vertical_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_drag_vertical_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_drag_vertical_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_drag_horizontal_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_drag_horizontal_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_drag_horizontal_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_drag_horizontal_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_drag_horizontal_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_drag_horizontal_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_drag_horizontal_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_drag_horizontal_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_drag_horizontal_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_drag_vertical_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_drag_vertical_offset")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_drag_vertical_offset (_ offset: Double) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_drag_vertical_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_drag_vertical_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_drag_vertical_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_drag_vertical_offset")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_drag_vertical_offset ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Camera2D.method_get_drag_vertical_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_drag_horizontal_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_drag_horizontal_offset")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_drag_horizontal_offset (_ offset: Double) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_drag_horizontal_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_drag_horizontal_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_drag_horizontal_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_drag_horizontal_offset")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_drag_horizontal_offset ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Camera2D.method_get_drag_horizontal_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_drag_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_drag_margin")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4290182280)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the specified ``Side``'s margin. See also ``dragBottomMargin``, ``dragTopMargin``, ``dragLeftMargin``, and ``dragRightMargin``.
    fileprivate final func set_drag_margin (_ margin: Side, _ dragMargin: Double) {
        #if false
        
        var copy_margin = Int64 (margin.rawValue)
        var copy_drag_margin = dragMargin
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_drag_margin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_margin, &copy_drag_margin)
        
        #else
        
        var copy_margin = Int64 (margin.rawValue)
        var copy_drag_margin = dragMargin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_drag_margin) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Camera2D.method_set_drag_margin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_drag_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_drag_margin")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2869120046)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the specified ``Side``'s margin. See also ``dragBottomMargin``, ``dragTopMargin``, ``dragLeftMargin``, and ``dragRightMargin``.
    fileprivate final func get_drag_margin (_ margin: Side)-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_margin = Int64 (margin.rawValue)
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_get_drag_margin, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_margin)
        return _result
        #else
        
        var copy_margin = Int64 (margin.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_get_drag_margin, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_target_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_target_position")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    /// Returns this camera's target position, in global coordinates.
    /// 
    /// > Note: The returned value is not the same as ``Node2D/globalPosition``, as it is affected by the drag properties. It is also not the same as the current position if ``positionSmoothingEnabled`` is `true` (see ``getScreenCenterPosition()``).
    /// 
    public final func getTargetPosition ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (Camera2D.method_get_target_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_screen_center_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_screen_center_position")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    /// Returns the center of the screen from this camera's point of view, in global coordinates.
    /// 
    /// > Note: The exact targeted position of the camera may be different. See ``getTargetPosition()``.
    /// 
    public final func getScreenCenterPosition ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (Camera2D.method_get_screen_center_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_zoom: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_zoom")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_zoom (_ zoom: Vector2) {
        #if false
        
        var copy_zoom = zoom
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_zoom, UnsafeMutableRawPointer (mutating: handle), nil, &copy_zoom)
        
        #else
        
        var copy_zoom = zoom
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_zoom) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_zoom, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_zoom: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_zoom")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_zoom ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (Camera2D.method_get_zoom, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_custom_viewport: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_viewport")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_custom_viewport (_ viewport: Node?) {
        #if false
        
        var copy_viewport_handle = viewport?.handle
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_custom_viewport, UnsafeMutableRawPointer (mutating: handle), nil, &copy_viewport_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: viewport?.handle) { p0 in
        _args.append (viewport == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_custom_viewport, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_viewport: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_viewport")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3160264692)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_custom_viewport ()-> Node? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Camera2D.method_get_custom_viewport, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_position_smoothing_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_position_smoothing_speed")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_position_smoothing_speed (_ positionSmoothingSpeed: Double) {
        #if false
        
        var copy_position_smoothing_speed = positionSmoothingSpeed
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_position_smoothing_speed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position_smoothing_speed)
        
        #else
        
        var copy_position_smoothing_speed = positionSmoothingSpeed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position_smoothing_speed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_position_smoothing_speed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_position_smoothing_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_position_smoothing_speed")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_position_smoothing_speed ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Camera2D.method_get_position_smoothing_speed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_position_smoothing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_position_smoothing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_position_smoothing_enabled (_ positionSmoothingSpeed: Bool) {
        #if false
        
        var copy_position_smoothing_speed = positionSmoothingSpeed
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_position_smoothing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_position_smoothing_speed)
        
        #else
        
        var copy_position_smoothing_speed = positionSmoothingSpeed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_position_smoothing_speed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_position_smoothing_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_position_smoothing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_position_smoothing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_position_smoothing_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_position_smoothing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_rotation_smoothing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_rotation_smoothing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rotation_smoothing_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_rotation_smoothing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_rotation_smoothing_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_rotation_smoothing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_rotation_smoothing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_rotation_smoothing_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_rotation_smoothing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_rotation_smoothing_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_rotation_smoothing_speed")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rotation_smoothing_speed (_ speed: Double) {
        #if false
        
        var copy_speed = speed
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_rotation_smoothing_speed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_speed)
        
        #else
        
        var copy_speed = speed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_speed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_rotation_smoothing_speed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_rotation_smoothing_speed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rotation_smoothing_speed")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_rotation_smoothing_speed ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Camera2D.method_get_rotation_smoothing_speed, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_force_update_scroll: GDExtensionMethodBindPtr = {
        let methodName = StringName ("force_update_scroll")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Forces the camera to update scroll immediately.
    public final func forceUpdateScroll () {
        gi.object_method_bind_ptrcall (Camera2D.method_force_update_scroll, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_reset_smoothing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("reset_smoothing")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Sets the camera's position immediately to its current smoothing destination.
    /// 
    /// This method has no effect if ``positionSmoothingEnabled`` is `false`.
    /// 
    public final func resetSmoothing () {
        gi.object_method_bind_ptrcall (Camera2D.method_reset_smoothing, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_align: GDExtensionMethodBindPtr = {
        let methodName = StringName ("align")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Aligns the camera to the tracked node.
    public final func align () {
        gi.object_method_bind_ptrcall (Camera2D.method_align, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_screen_drawing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_screen_drawing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_screen_drawing_enabled (_ screenDrawingEnabled: Bool) {
        #if false
        
        var copy_screen_drawing_enabled = screenDrawingEnabled
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_screen_drawing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_screen_drawing_enabled)
        
        #else
        
        var copy_screen_drawing_enabled = screenDrawingEnabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_screen_drawing_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_screen_drawing_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_screen_drawing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_screen_drawing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_screen_drawing_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_screen_drawing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_limit_drawing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_limit_drawing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_limit_drawing_enabled (_ limitDrawingEnabled: Bool) {
        #if false
        
        var copy_limit_drawing_enabled = limitDrawingEnabled
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_limit_drawing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_limit_drawing_enabled)
        
        #else
        
        var copy_limit_drawing_enabled = limitDrawingEnabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_limit_drawing_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_limit_drawing_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_limit_drawing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_limit_drawing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_limit_drawing_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_limit_drawing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_margin_drawing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_margin_drawing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_margin_drawing_enabled (_ marginDrawingEnabled: Bool) {
        #if false
        
        var copy_margin_drawing_enabled = marginDrawingEnabled
        
        gi.object_method_bind_ptrcall_v (Camera2D.method_set_margin_drawing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_margin_drawing_enabled)
        
        #else
        
        var copy_margin_drawing_enabled = marginDrawingEnabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_margin_drawing_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera2D.method_set_margin_drawing_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_margin_drawing_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_margin_drawing_enabled")
        return withUnsafePointer (to: &Camera2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_margin_drawing_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera2D.method_is_margin_drawing_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

