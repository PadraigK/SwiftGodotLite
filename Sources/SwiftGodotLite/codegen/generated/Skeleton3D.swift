// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A node containing a bone hierarchy, used to create a 3D skeletal animation.
/// 
/// ``Skeleton3D`` provides an interface for managing a hierarchy of bones, including pose, rest and animation (see ``Animation``). It can also use ragdoll physics.
/// 
/// The overall transform of a bone with respect to the skeleton is determined by bone pose. Bone rest defines the initial transform of the bone pose.
/// 
/// Note that "global pose" below refers to the overall transform of the bone with respect to skeleton, so it is not the actual global/world transform of the bone.
/// 
/// To setup different types of inverse kinematics, consider using ``SkeletonIK3D``, or add a custom IK implementation in ``Node/_process(delta:)`` as a child node.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``poseUpdated``
/// - ``bonePoseChanged``
/// - ``boneEnabledChanged``
/// - ``showRestOnlyChanged``
open class Skeleton3D: Node3D {
    override open class var godotClassName: StringName { "Skeleton3D" }
    /* Constants */
    /// 
    public static let notificationUpdateSkeleton = 50
    
    /* Properties */
    
    /// Multiplies the 3D position track animation.
    /// 
    /// > Note: Unless this value is `1.0`, the key value in animation will not match the actual position value.
    /// 
    final public var motionScale: Double {
        get {
            return get_motion_scale ()
        }
        
        set {
            set_motion_scale (newValue)
        }
        
    }
    
    final public var showRestOnly: Bool {
        get {
            return is_show_rest_only ()
        }
        
        set {
            set_show_rest_only (newValue)
        }
        
    }
    
    final public var animatePhysicalBones: Bool {
        get {
            return get_animate_physical_bones ()
        }
        
        set {
            set_animate_physical_bones (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_add_bone: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_bone")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Adds a bone, with name `name`. ``getBoneCount()`` will become the bone index.
    public final func addBone (name: String) {
        #if false
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_add_bone, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_add_bone, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_find_bone: GDExtensionMethodBindPtr = {
        let methodName = StringName ("find_bone")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1321353865)!
            }
            
        }
        
    }()
    
    /// Returns the bone index that matches `name` as its name.
    public final func findBone (name: String)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_find_bone, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_name.content)
        return _result
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_find_bone, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_name")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 844755477)!
            }
            
        }
        
    }()
    
    /// Returns the name of the bone at index `boneIdx`.
    public final func getBoneName (boneIdx: Int32)-> String {
        let _result = GString ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_name, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_bone_idx)
        return _result.description
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_name, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result.description
        }
        
        #endif
    }
    
    fileprivate static var method_set_bone_name: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone_name")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 501894301)!
            }
            
        }
        
    }()
    
    /// 
    public final func setBoneName (boneIdx: Int32, name: String) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_bone_name, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx, &gstr_name.content)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_name.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Skeleton3D.method_set_bone_name, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_parent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_parent")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 923996154)!
            }
            
        }
        
    }()
    
    /// Returns the bone index which is the parent of the bone at `boneIdx`. If -1, then bone has no parent.
    /// 
    /// > Note: The parent bone returned will always be less than `boneIdx`.
    /// 
    public final func getBoneParent (boneIdx: Int32)-> Int32 {
        var _result: Int32 = 0
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_parent, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_parent, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_bone_parent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone_parent")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3937882851)!
            }
            
        }
        
    }()
    
    /// Sets the bone index `parentIdx` as the parent of the bone at `boneIdx`. If -1, then bone has no parent.
    /// 
    /// > Note: `parentIdx` must be less than `boneIdx`.
    /// 
    public final func setBoneParent (boneIdx: Int32, parentIdx: Int32) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_parent_idx: Int = Int (parentIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_bone_parent, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx, &copy_parent_idx)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_parent_idx: Int = Int (parentIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_parent_idx) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Skeleton3D.method_set_bone_parent, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_count")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of bones in the skeleton.
    public final func getBoneCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_version: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_version")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of times the bone hierarchy has changed within this skeleton, including renames.
    /// 
    /// The Skeleton version is not serialized: only use within a single instance of Skeleton3D.
    /// 
    /// Use for invalidating caches in IK solvers and other nodes which process bones.
    /// 
    public final func getVersion ()-> UInt {
        var _result: UInt = 0
        gi.object_method_bind_ptrcall (Skeleton3D.method_get_version, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_unparent_bone_and_rest: GDExtensionMethodBindPtr = {
        let methodName = StringName ("unparent_bone_and_rest")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Unparents the bone at `boneIdx` and sets its rest position to that of its parent prior to being reset.
    public final func unparentBoneAndRest (boneIdx: Int32) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_unparent_bone_and_rest, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_unparent_bone_and_rest, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_children: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_children")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1706082319)!
            }
            
        }
        
    }()
    
    /// Returns an array containing the bone indexes of all the children node of the passed in bone, `boneIdx`.
    public final func getBoneChildren (boneIdx: Int32)-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_children, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_children, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_parentless_bones: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_parentless_bones")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1930428628)!
            }
            
        }
        
    }()
    
    /// Returns an array with all of the bones that are parentless. Another way to look at this is that it returns the indexes of all the bones that are not dependent or modified by other bones in the Skeleton.
    public final func getParentlessBones ()-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        gi.object_method_bind_ptrcall (Skeleton3D.method_get_parentless_bones, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_bone_rest: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_rest")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1965739696)!
            }
            
        }
        
    }()
    
    /// Returns the rest transform for a bone `boneIdx`.
    public final func getBoneRest (boneIdx: Int32)-> Transform3D {
        var _result: Transform3D = Transform3D ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_rest, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_rest, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_bone_rest: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone_rest")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3616898986)!
            }
            
        }
        
    }()
    
    /// Sets the rest transform for bone `boneIdx`.
    public final func setBoneRest (boneIdx: Int32, rest: Transform3D) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_rest = rest
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_bone_rest, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx, &copy_rest)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_rest = rest
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_rest) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Skeleton3D.method_set_bone_rest, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_global_rest: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_global_rest")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1965739696)!
            }
            
        }
        
    }()
    
    /// Returns the global rest transform for `boneIdx`.
    public final func getBoneGlobalRest (boneIdx: Int32)-> Transform3D {
        var _result: Transform3D = Transform3D ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_global_rest, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_global_rest, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_create_skin_from_rest_transforms: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_skin_from_rest_transforms")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1032037385)!
            }
            
        }
        
    }()
    
    /// 
    public final func createSkinFromRestTransforms ()-> Skin? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Skeleton3D.method_create_skin_from_rest_transforms, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_register_skin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("register_skin")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3405789568)!
            }
            
        }
        
    }()
    
    /// Binds the given Skin to the Skeleton.
    public final func registerSkin (_ skin: Skin?)-> SkinReference? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_skin_handle = skin?.handle
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_register_skin, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_skin_handle)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: skin?.handle) { p0 in
        _args.append (skin == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_register_skin, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_localize_rests: GDExtensionMethodBindPtr = {
        let methodName = StringName ("localize_rests")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Returns all bones in the skeleton to their rest poses.
    public final func localizeRests () {
        gi.object_method_bind_ptrcall (Skeleton3D.method_localize_rests, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_clear_bones: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_bones")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clear all the bones in this skeleton.
    public final func clearBones () {
        gi.object_method_bind_ptrcall (Skeleton3D.method_clear_bones, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_get_bone_pose: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_pose")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1965739696)!
            }
            
        }
        
    }()
    
    /// Returns the pose transform of the specified bone.
    public final func getBonePose (boneIdx: Int32)-> Transform3D {
        var _result: Transform3D = Transform3D ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_pose, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_pose, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_bone_pose_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone_pose_position")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1530502735)!
            }
            
        }
        
    }()
    
    /// Sets the pose position of the bone at `boneIdx` to `position`. `position` is a ``Vector3`` describing a position local to the ``Skeleton3D`` node.
    public final func setBonePosePosition (boneIdx: Int32, position: Vector3) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_position = position
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_bone_pose_position, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx, &copy_position)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_position = position
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_position) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Skeleton3D.method_set_bone_pose_position, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_bone_pose_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone_pose_rotation")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2823819782)!
            }
            
        }
        
    }()
    
    /// Sets the pose rotation of the bone at `boneIdx` to `rotation`. `rotation` is a ``Quaternion`` describing a rotation in the bone's local coordinate space with respect to the rotation of any parent bones.
    public final func setBonePoseRotation (boneIdx: Int32, rotation: Quaternion) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_rotation = rotation
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_bone_pose_rotation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx, &copy_rotation)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_rotation = rotation
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_rotation) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Skeleton3D.method_set_bone_pose_rotation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_bone_pose_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone_pose_scale")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1530502735)!
            }
            
        }
        
    }()
    
    /// Sets the pose scale of the bone at `boneIdx` to `scale`.
    public final func setBonePoseScale (boneIdx: Int32, scale: Vector3) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_scale = scale
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_bone_pose_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx, &copy_scale)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_scale = scale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_scale) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Skeleton3D.method_set_bone_pose_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_pose_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_pose_position")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 711720468)!
            }
            
        }
        
    }()
    
    /// Returns the pose position of the bone at `boneIdx`. The returned ``Vector3`` is in the local coordinate space of the ``Skeleton3D`` node.
    public final func getBonePosePosition (boneIdx: Int32)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_pose_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_pose_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_pose_rotation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_pose_rotation")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 476865136)!
            }
            
        }
        
    }()
    
    /// Returns the pose rotation of the bone at `boneIdx`. The returned ``Quaternion`` is local to the bone with respect to the rotation of any parent bones.
    public final func getBonePoseRotation (boneIdx: Int32)-> Quaternion {
        var _result: Quaternion = Quaternion ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_pose_rotation, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_pose_rotation, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_pose_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_pose_scale")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 711720468)!
            }
            
        }
        
    }()
    
    /// Returns the pose scale of the bone at `boneIdx`.
    public final func getBonePoseScale (boneIdx: Int32)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_pose_scale, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_pose_scale, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_reset_bone_pose: GDExtensionMethodBindPtr = {
        let methodName = StringName ("reset_bone_pose")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Sets the bone pose to rest for `boneIdx`.
    public final func resetBonePose (boneIdx: Int32) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_reset_bone_pose, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_reset_bone_pose, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_reset_bone_poses: GDExtensionMethodBindPtr = {
        let methodName = StringName ("reset_bone_poses")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Sets all bone poses to rests.
    public final func resetBonePoses () {
        gi.object_method_bind_ptrcall (Skeleton3D.method_reset_bone_poses, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_is_bone_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_bone_enabled")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether the bone pose for the bone at `boneIdx` is enabled.
    public final func isBoneEnabled (boneIdx: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_is_bone_enabled, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_is_bone_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_bone_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone_enabled")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 972357352)!
            }
            
        }
        
    }()
    
    /// Disables the pose for the bone at `boneIdx` if `false`, enables the bone pose if `true`.
    public final func setBoneEnabled (boneIdx: Int32, enabled: Bool = true) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_bone_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx, &copy_enabled)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Skeleton3D.method_set_bone_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_clear_bones_global_pose_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_bones_global_pose_override")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Removes the global pose override on all bones in the skeleton.
    public final func clearBonesGlobalPoseOverride () {
        gi.object_method_bind_ptrcall (Skeleton3D.method_clear_bones_global_pose_override, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_bone_global_pose_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bone_global_pose_override")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3483398371)!
            }
            
        }
        
    }()
    
    /// Sets the global pose transform, `pose`, for the bone at `boneIdx`.
    /// 
    /// `amount` is the interpolation strength that will be used when applying the pose, and `persistent` determines if the applied pose will remain.
    /// 
    /// > Note: The pose transform needs to be a global pose! To convert a world transform from a ``Node3D`` to a global bone pose, multiply the ``Transform3D/affineInverse()`` of the node's ``Node3D/globalTransform`` by the desired world transform.
    /// 
    public final func setBoneGlobalPoseOverride (boneIdx: Int32, pose: Transform3D, amount: Double, persistent: Bool = false) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_pose = pose
        var copy_amount = amount
        var copy_persistent = persistent
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_bone_global_pose_override, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx, &copy_pose, &copy_amount, &copy_persistent)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var copy_pose = pose
        var copy_amount = amount
        var copy_persistent = persistent
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_pose) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_amount) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_persistent) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (Skeleton3D.method_set_bone_global_pose_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_global_pose_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_global_pose_override")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1965739696)!
            }
            
        }
        
    }()
    
    /// Returns the global pose override transform for `boneIdx`.
    public final func getBoneGlobalPoseOverride (boneIdx: Int32)-> Transform3D {
        var _result: Transform3D = Transform3D ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_global_pose_override, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_global_pose_override, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_global_pose: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_global_pose")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1965739696)!
            }
            
        }
        
    }()
    
    /// Returns the overall transform of the specified bone, with respect to the skeleton. Being relative to the skeleton frame, this is not the actual "global" transform of the bone.
    public final func getBoneGlobalPose (boneIdx: Int32)-> Transform3D {
        var _result: Transform3D = Transform3D ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_global_pose, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_global_pose, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_bone_global_pose_no_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bone_global_pose_no_override")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1965739696)!
            }
            
        }
        
    }()
    
    /// Returns the overall transform of the specified bone, with respect to the skeleton, but without any global pose overrides. Being relative to the skeleton frame, this is not the actual "global" transform of the bone.
    public final func getBoneGlobalPoseNoOverride (boneIdx: Int32)-> Transform3D {
        var _result: Transform3D = Transform3D ()
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_get_bone_global_pose_no_override, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_bone_idx)
        return _result
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_get_bone_global_pose_no_override, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_force_update_all_bone_transforms: GDExtensionMethodBindPtr = {
        let methodName = StringName ("force_update_all_bone_transforms")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Force updates the bone transforms/poses for all bones in the skeleton.
    /// 
    /// _Deprecated._ Do not use.
    /// 
    public final func forceUpdateAllBoneTransforms () {
        gi.object_method_bind_ptrcall (Skeleton3D.method_force_update_all_bone_transforms, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_force_update_bone_child_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("force_update_bone_child_transform")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    /// Force updates the bone transform for the bone at `boneIdx` and all of its children.
    public final func forceUpdateBoneChildTransform (boneIdx: Int32) {
        #if false
        
        var copy_bone_idx: Int = Int (boneIdx)
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_force_update_bone_child_transform, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bone_idx)
        
        #else
        
        var copy_bone_idx: Int = Int (boneIdx)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bone_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_force_update_bone_child_transform, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_motion_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_motion_scale")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_motion_scale (_ motionScale: Double) {
        #if false
        
        var copy_motion_scale = motionScale
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_motion_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_motion_scale)
        
        #else
        
        var copy_motion_scale = motionScale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_motion_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_set_motion_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_motion_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_motion_scale")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_motion_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Skeleton3D.method_get_motion_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_show_rest_only: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_show_rest_only")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_show_rest_only (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_show_rest_only, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_set_show_rest_only, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_show_rest_only: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_show_rest_only")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_show_rest_only ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Skeleton3D.method_is_show_rest_only, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_animate_physical_bones: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_animate_physical_bones")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_animate_physical_bones (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_set_animate_physical_bones, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_set_animate_physical_bones, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_animate_physical_bones: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_animate_physical_bones")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_animate_physical_bones ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Skeleton3D.method_get_animate_physical_bones, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_physical_bones_stop_simulation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("physical_bones_stop_simulation")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Tells the ``PhysicalBone3D`` nodes in the Skeleton to stop simulating.
    public final func physicalBonesStopSimulation () {
        gi.object_method_bind_ptrcall (Skeleton3D.method_physical_bones_stop_simulation, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_physical_bones_start_simulation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("physical_bones_start_simulation")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2787316981)!
            }
            
        }
        
    }()
    
    /// Tells the ``PhysicalBone3D`` nodes in the Skeleton to start simulating and reacting to the physics world.
    /// 
    /// Optionally, a list of bone names can be passed-in, allowing only the passed-in bones to be simulated.
    /// 
    public final func physicalBonesStartSimulation (bones: VariantCollection<StringName> = VariantCollection<StringName> ()) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_physical_bones_start_simulation, UnsafeMutableRawPointer (mutating: handle), nil, &bones.array.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &bones.array.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_physical_bones_start_simulation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_physical_bones_add_collision_exception: GDExtensionMethodBindPtr = {
        let methodName = StringName ("physical_bones_add_collision_exception")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Adds a collision exception to the physical bone.
    /// 
    /// Works just like the ``RigidBody3D`` node.
    /// 
    public final func physicalBonesAddCollisionException (_ exception: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_physical_bones_add_collision_exception, UnsafeMutableRawPointer (mutating: handle), nil, &exception.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &exception.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_physical_bones_add_collision_exception, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_physical_bones_remove_collision_exception: GDExtensionMethodBindPtr = {
        let methodName = StringName ("physical_bones_remove_collision_exception")
        return withUnsafePointer (to: &Skeleton3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2722037293)!
            }
            
        }
        
    }()
    
    /// Removes a collision exception to the physical bone.
    /// 
    /// Works just like the ``RigidBody3D`` node.
    /// 
    public final func physicalBonesRemoveCollisionException (_ exception: RID) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (Skeleton3D.method_physical_bones_remove_collision_exception, UnsafeMutableRawPointer (mutating: handle), nil, &exception.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &exception.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Skeleton3D.method_physical_bones_remove_collision_exception, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    // Signals 
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.poseUpdated.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var poseUpdated: SimpleSignal { SimpleSignal (target: self, signalName: "pose_updated") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ boneIdx: Int64) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Int64 (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// This signal is emitted when one of the bones in the Skeleton3D node have changed their pose. This is used to inform nodes that rely on bone positions that one of the bones in the Skeleton3D have changed their transform/pose.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.bonePoseChanged.connect { boneIdx in
    ///    print ("caught signal")
    /// }
    /// ```
    public var bonePoseChanged: Signal1 { Signal1 (target: self, signalName: "bone_pose_changed") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal2/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal2/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal2/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal2 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal2 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ boneIdx: Int64) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = Int64 (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.boneEnabledChanged.connect { boneIdx in
    ///    print ("caught signal")
    /// }
    /// ```
    public var boneEnabledChanged: Signal2 { Signal2 (target: self, signalName: "bone_enabled_changed") }
    
    /// 
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.showRestOnlyChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var showRestOnlyChanged: SimpleSignal { SimpleSignal (target: self, signalName: "show_rest_only_changed") }
    
}

