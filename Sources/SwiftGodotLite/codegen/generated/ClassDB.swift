// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A class information repository.
/// 
/// Provides access to metadata stored for every available class.
open class ClassDB: Object {
    /// The shared instance of this class
    public static var shared: ClassDB = {
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { ptr in
            ClassDB (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "ClassDB" }
    /* Methods */
    fileprivate static var method_get_class_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_class_list")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns the names of all the classes available.
    public static func getClassList ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (ClassDB.method_get_class_list, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_inheriters_from_class: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_inheriters_from_class")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1761182771)!
            }
            
        }
        
    }()
    
    /// Returns the names of all the classes that directly or indirectly inherit from `class`.
    public static func getInheritersFromClass (_ `class`: StringName)-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_get_inheriters_from_class, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &`class`.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ClassDB.method_get_inheriters_from_class, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_parent_class: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_parent_class")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1965194235)!
            }
            
        }
        
    }()
    
    /// Returns the parent class of `class`.
    public static func getParentClass (_ `class`: StringName)-> StringName {
        let _result: StringName = StringName ()
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_get_parent_class, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &`class`.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ClassDB.method_get_parent_class, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_class_exists: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_exists")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns whether the specified `class` is available or not.
    public static func classExists (`class`: StringName)-> Bool {
        var _result: Bool = false
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_exists, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ClassDB.method_class_exists, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_parent_class: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_parent_class")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 471820014)!
            }
            
        }
        
    }()
    
    /// Returns whether `inherits` is an ancestor of `class` or not.
    public static func isParentClass (_ `class`: StringName, inherits: StringName)-> Bool {
        var _result: Bool = false
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_is_parent_class, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content, &inherits.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &inherits.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_is_parent_class, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_can_instantiate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("can_instantiate")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns `true` if objects can be instantiated from the specified `class`, otherwise returns `false`.
    public static func canInstantiate (`class`: StringName)-> Bool {
        var _result: Bool = false
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_can_instantiate, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ClassDB.method_can_instantiate, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_instantiate: GDExtensionMethodBindPtr = {
        let methodName = StringName ("instantiate")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2760726917)!
            }
            
        }
        
    }()
    
    /// Creates an instance of `class`.
    public static func instantiate (`class`: StringName)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_instantiate, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &`class`.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ClassDB.method_instantiate, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_class_has_signal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_has_signal")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 471820014)!
            }
            
        }
        
    }()
    
    /// Returns whether `class` or its ancestry has a signal called `signal` or not.
    public static func classHasSignal (`class`: StringName, signal: StringName)-> Bool {
        var _result: Bool = false
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_has_signal, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content, &signal.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &signal.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_class_has_signal, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_get_signal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_get_signal")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3061114238)!
            }
            
        }
        
    }()
    
    /// Returns the `signal` data of `class` or its ancestry. The returned value is a ``GDictionary`` with the following keys: `args`, `default_args`, `flags`, `id`, `name`, `return: (class_name, hint, hint_string, name, type, usage)`.
    public static func classGetSignal (`class`: StringName, signal: StringName)-> GDictionary {
        let _result: GDictionary = GDictionary ()
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_get_signal, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &`class`.content, &signal.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &signal.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_class_get_signal, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_get_signal_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_get_signal_list")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3504980660)!
            }
            
        }
        
    }()
    
    /// Returns an array with all the signals of `class` or its ancestry if `noInheritance` is `false`. Every element of the array is a ``GDictionary`` as described in ``classGetSignal(`class`:signal:)``.
    public static func classGetSignalList (`class`: StringName, noInheritance: Bool = false)-> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        #if true
        
        var copy_no_inheritance = noInheritance
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_get_signal_list, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content, &copy_no_inheritance)
        return VariantCollection<GDictionary>(content: _result)
        #else
        
        var copy_no_inheritance = noInheritance
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_no_inheritance) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_class_get_signal_list, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return VariantCollection<GDictionary>(content: _result)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_get_property_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_get_property_list")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3504980660)!
            }
            
        }
        
    }()
    
    /// Returns an array with all the properties of `class` or its ancestry if `noInheritance` is `false`.
    public static func classGetPropertyList (`class`: StringName, noInheritance: Bool = false)-> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        #if true
        
        var copy_no_inheritance = noInheritance
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_get_property_list, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content, &copy_no_inheritance)
        return VariantCollection<GDictionary>(content: _result)
        #else
        
        var copy_no_inheritance = noInheritance
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_no_inheritance) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_class_get_property_list, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return VariantCollection<GDictionary>(content: _result)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_get_property: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_get_property")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2498641674)!
            }
            
        }
        
    }()
    
    /// Returns the value of `property` of `object` or its ancestry.
    public static func classGetProperty (object: Object?, property: StringName)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        var copy_object_handle = object?.handle
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_get_property, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &copy_object_handle, &property.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: object?.handle) { p0 in
        _args.append (object == nil ? nil : p0)
            return withUnsafePointer (to: &property.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_class_get_property, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_set_property: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_set_property")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1690314931)!
            }
            
        }
        
    }()
    
    /// Sets `property` value of `object` to `value`.
    public static func classSetProperty (object: Object?, property: StringName, value: Variant)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        var copy_object_handle = object?.handle
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_set_property, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_object_handle, &property.content, &value.content)
        return GodotError (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: object?.handle) { p0 in
        _args.append (object == nil ? nil : p0)
            return withUnsafePointer (to: &property.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &value.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (ClassDB.method_class_set_property, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                    return GodotError (rawValue: _result)!
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_has_method: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_has_method")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3860701026)!
            }
            
        }
        
    }()
    
    /// Returns whether `class` (or its ancestry if `noInheritance` is `false`) has a method called `method` or not.
    public static func classHasMethod (`class`: StringName, method: StringName, noInheritance: Bool = false)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_no_inheritance = noInheritance
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_has_method, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content, &method.content, &copy_no_inheritance)
        return _result
        #else
        
        var copy_no_inheritance = noInheritance
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &method.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_no_inheritance) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (ClassDB.method_class_has_method, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_get_method_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_get_method_list")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3504980660)!
            }
            
        }
        
    }()
    
    /// Returns an array with all the methods of `class` or its ancestry if `noInheritance` is `false`. Every element of the array is a ``GDictionary`` with the following keys: `args`, `default_args`, `flags`, `id`, `name`, `return: (class_name, hint, hint_string, name, type, usage)`.
    /// 
    /// > Note: In exported release builds the debug info is not available, so the returned dictionaries will contain only method names.
    /// 
    public static func classGetMethodList (`class`: StringName, noInheritance: Bool = false)-> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        #if true
        
        var copy_no_inheritance = noInheritance
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_get_method_list, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content, &copy_no_inheritance)
        return VariantCollection<GDictionary>(content: _result)
        #else
        
        var copy_no_inheritance = noInheritance
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_no_inheritance) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_class_get_method_list, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return VariantCollection<GDictionary>(content: _result)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_get_integer_constant_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_get_integer_constant_list")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3031669221)!
            }
            
        }
        
    }()
    
    /// Returns an array with the names all the integer constants of `class` or its ancestry.
    public static func classGetIntegerConstantList (`class`: StringName, noInheritance: Bool = false)-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        #if true
        
        var copy_no_inheritance = noInheritance
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_get_integer_constant_list, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &`class`.content, &copy_no_inheritance)
        return _result
        #else
        
        var copy_no_inheritance = noInheritance
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_no_inheritance) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_class_get_integer_constant_list, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_has_integer_constant: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_has_integer_constant")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 471820014)!
            }
            
        }
        
    }()
    
    /// Returns whether `class` or its ancestry has an integer constant called `name` or not.
    public static func classHasIntegerConstant (`class`: StringName, name: StringName)-> Bool {
        var _result: Bool = false
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_has_integer_constant, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_class_has_integer_constant, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_get_integer_constant: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_get_integer_constant")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2419549490)!
            }
            
        }
        
    }()
    
    /// Returns the value of the integer constant `name` of `class` or its ancestry. Always returns 0 when the constant could not be found.
    public static func classGetIntegerConstant (`class`: StringName, name: StringName)-> Int {
        var _result: Int = 0
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_get_integer_constant, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content, &name.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_class_get_integer_constant, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_has_enum: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_has_enum")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3860701026)!
            }
            
        }
        
    }()
    
    /// Returns whether `class` or its ancestry has an enum called `name` or not.
    public static func classHasEnum (`class`: StringName, name: StringName, noInheritance: Bool = false)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_no_inheritance = noInheritance
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_has_enum, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content, &name.content, &copy_no_inheritance)
        return _result
        #else
        
        var copy_no_inheritance = noInheritance
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_no_inheritance) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (ClassDB.method_class_has_enum, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_get_enum_list: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_get_enum_list")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3031669221)!
            }
            
        }
        
    }()
    
    /// Returns an array with all the enums of `class` or its ancestry.
    public static func classGetEnumList (`class`: StringName, noInheritance: Bool = false)-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        #if true
        
        var copy_no_inheritance = noInheritance
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_get_enum_list, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &`class`.content, &copy_no_inheritance)
        return _result
        #else
        
        var copy_no_inheritance = noInheritance
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_no_inheritance) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (ClassDB.method_class_get_enum_list, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_get_enum_constants: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_get_enum_constants")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 661528303)!
            }
            
        }
        
    }()
    
    /// Returns an array with all the keys in `enum` of `class` or its ancestry.
    public static func classGetEnumConstants (`class`: StringName, `enum`: StringName, noInheritance: Bool = false)-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        #if true
        
        var copy_no_inheritance = noInheritance
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_get_enum_constants, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &`class`.content, &`enum`.content, &copy_no_inheritance)
        return _result
        #else
        
        var copy_no_inheritance = noInheritance
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &`enum`.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_no_inheritance) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (ClassDB.method_class_get_enum_constants, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_class_get_integer_constant_enum: GDExtensionMethodBindPtr = {
        let methodName = StringName ("class_get_integer_constant_enum")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2457504236)!
            }
            
        }
        
    }()
    
    /// Returns which enum the integer constant `name` of `class` or its ancestry belongs to.
    public static func classGetIntegerConstantEnum (`class`: StringName, name: StringName, noInheritance: Bool = false)-> StringName {
        let _result: StringName = StringName ()
        #if true
        
        var copy_no_inheritance = noInheritance
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_class_get_integer_constant_enum, UnsafeMutableRawPointer (mutating: shared.handle), &_result.content, &`class`.content, &name.content, &copy_no_inheritance)
        return _result
        #else
        
        var copy_no_inheritance = noInheritance
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &name.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_no_inheritance) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (ClassDB.method_class_get_integer_constant_enum, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result.content)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_class_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_class_enabled")
        return withUnsafePointer (to: &ClassDB.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2619796661)!
            }
            
        }
        
    }()
    
    /// Returns whether this `class` is enabled or not.
    public static func isClassEnabled (`class`: StringName)-> Bool {
        var _result: Bool = false
        #if true
        
        
        gi.object_method_bind_ptrcall_v (ClassDB.method_is_class_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &`class`.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &`class`.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ClassDB.method_is_class_enabled, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

