// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// An implementation of A* for finding the shortest path between two points on a partial 2D grid.
/// 
/// ``AStarGrid2D`` is a variant of ``AStar2D`` that is specialized for partial 2D grids. It is simpler to use because it doesn't require you to manually create points and connect them together. This class also supports multiple types of heuristics, modes for diagonal movement, and a jumping mode to speed up calculations.
/// 
/// To use ``AStarGrid2D``, you only need to set the ``region`` of the grid, optionally set the ``cellSize``, and then call the ``update()`` method:
/// 
/// To remove a point from the pathfinding grid, it must be set as "solid" with ``setPointSolid(_:solid:)``.
/// 
open class AStarGrid2D: RefCounted {
    override open class var godotClassName: StringName { "AStarGrid2D" }
    public enum Heuristic: Int64 {
        /// The [url=https://en.wikipedia.org/wiki/Euclidean_distance]Euclidean heuristic[/url] to be used for the pathfinding using the following formula:
        /// 
        /// > Note: This is also the internal heuristic used in ``AStar3D`` and ``AStar2D`` by default (with the inclusion of possible z-axis coordinate).
        /// 
        case euclidean = 0 // HEURISTIC_EUCLIDEAN
        /// The [url=https://en.wikipedia.org/wiki/Taxicab_geometry]Manhattan heuristic[/url] to be used for the pathfinding using the following formula:
        /// 
        /// > Note: This heuristic is intended to be used with 4-side orthogonal movements, provided by setting the ``diagonalMode`` to .never.
        /// 
        case manhattan = 1 // HEURISTIC_MANHATTAN
        /// The Octile heuristic to be used for the pathfinding using the following formula:
        /// 
        case octile = 2 // HEURISTIC_OCTILE
        /// The [url=https://en.wikipedia.org/wiki/Chebyshev_distance]Chebyshev heuristic[/url] to be used for the pathfinding using the following formula:
        /// 
        case chebyshev = 3 // HEURISTIC_CHEBYSHEV
        /// Represents the size of the ``AStarGrid2D/Heuristic`` enum.
        case max = 4 // HEURISTIC_MAX
    }
    
    public enum DiagonalMode: Int64 {
        /// The pathfinding algorithm will ignore solid neighbors around the target cell and allow passing using diagonals.
        case always = 0 // DIAGONAL_MODE_ALWAYS
        /// The pathfinding algorithm will ignore all diagonals and the way will be always orthogonal.
        case never = 1 // DIAGONAL_MODE_NEVER
        /// The pathfinding algorithm will avoid using diagonals if at least two obstacles have been placed around the neighboring cells of the specific path segment.
        case atLeastOneWalkable = 2 // DIAGONAL_MODE_AT_LEAST_ONE_WALKABLE
        /// The pathfinding algorithm will avoid using diagonals if any obstacle has been placed around the neighboring cells of the specific path segment.
        case onlyIfNoObstacles = 3 // DIAGONAL_MODE_ONLY_IF_NO_OBSTACLES
        /// Represents the size of the ``AStarGrid2D/DiagonalMode`` enum.
        case max = 4 // DIAGONAL_MODE_MAX
    }
    
    
    /* Properties */
    
    /// The region of grid cells available for pathfinding. If changed, ``update()`` needs to be called before finding the next path.
    final public var region: Rect2i {
        get {
            return get_region ()
        }
        
        set {
            set_region (newValue)
        }
        
    }
    
    /// The size of the grid (number of cells of size ``cellSize`` on each axis). If changed, ``update()`` needs to be called before finding the next path.
    /// 
    /// _Deprecated._ Use ``region`` instead.
    /// 
    final public var size: Vector2i {
        get {
            return get_size ()
        }
        
        set {
            set_size (newValue)
        }
        
    }
    
    /// The offset of the grid which will be applied to calculate the resulting point position returned by ``getPointPath(fromId:toId:)``. If changed, ``update()`` needs to be called before finding the next path.
    final public var offset: Vector2 {
        get {
            return get_offset ()
        }
        
        set {
            set_offset (newValue)
        }
        
    }
    
    /// The size of the point cell which will be applied to calculate the resulting point position returned by ``getPointPath(fromId:toId:)``. If changed, ``update()`` needs to be called before finding the next path.
    final public var cellSize: Vector2 {
        get {
            return get_cell_size ()
        }
        
        set {
            set_cell_size (newValue)
        }
        
    }
    
    /// Enables or disables jumping to skip up the intermediate points and speeds up the searching algorithm.
    /// 
    /// > Note: Currently, toggling it on disables the consideration of weight scaling in pathfinding.
    /// 
    final public var jumpingEnabled: Bool {
        get {
            return is_jumping_enabled ()
        }
        
        set {
            set_jumping_enabled (newValue)
        }
        
    }
    
    /// The default ``AStarGrid2D/Heuristic`` which will be used to calculate the cost between two points if ``_computeCost(fromId:toId:)`` was not overridden.
    final public var defaultComputeHeuristic: AStarGrid2D.Heuristic {
        get {
            return get_default_compute_heuristic ()
        }
        
        set {
            set_default_compute_heuristic (newValue)
        }
        
    }
    
    /// The default ``AStarGrid2D/Heuristic`` which will be used to calculate the cost between the point and the end point if ``_estimateCost(fromId:toId:)`` was not overridden.
    final public var defaultEstimateHeuristic: AStarGrid2D.Heuristic {
        get {
            return get_default_estimate_heuristic ()
        }
        
        set {
            set_default_estimate_heuristic (newValue)
        }
        
    }
    
    /// A specific ``AStarGrid2D/DiagonalMode`` mode which will force the path to avoid or accept the specified diagonals.
    final public var diagonalMode: AStarGrid2D.DiagonalMode {
        get {
            return get_diagonal_mode ()
        }
        
        set {
            set_diagonal_mode (newValue)
        }
        
    }
    
    /* Methods */
    /// Called when estimating the cost between a point and the path's ending point.
    /// 
    /// Note that this function is hidden in the default ``AStarGrid2D`` class.
    /// 
    @_documentation(visibility: public)
    open func _estimateCost (fromId: Vector2i, toId: Vector2i)-> Double {
        return 0.0
    }
    
    /// Called when computing the cost between two connected points.
    /// 
    /// Note that this function is hidden in the default ``AStarGrid2D`` class.
    /// 
    @_documentation(visibility: public)
    open func _computeCost (fromId: Vector2i, toId: Vector2i)-> Double {
        return 0.0
    }
    
    fileprivate static var method_set_region: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_region")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1763793166)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_region (_ region: Rect2i) {
        #if true
        
        var copy_region = region
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_set_region, UnsafeMutableRawPointer (mutating: handle), nil, &copy_region)
        
        #else
        
        var copy_region = region
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_region) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_set_region, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_region: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_region")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 410525958)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_region ()-> Rect2i {
        var _result: Rect2i = Rect2i ()
        gi.object_method_bind_ptrcall (AStarGrid2D.method_get_region, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_size")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1130785943)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_size (_ size: Vector2i) {
        #if true
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_set_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_set_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3690982128)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_size ()-> Vector2i {
        var _result: Vector2i = Vector2i ()
        gi.object_method_bind_ptrcall (AStarGrid2D.method_get_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_offset")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_offset (_ offset: Vector2) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_set_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_set_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_offset")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (AStarGrid2D.method_get_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_cell_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cell_size")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cell_size (_ cellSize: Vector2) {
        #if true
        
        var copy_cell_size = cellSize
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_set_cell_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cell_size)
        
        #else
        
        var copy_cell_size = cellSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cell_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_set_cell_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_cell_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cell_size")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_cell_size ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (AStarGrid2D.method_get_cell_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_in_bounds: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_in_bounds")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2522259332)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the `x` and `y` is a valid grid coordinate (id), i.e. if it is inside ``region``. Equivalent to `region.has_point(Vector2i(x, y))`.
    public final func isInBounds (x: Int32, y: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_x: Int = Int (x)
        var copy_y: Int = Int (y)
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_is_in_bounds, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_x, &copy_y)
        return _result
        #else
        
        var copy_x: Int = Int (x)
        var copy_y: Int = Int (y)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_x) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_y) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AStarGrid2D.method_is_in_bounds, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_in_boundsv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_in_boundsv")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3900751641)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the `id` vector is a valid grid coordinate, i.e. if it is inside ``region``. Equivalent to `region.has_point(id)`.
    public final func isInBoundsv (id: Vector2i)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_id = id
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_is_in_boundsv, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_id)
        return _result
        #else
        
        var copy_id = id
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_is_in_boundsv, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_dirty: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_dirty")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Indicates that the grid parameters were changed and ``update()`` needs to be called.
    public final func isDirty ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (AStarGrid2D.method_is_dirty, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_update: GDExtensionMethodBindPtr = {
        let methodName = StringName ("update")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Updates the internal state of the grid according to the parameters to prepare it to search the path. Needs to be called if parameters like ``region``, ``cellSize`` or ``offset`` are changed. ``isDirty()`` will return `true` if this is the case and this needs to be called.
    /// 
    /// > Note: All point data (solidity and weight scale) will be cleared.
    /// 
    public final func update () {
        gi.object_method_bind_ptrcall (AStarGrid2D.method_update, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_jumping_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_jumping_enabled")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_jumping_enabled (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_set_jumping_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_set_jumping_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_jumping_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_jumping_enabled")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_jumping_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (AStarGrid2D.method_is_jumping_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_diagonal_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_diagonal_mode")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1017829798)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_diagonal_mode (_ mode: AStarGrid2D.DiagonalMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_set_diagonal_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_set_diagonal_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_diagonal_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_diagonal_mode")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3129282674)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_diagonal_mode ()-> AStarGrid2D.DiagonalMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AStarGrid2D.method_get_diagonal_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AStarGrid2D.DiagonalMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_default_compute_heuristic: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_default_compute_heuristic")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1044375519)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_default_compute_heuristic (_ heuristic: AStarGrid2D.Heuristic) {
        #if true
        
        var copy_heuristic = Int64 (heuristic.rawValue)
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_set_default_compute_heuristic, UnsafeMutableRawPointer (mutating: handle), nil, &copy_heuristic)
        
        #else
        
        var copy_heuristic = Int64 (heuristic.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_heuristic) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_set_default_compute_heuristic, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_default_compute_heuristic: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_default_compute_heuristic")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2074731422)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_default_compute_heuristic ()-> AStarGrid2D.Heuristic {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AStarGrid2D.method_get_default_compute_heuristic, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AStarGrid2D.Heuristic (rawValue: _result)!
    }
    
    fileprivate static var method_set_default_estimate_heuristic: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_default_estimate_heuristic")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1044375519)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_default_estimate_heuristic (_ heuristic: AStarGrid2D.Heuristic) {
        #if true
        
        var copy_heuristic = Int64 (heuristic.rawValue)
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_set_default_estimate_heuristic, UnsafeMutableRawPointer (mutating: handle), nil, &copy_heuristic)
        
        #else
        
        var copy_heuristic = Int64 (heuristic.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_heuristic) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_set_default_estimate_heuristic, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_default_estimate_heuristic: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_default_estimate_heuristic")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2074731422)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_default_estimate_heuristic ()-> AStarGrid2D.Heuristic {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AStarGrid2D.method_get_default_estimate_heuristic, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AStarGrid2D.Heuristic (rawValue: _result)!
    }
    
    fileprivate static var method_set_point_solid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_point_solid")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1765703753)!
            }
            
        }
        
    }()
    
    /// Disables or enables the specified point for pathfinding. Useful for making an obstacle. By default, all points are enabled.
    /// 
    /// > Note: Calling ``update()`` is not needed after the call of this function.
    /// 
    public final func setPointSolid (id: Vector2i, solid: Bool = true) {
        #if true
        
        var copy_id = id
        var copy_solid = solid
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_set_point_solid, UnsafeMutableRawPointer (mutating: handle), nil, &copy_id, &copy_solid)
        
        #else
        
        var copy_id = id
        var copy_solid = solid
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_solid) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AStarGrid2D.method_set_point_solid, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_point_solid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_point_solid")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3900751641)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a point is disabled for pathfinding. By default, all points are enabled.
    public final func isPointSolid (id: Vector2i)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_id = id
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_is_point_solid, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_id)
        return _result
        #else
        
        var copy_id = id
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_is_point_solid, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_point_weight_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_point_weight_scale")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2262553149)!
            }
            
        }
        
    }()
    
    /// Sets the `weightScale` for the point with the given `id`. The `weightScale` is multiplied by the result of ``_computeCost(fromId:toId:)`` when determining the overall cost of traveling across a segment from a neighboring point to this point.
    /// 
    /// > Note: Calling ``update()`` is not needed after the call of this function.
    /// 
    public final func setPointWeightScale (id: Vector2i, weightScale: Double) {
        #if true
        
        var copy_id = id
        var copy_weight_scale = weightScale
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_set_point_weight_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_id, &copy_weight_scale)
        
        #else
        
        var copy_id = id
        var copy_weight_scale = weightScale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_id) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_weight_scale) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AStarGrid2D.method_set_point_weight_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_point_weight_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_point_weight_scale")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 719993801)!
            }
            
        }
        
    }()
    
    /// Returns the weight scale of the point associated with the given `id`.
    public final func getPointWeightScale (id: Vector2i)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_id = id
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_get_point_weight_scale, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_id)
        return _result
        #else
        
        var copy_id = id
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_get_point_weight_scale, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_fill_solid_region: GDExtensionMethodBindPtr = {
        let methodName = StringName ("fill_solid_region")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2261970063)!
            }
            
        }
        
    }()
    
    /// Fills the given `region` on the grid with the specified value for the solid flag.
    /// 
    /// > Note: Calling ``update()`` is not needed after the call of this function.
    /// 
    public final func fillSolidRegion (_ region: Rect2i, solid: Bool = true) {
        #if true
        
        var copy_region = region
        var copy_solid = solid
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_fill_solid_region, UnsafeMutableRawPointer (mutating: handle), nil, &copy_region, &copy_solid)
        
        #else
        
        var copy_region = region
        var copy_solid = solid
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_region) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_solid) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AStarGrid2D.method_fill_solid_region, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_fill_weight_scale_region: GDExtensionMethodBindPtr = {
        let methodName = StringName ("fill_weight_scale_region")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2793244083)!
            }
            
        }
        
    }()
    
    /// Fills the given `region` on the grid with the specified value for the weight scale.
    /// 
    /// > Note: Calling ``update()`` is not needed after the call of this function.
    /// 
    public final func fillWeightScaleRegion (_ region: Rect2i, weightScale: Double) {
        #if true
        
        var copy_region = region
        var copy_weight_scale = weightScale
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_fill_weight_scale_region, UnsafeMutableRawPointer (mutating: handle), nil, &copy_region, &copy_weight_scale)
        
        #else
        
        var copy_region = region
        var copy_weight_scale = weightScale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_region) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_weight_scale) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AStarGrid2D.method_fill_weight_scale_region, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears the grid and sets the ``region`` to `Rect2i(0, 0, 0, 0)`.
    public final func clear () {
        gi.object_method_bind_ptrcall (AStarGrid2D.method_clear, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_get_point_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_point_position")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 108438297)!
            }
            
        }
        
    }()
    
    /// Returns the position of the point associated with the given `id`.
    public final func getPointPosition (id: Vector2i)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if true
        
        var copy_id = id
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_get_point_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_id)
        return _result
        #else
        
        var copy_id = id
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AStarGrid2D.method_get_point_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_point_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_point_path")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 690373547)!
            }
            
        }
        
    }()
    
    /// Returns an array with the points that are in the path found by ``AStarGrid2D`` between the given points. The array is ordered from the starting point to the ending point of the path.
    /// 
    /// > Note: This method is not thread-safe. If called from a ``Thread``, it will return an empty ``PackedVector3Array`` and will print an error message.
    /// 
    public final func getPointPath (fromId: Vector2i, toId: Vector2i)-> PackedVector2Array {
        let _result: PackedVector2Array = PackedVector2Array ()
        #if true
        
        var copy_from_id = fromId
        var copy_to_id = toId
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_get_point_path, UnsafeMutableRawPointer (mutating: handle), &_result.content, &copy_from_id, &copy_to_id)
        return _result
        #else
        
        var copy_from_id = fromId
        var copy_to_id = toId
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_from_id) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_to_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AStarGrid2D.method_get_point_path, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_id_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_id_path")
        return withUnsafePointer (to: &AStarGrid2D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1989391000)!
            }
            
        }
        
    }()
    
    /// Returns an array with the IDs of the points that form the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.
    public final func getIdPath (fromId: Vector2i, toId: Vector2i)-> VariantCollection<Vector2i> {
        var _result: Int64 = 0
        #if true
        
        var copy_from_id = fromId
        var copy_to_id = toId
        
        gi.object_method_bind_ptrcall_v (AStarGrid2D.method_get_id_path, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_from_id, &copy_to_id)
        return VariantCollection<Vector2i>(content: _result)
        #else
        
        var copy_from_id = fromId
        var copy_to_id = toId
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_from_id) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_to_id) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (AStarGrid2D.method_get_id_path, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return VariantCollection<Vector2i>(content: _result)
            }
        }
        
        #endif
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_compute_cost":
                return _AStarGrid2D_proxy_compute_cost
            case "_estimate_cost":
                return _AStarGrid2D_proxy_estimate_cost
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _AStarGrid2D_proxy_compute_cost (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<AStarGrid2D>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._computeCost (fromId: args [0]!.assumingMemoryBound (to: Vector2i.self).pointee, toId: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

func _AStarGrid2D_proxy_estimate_cost (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<AStarGrid2D>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._estimateCost (fromId: args [0]!.assumingMemoryBound (to: Vector2i.self).pointee, toId: args [1]!.assumingMemoryBound (to: Vector2i.self).pointee)
    retPtr!.storeBytes (of: ret, as: Double.self)
}

