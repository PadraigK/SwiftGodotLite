// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A physics joint that restricts the movement of a 3D physics body along an axis relative to another physics body.
/// 
/// A physics joint that restricts the movement of a 3D physics body along an axis relative to another physics body. For example, Body A could be a ``StaticBody3D`` representing a piston base, while Body B could be a ``RigidBody3D`` representing the piston head, moving up and down.
open class SliderJoint3D: Joint3D {
    override open class var godotClassName: StringName { "SliderJoint3D" }
    public enum Param: Int64 {
        /// The maximum difference between the pivot points on their X axis before damping happens.
        case linearLimitUpper = 0 // PARAM_LINEAR_LIMIT_UPPER
        /// The minimum difference between the pivot points on their X axis before damping happens.
        case linearLimitLower = 1 // PARAM_LINEAR_LIMIT_LOWER
        /// A factor applied to the movement across the slider axis once the limits get surpassed. The lower, the slower the movement.
        case linearLimitSoftness = 2 // PARAM_LINEAR_LIMIT_SOFTNESS
        /// The amount of restitution once the limits are surpassed. The lower, the more velocity-energy gets lost.
        case linearLimitRestitution = 3 // PARAM_LINEAR_LIMIT_RESTITUTION
        /// The amount of damping once the slider limits are surpassed.
        case linearLimitDamping = 4 // PARAM_LINEAR_LIMIT_DAMPING
        /// A factor applied to the movement across the slider axis as long as the slider is in the limits. The lower, the slower the movement.
        case linearMotionSoftness = 5 // PARAM_LINEAR_MOTION_SOFTNESS
        /// The amount of restitution inside the slider limits.
        case linearMotionRestitution = 6 // PARAM_LINEAR_MOTION_RESTITUTION
        /// The amount of damping inside the slider limits.
        case linearMotionDamping = 7 // PARAM_LINEAR_MOTION_DAMPING
        /// A factor applied to the movement across axes orthogonal to the slider.
        case linearOrthogonalSoftness = 8 // PARAM_LINEAR_ORTHOGONAL_SOFTNESS
        /// The amount of restitution when movement is across axes orthogonal to the slider.
        case linearOrthogonalRestitution = 9 // PARAM_LINEAR_ORTHOGONAL_RESTITUTION
        /// The amount of damping when movement is across axes orthogonal to the slider.
        case linearOrthogonalDamping = 10 // PARAM_LINEAR_ORTHOGONAL_DAMPING
        /// The upper limit of rotation in the slider.
        case angularLimitUpper = 11 // PARAM_ANGULAR_LIMIT_UPPER
        /// The lower limit of rotation in the slider.
        case angularLimitLower = 12 // PARAM_ANGULAR_LIMIT_LOWER
        /// A factor applied to the all rotation once the limit is surpassed.
        case angularLimitSoftness = 13 // PARAM_ANGULAR_LIMIT_SOFTNESS
        /// The amount of restitution of the rotation when the limit is surpassed.
        case angularLimitRestitution = 14 // PARAM_ANGULAR_LIMIT_RESTITUTION
        /// The amount of damping of the rotation when the limit is surpassed.
        case angularLimitDamping = 15 // PARAM_ANGULAR_LIMIT_DAMPING
        /// A factor applied to the all rotation in the limits.
        case angularMotionSoftness = 16 // PARAM_ANGULAR_MOTION_SOFTNESS
        /// The amount of restitution of the rotation in the limits.
        case angularMotionRestitution = 17 // PARAM_ANGULAR_MOTION_RESTITUTION
        /// The amount of damping of the rotation in the limits.
        case angularMotionDamping = 18 // PARAM_ANGULAR_MOTION_DAMPING
        /// A factor applied to the all rotation across axes orthogonal to the slider.
        case angularOrthogonalSoftness = 19 // PARAM_ANGULAR_ORTHOGONAL_SOFTNESS
        /// The amount of restitution of the rotation across axes orthogonal to the slider.
        case angularOrthogonalRestitution = 20 // PARAM_ANGULAR_ORTHOGONAL_RESTITUTION
        /// The amount of damping of the rotation across axes orthogonal to the slider.
        case angularOrthogonalDamping = 21 // PARAM_ANGULAR_ORTHOGONAL_DAMPING
        /// Represents the size of the ``SliderJoint3D/Param`` enum.
        case max = 22 // PARAM_MAX
    }
    
    /* Methods */
    fileprivate static var method_set_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_param")
        return withUnsafePointer (to: &SliderJoint3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 918243683)!
            }
            
        }
        
    }()
    
    /// 
    public final func setParam (_ param: SliderJoint3D.Param, value: Double) {
        #if true
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (SliderJoint3D.method_set_param, UnsafeMutableRawPointer (mutating: handle), nil, &copy_param, &copy_value)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (SliderJoint3D.method_set_param, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_param: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_param")
        return withUnsafePointer (to: &SliderJoint3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 959925627)!
            }
            
        }
        
    }()
    
    /// 
    public final func getParam (_ param: SliderJoint3D.Param)-> Double {
        var _result: Double = 0.0
        #if true
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (SliderJoint3D.method_get_param, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_param)
        return _result
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (SliderJoint3D.method_get_param, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

