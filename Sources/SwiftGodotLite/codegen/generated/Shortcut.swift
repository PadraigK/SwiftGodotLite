// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A shortcut for binding input.
/// 
/// Shortcuts are commonly used for interacting with a ``Control`` element from an ``InputEvent`` (also known as hotkeys).
/// 
/// One shortcut can contain multiple ``InputEvent``'s, allowing the possibility of triggering one action with multiple different inputs.
/// 
open class Shortcut: Resource {
    override open class var godotClassName: StringName { "Shortcut" }
    
    /* Properties */
    
    /// The shortcut's ``InputEvent`` array.
    /// 
    /// Generally the ``InputEvent`` used is an ``InputEventKey``, though it can be any ``InputEvent``, including an ``InputEventAction``.
    /// 
    final public var events: GArray {
        get {
            return get_events ()
        }
        
        set {
            set_events (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_events: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_events")
        return withUnsafePointer (to: &Shortcut.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_events (_ events: GArray) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (Shortcut.method_set_events, UnsafeMutableRawPointer (mutating: handle), nil, &events.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &events.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Shortcut.method_set_events, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_events: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_events")
        return withUnsafePointer (to: &Shortcut.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_events ()-> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall (Shortcut.method_get_events, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_has_valid_event: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_valid_event")
        return withUnsafePointer (to: &Shortcut.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns whether ``events`` contains an ``InputEvent`` which is valid.
    public final func hasValidEvent ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Shortcut.method_has_valid_event, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_matches_event: GDExtensionMethodBindPtr = {
        let methodName = StringName ("matches_event")
        return withUnsafePointer (to: &Shortcut.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3738334489)!
            }
            
        }
        
    }()
    
    /// Returns whether any ``InputEvent`` in ``events`` equals `event`.
    public final func matchesEvent (_ event: InputEvent?)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_event_handle = event?.handle
        
        gi.object_method_bind_ptrcall_v (Shortcut.method_matches_event, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_event_handle)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: event?.handle) { p0 in
        _args.append (event == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Shortcut.method_matches_event, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_as_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_as_text")
        return withUnsafePointer (to: &Shortcut.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the shortcut's first valid ``InputEvent`` as a ``String``.
    public final func getAsText ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (Shortcut.method_get_as_text, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
}

