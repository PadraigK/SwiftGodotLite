// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Camera node, displays from a point of view.
/// 
/// ``Camera3D`` is a special node that displays what is visible from its current location. Cameras register themselves in the nearest ``Viewport`` node (when ascending the tree). Only one camera can be active per viewport. If no viewport is available ascending the tree, the camera will register in the global viewport. In other words, a camera just provides 3D display capabilities to a ``Viewport``, and, without one, a scene registered in that ``Viewport`` (or higher viewports) can't be displayed.
open class Camera3D: Node3D {
    override open class var godotClassName: StringName { "Camera3D" }
    public enum ProjectionType: Int64 {
        /// Perspective projection. Objects on the screen becomes smaller when they are far away.
        case perspective = 0 // PROJECTION_PERSPECTIVE
        /// Orthogonal projection, also known as orthographic projection. Objects remain the same size on the screen no matter how far away they are.
        case orthogonal = 1 // PROJECTION_ORTHOGONAL
        /// Frustum projection. This mode allows adjusting ``frustumOffset`` to create "tilted frustum" effects.
        case frustum = 2 // PROJECTION_FRUSTUM
    }
    
    public enum KeepAspect: Int64 {
        /// Preserves the horizontal aspect ratio; also known as Vert- scaling. This is usually the best option for projects running in portrait mode, as taller aspect ratios will benefit from a wider vertical FOV.
        case width = 0 // KEEP_WIDTH
        /// Preserves the vertical aspect ratio; also known as Hor+ scaling. This is usually the best option for projects running in landscape mode, as wider aspect ratios will automatically benefit from a wider horizontal FOV.
        case height = 1 // KEEP_HEIGHT
    }
    
    public enum DopplerTracking: Int64 {
        /// Disables [url=https://en.wikipedia.org/wiki/Doppler_effect]Doppler effect[/url] simulation (default).
        case disabled = 0 // DOPPLER_TRACKING_DISABLED
        /// Simulate [url=https://en.wikipedia.org/wiki/Doppler_effect]Doppler effect[/url] by tracking positions of objects that are changed in `_process`. Changes in the relative velocity of this camera compared to those objects affect how audio is perceived (changing the audio's ``AudioStreamPlayer3D/pitchScale``).
        case idleStep = 1 // DOPPLER_TRACKING_IDLE_STEP
        /// Simulate [url=https://en.wikipedia.org/wiki/Doppler_effect]Doppler effect[/url] by tracking positions of objects that are changed in `_physics_process`. Changes in the relative velocity of this camera compared to those objects affect how audio is perceived (changing the audio's ``AudioStreamPlayer3D/pitchScale``).
        case physicsStep = 2 // DOPPLER_TRACKING_PHYSICS_STEP
    }
    
    
    /* Properties */
    
    /// The axis to lock during ``fov``/``size`` adjustments. Can be either .keepWidth or .keepHeight.
    final public var keepAspect: Camera3D.KeepAspect {
        get {
            return get_keep_aspect_mode ()
        }
        
        set {
            set_keep_aspect_mode (newValue)
        }
        
    }
    
    /// The culling mask that describes which ``VisualInstance3D/layers`` are rendered by this camera. By default, all 20 user-visible layers are rendered.
    /// 
    /// > Note: Since the ``cullMask`` allows for 32 layers to be stored in total, there are an additional 12 layers that are only used internally by the engine and aren't exposed in the editor. Setting ``cullMask`` using a script allows you to toggle those reserved layers, which can be useful for editor plugins.
    /// 
    /// To adjust ``cullMask`` more easily using a script, use ``getCullMaskValue(layerNumber:)`` and ``setCullMaskValue(layerNumber:value:)``.
    /// 
    /// > Note: ``VoxelGI``, SDFGI and ``LightmapGI`` will always take all layers into account to determine what contributes to global illumination. If this is an issue, set ``GeometryInstance3D/giMode`` to ``GeometryInstance3D/GIMode/disabled`` for meshes and ``Light3D/lightBakeMode`` to ``Light3D/BakeMode/bakeDisabled`` for lights to exclude them from global illumination.
    /// 
    final public var cullMask: UInt32 {
        get {
            return get_cull_mask ()
        }
        
        set {
            set_cull_mask (newValue)
        }
        
    }
    
    /// The ``Environment`` to use for this camera.
    final public var environment: Environment? {
        get {
            return get_environment ()
        }
        
        set {
            set_environment (newValue)
        }
        
    }
    
    /// The ``CameraAttributes`` to use for this camera.
    final public var attributes: CameraAttributes? {
        get {
            return get_attributes ()
        }
        
        set {
            set_attributes (newValue)
        }
        
    }
    
    /// The horizontal (X) offset of the camera viewport.
    final public var hOffset: Double {
        get {
            return get_h_offset ()
        }
        
        set {
            set_h_offset (newValue)
        }
        
    }
    
    /// The vertical (Y) offset of the camera viewport.
    final public var vOffset: Double {
        get {
            return get_v_offset ()
        }
        
        set {
            set_v_offset (newValue)
        }
        
    }
    
    /// If not .disabled, this camera will simulate the [url=https://en.wikipedia.org/wiki/Doppler_effect]Doppler effect[/url] for objects changed in particular `_process` methods. See ``Camera3D/DopplerTracking`` for possible values.
    final public var dopplerTracking: Camera3D.DopplerTracking {
        get {
            return get_doppler_tracking ()
        }
        
        set {
            set_doppler_tracking (newValue)
        }
        
    }
    
    /// The camera's projection mode. In .projectionPerspective mode, objects' Z distance from the camera's local space scales their perceived size.
    final public var projection: Camera3D.ProjectionType {
        get {
            return get_projection ()
        }
        
        set {
            set_projection (newValue)
        }
        
    }
    
    /// If `true`, the ancestor ``Viewport`` is currently using this camera.
    /// 
    /// If multiple cameras are in the scene, one will always be made current. For example, if two ``Camera3D`` nodes are present in the scene and only one is current, setting one camera's ``current`` to `false` will cause the other camera to be made current.
    /// 
    final public var current: Bool {
        get {
            return is_current ()
        }
        
        set {
            set_current (newValue)
        }
        
    }
    
    /// The camera's field of view angle (in degrees). Only applicable in perspective mode. Since ``keepAspect`` locks one axis, ``fov`` sets the other axis' field of view angle.
    /// 
    /// For reference, the default vertical field of view value (`75.0`) is equivalent to a horizontal FOV of:
    /// 
    /// - ~91.31 degrees in a 4:3 viewport
    /// 
    /// - ~101.67 degrees in a 16:10 viewport
    /// 
    /// - ~107.51 degrees in a 16:9 viewport
    /// 
    /// - ~121.63 degrees in a 21:9 viewport
    /// 
    final public var fov: Double {
        get {
            return get_fov ()
        }
        
        set {
            set_fov (newValue)
        }
        
    }
    
    /// The camera's size in meters measured as the diameter of the width or height, depending on ``keepAspect``. Only applicable in orthogonal and frustum modes.
    final public var size: Double {
        get {
            return get_size ()
        }
        
        set {
            set_size (newValue)
        }
        
    }
    
    /// The camera's frustum offset. This can be changed from the default to create "tilted frustum" effects such as [url=https://zdoom.org/wiki/Y-shearing]Y-shearing[/url].
    /// 
    /// > Note: Only effective if ``projection`` is .projectionFrustum.
    /// 
    final public var frustumOffset: Vector2 {
        get {
            return get_frustum_offset ()
        }
        
        set {
            set_frustum_offset (newValue)
        }
        
    }
    
    /// The distance to the near culling boundary for this camera relative to its local Z axis. Lower values allow the camera to see objects more up close to its origin, at the cost of lower precision across the _entire_ range. Values lower than the default can lead to increased Z-fighting.
    final public var near: Double {
        get {
            return get_near ()
        }
        
        set {
            set_near (newValue)
        }
        
    }
    
    /// The distance to the far culling boundary for this camera relative to its local Z axis. Higher values allow the camera to see further away, while decreasing ``far`` can improve performance if it results in objects being partially or fully culled.
    final public var far: Double {
        get {
            return get_far ()
        }
        
        set {
            set_far (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_project_ray_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("project_ray_normal")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1718073306)!
            }
            
        }
        
    }()
    
    /// Returns a normal vector in world space, that is the result of projecting a point on the ``Viewport`` rectangle by the inverse camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.
    public final func projectRayNormal (screenPoint: Vector2)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_screen_point = screenPoint
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_project_ray_normal, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_screen_point)
        return _result
        #else
        
        var copy_screen_point = screenPoint
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_screen_point) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_project_ray_normal, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_project_local_ray_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("project_local_ray_normal")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1718073306)!
            }
            
        }
        
    }()
    
    /// Returns a normal vector from the screen point location directed along the camera. Orthogonal cameras are normalized. Perspective cameras account for perspective, screen width/height, etc.
    public final func projectLocalRayNormal (screenPoint: Vector2)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_screen_point = screenPoint
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_project_local_ray_normal, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_screen_point)
        return _result
        #else
        
        var copy_screen_point = screenPoint
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_screen_point) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_project_local_ray_normal, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_project_ray_origin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("project_ray_origin")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1718073306)!
            }
            
        }
        
    }()
    
    /// Returns a 3D position in world space, that is the result of projecting a point on the ``Viewport`` rectangle by the inverse camera projection. This is useful for casting rays in the form of (origin, normal) for object intersection or picking.
    public final func projectRayOrigin (screenPoint: Vector2)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_screen_point = screenPoint
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_project_ray_origin, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_screen_point)
        return _result
        #else
        
        var copy_screen_point = screenPoint
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_screen_point) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_project_ray_origin, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_unproject_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("unproject_position")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3758901831)!
            }
            
        }
        
    }()
    
    /// Returns the 2D coordinate in the ``Viewport`` rectangle that maps to the given 3D point in world space.
    /// 
    /// > Note: When using this to position GUI elements over a 3D viewport, use ``isPositionBehind(worldPoint:)`` to prevent them from appearing if the 3D point is behind the camera:
    /// 
    public final func unprojectPosition (worldPoint: Vector3)-> Vector2 {
        var _result: Vector2 = Vector2 ()
        #if false
        
        var copy_world_point = worldPoint
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_unproject_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_world_point)
        return _result
        #else
        
        var copy_world_point = worldPoint
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_world_point) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_unproject_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_is_position_behind: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_position_behind")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3108956480)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given position is behind the camera (the blue part of the linked diagram). [url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/camera3d_position_frustum.png]See this diagram[/url] for an overview of position query methods.
    /// 
    /// > Note: A position which returns `false` may still be outside the camera's field of view.
    /// 
    public final func isPositionBehind (worldPoint: Vector3)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_world_point = worldPoint
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_is_position_behind, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_world_point)
        return _result
        #else
        
        var copy_world_point = worldPoint
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_world_point) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_is_position_behind, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_project_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("project_position")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2171975744)!
            }
            
        }
        
    }()
    
    /// Returns the 3D point in world space that maps to the given 2D coordinate in the ``Viewport`` rectangle on a plane that is the given `zDepth` distance into the scene away from the camera.
    public final func projectPosition (screenPoint: Vector2, zDepth: Double)-> Vector3 {
        var _result: Vector3 = Vector3 ()
        #if false
        
        var copy_screen_point = screenPoint
        var copy_z_depth = zDepth
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_project_position, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_screen_point, &copy_z_depth)
        return _result
        #else
        
        var copy_screen_point = screenPoint
        var copy_z_depth = zDepth
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_screen_point) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_z_depth) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Camera3D.method_project_position, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return _result
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_perspective: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_perspective")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2385087082)!
            }
            
        }
        
    }()
    
    /// Sets the camera projection to perspective mode (see .projectionPerspective), by specifying a `fov` (field of view) angle in degrees, and the `zNear` and `zFar` clip planes in world space units.
    public final func setPerspective (fov: Double, zNear: Double, zFar: Double) {
        #if false
        
        var copy_fov = fov
        var copy_z_near = zNear
        var copy_z_far = zFar
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_perspective, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fov, &copy_z_near, &copy_z_far)
        
        #else
        
        var copy_fov = fov
        var copy_z_near = zNear
        var copy_z_far = zFar
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fov) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_z_near) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_z_far) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (Camera3D.method_set_perspective, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_orthogonal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_orthogonal")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2385087082)!
            }
            
        }
        
    }()
    
    /// Sets the camera projection to orthogonal mode (see .projectionOrthogonal), by specifying a `size`, and the `zNear` and `zFar` clip planes in world space units. (As a hint, 2D games often use this projection, with values specified in pixels.)
    public final func setOrthogonal (size: Double, zNear: Double, zFar: Double) {
        #if false
        
        var copy_size = size
        var copy_z_near = zNear
        var copy_z_far = zFar
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_orthogonal, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size, &copy_z_near, &copy_z_far)
        
        #else
        
        var copy_size = size
        var copy_z_near = zNear
        var copy_z_far = zFar
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_z_near) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_z_far) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (Camera3D.method_set_orthogonal, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_frustum: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_frustum")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 354890663)!
            }
            
        }
        
    }()
    
    /// Sets the camera projection to frustum mode (see .projectionFrustum), by specifying a `size`, an `offset`, and the `zNear` and `zFar` clip planes in world space units. See also ``frustumOffset``.
    public final func setFrustum (size: Double, offset: Vector2, zNear: Double, zFar: Double) {
        #if false
        
        var copy_size = size
        var copy_offset = offset
        var copy_z_near = zNear
        var copy_z_far = zFar
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_frustum, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size, &copy_offset, &copy_z_near, &copy_z_far)
        
        #else
        
        var copy_size = size
        var copy_offset = offset
        var copy_z_near = zNear
        var copy_z_far = zFar
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_offset) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_z_near) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_z_far) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (Camera3D.method_set_frustum, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_make_current: GDExtensionMethodBindPtr = {
        let methodName = StringName ("make_current")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Makes this camera the current camera for the ``Viewport`` (see class description). If the camera node is outside the scene tree, it will attempt to become current once it's added.
    public final func makeCurrent () {
        gi.object_method_bind_ptrcall (Camera3D.method_make_current, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_clear_current: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear_current")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3216645846)!
            }
            
        }
        
    }()
    
    /// If this is the current camera, remove it from being current. If `enableNext` is `true`, request to make the next camera current, if any.
    public final func clearCurrent (enableNext: Bool = true) {
        #if false
        
        var copy_enable_next = enableNext
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_clear_current, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable_next)
        
        #else
        
        var copy_enable_next = enableNext
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable_next) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_clear_current, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_current: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_current")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_current (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_current, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_current, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_current: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_current")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_current ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (Camera3D.method_is_current, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_camera_transform: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_camera_transform")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3229777777)!
            }
            
        }
        
    }()
    
    /// Returns the transform of the camera plus the vertical (``vOffset``) and horizontal (``hOffset``) offsets; and any other adjustments made to the position and orientation of the camera by subclassed cameras such as ``XRCamera3D``.
    public final func getCameraTransform ()-> Transform3D {
        var _result: Transform3D = Transform3D ()
        gi.object_method_bind_ptrcall (Camera3D.method_get_camera_transform, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_camera_projection: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_camera_projection")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2910717950)!
            }
            
        }
        
    }()
    
    /// Returns the projection matrix that this camera uses to render to its associated viewport. The camera must be part of the scene tree to function.
    public final func getCameraProjection ()-> Projection {
        var _result: Projection = Projection ()
        gi.object_method_bind_ptrcall (Camera3D.method_get_camera_projection, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_fov: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_fov")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_fov ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Camera3D.method_get_fov, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_frustum_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_frustum_offset")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_frustum_offset ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (Camera3D.method_get_frustum_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Camera3D.method_get_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_far: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_far")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_far ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Camera3D.method_get_far, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_near: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_near")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_near ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Camera3D.method_get_near, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_fov: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_fov")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_fov (_ fov: Double) {
        #if false
        
        var copy_fov = fov
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_fov, UnsafeMutableRawPointer (mutating: handle), nil, &copy_fov)
        
        #else
        
        var copy_fov = fov
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_fov) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_fov, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_frustum_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_frustum_offset")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 743155724)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_frustum_offset (_ offset: Vector2) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_frustum_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_frustum_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_size")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_size (_ size: Double) {
        #if false
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_far: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_far")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_far (_ far: Double) {
        #if false
        
        var copy_far = far
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_far, UnsafeMutableRawPointer (mutating: handle), nil, &copy_far)
        
        #else
        
        var copy_far = far
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_far) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_far, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_near: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_near")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_near (_ near: Double) {
        #if false
        
        var copy_near = near
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_near, UnsafeMutableRawPointer (mutating: handle), nil, &copy_near)
        
        #else
        
        var copy_near = near
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_near) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_near, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_projection: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_projection")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2624185235)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_projection ()-> Camera3D.ProjectionType {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Camera3D.method_get_projection, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Camera3D.ProjectionType (rawValue: _result)!
    }
    
    fileprivate static var method_set_projection: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_projection")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4218540108)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_projection (_ mode: Camera3D.ProjectionType) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_projection, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_projection, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_h_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_h_offset")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_h_offset (_ offset: Double) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_h_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_h_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_h_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_h_offset")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_h_offset ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Camera3D.method_get_h_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_v_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_v_offset")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_v_offset (_ offset: Double) {
        #if false
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_v_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_v_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_v_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_v_offset")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_v_offset ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Camera3D.method_get_v_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_cull_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cull_mask")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cull_mask (_ mask: UInt32) {
        #if false
        
        var copy_mask: Int = Int (mask)
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_cull_mask, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mask)
        
        #else
        
        var copy_mask: Int = Int (mask)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mask) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_cull_mask, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_cull_mask: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cull_mask")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_cull_mask ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (Camera3D.method_get_cull_mask, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_environment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_environment")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4143518816)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_environment (_ env: Environment?) {
        #if false
        
        var copy_env_handle = env?.handle
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_environment, UnsafeMutableRawPointer (mutating: handle), nil, &copy_env_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: env?.handle) { p0 in
        _args.append (env == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_environment, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_environment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_environment")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3082064660)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_environment ()-> Environment? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Camera3D.method_get_environment, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_attributes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_attributes")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2817810567)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_attributes (_ env: CameraAttributes?) {
        #if false
        
        var copy_env_handle = env?.handle
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_attributes, UnsafeMutableRawPointer (mutating: handle), nil, &copy_env_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: env?.handle) { p0 in
        _args.append (env == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_attributes, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_attributes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_attributes")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3921283215)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_attributes ()-> CameraAttributes? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Camera3D.method_get_attributes, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_keep_aspect_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_keep_aspect_mode")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740651252)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_keep_aspect_mode (_ mode: Camera3D.KeepAspect) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_keep_aspect_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_keep_aspect_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_keep_aspect_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_keep_aspect_mode")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2790278316)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_keep_aspect_mode ()-> Camera3D.KeepAspect {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Camera3D.method_get_keep_aspect_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Camera3D.KeepAspect (rawValue: _result)!
    }
    
    fileprivate static var method_set_doppler_tracking: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_doppler_tracking")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3109431270)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_doppler_tracking (_ mode: Camera3D.DopplerTracking) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_doppler_tracking, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_set_doppler_tracking, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_doppler_tracking: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_doppler_tracking")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1584483649)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_doppler_tracking ()-> Camera3D.DopplerTracking {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (Camera3D.method_get_doppler_tracking, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Camera3D.DopplerTracking (rawValue: _result)!
    }
    
    fileprivate static var method_get_frustum: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_frustum")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns the camera's frustum planes in world space units as an array of ``Plane``s in the following order: near, far, left, top, right, bottom. Not to be confused with ``frustumOffset``.
    public final func getFrustum ()-> VariantCollection<Plane> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (Camera3D.method_get_frustum, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return VariantCollection<Plane>(content: _result)
    }
    
    fileprivate static var method_is_position_in_frustum: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_position_in_frustum")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3108956480)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given position is inside the camera's frustum (the green part of the linked diagram). [url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/camera3d_position_frustum.png]See this diagram[/url] for an overview of position query methods.
    public final func isPositionInFrustum (worldPoint: Vector3)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_world_point = worldPoint
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_is_position_in_frustum, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_world_point)
        return _result
        #else
        
        var copy_world_point = worldPoint
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_world_point) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_is_position_in_frustum, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_camera_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_camera_rid")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns the camera's RID from the ``RenderingServer``.
    public final func getCameraRid ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (Camera3D.method_get_camera_rid, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_pyramid_shape_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pyramid_shape_rid")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 529393457)!
            }
            
        }
        
    }()
    
    /// Returns the RID of a pyramid shape encompassing the camera's view frustum, ignoring the camera's near plane. The tip of the pyramid represents the position of the camera.
    public final func getPyramidShapeRid ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (Camera3D.method_get_pyramid_shape_rid, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_cull_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cull_mask_value")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 300928843)!
            }
            
        }
        
    }()
    
    /// Based on `value`, enables or disables the specified layer in the ``cullMask``, given a `layerNumber` between 1 and 20.
    public final func setCullMaskValue (layerNumber: Int32, value: Bool) {
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_set_cull_mask_value, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer_number, &copy_value)
        
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var copy_value = value
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (Camera3D.method_set_cull_mask_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_cull_mask_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cull_mask_value")
        return withUnsafePointer (to: &Camera3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns whether or not the specified layer of the ``cullMask`` is enabled, given a `layerNumber` between 1 and 20.
    public final func getCullMaskValue (layerNumber: Int32)-> Bool {
        var _result: Bool = false
        #if false
        
        var copy_layer_number: Int = Int (layerNumber)
        
        gi.object_method_bind_ptrcall_v (Camera3D.method_get_cull_mask_value, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_layer_number)
        return _result
        #else
        
        var copy_layer_number: Int = Int (layerNumber)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_layer_number) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Camera3D.method_get_cull_mask_value, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

