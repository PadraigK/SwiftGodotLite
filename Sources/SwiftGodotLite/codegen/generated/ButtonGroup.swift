// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A group of buttons that doesn't allow more than one button to be pressed at a time.
/// 
/// A group of ``BaseButton``-derived buttons. The buttons in a ``ButtonGroup`` are treated like radio buttons: No more than one button can be pressed at a time. Some types of buttons (such as ``CheckBox``) may have a special appearance in this state.
/// 
/// Every member of a ``ButtonGroup`` should have ``BaseButton/toggleMode`` set to `true`.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``pressed``
open class ButtonGroup: Resource {
    override open class var godotClassName: StringName { "ButtonGroup" }
    
    /* Properties */
    
    /// If `true`, it is possible to unpress all buttons in this ``ButtonGroup``.
    final public var allowUnpress: Bool {
        get {
            return is_allow_unpress ()
        }
        
        set {
            set_allow_unpress (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_get_pressed_button: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pressed_button")
        return withUnsafePointer (to: &ButtonGroup.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3886434893)!
            }
            
        }
        
    }()
    
    /// Returns the current pressed button.
    public final func getPressedButton ()-> BaseButton? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (ButtonGroup.method_get_pressed_button, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_buttons: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_buttons")
        return withUnsafePointer (to: &ButtonGroup.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2915620761)!
            }
            
        }
        
    }()
    
    /// Returns an ``GArray`` of ``Button``s who have this as their ``ButtonGroup`` (see ``BaseButton/buttonGroup``).
    public final func getButtons ()-> ObjectCollection<BaseButton> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (ButtonGroup.method_get_buttons, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return ObjectCollection<BaseButton>(content: _result)
    }
    
    fileprivate static var method_set_allow_unpress: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_allow_unpress")
        return withUnsafePointer (to: &ButtonGroup.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_allow_unpress (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (ButtonGroup.method_set_allow_unpress, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ButtonGroup.method_set_allow_unpress, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_allow_unpress: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_allow_unpress")
        return withUnsafePointer (to: &ButtonGroup.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_allow_unpress ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (ButtonGroup.method_is_allow_unpress, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ button: BaseButton) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                var ptr_0: UnsafeMutableRawPointer?
                args [0].toType (Variant.GType.object, dest: &ptr_0)
                let arg_0 = lookupLiveObject (handleAddress: ptr_0!) as? BaseButton ?? BaseButton (nativeHandle: ptr_0!)
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when one of the buttons of the group is pressed.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.pressed.connect { button in
    ///    print ("caught signal")
    /// }
    /// ```
    public var pressed: Signal1 { Signal1 (target: self, signalName: "pressed") }
    
}

