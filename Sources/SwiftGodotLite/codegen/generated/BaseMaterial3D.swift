// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract base class for defining the 3D rendering properties of meshes.
/// 
/// This class serves as a default material with a wide variety of rendering features and properties without the need to write shader code. See the tutorial below for details.
open class BaseMaterial3D: Material {
    override open class var godotClassName: StringName { "BaseMaterial3D" }
    public enum TextureParam: Int64 {
        /// Texture specifying per-pixel color.
        case albedo = 0 // TEXTURE_ALBEDO
        /// Texture specifying per-pixel metallic value.
        case metallic = 1 // TEXTURE_METALLIC
        /// Texture specifying per-pixel roughness value.
        case roughness = 2 // TEXTURE_ROUGHNESS
        /// Texture specifying per-pixel emission color.
        case emission = 3 // TEXTURE_EMISSION
        /// Texture specifying per-pixel normal vector.
        case normal = 4 // TEXTURE_NORMAL
        /// Texture specifying per-pixel rim value.
        case rim = 5 // TEXTURE_RIM
        /// Texture specifying per-pixel clearcoat value.
        case clearcoat = 6 // TEXTURE_CLEARCOAT
        /// Texture specifying per-pixel flowmap direction for use with ``anisotropy``.
        case flowmap = 7 // TEXTURE_FLOWMAP
        /// Texture specifying per-pixel ambient occlusion value.
        case ambientOcclusion = 8 // TEXTURE_AMBIENT_OCCLUSION
        /// Texture specifying per-pixel height.
        case heightmap = 9 // TEXTURE_HEIGHTMAP
        /// Texture specifying per-pixel subsurface scattering.
        case subsurfaceScattering = 10 // TEXTURE_SUBSURFACE_SCATTERING
        /// Texture specifying per-pixel transmittance for subsurface scattering.
        case subsurfaceTransmittance = 11 // TEXTURE_SUBSURFACE_TRANSMITTANCE
        /// Texture specifying per-pixel backlight color.
        case backlight = 12 // TEXTURE_BACKLIGHT
        /// Texture specifying per-pixel refraction strength.
        case refraction = 13 // TEXTURE_REFRACTION
        /// Texture specifying per-pixel detail mask blending value.
        case detailMask = 14 // TEXTURE_DETAIL_MASK
        /// Texture specifying per-pixel detail color.
        case detailAlbedo = 15 // TEXTURE_DETAIL_ALBEDO
        /// Texture specifying per-pixel detail normal.
        case detailNormal = 16 // TEXTURE_DETAIL_NORMAL
        /// Texture holding ambient occlusion, roughness, and metallic.
        case orm = 17 // TEXTURE_ORM
        /// Represents the size of the ``BaseMaterial3D/TextureParam`` enum.
        case max = 18 // TEXTURE_MAX
    }
    
    public enum TextureFilter: Int64 {
        /// The texture filter reads from the nearest pixel only. The simplest and fastest method of filtering, but the texture will look pixelized.
        case nearest = 0 // TEXTURE_FILTER_NEAREST
        /// The texture filter blends between the nearest 4 pixels. Use this when you want to avoid a pixelated style, but do not want mipmaps.
        case linear = 1 // TEXTURE_FILTER_LINEAR
        /// The texture filter reads from the nearest pixel in the nearest mipmap. The fastest way to read from textures with mipmaps.
        case nearestWithMipmaps = 2 // TEXTURE_FILTER_NEAREST_WITH_MIPMAPS
        /// The texture filter blends between the nearest 4 pixels and between the nearest 2 mipmaps. Use this for most cases as mipmaps are important to smooth out pixels that are far from the camera.
        case linearWithMipmaps = 3 // TEXTURE_FILTER_LINEAR_WITH_MIPMAPS
        /// The texture filter reads from the nearest pixel, but selects a mipmap based on the angle between the surface and the camera view. This reduces artifacts on surfaces that are almost in line with the camera. The anisotropic filtering level can be changed by adjusting ``ProjectSettings/rendering/textures/defaultFilters/anisotropicFilteringLevel``.
        case nearestWithMipmapsAnisotropic = 4 // TEXTURE_FILTER_NEAREST_WITH_MIPMAPS_ANISOTROPIC
        /// The texture filter blends between the nearest 4 pixels and selects a mipmap based on the angle between the surface and the camera view. This reduces artifacts on surfaces that are almost in line with the camera. This is the slowest of the filtering options, but results in the highest quality texturing. The anisotropic filtering level can be changed by adjusting ``ProjectSettings/rendering/textures/defaultFilters/anisotropicFilteringLevel``.
        case linearWithMipmapsAnisotropic = 5 // TEXTURE_FILTER_LINEAR_WITH_MIPMAPS_ANISOTROPIC
        /// Represents the size of the ``BaseMaterial3D/TextureFilter`` enum.
        case max = 6 // TEXTURE_FILTER_MAX
    }
    
    public enum DetailUV: Int64 {
        /// Use `UV` with the detail texture.
        case detailUv1 = 0 // DETAIL_UV_1
        /// Use `UV2` with the detail texture.
        case detailUv2 = 1 // DETAIL_UV_2
    }
    
    public enum Transparency: Int64 {
        /// The material will not use transparency. This is the fastest to render.
        case disabled = 0 // TRANSPARENCY_DISABLED
        /// The material will use the texture's alpha values for transparency. This is the slowest to render, and disables shadow casting.
        case alpha = 1 // TRANSPARENCY_ALPHA
        /// The material will cut off all values below a threshold, the rest will remain opaque. The opaque portions will be rendered in the depth prepass. This is faster to render than alpha blending, but slower than opaque rendering. This also supports casting shadows.
        case alphaScissor = 2 // TRANSPARENCY_ALPHA_SCISSOR
        /// The material will cut off all values below a spatially-deterministic threshold, the rest will remain opaque. This is faster to render than alpha blending, but slower than opaque rendering. This also supports casting shadows. Alpha hashing is suited for hair rendering.
        case alphaHash = 3 // TRANSPARENCY_ALPHA_HASH
        /// The material will use the texture's alpha value for transparency, but will discard fragments with an alpha of less than 0.99 during the depth prepass and fragments with an alpha less than 0.1 during the shadow pass. This also supports casting shadows.
        case alphaDepthPrePass = 4 // TRANSPARENCY_ALPHA_DEPTH_PRE_PASS
        /// Represents the size of the ``BaseMaterial3D/Transparency`` enum.
        case max = 5 // TRANSPARENCY_MAX
    }
    
    public enum ShadingMode: Int64 {
        /// The object will not receive shadows. This is the fastest to render, but it disables all interactions with lights.
        case unshaded = 0 // SHADING_MODE_UNSHADED
        /// The object will be shaded per pixel. Useful for realistic shading effects.
        case perPixel = 1 // SHADING_MODE_PER_PIXEL
        /// The object will be shaded per vertex. Useful when you want cheaper shaders and do not care about visual quality. Not implemented yet (this mode will act like .perPixel).
        case perVertex = 2 // SHADING_MODE_PER_VERTEX
        /// Represents the size of the ``BaseMaterial3D/ShadingMode`` enum.
        case max = 3 // SHADING_MODE_MAX
    }
    
    public enum Feature: Int64 {
        /// Constant for setting ``emissionEnabled``.
        case emission = 0 // FEATURE_EMISSION
        /// Constant for setting ``normalEnabled``.
        case normalMapping = 1 // FEATURE_NORMAL_MAPPING
        /// Constant for setting ``rimEnabled``.
        case rim = 2 // FEATURE_RIM
        /// Constant for setting ``clearcoatEnabled``.
        case clearcoat = 3 // FEATURE_CLEARCOAT
        /// Constant for setting ``anisotropyEnabled``.
        case anisotropy = 4 // FEATURE_ANISOTROPY
        /// Constant for setting ``aoEnabled``.
        case ambientOcclusion = 5 // FEATURE_AMBIENT_OCCLUSION
        /// Constant for setting ``heightmapEnabled``.
        case heightMapping = 6 // FEATURE_HEIGHT_MAPPING
        /// Constant for setting ``subsurfScatterEnabled``.
        case subsurfaceScattering = 7 // FEATURE_SUBSURFACE_SCATTERING
        /// Constant for setting ``subsurfScatterTransmittanceEnabled``.
        case subsurfaceTransmittance = 8 // FEATURE_SUBSURFACE_TRANSMITTANCE
        /// Constant for setting ``backlightEnabled``.
        case backlight = 9 // FEATURE_BACKLIGHT
        /// Constant for setting ``refractionEnabled``.
        case refraction = 10 // FEATURE_REFRACTION
        /// Constant for setting ``detailEnabled``.
        case detail = 11 // FEATURE_DETAIL
        /// Represents the size of the ``BaseMaterial3D/Feature`` enum.
        case max = 12 // FEATURE_MAX
    }
    
    public enum BlendMode: Int64 {
        /// Default blend mode. The color of the object is blended over the background based on the object's alpha value.
        case mix = 0 // BLEND_MODE_MIX
        /// The color of the object is added to the background.
        case add = 1 // BLEND_MODE_ADD
        /// The color of the object is subtracted from the background.
        case sub = 2 // BLEND_MODE_SUB
        /// The color of the object is multiplied by the background.
        case mul = 3 // BLEND_MODE_MUL
    }
    
    public enum AlphaAntiAliasing: Int64 {
        /// Disables Alpha AntiAliasing for the material.
        case off = 0 // ALPHA_ANTIALIASING_OFF
        /// Enables AlphaToCoverage. Alpha values in the material are passed to the AntiAliasing sample mask.
        case alphaToCoverage = 1 // ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE
        /// Enables AlphaToCoverage and forces all non-zero alpha values to `1`. Alpha values in the material are passed to the AntiAliasing sample mask.
        case alphaToCoverageAndToOne = 2 // ALPHA_ANTIALIASING_ALPHA_TO_COVERAGE_AND_TO_ONE
    }
    
    public enum DepthDrawMode: Int64 {
        /// Default depth draw mode. Depth is drawn only for opaque objects during the opaque prepass (if any) and during the opaque pass.
        case opaqueOnly = 0 // DEPTH_DRAW_OPAQUE_ONLY
        /// Objects will write to depth during the opaque and the transparent passes. Transparent objects that are close to the camera may obscure other transparent objects behind them.
        /// 
        /// > Note: This does not influence whether transparent objects are included in the depth prepass or not. For that, see ``BaseMaterial3D/Transparency``.
        /// 
        case always = 1 // DEPTH_DRAW_ALWAYS
        /// Objects will not write their depth to the depth buffer, even during the depth prepass (if enabled).
        case disabled = 2 // DEPTH_DRAW_DISABLED
    }
    
    public enum CullMode: Int64 {
        /// Default cull mode. The back of the object is culled when not visible. Back face triangles will be culled when facing the camera. This results in only the front side of triangles being drawn. For closed-surface meshes, this means that only the exterior of the mesh will be visible.
        case back = 0 // CULL_BACK
        /// Front face triangles will be culled when facing the camera. This results in only the back side of triangles being drawn. For closed-surface meshes, this means that the interior of the mesh will be drawn instead of the exterior.
        case front = 1 // CULL_FRONT
        /// No face culling is performed; both the front face and back face will be visible.
        case disabled = 2 // CULL_DISABLED
    }
    
    public enum Flags: Int64 {
        /// Disables the depth test, so this object is drawn on top of all others drawn before it. This puts the object in the transparent draw pass where it is sorted based on distance to camera. Objects drawn after it in the draw order may cover it. This also disables writing to depth.
        case disableDepthTest = 0 // FLAG_DISABLE_DEPTH_TEST
        /// Set `ALBEDO` to the per-vertex color specified in the mesh.
        case albedoFromVertexColor = 1 // FLAG_ALBEDO_FROM_VERTEX_COLOR
        /// Vertex colors are considered to be stored in sRGB color space and are converted to linear color space during rendering. See also ``vertexColorIsSrgb``.
        /// 
        /// > Note: Only effective when using the Forward+ and Mobile rendering methods.
        /// 
        case srgbVertexColor = 2 // FLAG_SRGB_VERTEX_COLOR
        /// Uses point size to alter the size of primitive points. Also changes the albedo texture lookup to use `POINT_COORD` instead of `UV`.
        case usePointSize = 3 // FLAG_USE_POINT_SIZE
        /// Object is scaled by depth so that it always appears the same size on screen.
        case fixedSize = 4 // FLAG_FIXED_SIZE
        /// Shader will keep the scale set for the mesh. Otherwise the scale is lost when billboarding. Only applies when ``billboardMode`` is .billboardEnabled.
        case billboardKeepScale = 5 // FLAG_BILLBOARD_KEEP_SCALE
        /// Use triplanar texture lookup for all texture lookups that would normally use `UV`.
        case uv1UseTriplanar = 6 // FLAG_UV1_USE_TRIPLANAR
        /// Use triplanar texture lookup for all texture lookups that would normally use `UV2`.
        case uv2UseTriplanar = 7 // FLAG_UV2_USE_TRIPLANAR
        /// Use triplanar texture lookup for all texture lookups that would normally use `UV`.
        case uv1UseWorldTriplanar = 8 // FLAG_UV1_USE_WORLD_TRIPLANAR
        /// Use triplanar texture lookup for all texture lookups that would normally use `UV2`.
        case uv2UseWorldTriplanar = 9 // FLAG_UV2_USE_WORLD_TRIPLANAR
        /// Use `UV2` coordinates to look up from the ``aoTexture``.
        case aoOnUv2 = 10 // FLAG_AO_ON_UV2
        /// Use `UV2` coordinates to look up from the ``emissionTexture``.
        case emissionOnUv2 = 11 // FLAG_EMISSION_ON_UV2
        /// Forces the shader to convert albedo from sRGB space to linear space. See also ``albedoTextureForceSrgb``.
        case albedoTextureForceSrgb = 12 // FLAG_ALBEDO_TEXTURE_FORCE_SRGB
        /// Disables receiving shadows from other objects.
        case dontReceiveShadows = 13 // FLAG_DONT_RECEIVE_SHADOWS
        /// Disables receiving ambient light.
        case disableAmbientLight = 14 // FLAG_DISABLE_AMBIENT_LIGHT
        /// Enables the shadow to opacity feature.
        case useShadowToOpacity = 15 // FLAG_USE_SHADOW_TO_OPACITY
        /// Enables the texture to repeat when UV coordinates are outside the 0-1 range. If using one of the linear filtering modes, this can result in artifacts at the edges of a texture when the sampler filters across the edges of the texture.
        case useTextureRepeat = 16 // FLAG_USE_TEXTURE_REPEAT
        /// Invert values read from a depth texture to convert them to height values (heightmap).
        case invertHeightmap = 17 // FLAG_INVERT_HEIGHTMAP
        /// Enables the skin mode for subsurface scattering which is used to improve the look of subsurface scattering when used for human skin.
        case subsurfaceModeSkin = 18 // FLAG_SUBSURFACE_MODE_SKIN
        /// Enables parts of the shader required for ``GPUParticles3D`` trails to function. This also requires using a mesh with appropriate skinning, such as ``RibbonTrailMesh`` or ``TubeTrailMesh``. Enabling this feature outside of materials used in ``GPUParticles3D`` meshes will break material rendering.
        case particleTrailsMode = 19 // FLAG_PARTICLE_TRAILS_MODE
        /// Enables multichannel signed distance field rendering shader.
        case albedoTextureMsdf = 20 // FLAG_ALBEDO_TEXTURE_MSDF
        /// Disables receiving depth-based or volumetric fog.
        case disableFog = 21 // FLAG_DISABLE_FOG
        /// Represents the size of the ``BaseMaterial3D/Flags`` enum.
        case max = 22 // FLAG_MAX
    }
    
    public enum DiffuseMode: Int64 {
        /// Default diffuse scattering algorithm.
        case burley = 0 // DIFFUSE_BURLEY
        /// Diffuse scattering ignores roughness.
        case lambert = 1 // DIFFUSE_LAMBERT
        /// Extends Lambert to cover more than 90 degrees when roughness increases.
        case lambertWrap = 2 // DIFFUSE_LAMBERT_WRAP
        /// Uses a hard cut for lighting, with smoothing affected by roughness.
        case toon = 3 // DIFFUSE_TOON
    }
    
    public enum SpecularMode: Int64 {
        /// Default specular blob.
        case schlickGgx = 0 // SPECULAR_SCHLICK_GGX
        /// Toon blob which changes size based on roughness.
        case toon = 1 // SPECULAR_TOON
        /// No specular blob. This is slightly faster to render than other specular modes.
        case disabled = 2 // SPECULAR_DISABLED
    }
    
    public enum BillboardMode: Int64 {
        /// Billboard mode is disabled.
        case disabled = 0 // BILLBOARD_DISABLED
        /// The object's Z axis will always face the camera.
        case enabled = 1 // BILLBOARD_ENABLED
        /// The object's X axis will always face the camera.
        case fixedY = 2 // BILLBOARD_FIXED_Y
        /// Used for particle systems when assigned to ``GPUParticles3D`` and ``CPUParticles3D`` nodes (flipbook animation). Enables `particles_anim_*` properties.
        /// 
        /// The ``ParticleProcessMaterial/animSpeedMin`` or ``CPUParticles3D/animSpeedMin`` should also be set to a value bigger than zero for the animation to play.
        /// 
        case particles = 3 // BILLBOARD_PARTICLES
    }
    
    public enum TextureChannel: Int64 {
        /// Used to read from the red channel of a texture.
        case red = 0 // TEXTURE_CHANNEL_RED
        /// Used to read from the green channel of a texture.
        case green = 1 // TEXTURE_CHANNEL_GREEN
        /// Used to read from the blue channel of a texture.
        case blue = 2 // TEXTURE_CHANNEL_BLUE
        /// Used to read from the alpha channel of a texture.
        case alpha = 3 // TEXTURE_CHANNEL_ALPHA
        /// Used to read from the linear (non-perceptual) average of the red, green and blue channels of a texture.
        case grayscale = 4 // TEXTURE_CHANNEL_GRAYSCALE
    }
    
    public enum EmissionOperator: Int64 {
        /// Adds the emission color to the color from the emission texture.
        case add = 0 // EMISSION_OP_ADD
        /// Multiplies the emission color by the color from the emission texture.
        case multiply = 1 // EMISSION_OP_MULTIPLY
    }
    
    public enum DistanceFadeMode: Int64 {
        /// Do not use distance fade.
        case disabled = 0 // DISTANCE_FADE_DISABLED
        /// Smoothly fades the object out based on each pixel's distance from the camera using the alpha channel.
        case pixelAlpha = 1 // DISTANCE_FADE_PIXEL_ALPHA
        /// Smoothly fades the object out based on each pixel's distance from the camera using a dithering approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware, this can be faster than .distanceFadePixelAlpha.
        case pixelDither = 2 // DISTANCE_FADE_PIXEL_DITHER
        /// Smoothly fades the object out based on the object's distance from the camera using a dithering approach. Dithering discards pixels based on a set pattern to smoothly fade without enabling transparency. On certain hardware, this can be faster than .distanceFadePixelAlpha and .distanceFadePixelDither.
        case objectDither = 3 // DISTANCE_FADE_OBJECT_DITHER
    }
    
    
    /* Properties */
    
    /// The material's transparency mode. Some transparency modes will disable shadow casting. Any transparency mode other than .disabled has a greater performance impact compared to opaque rendering. See also ``blendMode``.
    final public var transparency: BaseMaterial3D.Transparency {
        get {
            return get_transparency ()
        }
        
        set {
            set_transparency (newValue)
        }
        
    }
    
    /// Threshold at which the alpha scissor will discard values. Higher values will result in more pixels being discarded. If the material becomes too opaque at a distance, try increasing ``alphaScissorThreshold``. If the material disappears at a distance, try decreasing ``alphaScissorThreshold``.
    final public var alphaScissorThreshold: Double {
        get {
            return get_alpha_scissor_threshold ()
        }
        
        set {
            set_alpha_scissor_threshold (newValue)
        }
        
    }
    
    /// The hashing scale for Alpha Hash. Recommended values between `0` and `2`.
    final public var alphaHashScale: Double {
        get {
            return get_alpha_hash_scale ()
        }
        
        set {
            set_alpha_hash_scale (newValue)
        }
        
    }
    
    /// The type of alpha antialiasing to apply. See ``BaseMaterial3D/AlphaAntiAliasing``.
    final public var alphaAntialiasingMode: BaseMaterial3D.AlphaAntiAliasing {
        get {
            return get_alpha_antialiasing ()
        }
        
        set {
            set_alpha_antialiasing (newValue)
        }
        
    }
    
    /// Threshold at which antialiasing will be applied on the alpha channel.
    final public var alphaAntialiasingEdge: Double {
        get {
            return get_alpha_antialiasing_edge ()
        }
        
        set {
            set_alpha_antialiasing_edge (newValue)
        }
        
    }
    
    /// The material's blend mode.
    /// 
    /// > Note: Values other than `Mix` force the object into the transparent pipeline. See ``BaseMaterial3D/BlendMode``.
    /// 
    final public var blendMode: BaseMaterial3D.BlendMode {
        get {
            return get_blend_mode ()
        }
        
        set {
            set_blend_mode (newValue)
        }
        
    }
    
    /// Determines which side of the triangle to cull depending on whether the triangle faces towards or away from the camera. See ``BaseMaterial3D/CullMode``.
    final public var cullMode: BaseMaterial3D.CullMode {
        get {
            return get_cull_mode ()
        }
        
        set {
            set_cull_mode (newValue)
        }
        
    }
    
    /// Determines when depth rendering takes place. See ``BaseMaterial3D/DepthDrawMode``. See also ``transparency``.
    final public var depthDrawMode: BaseMaterial3D.DepthDrawMode {
        get {
            return get_depth_draw_mode ()
        }
        
        set {
            set_depth_draw_mode (newValue)
        }
        
    }
    
    /// If `true`, depth testing is disabled and the object will be drawn in render order.
    final public var noDepthTest: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 0)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 0)!, newValue)
        }
        
    }
    
    /// Sets whether the shading takes place, per-pixel, per-vertex or unshaded. Per-vertex lighting is faster, making it the best choice for mobile applications, however it looks considerably worse than per-pixel. Unshaded rendering is the fastest, but disables all interactions with lights.
    /// 
    /// > Note: Setting the shading mode vertex shading currently has no effect, as vertex shading is not implemented yet.
    /// 
    final public var shadingMode: BaseMaterial3D.ShadingMode {
        get {
            return get_shading_mode ()
        }
        
        set {
            set_shading_mode (newValue)
        }
        
    }
    
    /// The algorithm used for diffuse light scattering. See ``BaseMaterial3D/DiffuseMode``.
    final public var diffuseMode: BaseMaterial3D.DiffuseMode {
        get {
            return get_diffuse_mode ()
        }
        
        set {
            set_diffuse_mode (newValue)
        }
        
    }
    
    /// The method for rendering the specular blob. See ``BaseMaterial3D/SpecularMode``.
    /// 
    /// > Note: ``specularMode`` only applies to the specular blob. It does not affect specular reflections from the sky, screen-space reflections, ``VoxelGI``, SDFGI or ``ReflectionProbe``s. To disable reflections from these sources as well, set ``metallicSpecular`` to `0.0` instead.
    /// 
    final public var specularMode: BaseMaterial3D.SpecularMode {
        get {
            return get_specular_mode ()
        }
        
        set {
            set_specular_mode (newValue)
        }
        
    }
    
    /// If `true`, the object receives no ambient light.
    final public var disableAmbientLight: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 14)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 14)!, newValue)
        }
        
    }
    
    /// If `true`, the object will not be affected by fog (neither volumetric nor depth fog). This is useful for unshaded or transparent materials (e.g. particles), which without this setting will be affected even if fully transparent.
    final public var disableFog: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 21)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 21)!, newValue)
        }
        
    }
    
    /// If `true`, the vertex color is used as albedo color.
    final public var vertexColorUseAsAlbedo: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 1)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 1)!, newValue)
        }
        
    }
    
    /// If `true`, vertex colors are considered to be stored in sRGB color space and are converted to linear color space during rendering. If `false`, vertex colors are considered to be stored in linear color space and are rendered as-is. See also ``albedoTextureForceSrgb``.
    /// 
    /// > Note: Only effective when using the Forward+ and Mobile rendering methods, not Compatibility.
    /// 
    final public var vertexColorIsSrgb: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 2)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 2)!, newValue)
        }
        
    }
    
    /// The material's base color.
    /// 
    /// > Note: If ``detailEnabled`` is `true` and a ``detailAlbedo`` texture is specified, ``albedoColor`` will _not_ modulate the detail texture. This can be used to color partial areas of a material by not specifying an albedo texture and using a transparent ``detailAlbedo`` texture instead.
    /// 
    final public var albedoColor: Color {
        get {
            return get_albedo ()
        }
        
        set {
            set_albedo (newValue)
        }
        
    }
    
    /// Texture to multiply by ``albedoColor``. Used for basic texturing of objects.
    /// 
    /// If the texture appears unexpectedly too dark or too bright, check ``albedoTextureForceSrgb``.
    /// 
    final public var albedoTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 0)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 0)!, newValue)
        }
        
    }
    
    /// If `true`, forces a conversion of the ``albedoTexture`` from sRGB color space to linear color space. See also ``vertexColorIsSrgb``.
    /// 
    /// This should only be enabled when needed (typically when using a ``ViewportTexture`` as ``albedoTexture``). If ``albedoTextureForceSrgb`` is `true` when it shouldn't be, the texture will appear to be too dark. If ``albedoTextureForceSrgb`` is `false` when it shouldn't be, the texture will appear to be too bright.
    /// 
    final public var albedoTextureForceSrgb: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 12)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 12)!, newValue)
        }
        
    }
    
    /// Enables multichannel signed distance field rendering shader. Use ``msdfPixelRange`` and ``msdfOutlineSize`` to configure MSDF parameters.
    final public var albedoTextureMsdf: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 20)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 20)!, newValue)
        }
        
    }
    
    /// The Occlusion/Roughness/Metallic texture to use. This is a more efficient replacement of ``aoTexture``, ``roughnessTexture`` and ``metallicTexture`` in ``ORMMaterial3D``. Ambient occlusion is stored in the red channel. Roughness map is stored in the green channel. Metallic map is stored in the blue channel. The alpha channel is ignored.
    final public var ormTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 17)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 17)!, newValue)
        }
        
    }
    
    /// A high value makes the material appear more like a metal. Non-metals use their albedo as the diffuse color and add diffuse to the specular reflection. With non-metals, the reflection appears on top of the albedo color. Metals use their albedo as a multiplier to the specular reflection and set the diffuse color to black resulting in a tinted reflection. Materials work better when fully metal or fully non-metal, values between `0` and `1` should only be used for blending between metal and non-metal sections. To alter the amount of reflection use ``roughness``.
    final public var metallic: Double {
        get {
            return get_metallic ()
        }
        
        set {
            set_metallic (newValue)
        }
        
    }
    
    /// Adjusts the strength of specular reflections. Specular reflections are composed of scene reflections and the specular lobe which is the bright spot that is reflected from light sources. When set to `0.0`, no specular reflections will be visible. This differs from the .specularDisabled ``BaseMaterial3D/SpecularMode`` as .specularDisabled only applies to the specular lobe from the light source.
    /// 
    /// > Note: Unlike ``metallic``, this is not energy-conserving, so it should be left at `0.5` in most cases. See also ``roughness``.
    /// 
    final public var metallicSpecular: Double {
        get {
            return get_specular ()
        }
        
        set {
            set_specular (newValue)
        }
        
    }
    
    /// Texture used to specify metallic for an object. This is multiplied by ``metallic``.
    final public var metallicTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 1)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 1)!, newValue)
        }
        
    }
    
    /// Specifies the channel of the ``metallicTexture`` in which the metallic information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.
    final public var metallicTextureChannel: BaseMaterial3D.TextureChannel {
        get {
            return get_metallic_texture_channel ()
        }
        
        set {
            set_metallic_texture_channel (newValue)
        }
        
    }
    
    /// Surface reflection. A value of `0` represents a perfect mirror while a value of `1` completely blurs the reflection. See also ``metallic``.
    final public var roughness: Double {
        get {
            return get_roughness ()
        }
        
        set {
            set_roughness (newValue)
        }
        
    }
    
    /// Texture used to control the roughness per-pixel. Multiplied by ``roughness``.
    final public var roughnessTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 2)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Specifies the channel of the ``roughnessTexture`` in which the roughness information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.
    final public var roughnessTextureChannel: BaseMaterial3D.TextureChannel {
        get {
            return get_roughness_texture_channel ()
        }
        
        set {
            set_roughness_texture_channel (newValue)
        }
        
    }
    
    /// If `true`, the body emits light. Emitting light makes the object appear brighter. The object can also cast light on other objects if a ``VoxelGI``, SDFGI, or ``LightmapGI`` is used and this object is used in baked lighting.
    final public var emissionEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 0)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 0)!, newValue)
        }
        
    }
    
    /// The emitted light's color. See ``emissionEnabled``.
    final public var emission: Color {
        get {
            return get_emission ()
        }
        
        set {
            set_emission (newValue)
        }
        
    }
    
    /// Multiplier for emitted light. See ``emissionEnabled``.
    final public var emissionEnergyMultiplier: Double {
        get {
            return get_emission_energy_multiplier ()
        }
        
        set {
            set_emission_energy_multiplier (newValue)
        }
        
    }
    
    /// Luminance of emitted light, measured in nits (candela per square meter). Only available when ``ProjectSettings/rendering/lightsAndShadows/usePhysicalLightUnits`` is enabled. The default is roughly equivalent to an indoor lightbulb.
    final public var emissionIntensity: Double {
        get {
            return get_emission_intensity ()
        }
        
        set {
            set_emission_intensity (newValue)
        }
        
    }
    
    /// Sets how ``emission`` interacts with ``emissionTexture``. Can either add or multiply. See ``BaseMaterial3D/EmissionOperator`` for options.
    final public var emissionOperator: BaseMaterial3D.EmissionOperator {
        get {
            return get_emission_operator ()
        }
        
        set {
            set_emission_operator (newValue)
        }
        
    }
    
    /// Use `UV2` to read from the ``emissionTexture``.
    final public var emissionOnUv2: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 11)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 11)!, newValue)
        }
        
    }
    
    /// Texture that specifies how much surface emits light at a given point.
    final public var emissionTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 3)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 3)!, newValue)
        }
        
    }
    
    /// If `true`, normal mapping is enabled. This has a slight performance cost, especially on mobile GPUs.
    final public var normalEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 1)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 1)!, newValue)
        }
        
    }
    
    /// The strength of the normal map's effect.
    final public var normalScale: Double {
        get {
            return get_normal_scale ()
        }
        
        set {
            set_normal_scale (newValue)
        }
        
    }
    
    /// Texture used to specify the normal at a given pixel. The ``normalTexture`` only uses the red and green channels; the blue and alpha channels are ignored. The normal read from ``normalTexture`` is oriented around the surface normal provided by the ``Mesh``.
    /// 
    /// > Note: The mesh must have both normals and tangents defined in its vertex data. Otherwise, the normal map won't render correctly and will only appear to darken the whole surface. If creating geometry with ``SurfaceTool``, you can use ``SurfaceTool/generateNormals(flip:)`` and ``SurfaceTool/generateTangents()`` to automatically generate normals and tangents respectively.
    /// 
    /// > Note: Godot expects the normal map to use X+, Y+, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines.
    /// 
    /// > Note: If ``detailEnabled`` is `true`, the ``detailAlbedo`` texture is drawn _below_ the ``normalTexture``. To display a normal map _above_ the ``detailAlbedo`` texture, use ``detailNormal`` instead.
    /// 
    final public var normalTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 4)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 4)!, newValue)
        }
        
    }
    
    /// If `true`, rim effect is enabled. Rim lighting increases the brightness at glancing angles on an object.
    /// 
    /// > Note: Rim lighting is not visible if the material's ``shadingMode`` is .unshaded.
    /// 
    final public var rimEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 2)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 2)!, newValue)
        }
        
    }
    
    /// Sets the strength of the rim lighting effect.
    final public var rim: Double {
        get {
            return get_rim ()
        }
        
        set {
            set_rim (newValue)
        }
        
    }
    
    /// The amount of to blend light and albedo color when rendering rim effect. If `0` the light color is used, while `1` means albedo color is used. An intermediate value generally works best.
    final public var rimTint: Double {
        get {
            return get_rim_tint ()
        }
        
        set {
            set_rim_tint (newValue)
        }
        
    }
    
    /// Texture used to set the strength of the rim lighting effect per-pixel. Multiplied by ``rim``.
    final public var rimTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 5)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 5)!, newValue)
        }
        
    }
    
    /// If `true`, clearcoat rendering is enabled. Adds a secondary transparent pass to the lighting calculation resulting in an added specular blob. This makes materials appear as if they have a clear layer on them that can be either glossy or rough.
    /// 
    /// > Note: Clearcoat rendering is not visible if the material's ``shadingMode`` is .unshaded.
    /// 
    final public var clearcoatEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 3)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 3)!, newValue)
        }
        
    }
    
    /// Sets the strength of the clearcoat effect. Setting to `0` looks the same as disabling the clearcoat effect.
    final public var clearcoat: Double {
        get {
            return get_clearcoat ()
        }
        
        set {
            set_clearcoat (newValue)
        }
        
    }
    
    /// Sets the roughness of the clearcoat pass. A higher value results in a rougher clearcoat while a lower value results in a smoother clearcoat.
    final public var clearcoatRoughness: Double {
        get {
            return get_clearcoat_roughness ()
        }
        
        set {
            set_clearcoat_roughness (newValue)
        }
        
    }
    
    /// Texture that defines the strength of the clearcoat effect and the glossiness of the clearcoat. Strength is specified in the red channel while glossiness is specified in the green channel.
    final public var clearcoatTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 6)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 6)!, newValue)
        }
        
    }
    
    /// If `true`, anisotropy is enabled. Anisotropy changes the shape of the specular blob and aligns it to tangent space. This is useful for brushed aluminium and hair reflections.
    /// 
    /// > Note: Mesh tangents are needed for anisotropy to work. If the mesh does not contain tangents, the anisotropy effect will appear broken.
    /// 
    /// > Note: Material anisotropy should not to be confused with anisotropic texture filtering, which can be enabled by setting ``textureFilter`` to .linearWithMipmapsAnisotropic.
    /// 
    final public var anisotropyEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 4)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 4)!, newValue)
        }
        
    }
    
    /// The strength of the anisotropy effect. This is multiplied by ``anisotropyFlowmap``'s alpha channel if a texture is defined there and the texture contains an alpha channel.
    final public var anisotropy: Double {
        get {
            return get_anisotropy ()
        }
        
        set {
            set_anisotropy (newValue)
        }
        
    }
    
    /// Texture that offsets the tangent map for anisotropy calculations and optionally controls the anisotropy effect (if an alpha channel is present). The flowmap texture is expected to be a derivative map, with the red channel representing distortion on the X axis and green channel representing distortion on the Y axis. Values below 0.5 will result in negative distortion, whereas values above 0.5 will result in positive distortion.
    /// 
    /// If present, the texture's alpha channel will be used to multiply the strength of the ``anisotropy`` effect. Fully opaque pixels will keep the anisotropy effect's original strength while fully transparent pixels will disable the anisotropy effect entirely. The flowmap texture's blue channel is ignored.
    /// 
    final public var anisotropyFlowmap: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 7)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 7)!, newValue)
        }
        
    }
    
    /// If `true`, ambient occlusion is enabled. Ambient occlusion darkens areas based on the ``aoTexture``.
    final public var aoEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 5)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 5)!, newValue)
        }
        
    }
    
    /// Amount that ambient occlusion affects lighting from lights. If `0`, ambient occlusion only affects ambient light. If `1`, ambient occlusion affects lights just as much as it affects ambient light. This can be used to impact the strength of the ambient occlusion effect, but typically looks unrealistic.
    final public var aoLightAffect: Double {
        get {
            return get_ao_light_affect ()
        }
        
        set {
            set_ao_light_affect (newValue)
        }
        
    }
    
    /// Texture that defines the amount of ambient occlusion for a given point on the object.
    final public var aoTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 8)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 8)!, newValue)
        }
        
    }
    
    /// If `true`, use `UV2` coordinates to look up from the ``aoTexture``.
    final public var aoOnUv2: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 10)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 10)!, newValue)
        }
        
    }
    
    /// Specifies the channel of the ``aoTexture`` in which the ambient occlusion information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored metallic in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.
    final public var aoTextureChannel: BaseMaterial3D.TextureChannel {
        get {
            return get_ao_texture_channel ()
        }
        
        set {
            set_ao_texture_channel (newValue)
        }
        
    }
    
    /// If `true`, height mapping is enabled (also called "parallax mapping" or "depth mapping"). See also ``normalEnabled``. Height mapping is a demanding feature on the GPU, so it should only be used on materials where it makes a significant visual difference.
    /// 
    /// > Note: Height mapping is not supported if triplanar mapping is used on the same material. The value of ``heightmapEnabled`` will be ignored if ``uv1Triplanar`` is enabled.
    /// 
    final public var heightmapEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 6)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 6)!, newValue)
        }
        
    }
    
    /// The heightmap scale to use for the parallax effect (see ``heightmapEnabled``). The default value is tuned so that the highest point (value = 255) appears to be 5 cm higher than the lowest point (value = 0). Higher values result in a deeper appearance, but may result in artifacts appearing when looking at the material from oblique angles, especially when the camera moves. Negative values can be used to invert the parallax effect, but this is different from inverting the texture using ``heightmapFlipTexture`` as the material will also appear to be "closer" to the camera. In most cases, ``heightmapScale`` should be kept to a positive value.
    /// 
    /// > Note: If the height map effect looks strange regardless of this value, try adjusting ``heightmapFlipBinormal`` and ``heightmapFlipTangent``. See also ``heightmapTexture`` for recommendations on authoring heightmap textures, as the way the heightmap texture is authored affects how ``heightmapScale`` behaves.
    /// 
    final public var heightmapScale: Double {
        get {
            return get_heightmap_scale ()
        }
        
        set {
            set_heightmap_scale (newValue)
        }
        
    }
    
    /// If `true`, uses parallax occlusion mapping to represent depth in the material instead of simple offset mapping (see ``heightmapEnabled``). This results in a more convincing depth effect, but is much more expensive on the GPU. Only enable this on materials where it makes a significant visual difference.
    final public var heightmapDeepParallax: Bool {
        get {
            return is_heightmap_deep_parallax_enabled ()
        }
        
        set {
            set_heightmap_deep_parallax (newValue)
        }
        
    }
    
    /// The number of layers to use for parallax occlusion mapping when the camera is far away from the material. Higher values result in a more convincing depth effect, especially in materials that have steep height changes. Higher values have a significant cost on the GPU, so it should only be increased on materials where it makes a significant visual difference.
    /// 
    /// > Note: Only effective if ``heightmapDeepParallax`` is `true`.
    /// 
    final public var heightmapMinLayers: Int32 {
        get {
            return get_heightmap_deep_parallax_min_layers ()
        }
        
        set {
            set_heightmap_deep_parallax_min_layers (newValue)
        }
        
    }
    
    /// The number of layers to use for parallax occlusion mapping when the camera is up close to the material. Higher values result in a more convincing depth effect, especially in materials that have steep height changes. Higher values have a significant cost on the GPU, so it should only be increased on materials where it makes a significant visual difference.
    /// 
    /// > Note: Only effective if ``heightmapDeepParallax`` is `true`.
    /// 
    final public var heightmapMaxLayers: Int32 {
        get {
            return get_heightmap_deep_parallax_max_layers ()
        }
        
        set {
            set_heightmap_deep_parallax_max_layers (newValue)
        }
        
    }
    
    /// If `true`, flips the mesh's tangent vectors when interpreting the height map. If the heightmap effect looks strange when the camera moves (even with a reasonable ``heightmapScale``), try setting this to `true`.
    final public var heightmapFlipTangent: Bool {
        get {
            return get_heightmap_deep_parallax_flip_tangent ()
        }
        
        set {
            set_heightmap_deep_parallax_flip_tangent (newValue)
        }
        
    }
    
    /// If `true`, flips the mesh's binormal vectors when interpreting the height map. If the heightmap effect looks strange when the camera moves (even with a reasonable ``heightmapScale``), try setting this to `true`.
    final public var heightmapFlipBinormal: Bool {
        get {
            return get_heightmap_deep_parallax_flip_binormal ()
        }
        
        set {
            set_heightmap_deep_parallax_flip_binormal (newValue)
        }
        
    }
    
    /// The texture to use as a height map. See also ``heightmapEnabled``.
    /// 
    /// For best results, the texture should be normalized (with ``heightmapScale`` reduced to compensate). In [url=https://gimp.org]GIMP[/url], this can be done using **Colors > Auto > Equalize**. If the texture only uses a small part of its available range, the parallax effect may look strange, especially when the camera moves.
    /// 
    /// > Note: To reduce memory usage and improve loading times, you may be able to use a lower-resolution heightmap texture as most heightmaps are only comprised of low-frequency data.
    /// 
    final public var heightmapTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 9)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 9)!, newValue)
        }
        
    }
    
    /// If `true`, interprets the height map texture as a depth map, with brighter values appearing to be "lower" in altitude compared to darker values.
    /// 
    /// This can be enabled for compatibility with some materials authored for Godot 3.x. This is not necessary if the Invert import option was used to invert the depth map in Godot 3.x, in which case ``heightmapFlipTexture`` should remain `false`.
    /// 
    final public var heightmapFlipTexture: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 17)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 17)!, newValue)
        }
        
    }
    
    /// If `true`, subsurface scattering is enabled. Emulates light that penetrates an object's surface, is scattered, and then emerges. Subsurface scattering quality is controlled by ``ProjectSettings/rendering/environment/subsurfaceScattering/subsurfaceScatteringQuality``.
    final public var subsurfScatterEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 7)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 7)!, newValue)
        }
        
    }
    
    /// The strength of the subsurface scattering effect. The depth of the effect is also controlled by ``ProjectSettings/rendering/environment/subsurfaceScattering/subsurfaceScatteringScale``, which is set globally.
    final public var subsurfScatterStrength: Double {
        get {
            return get_subsurface_scattering_strength ()
        }
        
        set {
            set_subsurface_scattering_strength (newValue)
        }
        
    }
    
    /// If `true`, subsurface scattering will use a special mode optimized for the color and density of human skin, such as boosting the intensity of the red channel in subsurface scattering.
    final public var subsurfScatterSkinMode: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 18)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 18)!, newValue)
        }
        
    }
    
    /// Texture used to control the subsurface scattering strength. Stored in the red texture channel. Multiplied by ``subsurfScatterStrength``.
    final public var subsurfScatterTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 10)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 10)!, newValue)
        }
        
    }
    
    /// If `true`, enables subsurface scattering transmittance. Only effective if ``subsurfScatterEnabled`` is `true`. See also ``backlightEnabled``.
    final public var subsurfScatterTransmittanceEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 8)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 8)!, newValue)
        }
        
    }
    
    /// The color to multiply the subsurface scattering transmittance effect with. Ignored if ``subsurfScatterSkinMode`` is `true`.
    final public var subsurfScatterTransmittanceColor: Color {
        get {
            return get_transmittance_color ()
        }
        
        set {
            set_transmittance_color (newValue)
        }
        
    }
    
    /// The texture to use for multiplying the intensity of the subsurface scattering transmitteance intensity. See also ``subsurfScatterTexture``. Ignored if ``subsurfScatterSkinMode`` is `true`.
    final public var subsurfScatterTransmittanceTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 11)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 11)!, newValue)
        }
        
    }
    
    /// The depth of the subsurface scattering transmittance effect.
    final public var subsurfScatterTransmittanceDepth: Double {
        get {
            return get_transmittance_depth ()
        }
        
        set {
            set_transmittance_depth (newValue)
        }
        
    }
    
    /// The intensity of the subsurface scattering transmittance effect.
    final public var subsurfScatterTransmittanceBoost: Double {
        get {
            return get_transmittance_boost ()
        }
        
        set {
            set_transmittance_boost (newValue)
        }
        
    }
    
    /// If `true`, the backlight effect is enabled. See also ``subsurfScatterTransmittanceEnabled``.
    final public var backlightEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 9)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 9)!, newValue)
        }
        
    }
    
    /// The color used by the backlight effect. Represents the light passing through an object.
    final public var backlight: Color {
        get {
            return get_backlight ()
        }
        
        set {
            set_backlight (newValue)
        }
        
    }
    
    /// Texture used to control the backlight effect per-pixel. Added to ``backlight``.
    final public var backlightTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 12)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 12)!, newValue)
        }
        
    }
    
    /// If `true`, the refraction effect is enabled. Distorts transparency based on light from behind the object.
    final public var refractionEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 10)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 10)!, newValue)
        }
        
    }
    
    /// The strength of the refraction effect.
    final public var refractionScale: Double {
        get {
            return get_refraction ()
        }
        
        set {
            set_refraction (newValue)
        }
        
    }
    
    /// Texture that controls the strength of the refraction per-pixel. Multiplied by ``refractionScale``.
    final public var refractionTexture: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 13)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 13)!, newValue)
        }
        
    }
    
    /// Specifies the channel of the ``refractionTexture`` in which the refraction information is stored. This is useful when you store the information for multiple effects in a single texture. For example if you stored refraction in the red channel, roughness in the blue, and ambient occlusion in the green you could reduce the number of textures you use.
    final public var refractionTextureChannel: BaseMaterial3D.TextureChannel {
        get {
            return get_refraction_texture_channel ()
        }
        
        set {
            set_refraction_texture_channel (newValue)
        }
        
    }
    
    /// If `true`, enables the detail overlay. Detail is a second texture that gets mixed over the surface of the object based on ``detailMask`` and ``detailAlbedo``'s alpha channel. This can be used to add variation to objects, or to blend between two different albedo/normal textures.
    final public var detailEnabled: Bool {
        get {
            return get_feature (BaseMaterial3D.Feature (rawValue: 11)!)
        }
        
        set {
            set_feature (BaseMaterial3D.Feature (rawValue: 11)!, newValue)
        }
        
    }
    
    /// Texture used to specify how the detail textures get blended with the base textures. ``detailMask`` can be used together with ``detailAlbedo``'s alpha channel (if any).
    final public var detailMask: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 14)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 14)!, newValue)
        }
        
    }
    
    /// Specifies how the ``detailAlbedo`` should blend with the current `ALBEDO`. See ``BaseMaterial3D/BlendMode`` for options.
    final public var detailBlendMode: BaseMaterial3D.BlendMode {
        get {
            return get_detail_blend_mode ()
        }
        
        set {
            set_detail_blend_mode (newValue)
        }
        
    }
    
    /// Specifies whether to use `UV` or `UV2` for the detail layer. See ``BaseMaterial3D/DetailUV`` for options.
    final public var detailUvLayer: BaseMaterial3D.DetailUV {
        get {
            return get_detail_uv ()
        }
        
        set {
            set_detail_uv (newValue)
        }
        
    }
    
    /// Texture that specifies the color of the detail overlay. ``detailAlbedo``'s alpha channel is used as a mask, even when the material is opaque. To use a dedicated texture as a mask, see ``detailMask``.
    /// 
    /// > Note: ``detailAlbedo`` is _not_ modulated by ``albedoColor``.
    /// 
    final public var detailAlbedo: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 15)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 15)!, newValue)
        }
        
    }
    
    /// Texture that specifies the per-pixel normal of the detail overlay. The ``detailNormal`` texture only uses the red and green channels; the blue and alpha channels are ignored. The normal read from ``detailNormal`` is oriented around the surface normal provided by the ``Mesh``.
    /// 
    /// > Note: Godot expects the normal map to use X+, Y+, and Z+ coordinates. See [url=http://wiki.polycount.com/wiki/Normal_Map_Technical_Details#Common_Swizzle_Coordinates]this page[/url] for a comparison of normal map coordinates expected by popular engines.
    /// 
    final public var detailNormal: Texture2D? {
        get {
            return get_texture (BaseMaterial3D.TextureParam (rawValue: 16)!)
        }
        
        set {
            set_texture (BaseMaterial3D.TextureParam (rawValue: 16)!, newValue)
        }
        
    }
    
    /// How much to scale the `UV` coordinates. This is multiplied by `UV` in the vertex function. The Z component is used when ``uv1Triplanar`` is enabled, but it is not used anywhere else.
    final public var uv1Scale: Vector3 {
        get {
            return get_uv1_scale ()
        }
        
        set {
            set_uv1_scale (newValue)
        }
        
    }
    
    /// How much to offset the `UV` coordinates. This amount will be added to `UV` in the vertex function. This can be used to offset a texture. The Z component is used when ``uv1Triplanar`` is enabled, but it is not used anywhere else.
    final public var uv1Offset: Vector3 {
        get {
            return get_uv1_offset ()
        }
        
        set {
            set_uv1_offset (newValue)
        }
        
    }
    
    /// If `true`, instead of using `UV` textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing.
    final public var uv1Triplanar: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 6)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 6)!, newValue)
        }
        
    }
    
    /// A lower number blends the texture more softly while a higher number blends the texture more sharply.
    /// 
    /// > Note: ``uv1TriplanarSharpness`` is clamped between `0.0` and `150.0` (inclusive) as values outside that range can look broken depending on the mesh.
    /// 
    final public var uv1TriplanarSharpness: Double {
        get {
            return get_uv1_triplanar_blend_sharpness ()
        }
        
        set {
            set_uv1_triplanar_blend_sharpness (newValue)
        }
        
    }
    
    /// If `true`, triplanar mapping for `UV` is calculated in world space rather than object local space. See also ``uv1Triplanar``.
    final public var uv1WorldTriplanar: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 8)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 8)!, newValue)
        }
        
    }
    
    /// How much to scale the `UV2` coordinates. This is multiplied by `UV2` in the vertex function. The Z component is used when ``uv2Triplanar`` is enabled, but it is not used anywhere else.
    final public var uv2Scale: Vector3 {
        get {
            return get_uv2_scale ()
        }
        
        set {
            set_uv2_scale (newValue)
        }
        
    }
    
    /// How much to offset the `UV2` coordinates. This amount will be added to `UV2` in the vertex function. This can be used to offset a texture. The Z component is used when ``uv2Triplanar`` is enabled, but it is not used anywhere else.
    final public var uv2Offset: Vector3 {
        get {
            return get_uv2_offset ()
        }
        
        set {
            set_uv2_offset (newValue)
        }
        
    }
    
    /// If `true`, instead of using `UV2` textures will use a triplanar texture lookup to determine how to apply textures. Triplanar uses the orientation of the object's surface to blend between texture coordinates. It reads from the source texture 3 times, once for each axis and then blends between the results based on how closely the pixel aligns with each axis. This is often used for natural features to get a realistic blend of materials. Because triplanar texturing requires many more texture reads per-pixel it is much slower than normal UV texturing. Additionally, because it is blending the texture between the three axes, it is unsuitable when you are trying to achieve crisp texturing.
    final public var uv2Triplanar: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 7)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 7)!, newValue)
        }
        
    }
    
    /// A lower number blends the texture more softly while a higher number blends the texture more sharply.
    /// 
    /// > Note: ``uv2TriplanarSharpness`` is clamped between `0.0` and `150.0` (inclusive) as values outside that range can look broken depending on the mesh.
    /// 
    final public var uv2TriplanarSharpness: Double {
        get {
            return get_uv2_triplanar_blend_sharpness ()
        }
        
        set {
            set_uv2_triplanar_blend_sharpness (newValue)
        }
        
    }
    
    /// If `true`, triplanar mapping for `UV2` is calculated in world space rather than object local space. See also ``uv2Triplanar``.
    final public var uv2WorldTriplanar: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 9)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 9)!, newValue)
        }
        
    }
    
    /// Filter flags for the texture. See ``BaseMaterial3D/TextureFilter`` for options.
    /// 
    /// > Note: ``heightmapTexture`` is always sampled with linear filtering, even if nearest-neighbor filtering is selected here. This is to ensure the heightmap effect looks as intended. If you need sharper height transitions between pixels, resize the heightmap texture in an image editor with nearest-neighbor filtering.
    /// 
    final public var textureFilter: BaseMaterial3D.TextureFilter {
        get {
            return get_texture_filter ()
        }
        
        set {
            set_texture_filter (newValue)
        }
        
    }
    
    /// Repeat flags for the texture. See ``BaseMaterial3D/TextureFilter`` for options.
    final public var textureRepeat: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 16)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 16)!, newValue)
        }
        
    }
    
    /// If `true`, the object receives no shadow that would otherwise be cast onto it.
    final public var disableReceiveShadows: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 13)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 13)!, newValue)
        }
        
    }
    
    /// If `true`, enables the "shadow to opacity" render mode where lighting modifies the alpha so shadowed areas are opaque and non-shadowed areas are transparent. Useful for overlaying shadows onto a camera feed in AR.
    final public var shadowToOpacity: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 15)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 15)!, newValue)
        }
        
    }
    
    /// Controls how the object faces the camera. See ``BaseMaterial3D/BillboardMode``.
    /// 
    /// > Note: Billboard mode is not suitable for VR because the left-right vector of the camera is not horizontal when the screen is attached to your head instead of on the table. See [url=https://github.com/godotengine/godot/issues/41567]GitHub issue #41567[/url] for details.
    /// 
    final public var billboardMode: BaseMaterial3D.BillboardMode {
        get {
            return get_billboard_mode ()
        }
        
        set {
            set_billboard_mode (newValue)
        }
        
    }
    
    /// If `true`, the shader will keep the scale set for the mesh. Otherwise, the scale is lost when billboarding. Only applies when ``billboardMode`` is not .billboardDisabled.
    final public var billboardKeepScale: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 5)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 5)!, newValue)
        }
        
    }
    
    /// The number of horizontal frames in the particle sprite sheet. Only enabled when using .billboardParticles. See ``billboardMode``.
    final public var particlesAnimHFrames: Int32 {
        get {
            return get_particles_anim_h_frames ()
        }
        
        set {
            set_particles_anim_h_frames (newValue)
        }
        
    }
    
    /// The number of vertical frames in the particle sprite sheet. Only enabled when using .billboardParticles. See ``billboardMode``.
    final public var particlesAnimVFrames: Int32 {
        get {
            return get_particles_anim_v_frames ()
        }
        
        set {
            set_particles_anim_v_frames (newValue)
        }
        
    }
    
    /// If `true`, particle animations are looped. Only enabled when using .billboardParticles. See ``billboardMode``.
    final public var particlesAnimLoop: Bool {
        get {
            return get_particles_anim_loop ()
        }
        
        set {
            set_particles_anim_loop (newValue)
        }
        
    }
    
    /// If `true`, enables the vertex grow setting. This can be used to create mesh-based outlines using a second material pass and its ``cullMode`` set to .cullFront. See also ``growAmount``.
    /// 
    /// > Note: Vertex growth cannot create new vertices, which means that visible gaps may occur in sharp corners. This can be alleviated by designing the mesh to use smooth normals exclusively using [url=https://wiki.polycount.com/wiki/Face_weighted_normals]face weighted normals[/url] in the 3D authoring software. In this case, grow will be able to join every outline together, just like in the original mesh.
    /// 
    final public var grow: Bool {
        get {
            return is_grow_enabled ()
        }
        
        set {
            set_grow_enabled (newValue)
        }
        
    }
    
    /// Grows object vertices in the direction of their normals. Only effective if ``grow`` is `true`.
    final public var growAmount: Double {
        get {
            return get_grow ()
        }
        
        set {
            set_grow (newValue)
        }
        
    }
    
    /// If `true`, the object is rendered at the same size regardless of distance.
    final public var fixedSize: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 4)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 4)!, newValue)
        }
        
    }
    
    /// If `true`, render point size can be changed.
    /// 
    /// > Note: This is only effective for objects whose geometry is point-based rather than triangle-based. See also ``pointSize``.
    /// 
    final public var usePointSize: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 3)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 3)!, newValue)
        }
        
    }
    
    /// The point size in pixels. See ``usePointSize``.
    final public var pointSize: Double {
        get {
            return get_point_size ()
        }
        
        set {
            set_point_size (newValue)
        }
        
    }
    
    /// If `true`, enables parts of the shader required for ``GPUParticles3D`` trails to function. This also requires using a mesh with appropriate skinning, such as ``RibbonTrailMesh`` or ``TubeTrailMesh``. Enabling this feature outside of materials used in ``GPUParticles3D`` meshes will break material rendering.
    final public var useParticleTrails: Bool {
        get {
            return get_flag (BaseMaterial3D.Flags (rawValue: 19)!)
        }
        
        set {
            set_flag (BaseMaterial3D.Flags (rawValue: 19)!, newValue)
        }
        
    }
    
    /// If `true`, the proximity fade effect is enabled. The proximity fade effect fades out each pixel based on its distance to another object.
    final public var proximityFadeEnabled: Bool {
        get {
            return is_proximity_fade_enabled ()
        }
        
        set {
            set_proximity_fade_enabled (newValue)
        }
        
    }
    
    /// Distance over which the fade effect takes place. The larger the distance the longer it takes for an object to fade.
    final public var proximityFadeDistance: Double {
        get {
            return get_proximity_fade_distance ()
        }
        
        set {
            set_proximity_fade_distance (newValue)
        }
        
    }
    
    /// The width of the range around the shape between the minimum and maximum representable signed distance.
    final public var msdfPixelRange: Double {
        get {
            return get_msdf_pixel_range ()
        }
        
        set {
            set_msdf_pixel_range (newValue)
        }
        
    }
    
    /// The width of the shape outline.
    final public var msdfOutlineSize: Double {
        get {
            return get_msdf_outline_size ()
        }
        
        set {
            set_msdf_outline_size (newValue)
        }
        
    }
    
    /// Specifies which type of fade to use. Can be any of the ``BaseMaterial3D/DistanceFadeMode``s.
    final public var distanceFadeMode: BaseMaterial3D.DistanceFadeMode {
        get {
            return get_distance_fade ()
        }
        
        set {
            set_distance_fade (newValue)
        }
        
    }
    
    /// Distance at which the object starts to become visible. If the object is less than this distance away, it will be invisible.
    /// 
    /// > Note: If ``distanceFadeMinDistance`` is greater than ``distanceFadeMaxDistance``, the behavior will be reversed. The object will start to fade away at ``distanceFadeMaxDistance`` and will fully disappear once it reaches ``distanceFadeMinDistance``.
    /// 
    final public var distanceFadeMinDistance: Double {
        get {
            return get_distance_fade_min_distance ()
        }
        
        set {
            set_distance_fade_min_distance (newValue)
        }
        
    }
    
    /// Distance at which the object appears fully opaque.
    /// 
    /// > Note: If ``distanceFadeMaxDistance`` is less than ``distanceFadeMinDistance``, the behavior will be reversed. The object will start to fade away at ``distanceFadeMaxDistance`` and will fully disappear once it reaches ``distanceFadeMinDistance``.
    /// 
    final public var distanceFadeMaxDistance: Double {
        get {
            return get_distance_fade_max_distance ()
        }
        
        set {
            set_distance_fade_max_distance (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_albedo: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_albedo")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_albedo (_ albedo: Color) {
        #if true
        
        var copy_albedo = albedo
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_albedo, UnsafeMutableRawPointer (mutating: handle), nil, &copy_albedo)
        
        #else
        
        var copy_albedo = albedo
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_albedo) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_albedo, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_albedo: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_albedo")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_albedo ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_albedo, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_transparency: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_transparency")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3435651667)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_transparency (_ transparency: BaseMaterial3D.Transparency) {
        #if true
        
        var copy_transparency = Int64 (transparency.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_transparency, UnsafeMutableRawPointer (mutating: handle), nil, &copy_transparency)
        
        #else
        
        var copy_transparency = Int64 (transparency.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_transparency) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_transparency, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_transparency: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transparency")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 990903061)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_transparency ()-> BaseMaterial3D.Transparency {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_transparency, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.Transparency (rawValue: _result)!
    }
    
    fileprivate static var method_set_alpha_antialiasing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_antialiasing")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3212649852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_antialiasing (_ alphaAa: BaseMaterial3D.AlphaAntiAliasing) {
        #if true
        
        var copy_alpha_aa = Int64 (alphaAa.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_alpha_antialiasing, UnsafeMutableRawPointer (mutating: handle), nil, &copy_alpha_aa)
        
        #else
        
        var copy_alpha_aa = Int64 (alphaAa.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_alpha_aa) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_alpha_antialiasing, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_antialiasing: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_antialiasing")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2889939400)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_antialiasing ()-> BaseMaterial3D.AlphaAntiAliasing {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_alpha_antialiasing, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.AlphaAntiAliasing (rawValue: _result)!
    }
    
    fileprivate static var method_set_alpha_antialiasing_edge: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_antialiasing_edge")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_antialiasing_edge (_ edge: Double) {
        #if true
        
        var copy_edge = edge
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_alpha_antialiasing_edge, UnsafeMutableRawPointer (mutating: handle), nil, &copy_edge)
        
        #else
        
        var copy_edge = edge
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_edge) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_alpha_antialiasing_edge, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_antialiasing_edge: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_antialiasing_edge")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_antialiasing_edge ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_alpha_antialiasing_edge, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_shading_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_shading_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3368750322)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_shading_mode (_ shadingMode: BaseMaterial3D.ShadingMode) {
        #if true
        
        var copy_shading_mode = Int64 (shadingMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_shading_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_shading_mode)
        
        #else
        
        var copy_shading_mode = Int64 (shadingMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_shading_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_shading_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_shading_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_shading_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2132070559)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_shading_mode ()-> BaseMaterial3D.ShadingMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_shading_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.ShadingMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_specular: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_specular")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_specular (_ specular: Double) {
        #if true
        
        var copy_specular = specular
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_specular, UnsafeMutableRawPointer (mutating: handle), nil, &copy_specular)
        
        #else
        
        var copy_specular = specular
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_specular) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_specular, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_specular: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_specular")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_specular ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_specular, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_metallic: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_metallic")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_metallic (_ metallic: Double) {
        #if true
        
        var copy_metallic = metallic
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_metallic, UnsafeMutableRawPointer (mutating: handle), nil, &copy_metallic)
        
        #else
        
        var copy_metallic = metallic
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_metallic) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_metallic, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_metallic: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_metallic")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_metallic ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_metallic, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_roughness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_roughness")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_roughness (_ roughness: Double) {
        #if true
        
        var copy_roughness = roughness
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_roughness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_roughness)
        
        #else
        
        var copy_roughness = roughness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_roughness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_roughness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_roughness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_roughness")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_roughness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_roughness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission (_ emission: Color) {
        #if true
        
        var copy_emission = emission
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_emission, UnsafeMutableRawPointer (mutating: handle), nil, &copy_emission)
        
        #else
        
        var copy_emission = emission
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_emission) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_emission, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_emission, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_energy_multiplier: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_energy_multiplier")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_energy_multiplier (_ emissionEnergyMultiplier: Double) {
        #if true
        
        var copy_emission_energy_multiplier = emissionEnergyMultiplier
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_emission_energy_multiplier, UnsafeMutableRawPointer (mutating: handle), nil, &copy_emission_energy_multiplier)
        
        #else
        
        var copy_emission_energy_multiplier = emissionEnergyMultiplier
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_emission_energy_multiplier) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_emission_energy_multiplier, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_energy_multiplier: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_energy_multiplier")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_energy_multiplier ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_emission_energy_multiplier, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_intensity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_intensity")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_intensity (_ emissionEnergyMultiplier: Double) {
        #if true
        
        var copy_emission_energy_multiplier = emissionEnergyMultiplier
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_emission_intensity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_emission_energy_multiplier)
        
        #else
        
        var copy_emission_energy_multiplier = emissionEnergyMultiplier
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_emission_energy_multiplier) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_emission_intensity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_intensity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_intensity")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_intensity ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_emission_intensity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_normal_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_normal_scale")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_normal_scale (_ normalScale: Double) {
        #if true
        
        var copy_normal_scale = normalScale
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_normal_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_normal_scale)
        
        #else
        
        var copy_normal_scale = normalScale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_normal_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_normal_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_normal_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_normal_scale")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_normal_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_normal_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_rim: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_rim")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rim (_ rim: Double) {
        #if true
        
        var copy_rim = rim
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_rim, UnsafeMutableRawPointer (mutating: handle), nil, &copy_rim)
        
        #else
        
        var copy_rim = rim
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_rim) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_rim, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_rim: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rim")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_rim ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_rim, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_rim_tint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_rim_tint")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rim_tint (_ rimTint: Double) {
        #if true
        
        var copy_rim_tint = rimTint
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_rim_tint, UnsafeMutableRawPointer (mutating: handle), nil, &copy_rim_tint)
        
        #else
        
        var copy_rim_tint = rimTint
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_rim_tint) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_rim_tint, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_rim_tint: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rim_tint")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_rim_tint ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_rim_tint, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_clearcoat: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_clearcoat")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_clearcoat (_ clearcoat: Double) {
        #if true
        
        var copy_clearcoat = clearcoat
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_clearcoat, UnsafeMutableRawPointer (mutating: handle), nil, &copy_clearcoat)
        
        #else
        
        var copy_clearcoat = clearcoat
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_clearcoat) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_clearcoat, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_clearcoat: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_clearcoat")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_clearcoat ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_clearcoat, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_clearcoat_roughness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_clearcoat_roughness")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_clearcoat_roughness (_ clearcoatRoughness: Double) {
        #if true
        
        var copy_clearcoat_roughness = clearcoatRoughness
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_clearcoat_roughness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_clearcoat_roughness)
        
        #else
        
        var copy_clearcoat_roughness = clearcoatRoughness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_clearcoat_roughness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_clearcoat_roughness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_clearcoat_roughness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_clearcoat_roughness")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_clearcoat_roughness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_clearcoat_roughness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_anisotropy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_anisotropy")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_anisotropy (_ anisotropy: Double) {
        #if true
        
        var copy_anisotropy = anisotropy
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_anisotropy, UnsafeMutableRawPointer (mutating: handle), nil, &copy_anisotropy)
        
        #else
        
        var copy_anisotropy = anisotropy
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_anisotropy) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_anisotropy, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_anisotropy: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_anisotropy")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_anisotropy ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_anisotropy, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_heightmap_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_heightmap_scale")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_heightmap_scale (_ heightmapScale: Double) {
        #if true
        
        var copy_heightmap_scale = heightmapScale
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_heightmap_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_heightmap_scale)
        
        #else
        
        var copy_heightmap_scale = heightmapScale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_heightmap_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_heightmap_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_heightmap_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_heightmap_scale")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_heightmap_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_heightmap_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_subsurface_scattering_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_subsurface_scattering_strength")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_subsurface_scattering_strength (_ strength: Double) {
        #if true
        
        var copy_strength = strength
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_subsurface_scattering_strength, UnsafeMutableRawPointer (mutating: handle), nil, &copy_strength)
        
        #else
        
        var copy_strength = strength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_strength) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_subsurface_scattering_strength, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_subsurface_scattering_strength: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_subsurface_scattering_strength")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_subsurface_scattering_strength ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_subsurface_scattering_strength, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_transmittance_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_transmittance_color")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_transmittance_color (_ color: Color) {
        #if true
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_transmittance_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_transmittance_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_transmittance_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transmittance_color")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_transmittance_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_transmittance_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_transmittance_depth: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_transmittance_depth")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_transmittance_depth (_ depth: Double) {
        #if true
        
        var copy_depth = depth
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_transmittance_depth, UnsafeMutableRawPointer (mutating: handle), nil, &copy_depth)
        
        #else
        
        var copy_depth = depth
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_depth) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_transmittance_depth, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_transmittance_depth: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transmittance_depth")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_transmittance_depth ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_transmittance_depth, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_transmittance_boost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_transmittance_boost")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_transmittance_boost (_ boost: Double) {
        #if true
        
        var copy_boost = boost
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_transmittance_boost, UnsafeMutableRawPointer (mutating: handle), nil, &copy_boost)
        
        #else
        
        var copy_boost = boost
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_boost) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_transmittance_boost, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_transmittance_boost: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_transmittance_boost")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_transmittance_boost ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_transmittance_boost, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_backlight: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_backlight")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_backlight (_ backlight: Color) {
        #if true
        
        var copy_backlight = backlight
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_backlight, UnsafeMutableRawPointer (mutating: handle), nil, &copy_backlight)
        
        #else
        
        var copy_backlight = backlight
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_backlight) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_backlight, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_backlight: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_backlight")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_backlight ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_backlight, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_refraction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_refraction")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_refraction (_ refraction: Double) {
        #if true
        
        var copy_refraction = refraction
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_refraction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_refraction)
        
        #else
        
        var copy_refraction = refraction
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_refraction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_refraction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_refraction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_refraction")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_refraction ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_refraction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_point_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_point_size")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_point_size (_ pointSize: Double) {
        #if true
        
        var copy_point_size = pointSize
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_point_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_point_size)
        
        #else
        
        var copy_point_size = pointSize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_point_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_point_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_point_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_point_size")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_point_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_point_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_detail_uv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_detail_uv")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 456801921)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_detail_uv (_ detailUv: BaseMaterial3D.DetailUV) {
        #if true
        
        var copy_detail_uv = Int64 (detailUv.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_detail_uv, UnsafeMutableRawPointer (mutating: handle), nil, &copy_detail_uv)
        
        #else
        
        var copy_detail_uv = Int64 (detailUv.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_detail_uv) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_detail_uv, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_detail_uv: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_detail_uv")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2306920512)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_detail_uv ()-> BaseMaterial3D.DetailUV {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_detail_uv, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.DetailUV (rawValue: _result)!
    }
    
    fileprivate static var method_set_blend_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_blend_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2830186259)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_blend_mode (_ blendMode: BaseMaterial3D.BlendMode) {
        #if true
        
        var copy_blend_mode = Int64 (blendMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_blend_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_blend_mode)
        
        #else
        
        var copy_blend_mode = Int64 (blendMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_blend_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_blend_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_blend_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_blend_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4022690962)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_blend_mode ()-> BaseMaterial3D.BlendMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_blend_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.BlendMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_depth_draw_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_depth_draw_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1456584748)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_depth_draw_mode (_ depthDrawMode: BaseMaterial3D.DepthDrawMode) {
        #if true
        
        var copy_depth_draw_mode = Int64 (depthDrawMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_depth_draw_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_depth_draw_mode)
        
        #else
        
        var copy_depth_draw_mode = Int64 (depthDrawMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_depth_draw_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_depth_draw_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_depth_draw_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_depth_draw_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2578197639)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_depth_draw_mode ()-> BaseMaterial3D.DepthDrawMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_depth_draw_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.DepthDrawMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_cull_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cull_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2338909218)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cull_mode (_ cullMode: BaseMaterial3D.CullMode) {
        #if true
        
        var copy_cull_mode = Int64 (cullMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_cull_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cull_mode)
        
        #else
        
        var copy_cull_mode = Int64 (cullMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cull_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_cull_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_cull_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_cull_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1941499586)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_cull_mode ()-> BaseMaterial3D.CullMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_cull_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.CullMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_diffuse_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_diffuse_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1045299638)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_diffuse_mode (_ diffuseMode: BaseMaterial3D.DiffuseMode) {
        #if true
        
        var copy_diffuse_mode = Int64 (diffuseMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_diffuse_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_diffuse_mode)
        
        #else
        
        var copy_diffuse_mode = Int64 (diffuseMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_diffuse_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_diffuse_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_diffuse_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_diffuse_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3973617136)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_diffuse_mode ()-> BaseMaterial3D.DiffuseMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_diffuse_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.DiffuseMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_specular_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_specular_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 584737147)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_specular_mode (_ specularMode: BaseMaterial3D.SpecularMode) {
        #if true
        
        var copy_specular_mode = Int64 (specularMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_specular_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_specular_mode)
        
        #else
        
        var copy_specular_mode = Int64 (specularMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_specular_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_specular_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_specular_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_specular_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2569953298)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_specular_mode ()-> BaseMaterial3D.SpecularMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_specular_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.SpecularMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_flag")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3070159527)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// If `true`, enables the specified flag. Flags are optional behavior that can be turned on and off. Only one flag can be enabled at a time with this function, the flag enumerators cannot be bit-masked together to enable or disable multiple flags at once. Flags can also be enabled by setting the corresponding member to `true`. See ``BaseMaterial3D/Flags`` enumerator for options.
    fileprivate final func set_flag (_ flag: BaseMaterial3D.Flags, _ enable: Bool) {
        #if true
        
        var copy_flag = Int64 (flag.rawValue)
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_flag, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flag, &copy_enable)
        
        #else
        
        var copy_flag = Int64 (flag.rawValue)
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flag) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_flag, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_flag: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_flag")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410065)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns `true`, if the specified flag is enabled. See ``BaseMaterial3D/Flags`` enumerator for options.
    fileprivate final func get_flag (_ flag: BaseMaterial3D.Flags)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_flag = Int64 (flag.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_get_flag, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_flag)
        return _result
        #else
        
        var copy_flag = Int64 (flag.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_flag) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_flag, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_texture_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture_filter")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 22904437)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture_filter (_ mode: BaseMaterial3D.TextureFilter) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_texture_filter, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_texture_filter, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture_filter: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture_filter")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3289213076)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture_filter ()-> BaseMaterial3D.TextureFilter {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_texture_filter, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.TextureFilter (rawValue: _result)!
    }
    
    fileprivate static var method_set_feature: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_feature")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2819288693)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// If `true`, enables the specified ``BaseMaterial3D/Feature``. Many features that are available in ``BaseMaterial3D``s need to be enabled before use. This way the cost for using the feature is only incurred when specified. Features can also be enabled by setting the corresponding member to `true`.
    fileprivate final func set_feature (_ feature: BaseMaterial3D.Feature, _ enable: Bool) {
        #if true
        
        var copy_feature = Int64 (feature.rawValue)
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_feature, UnsafeMutableRawPointer (mutating: handle), nil, &copy_feature, &copy_enable)
        
        #else
        
        var copy_feature = Int64 (feature.rawValue)
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_feature) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enable) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_feature, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_feature: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_feature")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1965241794)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns `true`, if the specified ``BaseMaterial3D/Feature`` is enabled.
    fileprivate final func get_feature (_ feature: BaseMaterial3D.Feature)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_feature = Int64 (feature.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_get_feature, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_feature)
        return _result
        #else
        
        var copy_feature = Int64 (feature.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_feature) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_feature, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 464208135)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the texture for the slot specified by `param`. See ``BaseMaterial3D/TextureParam`` for available slots.
    fileprivate final func set_texture (_ param: BaseMaterial3D.TextureParam, _ texture: Texture2D?) {
        #if true
        
        var copy_param = Int64 (param.rawValue)
        var copy_texture_handle = texture?.handle
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_param, &copy_texture_handle)
        
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
            withUnsafePointer (to: texture?.handle) { p1 in
            _args.append (texture == nil ? nil : p1)
        
                gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 329605813)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the ``Texture2D`` associated with the specified ``BaseMaterial3D/TextureParam``.
    fileprivate final func get_texture (_ param: BaseMaterial3D.TextureParam)-> Texture2D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_param = Int64 (param.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_get_texture, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_param)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_param = Int64 (param.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_param) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_texture, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_detail_blend_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_detail_blend_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2830186259)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_detail_blend_mode (_ detailBlendMode: BaseMaterial3D.BlendMode) {
        #if true
        
        var copy_detail_blend_mode = Int64 (detailBlendMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_detail_blend_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_detail_blend_mode)
        
        #else
        
        var copy_detail_blend_mode = Int64 (detailBlendMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_detail_blend_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_detail_blend_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_detail_blend_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_detail_blend_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4022690962)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_detail_blend_mode ()-> BaseMaterial3D.BlendMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_detail_blend_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.BlendMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_uv1_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_uv1_scale")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_uv1_scale (_ scale: Vector3) {
        #if true
        
        var copy_scale = scale
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_uv1_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scale)
        
        #else
        
        var copy_scale = scale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_uv1_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_uv1_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_uv1_scale")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_uv1_scale ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_uv1_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_uv1_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_uv1_offset")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_uv1_offset (_ offset: Vector3) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_uv1_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_uv1_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_uv1_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_uv1_offset")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_uv1_offset ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_uv1_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_uv1_triplanar_blend_sharpness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_uv1_triplanar_blend_sharpness")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_uv1_triplanar_blend_sharpness (_ sharpness: Double) {
        #if true
        
        var copy_sharpness = sharpness
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_uv1_triplanar_blend_sharpness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sharpness)
        
        #else
        
        var copy_sharpness = sharpness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_sharpness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_uv1_triplanar_blend_sharpness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_uv1_triplanar_blend_sharpness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_uv1_triplanar_blend_sharpness")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_uv1_triplanar_blend_sharpness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_uv1_triplanar_blend_sharpness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_uv2_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_uv2_scale")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_uv2_scale (_ scale: Vector3) {
        #if true
        
        var copy_scale = scale
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_uv2_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_scale)
        
        #else
        
        var copy_scale = scale
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_scale) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_uv2_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_uv2_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_uv2_scale")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_uv2_scale ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_uv2_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_uv2_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_uv2_offset")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_uv2_offset (_ offset: Vector3) {
        #if true
        
        var copy_offset = offset
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_uv2_offset, UnsafeMutableRawPointer (mutating: handle), nil, &copy_offset)
        
        #else
        
        var copy_offset = offset
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_offset) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_uv2_offset, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_uv2_offset: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_uv2_offset")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_uv2_offset ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_uv2_offset, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_uv2_triplanar_blend_sharpness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_uv2_triplanar_blend_sharpness")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_uv2_triplanar_blend_sharpness (_ sharpness: Double) {
        #if true
        
        var copy_sharpness = sharpness
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_uv2_triplanar_blend_sharpness, UnsafeMutableRawPointer (mutating: handle), nil, &copy_sharpness)
        
        #else
        
        var copy_sharpness = sharpness
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_sharpness) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_uv2_triplanar_blend_sharpness, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_uv2_triplanar_blend_sharpness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_uv2_triplanar_blend_sharpness")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_uv2_triplanar_blend_sharpness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_uv2_triplanar_blend_sharpness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_billboard_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_billboard_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4202036497)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_billboard_mode (_ mode: BaseMaterial3D.BillboardMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_billboard_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_billboard_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_billboard_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_billboard_mode")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1283840139)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_billboard_mode ()-> BaseMaterial3D.BillboardMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_billboard_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.BillboardMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_particles_anim_h_frames: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_particles_anim_h_frames")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_particles_anim_h_frames (_ frames: Int32) {
        #if true
        
        var copy_frames: Int = Int (frames)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_particles_anim_h_frames, UnsafeMutableRawPointer (mutating: handle), nil, &copy_frames)
        
        #else
        
        var copy_frames: Int = Int (frames)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_frames) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_particles_anim_h_frames, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_particles_anim_h_frames: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_particles_anim_h_frames")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_particles_anim_h_frames ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_particles_anim_h_frames, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_particles_anim_v_frames: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_particles_anim_v_frames")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_particles_anim_v_frames (_ frames: Int32) {
        #if true
        
        var copy_frames: Int = Int (frames)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_particles_anim_v_frames, UnsafeMutableRawPointer (mutating: handle), nil, &copy_frames)
        
        #else
        
        var copy_frames: Int = Int (frames)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_frames) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_particles_anim_v_frames, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_particles_anim_v_frames: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_particles_anim_v_frames")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_particles_anim_v_frames ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_particles_anim_v_frames, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_particles_anim_loop: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_particles_anim_loop")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_particles_anim_loop (_ loop: Bool) {
        #if true
        
        var copy_loop = loop
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_particles_anim_loop, UnsafeMutableRawPointer (mutating: handle), nil, &copy_loop)
        
        #else
        
        var copy_loop = loop
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_loop) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_particles_anim_loop, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_particles_anim_loop: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_particles_anim_loop")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_particles_anim_loop ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_particles_anim_loop, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_heightmap_deep_parallax: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_heightmap_deep_parallax")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_heightmap_deep_parallax (_ enable: Bool) {
        #if true
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_heightmap_deep_parallax, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_heightmap_deep_parallax, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_heightmap_deep_parallax_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_heightmap_deep_parallax_enabled")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_heightmap_deep_parallax_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_is_heightmap_deep_parallax_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_heightmap_deep_parallax_min_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_heightmap_deep_parallax_min_layers")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_heightmap_deep_parallax_min_layers (_ layer: Int32) {
        #if true
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_heightmap_deep_parallax_min_layers, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer)
        
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_heightmap_deep_parallax_min_layers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_heightmap_deep_parallax_min_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_heightmap_deep_parallax_min_layers")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_heightmap_deep_parallax_min_layers ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_heightmap_deep_parallax_min_layers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_heightmap_deep_parallax_max_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_heightmap_deep_parallax_max_layers")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_heightmap_deep_parallax_max_layers (_ layer: Int32) {
        #if true
        
        var copy_layer: Int = Int (layer)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_heightmap_deep_parallax_max_layers, UnsafeMutableRawPointer (mutating: handle), nil, &copy_layer)
        
        #else
        
        var copy_layer: Int = Int (layer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_layer) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_heightmap_deep_parallax_max_layers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_heightmap_deep_parallax_max_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_heightmap_deep_parallax_max_layers")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_heightmap_deep_parallax_max_layers ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_heightmap_deep_parallax_max_layers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_heightmap_deep_parallax_flip_tangent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_heightmap_deep_parallax_flip_tangent")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_heightmap_deep_parallax_flip_tangent (_ flip: Bool) {
        #if true
        
        var copy_flip = flip
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_heightmap_deep_parallax_flip_tangent, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flip)
        
        #else
        
        var copy_flip = flip
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flip) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_heightmap_deep_parallax_flip_tangent, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_heightmap_deep_parallax_flip_tangent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_heightmap_deep_parallax_flip_tangent")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_heightmap_deep_parallax_flip_tangent ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_heightmap_deep_parallax_flip_tangent, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_heightmap_deep_parallax_flip_binormal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_heightmap_deep_parallax_flip_binormal")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_heightmap_deep_parallax_flip_binormal (_ flip: Bool) {
        #if true
        
        var copy_flip = flip
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_heightmap_deep_parallax_flip_binormal, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flip)
        
        #else
        
        var copy_flip = flip
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flip) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_heightmap_deep_parallax_flip_binormal, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_heightmap_deep_parallax_flip_binormal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_heightmap_deep_parallax_flip_binormal")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_heightmap_deep_parallax_flip_binormal ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_heightmap_deep_parallax_flip_binormal, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_grow: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_grow")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_grow (_ amount: Double) {
        #if true
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_grow, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_grow, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_grow: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_grow")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_grow ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_grow, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_emission_operator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_emission_operator")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3825128922)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_emission_operator (_ `operator`: BaseMaterial3D.EmissionOperator) {
        #if true
        
        var copy_operator = Int64 (`operator`.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_emission_operator, UnsafeMutableRawPointer (mutating: handle), nil, &copy_operator)
        
        #else
        
        var copy_operator = Int64 (`operator`.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_operator) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_emission_operator, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_emission_operator: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_emission_operator")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 974205018)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_emission_operator ()-> BaseMaterial3D.EmissionOperator {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_emission_operator, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.EmissionOperator (rawValue: _result)!
    }
    
    fileprivate static var method_set_ao_light_affect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ao_light_affect")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ao_light_affect (_ amount: Double) {
        #if true
        
        var copy_amount = amount
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_ao_light_affect, UnsafeMutableRawPointer (mutating: handle), nil, &copy_amount)
        
        #else
        
        var copy_amount = amount
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_amount) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_ao_light_affect, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ao_light_affect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ao_light_affect")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ao_light_affect ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_ao_light_affect, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_alpha_scissor_threshold: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_scissor_threshold")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_scissor_threshold (_ threshold: Double) {
        #if true
        
        var copy_threshold = threshold
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_alpha_scissor_threshold, UnsafeMutableRawPointer (mutating: handle), nil, &copy_threshold)
        
        #else
        
        var copy_threshold = threshold
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_threshold) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_alpha_scissor_threshold, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_scissor_threshold: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_scissor_threshold")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_scissor_threshold ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_alpha_scissor_threshold, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_alpha_hash_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_alpha_hash_scale")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_alpha_hash_scale (_ threshold: Double) {
        #if true
        
        var copy_threshold = threshold
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_alpha_hash_scale, UnsafeMutableRawPointer (mutating: handle), nil, &copy_threshold)
        
        #else
        
        var copy_threshold = threshold
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_threshold) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_alpha_hash_scale, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_alpha_hash_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_alpha_hash_scale")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_alpha_hash_scale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_alpha_hash_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_grow_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_grow_enabled")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_grow_enabled (_ enable: Bool) {
        #if true
        
        var copy_enable = enable
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_grow_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enable)
        
        #else
        
        var copy_enable = enable
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enable) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_grow_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_grow_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_grow_enabled")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_grow_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_is_grow_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_metallic_texture_channel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_metallic_texture_channel")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 744167988)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_metallic_texture_channel (_ channel: BaseMaterial3D.TextureChannel) {
        #if true
        
        var copy_channel = Int64 (channel.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_metallic_texture_channel, UnsafeMutableRawPointer (mutating: handle), nil, &copy_channel)
        
        #else
        
        var copy_channel = Int64 (channel.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_channel) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_metallic_texture_channel, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_metallic_texture_channel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_metallic_texture_channel")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 568133867)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_metallic_texture_channel ()-> BaseMaterial3D.TextureChannel {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_metallic_texture_channel, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.TextureChannel (rawValue: _result)!
    }
    
    fileprivate static var method_set_roughness_texture_channel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_roughness_texture_channel")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 744167988)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_roughness_texture_channel (_ channel: BaseMaterial3D.TextureChannel) {
        #if true
        
        var copy_channel = Int64 (channel.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_roughness_texture_channel, UnsafeMutableRawPointer (mutating: handle), nil, &copy_channel)
        
        #else
        
        var copy_channel = Int64 (channel.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_channel) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_roughness_texture_channel, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_roughness_texture_channel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_roughness_texture_channel")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 568133867)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_roughness_texture_channel ()-> BaseMaterial3D.TextureChannel {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_roughness_texture_channel, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.TextureChannel (rawValue: _result)!
    }
    
    fileprivate static var method_set_ao_texture_channel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_ao_texture_channel")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 744167988)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_ao_texture_channel (_ channel: BaseMaterial3D.TextureChannel) {
        #if true
        
        var copy_channel = Int64 (channel.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_ao_texture_channel, UnsafeMutableRawPointer (mutating: handle), nil, &copy_channel)
        
        #else
        
        var copy_channel = Int64 (channel.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_channel) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_ao_texture_channel, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_ao_texture_channel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_ao_texture_channel")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 568133867)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_ao_texture_channel ()-> BaseMaterial3D.TextureChannel {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_ao_texture_channel, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.TextureChannel (rawValue: _result)!
    }
    
    fileprivate static var method_set_refraction_texture_channel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_refraction_texture_channel")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 744167988)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_refraction_texture_channel (_ channel: BaseMaterial3D.TextureChannel) {
        #if true
        
        var copy_channel = Int64 (channel.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_refraction_texture_channel, UnsafeMutableRawPointer (mutating: handle), nil, &copy_channel)
        
        #else
        
        var copy_channel = Int64 (channel.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_channel) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_refraction_texture_channel, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_refraction_texture_channel: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_refraction_texture_channel")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 568133867)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_refraction_texture_channel ()-> BaseMaterial3D.TextureChannel {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_refraction_texture_channel, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.TextureChannel (rawValue: _result)!
    }
    
    fileprivate static var method_set_proximity_fade_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_proximity_fade_enabled")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_proximity_fade_enabled (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_proximity_fade_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_proximity_fade_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_proximity_fade_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_proximity_fade_enabled")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_proximity_fade_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_is_proximity_fade_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_proximity_fade_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_proximity_fade_distance")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_proximity_fade_distance (_ distance: Double) {
        #if true
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_proximity_fade_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_proximity_fade_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_proximity_fade_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_proximity_fade_distance")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_proximity_fade_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_proximity_fade_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_msdf_pixel_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_msdf_pixel_range")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_msdf_pixel_range (_ range: Double) {
        #if true
        
        var copy_range = range
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_msdf_pixel_range, UnsafeMutableRawPointer (mutating: handle), nil, &copy_range)
        
        #else
        
        var copy_range = range
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_range) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_msdf_pixel_range, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_msdf_pixel_range: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_msdf_pixel_range")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_msdf_pixel_range ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_msdf_pixel_range, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_msdf_outline_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_msdf_outline_size")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_msdf_outline_size (_ size: Double) {
        #if true
        
        var copy_size = size
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_msdf_outline_size, UnsafeMutableRawPointer (mutating: handle), nil, &copy_size)
        
        #else
        
        var copy_size = size
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_size) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_msdf_outline_size, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_msdf_outline_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_msdf_outline_size")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_msdf_outline_size ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_msdf_outline_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_distance_fade: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_distance_fade")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1379478617)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_distance_fade (_ mode: BaseMaterial3D.DistanceFadeMode) {
        #if true
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_distance_fade, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_distance_fade, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_distance_fade: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_distance_fade")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2694575734)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_distance_fade ()-> BaseMaterial3D.DistanceFadeMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_distance_fade, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return BaseMaterial3D.DistanceFadeMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_distance_fade_max_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_distance_fade_max_distance")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_distance_fade_max_distance (_ distance: Double) {
        #if true
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_distance_fade_max_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_distance_fade_max_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_distance_fade_max_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_distance_fade_max_distance")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_distance_fade_max_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_distance_fade_max_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_distance_fade_min_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_distance_fade_min_distance")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_distance_fade_min_distance (_ distance: Double) {
        #if true
        
        var copy_distance = distance
        
        gi.object_method_bind_ptrcall_v (BaseMaterial3D.method_set_distance_fade_min_distance, UnsafeMutableRawPointer (mutating: handle), nil, &copy_distance)
        
        #else
        
        var copy_distance = distance
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_distance) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (BaseMaterial3D.method_set_distance_fade_min_distance, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_distance_fade_min_distance: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_distance_fade_min_distance")
        return withUnsafePointer (to: &BaseMaterial3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_distance_fade_min_distance ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (BaseMaterial3D.method_get_distance_fade_min_distance, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

