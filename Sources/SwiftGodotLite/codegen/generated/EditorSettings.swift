// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Object that holds the project-independent editor settings.
/// 
/// Object that holds the project-independent editor settings. These settings are generally visible in the **Editor > Editor Settings** menu.
/// 
/// Property names use slash delimiters to distinguish sections. Setting values can be of any ``Variant`` type. It's recommended to use `snake_case` for editor settings to be consistent with the Godot editor itself.
/// 
/// Accessing the settings can be done using the following methods, such as:
/// 
/// > Note: This class shouldn't be instantiated directly. Instead, access the singleton using ``EditorInterface/getEditorSettings()``.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``settingsChanged``
open class EditorSettings: Resource {
    override open class var godotClassName: StringName { "EditorSettings" }
    /* Constants */
    /// Emitted after any editor setting has changed. It's used by various editor plugins to update their visuals on theme changes or logic on configuration changes.
    public static let notificationEditorSettingsChanged = 10000
    /* Methods */
    fileprivate static var method_has_setting: GDExtensionMethodBindPtr = {
        let methodName = StringName ("has_setting")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the setting specified by `name` exists, `false` otherwise.
    public final func hasSetting (name: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_has_setting, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_name.content)
        return _result
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSettings.method_has_setting, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_set_setting: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_setting")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 402577236)!
            }
            
        }
        
    }()
    
    /// Sets the `value` of the setting specified by `name`. This is equivalent to using ``Object/set(property:value:)`` on the EditorSettings instance.
    public final func setSetting (name: String, value: Variant) {
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_set_setting, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content, &value.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &value.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorSettings.method_set_setting, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_setting: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_setting")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1868160156)!
            }
            
        }
        
    }()
    
    /// Returns the value of the setting specified by `name`. This is equivalent to using ``Object/get(property:)`` on the EditorSettings instance.
    public final func getSetting (name: String)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_get_setting, UnsafeMutableRawPointer (mutating: handle), &_result.content, &gstr_name.content)
        return _result
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSettings.method_get_setting, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_erase: GDExtensionMethodBindPtr = {
        let methodName = StringName ("erase")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Erases the setting whose name is specified by `property`.
    public final func erase (property: String) {
        #if true
        
        let gstr_property = GString (property)
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_erase, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_property.content)
        
        #else
        
        let gstr_property = GString (property)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_property.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSettings.method_erase, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_initial_value: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_initial_value")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1529169264)!
            }
            
        }
        
    }()
    
    /// Sets the initial value of the setting specified by `name` to `value`. This is used to provide a value for the Revert button in the Editor Settings. If `updateCurrent` is true, the current value of the setting will be set to `value` as well.
    public final func setInitialValue (name: StringName, value: Variant, updateCurrent: Bool) {
        #if true
        
        var copy_update_current = updateCurrent
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_set_initial_value, UnsafeMutableRawPointer (mutating: handle), nil, &name.content, &value.content, &copy_update_current)
        
        #else
        
        var copy_update_current = updateCurrent
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &value.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_update_current) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (EditorSettings.method_set_initial_value, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_property_info: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_property_info")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4155329257)!
            }
            
        }
        
    }()
    
    /// Adds a custom property info to a property. The dictionary must contain:
    /// 
    /// - `name`: ``String`` (the name of the property)
    /// 
    /// - `type`: integer (see ``Variant.GType``)
    /// 
    /// - optionally `hint`: integer (see ``PropertyHint``) and `hint_string`: ``String``
    /// 
    /// **Example:**
    /// 
    public final func addPropertyInfo (_ info: GDictionary) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_add_property_info, UnsafeMutableRawPointer (mutating: handle), nil, &info.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &info.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSettings.method_add_property_info, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_project_metadata: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_project_metadata")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2504492430)!
            }
            
        }
        
    }()
    
    /// Sets project-specific metadata with the `section`, `key` and `data` specified. This metadata is stored outside the project folder and therefore won't be checked into version control. See also ``getProjectMetadata(section:key:`default`:)``.
    public final func setProjectMetadata (section: String, key: String, data: Variant) {
        #if true
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_set_project_metadata, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_section.content, &gstr_key.content, &data.content)
        
        #else
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_section.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &gstr_key.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &data.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (EditorSettings.method_set_project_metadata, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_project_metadata: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_project_metadata")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 89809366)!
            }
            
        }
        
    }()
    
    /// Returns project-specific metadata for the `section` and `key` specified. If the metadata doesn't exist, `default` will be returned instead. See also ``setProjectMetadata(section:key:data:)``.
    public final func getProjectMetadata (section: String, key: String, `default`: Variant)-> Variant {
        let _result: Variant = Variant ()
        #if true
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_get_project_metadata, UnsafeMutableRawPointer (mutating: handle), &_result.content, &gstr_section.content, &gstr_key.content, &`default`.content)
        return _result
        #else
        
        let gstr_section = GString (section)
        let gstr_key = GString (key)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_section.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &gstr_key.content) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &`default`.content) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (EditorSettings.method_get_project_metadata, UnsafeMutableRawPointer (mutating: handle), &_args, &_result.content)
                    return _result
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_favorites: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_favorites")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4015028928)!
            }
            
        }
        
    }()
    
    /// Sets the list of favorite files and directories for this project.
    public final func setFavorites (dirs: PackedStringArray) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_set_favorites, UnsafeMutableRawPointer (mutating: handle), nil, &dirs.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &dirs.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSettings.method_set_favorites, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_favorites: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_favorites")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns the list of favorite files and directories for this project.
    public final func getFavorites ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (EditorSettings.method_get_favorites, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_recent_dirs: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_recent_dirs")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4015028928)!
            }
            
        }
        
    }()
    
    /// Sets the list of recently visited folders in the file dialog for this project.
    public final func setRecentDirs (_ dirs: PackedStringArray) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_set_recent_dirs, UnsafeMutableRawPointer (mutating: handle), nil, &dirs.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &dirs.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSettings.method_set_recent_dirs, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_recent_dirs: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_recent_dirs")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns the list of recently visited folders in the file dialog for this project.
    public final func getRecentDirs ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (EditorSettings.method_get_recent_dirs, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_builtin_action_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_builtin_action_override")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1209351045)!
            }
            
        }
        
    }()
    
    /// Overrides the built-in editor action `name` with the input actions defined in `actionsList`.
    public final func setBuiltinActionOverride (name: String, actionsList: ObjectCollection<InputEvent>) {
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_set_builtin_action_override, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content, &actionsList.array.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &actionsList.array.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorSettings.method_set_builtin_action_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_check_changed_settings_in_group: GDExtensionMethodBindPtr = {
        let methodName = StringName ("check_changed_settings_in_group")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Checks if any settings with the prefix `settingPrefix` exist in the set of changed settings. See also ``getChangedSettings()``.
    public final func checkChangedSettingsInGroup (settingPrefix: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_setting_prefix = GString (settingPrefix)
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_check_changed_settings_in_group, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_setting_prefix.content)
        return _result
        #else
        
        let gstr_setting_prefix = GString (settingPrefix)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_setting_prefix.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSettings.method_check_changed_settings_in_group, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_changed_settings: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_changed_settings")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Gets an array of the settings which have been changed since the last save. Note that internally `changed_settings` is cleared after a successful save, so generally the most appropriate place to use this method is when processing ``notificationEditorSettingsChanged``.
    public final func getChangedSettings ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (EditorSettings.method_get_changed_settings, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_mark_setting_changed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("mark_setting_changed")
        return withUnsafePointer (to: &EditorSettings.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Marks the passed editor setting as being changed, see ``getChangedSettings()``. Only settings which exist (see ``hasSetting(name:)``) will be accepted.
    public final func markSettingChanged (setting: String) {
        #if true
        
        let gstr_setting = GString (setting)
        
        gi.object_method_bind_ptrcall_v (EditorSettings.method_mark_setting_changed, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_setting.content)
        
        #else
        
        let gstr_setting = GString (setting)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_setting.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorSettings.method_mark_setting_changed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    // Signals 
    /// Emitted after any editor setting has changed.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.settingsChanged.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var settingsChanged: SimpleSignal { SimpleSignal (target: self, signalName: "settings_changed") }
    
}

