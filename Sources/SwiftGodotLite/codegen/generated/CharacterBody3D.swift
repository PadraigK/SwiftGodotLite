// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 3D physics body specialized for characters moved by script.
/// 
/// ``CharacterBody3D`` is a specialized class for physics bodies that are meant to be user-controlled. They are not affected by physics at all, but they affect other physics bodies in their path. They are mainly used to provide high-level API to move objects with wall and slope detection (``moveAndSlide()`` method) in addition to the general collision detection provided by ``PhysicsBody3D/moveAndCollide(motion:testOnly:safeMargin:recoveryAsCollision:maxCollisions:)``. This makes it useful for highly configurable physics bodies that must move in specific ways and collide with the world, as is often the case with user-controlled characters.
/// 
/// For game objects that don't require complex movement or collision detection, such as moving platforms, ``AnimatableBody3D`` is simpler to configure.
/// 
open class CharacterBody3D: PhysicsBody3D {
    override open class var godotClassName: StringName { "CharacterBody3D" }
    public enum MotionMode: Int64 {
        /// Apply when notions of walls, ceiling and floor are relevant. In this mode the body motion will react to slopes (acceleration/slowdown). This mode is suitable for grounded games like platformers.
        case grounded = 0 // MOTION_MODE_GROUNDED
        /// Apply when there is no notion of floor or ceiling. All collisions will be reported as `on_wall`. In this mode, when you slide, the speed will always be constant. This mode is suitable for games without ground like space games.
        case floating = 1 // MOTION_MODE_FLOATING
    }
    
    public enum PlatformOnLeave: Int64 {
        /// Add the last platform velocity to the ``velocity`` when you leave a moving platform.
        case addVelocity = 0 // PLATFORM_ON_LEAVE_ADD_VELOCITY
        /// Add the last platform velocity to the ``velocity`` when you leave a moving platform, but any downward motion is ignored. It's useful to keep full jump height even when the platform is moving down.
        case addUpwardVelocity = 1 // PLATFORM_ON_LEAVE_ADD_UPWARD_VELOCITY
        /// Do nothing when leaving a platform.
        case doNothing = 2 // PLATFORM_ON_LEAVE_DO_NOTHING
    }
    
    
    /* Properties */
    
    /// Sets the motion mode which defines the behavior of ``moveAndSlide()``. See ``CharacterBody3D/MotionMode`` constants for available modes.
    final public var motionMode: CharacterBody3D.MotionMode {
        get {
            return get_motion_mode ()
        }
        
        set {
            set_motion_mode (newValue)
        }
        
    }
    
    /// Vector pointing upwards, used to determine what is a wall and what is a floor (or a ceiling) when calling ``moveAndSlide()``. Defaults to ``Vector3.UP``. As the vector will be normalized it can't be equal to ``Vector3.ZERO``, if you want all collisions to be reported as walls, consider using .floating as ``motionMode``.
    final public var upDirection: Vector3 {
        get {
            return get_up_direction ()
        }
        
        set {
            set_up_direction (newValue)
        }
        
    }
    
    /// If `true`, during a jump against the ceiling, the body will slide, if `false` it will be stopped and will fall vertically.
    final public var slideOnCeiling: Bool {
        get {
            return is_slide_on_ceiling_enabled ()
        }
        
        set {
            set_slide_on_ceiling_enabled (newValue)
        }
        
    }
    
    /// Current velocity vector (typically meters per second), used and modified during calls to ``moveAndSlide()``.
    final public var velocity: Vector3 {
        get {
            return get_velocity ()
        }
        
        set {
            set_velocity (newValue)
        }
        
    }
    
    /// Maximum number of times the body can change direction before it stops when calling ``moveAndSlide()``.
    final public var maxSlides: Int32 {
        get {
            return get_max_slides ()
        }
        
        set {
            set_max_slides (newValue)
        }
        
    }
    
    /// Minimum angle (in radians) where the body is allowed to slide when it encounters a slope. The default value equals 15 degrees. When ``motionMode`` is .grounded, it only affects movement if ``floorBlockOnWall`` is `true`.
    final public var wallMinSlideAngle: Double {
        get {
            return get_wall_min_slide_angle ()
        }
        
        set {
            set_wall_min_slide_angle (newValue)
        }
        
    }
    
    /// If `true`, the body will not slide on slopes when calling ``moveAndSlide()`` when the body is standing still.
    /// 
    /// If `false`, the body will slide on floor's slopes when ``velocity`` applies a downward force.
    /// 
    final public var floorStopOnSlope: Bool {
        get {
            return is_floor_stop_on_slope_enabled ()
        }
        
        set {
            set_floor_stop_on_slope_enabled (newValue)
        }
        
    }
    
    /// If `false` (by default), the body will move faster on downward slopes and slower on upward slopes.
    /// 
    /// If `true`, the body will always move at the same speed on the ground no matter the slope. Note that you need to use ``floorSnapLength`` to stick along a downward slope at constant speed.
    /// 
    final public var floorConstantSpeed: Bool {
        get {
            return is_floor_constant_speed_enabled ()
        }
        
        set {
            set_floor_constant_speed_enabled (newValue)
        }
        
    }
    
    /// If `true`, the body will be able to move on the floor only. This option avoids to be able to walk on walls, it will however allow to slide down along them.
    final public var floorBlockOnWall: Bool {
        get {
            return is_floor_block_on_wall_enabled ()
        }
        
        set {
            set_floor_block_on_wall_enabled (newValue)
        }
        
    }
    
    /// Maximum angle (in radians) where a slope is still considered a floor (or a ceiling), rather than a wall, when calling ``moveAndSlide()``. The default value equals 45 degrees.
    final public var floorMaxAngle: Double {
        get {
            return get_floor_max_angle ()
        }
        
        set {
            set_floor_max_angle (newValue)
        }
        
    }
    
    /// Sets a snapping distance. When set to a value different from `0.0`, the body is kept attached to slopes when calling ``moveAndSlide()``. The snapping vector is determined by the given distance along the opposite direction of the ``upDirection``.
    /// 
    /// As long as the snapping vector is in contact with the ground and the body moves against ``upDirection``, the body will remain attached to the surface. Snapping is not applied if the body moves along ``upDirection``, meaning it contains vertical rising velocity, so it will be able to detach from the ground when jumping or when the body is pushed up by something. If you want to apply a snap without taking into account the velocity, use ``applyFloorSnap()``.
    /// 
    final public var floorSnapLength: Double {
        get {
            return get_floor_snap_length ()
        }
        
        set {
            set_floor_snap_length (newValue)
        }
        
    }
    
    /// Sets the behavior to apply when you leave a moving platform. By default, to be physically accurate, when you leave the last platform velocity is applied. See ``CharacterBody3D/PlatformOnLeave`` constants for available behavior.
    final public var platformOnLeave: CharacterBody3D.PlatformOnLeave {
        get {
            return get_platform_on_leave ()
        }
        
        set {
            set_platform_on_leave (newValue)
        }
        
    }
    
    /// Collision layers that will be included for detecting floor bodies that will act as moving platforms to be followed by the ``CharacterBody3D``. By default, all floor bodies are detected and propagate their velocity.
    final public var platformFloorLayers: UInt32 {
        get {
            return get_platform_floor_layers ()
        }
        
        set {
            set_platform_floor_layers (newValue)
        }
        
    }
    
    /// Collision layers that will be included for detecting wall bodies that will act as moving platforms to be followed by the ``CharacterBody3D``. By default, all wall bodies are ignored.
    final public var platformWallLayers: UInt32 {
        get {
            return get_platform_wall_layers ()
        }
        
        set {
            set_platform_wall_layers (newValue)
        }
        
    }
    
    /// Extra margin used for collision recovery when calling ``moveAndSlide()``.
    /// 
    /// If the body is at least this close to another body, it will consider them to be colliding and will be pushed away before performing the actual motion.
    /// 
    /// A higher value means it's more flexible for detecting collision, which helps with consistently detecting walls and floors.
    /// 
    /// A lower value forces the collision algorithm to use more exact detection, so it can be used in cases that specifically require precision, e.g at very low scale to avoid visible jittering, or for stability with a stack of character bodies.
    /// 
    final public var safeMargin: Double {
        get {
            return get_safe_margin ()
        }
        
        set {
            set_safe_margin (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_move_and_slide: GDExtensionMethodBindPtr = {
        let methodName = StringName ("move_and_slide")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240911060)!
            }
            
        }
        
    }()
    
    /// Moves the body based on ``velocity``. If the body collides with another, it will slide along the other body rather than stop immediately. If the other body is a ``CharacterBody3D`` or ``RigidBody3D``, it will also be affected by the motion of the other body. You can use this to make moving and rotating platforms, or to make nodes push other nodes.
    /// 
    /// Modifies ``velocity`` if a slide collision occurred. To get the latest collision call ``getLastSlideCollision()``, for more detailed information about collisions that occurred, use ``getSlideCollision(slideIdx:)``.
    /// 
    /// When the body touches a moving platform, the platform's velocity is automatically added to the body motion. If a collision occurs due to the platform's motion, it will always be first in the slide collisions.
    /// 
    /// Returns `true` if the body collided, otherwise, returns `false`.
    /// 
    @discardableResult /* discardable per discardableList: CharacterBody3D, move_and_slide */ 
    public final func moveAndSlide ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_move_and_slide, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_apply_floor_snap: GDExtensionMethodBindPtr = {
        let methodName = StringName ("apply_floor_snap")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Allows to manually apply a snap to the floor regardless of the body's velocity. This function does nothing when ``isOnFloor()`` returns `true`.
    public final func applyFloorSnap () {
        gi.object_method_bind_ptrcall (CharacterBody3D.method_apply_floor_snap, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_velocity")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_velocity (_ velocity: Vector3) {
        #if false
        
        var copy_velocity = velocity
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_velocity)
        
        #else
        
        var copy_velocity = velocity
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_velocity")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_velocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_safe_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_safe_margin")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_safe_margin (_ margin: Double) {
        #if false
        
        var copy_margin = margin
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_safe_margin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_margin)
        
        #else
        
        var copy_margin = margin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_safe_margin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_safe_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_safe_margin")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_safe_margin ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_safe_margin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_floor_stop_on_slope_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_floor_stop_on_slope_enabled")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_floor_stop_on_slope_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_is_floor_stop_on_slope_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_floor_stop_on_slope_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_floor_stop_on_slope_enabled")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_floor_stop_on_slope_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_floor_stop_on_slope_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_floor_stop_on_slope_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_floor_constant_speed_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_floor_constant_speed_enabled")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_floor_constant_speed_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_floor_constant_speed_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_floor_constant_speed_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_floor_constant_speed_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_floor_constant_speed_enabled")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_floor_constant_speed_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_is_floor_constant_speed_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_floor_block_on_wall_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_floor_block_on_wall_enabled")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_floor_block_on_wall_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_floor_block_on_wall_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_floor_block_on_wall_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_floor_block_on_wall_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_floor_block_on_wall_enabled")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_floor_block_on_wall_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_is_floor_block_on_wall_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_slide_on_ceiling_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_slide_on_ceiling_enabled")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_slide_on_ceiling_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_slide_on_ceiling_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_slide_on_ceiling_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_slide_on_ceiling_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_slide_on_ceiling_enabled")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_slide_on_ceiling_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_is_slide_on_ceiling_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_platform_floor_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_platform_floor_layers")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_platform_floor_layers (_ excludeLayer: UInt32) {
        #if false
        
        var copy_exclude_layer: Int = Int (excludeLayer)
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_platform_floor_layers, UnsafeMutableRawPointer (mutating: handle), nil, &copy_exclude_layer)
        
        #else
        
        var copy_exclude_layer: Int = Int (excludeLayer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_exclude_layer) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_platform_floor_layers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_platform_floor_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_platform_floor_layers")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_platform_floor_layers ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_platform_floor_layers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_platform_wall_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_platform_wall_layers")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_platform_wall_layers (_ excludeLayer: UInt32) {
        #if false
        
        var copy_exclude_layer: Int = Int (excludeLayer)
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_platform_wall_layers, UnsafeMutableRawPointer (mutating: handle), nil, &copy_exclude_layer)
        
        #else
        
        var copy_exclude_layer: Int = Int (excludeLayer)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_exclude_layer) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_platform_wall_layers, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_platform_wall_layers: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_platform_wall_layers")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_platform_wall_layers ()-> UInt32 {
        var _result: UInt32 = 0
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_platform_wall_layers, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_max_slides: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_max_slides")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_max_slides ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_max_slides, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_max_slides: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_max_slides")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_max_slides (_ maxSlides: Int32) {
        #if false
        
        var copy_max_slides: Int = Int (maxSlides)
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_max_slides, UnsafeMutableRawPointer (mutating: handle), nil, &copy_max_slides)
        
        #else
        
        var copy_max_slides: Int = Int (maxSlides)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_max_slides) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_max_slides, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_floor_max_angle: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_floor_max_angle")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_floor_max_angle ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_floor_max_angle, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_floor_max_angle: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_floor_max_angle")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_floor_max_angle (_ radians: Double) {
        #if false
        
        var copy_radians = radians
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_floor_max_angle, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radians)
        
        #else
        
        var copy_radians = radians
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radians) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_floor_max_angle, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_floor_snap_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_floor_snap_length")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 191475506)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_floor_snap_length ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_floor_snap_length, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_floor_snap_length: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_floor_snap_length")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_floor_snap_length (_ floorSnapLength: Double) {
        #if false
        
        var copy_floor_snap_length = floorSnapLength
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_floor_snap_length, UnsafeMutableRawPointer (mutating: handle), nil, &copy_floor_snap_length)
        
        #else
        
        var copy_floor_snap_length = floorSnapLength
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_floor_snap_length) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_floor_snap_length, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_wall_min_slide_angle: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_wall_min_slide_angle")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_wall_min_slide_angle ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_wall_min_slide_angle, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_wall_min_slide_angle: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_wall_min_slide_angle")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_wall_min_slide_angle (_ radians: Double) {
        #if false
        
        var copy_radians = radians
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_wall_min_slide_angle, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radians)
        
        #else
        
        var copy_radians = radians
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radians) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_wall_min_slide_angle, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_up_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_up_direction")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_up_direction ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_up_direction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_up_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_up_direction")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_up_direction (_ upDirection: Vector3) {
        #if false
        
        var copy_up_direction = upDirection
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_up_direction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_up_direction)
        
        #else
        
        var copy_up_direction = upDirection
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_up_direction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_up_direction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_motion_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_motion_mode")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2690739026)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_motion_mode (_ mode: CharacterBody3D.MotionMode) {
        #if false
        
        var copy_mode = Int64 (mode.rawValue)
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_motion_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mode)
        
        #else
        
        var copy_mode = Int64 (mode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_motion_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_motion_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_motion_mode")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3529553604)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_motion_mode ()-> CharacterBody3D.MotionMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_motion_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return CharacterBody3D.MotionMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_platform_on_leave: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_platform_on_leave")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1459986142)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_platform_on_leave (_ onLeaveApplyVelocity: CharacterBody3D.PlatformOnLeave) {
        #if false
        
        var copy_on_leave_apply_velocity = Int64 (onLeaveApplyVelocity.rawValue)
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_set_platform_on_leave, UnsafeMutableRawPointer (mutating: handle), nil, &copy_on_leave_apply_velocity)
        
        #else
        
        var copy_on_leave_apply_velocity = Int64 (onLeaveApplyVelocity.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_on_leave_apply_velocity) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_set_platform_on_leave, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_platform_on_leave: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_platform_on_leave")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 996491171)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_platform_on_leave ()-> CharacterBody3D.PlatformOnLeave {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_platform_on_leave, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return CharacterBody3D.PlatformOnLeave (rawValue: _result)!
    }
    
    fileprivate static var method_is_on_floor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_on_floor")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the body collided with the floor on the last call of ``moveAndSlide()``. Otherwise, returns `false`. The ``upDirection`` and ``floorMaxAngle`` are used to determine whether a surface is "floor" or not.
    public final func isOnFloor ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_is_on_floor, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_on_floor_only: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_on_floor_only")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the body collided only with the floor on the last call of ``moveAndSlide()``. Otherwise, returns `false`. The ``upDirection`` and ``floorMaxAngle`` are used to determine whether a surface is "floor" or not.
    public final func isOnFloorOnly ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_is_on_floor_only, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_on_ceiling: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_on_ceiling")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the body collided with the ceiling on the last call of ``moveAndSlide()``. Otherwise, returns `false`. The ``upDirection`` and ``floorMaxAngle`` are used to determine whether a surface is "ceiling" or not.
    public final func isOnCeiling ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_is_on_ceiling, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_on_ceiling_only: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_on_ceiling_only")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the body collided only with the ceiling on the last call of ``moveAndSlide()``. Otherwise, returns `false`. The ``upDirection`` and ``floorMaxAngle`` are used to determine whether a surface is "ceiling" or not.
    public final func isOnCeilingOnly ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_is_on_ceiling_only, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_on_wall: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_on_wall")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the body collided with a wall on the last call of ``moveAndSlide()``. Otherwise, returns `false`. The ``upDirection`` and ``floorMaxAngle`` are used to determine whether a surface is "wall" or not.
    public final func isOnWall ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_is_on_wall, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_is_on_wall_only: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_on_wall_only")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the body collided only with a wall on the last call of ``moveAndSlide()``. Otherwise, returns `false`. The ``upDirection`` and ``floorMaxAngle`` are used to determine whether a surface is "wall" or not.
    public final func isOnWallOnly ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CharacterBody3D.method_is_on_wall_only, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_floor_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_floor_normal")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the surface normal of the floor at the last collision point. Only valid after calling ``moveAndSlide()`` and when ``isOnFloor()`` returns `true`.
    public final func getFloorNormal ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_floor_normal, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_wall_normal: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_wall_normal")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the surface normal of the wall at the last collision point. Only valid after calling ``moveAndSlide()`` and when ``isOnWall()`` returns `true`.
    public final func getWallNormal ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_wall_normal, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_last_motion: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_last_motion")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the last motion applied to the ``CharacterBody3D`` during the last call to ``moveAndSlide()``. The movement can be split into multiple motions when sliding occurs, and this method return the last one, which is useful to retrieve the current direction of the movement.
    public final func getLastMotion ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_last_motion, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_position_delta: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_position_delta")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the travel (position delta) that occurred during the last call to ``moveAndSlide()``.
    public final func getPositionDelta ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_position_delta, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_real_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_real_velocity")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the current real velocity since the last call to ``moveAndSlide()``. For example, when you climb a slope, you will move diagonally even though the velocity is horizontal. This method returns the diagonal movement, as opposed to ``velocity`` which returns the requested velocity.
    public final func getRealVelocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_real_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_floor_angle: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_floor_angle")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2906300789)!
            }
            
        }
        
    }()
    
    /// Returns the floor's collision angle at the last collision point according to `upDirection`, which is ``Vector3.UP`` by default. This value is always positive and only valid after calling ``moveAndSlide()`` and when ``isOnFloor()`` returns `true`.
    public final func getFloorAngle (upDirection: Vector3 = Vector3 (x: 0, y: 1, z: 0))-> Double {
        var _result: Double = 0.0
        #if false
        
        var copy_up_direction = upDirection
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_get_floor_angle, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_up_direction)
        return _result
        #else
        
        var copy_up_direction = upDirection
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_up_direction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_get_floor_angle, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_platform_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_platform_velocity")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the linear velocity of the platform at the last collision point. Only valid after calling ``moveAndSlide()``.
    public final func getPlatformVelocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_platform_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_platform_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_platform_angular_velocity")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    /// Returns the angular velocity of the platform at the last collision point. Only valid after calling ``moveAndSlide()``.
    public final func getPlatformAngularVelocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_platform_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_slide_collision_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_slide_collision_count")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of times the body collided and changed direction during the last call to ``moveAndSlide()``.
    public final func getSlideCollisionCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_slide_collision_count, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_slide_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_slide_collision")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 107003663)!
            }
            
        }
        
    }()
    
    /// Returns a ``KinematicCollision3D``, which contains information about a collision that occurred during the last call to ``moveAndSlide()``. Since the body can collide several times in a single call to ``moveAndSlide()``, you must specify the index of the collision in the range 0 to (``getSlideCollisionCount()`` - 1).
    public final func getSlideCollision (slideIdx: Int32)-> KinematicCollision3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_slide_idx: Int = Int (slideIdx)
        
        gi.object_method_bind_ptrcall_v (CharacterBody3D.method_get_slide_collision, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_slide_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_slide_idx: Int = Int (slideIdx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_slide_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CharacterBody3D.method_get_slide_collision, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_last_slide_collision: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_last_slide_collision")
        return withUnsafePointer (to: &CharacterBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 186875014)!
            }
            
        }
        
    }()
    
    /// Returns a ``KinematicCollision3D``, which contains information about the latest collision that occurred during the last call to ``moveAndSlide()``.
    public final func getLastSlideCollision ()-> KinematicCollision3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (CharacterBody3D.method_get_last_slide_collision, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

