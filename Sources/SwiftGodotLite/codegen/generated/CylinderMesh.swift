// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Class representing a cylindrical ``PrimitiveMesh``.
/// 
/// Class representing a cylindrical ``PrimitiveMesh``. This class can be used to create cones by setting either the ``topRadius`` or ``bottomRadius`` properties to `0.0`.
open class CylinderMesh: PrimitiveMesh {
    override open class var godotClassName: StringName { "CylinderMesh" }
    
    /* Properties */
    
    /// Top radius of the cylinder. If set to `0.0`, the top faces will not be generated, resulting in a conic shape. See also ``capTop``.
    final public var topRadius: Double {
        get {
            return get_top_radius ()
        }
        
        set {
            set_top_radius (newValue)
        }
        
    }
    
    /// Bottom radius of the cylinder. If set to `0.0`, the bottom faces will not be generated, resulting in a conic shape. See also ``capBottom``.
    final public var bottomRadius: Double {
        get {
            return get_bottom_radius ()
        }
        
        set {
            set_bottom_radius (newValue)
        }
        
    }
    
    /// Full height of the cylinder.
    final public var height: Double {
        get {
            return get_height ()
        }
        
        set {
            set_height (newValue)
        }
        
    }
    
    /// Number of radial segments on the cylinder. Higher values result in a more detailed cylinder/cone at the cost of performance.
    final public var radialSegments: Int32 {
        get {
            return get_radial_segments ()
        }
        
        set {
            set_radial_segments (newValue)
        }
        
    }
    
    /// Number of edge rings along the height of the cylinder. Changing ``rings`` does not have any visual impact unless a shader or procedural mesh tool is used to alter the vertex data. Higher values result in more subdivisions, which can be used to create smoother-looking effects with shaders or procedural mesh tools (at the cost of performance). When not altering the vertex data using a shader or procedural mesh tool, ``rings`` should be kept to its default value.
    final public var rings: Int32 {
        get {
            return get_rings ()
        }
        
        set {
            set_rings (newValue)
        }
        
    }
    
    /// If `true`, generates a cap at the top of the cylinder. This can be set to `false` to speed up generation and rendering when the cap is never seen by the camera. See also ``topRadius``.
    /// 
    /// > Note: If ``topRadius`` is `0.0`, cap generation is always skipped even if ``capTop`` is `true`.
    /// 
    final public var capTop: Bool {
        get {
            return is_cap_top ()
        }
        
        set {
            set_cap_top (newValue)
        }
        
    }
    
    /// If `true`, generates a cap at the bottom of the cylinder. This can be set to `false` to speed up generation and rendering when the cap is never seen by the camera. See also ``bottomRadius``.
    /// 
    /// > Note: If ``bottomRadius`` is `0.0`, cap generation is always skipped even if ``capBottom`` is `true`.
    /// 
    final public var capBottom: Bool {
        get {
            return is_cap_bottom ()
        }
        
        set {
            set_cap_bottom (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_top_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_top_radius")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_top_radius (_ radius: Double) {
        #if true
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (CylinderMesh.method_set_top_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CylinderMesh.method_set_top_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_top_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_top_radius")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_top_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CylinderMesh.method_get_top_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bottom_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bottom_radius")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bottom_radius (_ radius: Double) {
        #if true
        
        var copy_radius = radius
        
        gi.object_method_bind_ptrcall_v (CylinderMesh.method_set_bottom_radius, UnsafeMutableRawPointer (mutating: handle), nil, &copy_radius)
        
        #else
        
        var copy_radius = radius
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_radius) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CylinderMesh.method_set_bottom_radius, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bottom_radius: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bottom_radius")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bottom_radius ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CylinderMesh.method_get_bottom_radius, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_height")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_height (_ height: Double) {
        #if true
        
        var copy_height = height
        
        gi.object_method_bind_ptrcall_v (CylinderMesh.method_set_height, UnsafeMutableRawPointer (mutating: handle), nil, &copy_height)
        
        #else
        
        var copy_height = height
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_height) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CylinderMesh.method_set_height, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_height: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_height")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_height ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (CylinderMesh.method_get_height, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_radial_segments: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_radial_segments")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_radial_segments (_ segments: Int32) {
        #if true
        
        var copy_segments: Int = Int (segments)
        
        gi.object_method_bind_ptrcall_v (CylinderMesh.method_set_radial_segments, UnsafeMutableRawPointer (mutating: handle), nil, &copy_segments)
        
        #else
        
        var copy_segments: Int = Int (segments)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_segments) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CylinderMesh.method_set_radial_segments, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_radial_segments: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_radial_segments")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_radial_segments ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (CylinderMesh.method_get_radial_segments, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_rings: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_rings")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rings (_ rings: Int32) {
        #if true
        
        var copy_rings: Int = Int (rings)
        
        gi.object_method_bind_ptrcall_v (CylinderMesh.method_set_rings, UnsafeMutableRawPointer (mutating: handle), nil, &copy_rings)
        
        #else
        
        var copy_rings: Int = Int (rings)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_rings) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CylinderMesh.method_set_rings, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_rings: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rings")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_rings ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (CylinderMesh.method_get_rings, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_cap_top: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cap_top")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cap_top (_ capTop: Bool) {
        #if true
        
        var copy_cap_top = capTop
        
        gi.object_method_bind_ptrcall_v (CylinderMesh.method_set_cap_top, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cap_top)
        
        #else
        
        var copy_cap_top = capTop
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cap_top) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CylinderMesh.method_set_cap_top, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_cap_top: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_cap_top")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_cap_top ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CylinderMesh.method_is_cap_top, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_cap_bottom: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_cap_bottom")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_cap_bottom (_ capBottom: Bool) {
        #if true
        
        var copy_cap_bottom = capBottom
        
        gi.object_method_bind_ptrcall_v (CylinderMesh.method_set_cap_bottom, UnsafeMutableRawPointer (mutating: handle), nil, &copy_cap_bottom)
        
        #else
        
        var copy_cap_bottom = capBottom
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_cap_bottom) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CylinderMesh.method_set_cap_bottom, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_cap_bottom: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_cap_bottom")
        return withUnsafePointer (to: &CylinderMesh.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_cap_bottom ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (CylinderMesh.method_is_cap_bottom, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

