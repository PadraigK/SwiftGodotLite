// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Holds a line of text.
/// 
/// Abstraction over ``TextServer`` for handling a single line of text.
open class TextLine: RefCounted {
    override open class var godotClassName: StringName { "TextLine" }
    
    /* Properties */
    
    /// Text writing direction.
    final public var direction: TextServer.Direction {
        get {
            return get_direction ()
        }
        
        set {
            set_direction (newValue)
        }
        
    }
    
    /// Text orientation.
    final public var orientation: TextServer.Orientation {
        get {
            return get_orientation ()
        }
        
        set {
            set_orientation (newValue)
        }
        
    }
    
    /// If set to `true` text will display invalid characters.
    final public var preserveInvalid: Bool {
        get {
            return get_preserve_invalid ()
        }
        
        set {
            set_preserve_invalid (newValue)
        }
        
    }
    
    /// If set to `true` text will display control characters.
    final public var preserveControl: Bool {
        get {
            return get_preserve_control ()
        }
        
        set {
            set_preserve_control (newValue)
        }
        
    }
    
    /// Text line width.
    final public var width: Double {
        get {
            return get_width ()
        }
        
        set {
            set_width (newValue)
        }
        
    }
    
    /// Sets text alignment within the line as if the line was horizontal.
    final public var alignment: HorizontalAlignment {
        get {
            return get_horizontal_alignment ()
        }
        
        set {
            set_horizontal_alignment (newValue)
        }
        
    }
    
    /// Line alignment rules. For more info see ``TextServer``.
    final public var flags: TextServer.JustificationFlag {
        get {
            return get_flags ()
        }
        
        set {
            set_flags (newValue)
        }
        
    }
    
    /// Sets the clipping behavior when the text exceeds the text line's set width. See ``TextServer.OverrunBehavior`` for a description of all modes.
    final public var textOverrunBehavior: TextServer.OverrunBehavior {
        get {
            return get_text_overrun_behavior ()
        }
        
        set {
            set_text_overrun_behavior (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Clears text line (removes text and inline objects).
    public final func clear () {
        gi.object_method_bind_ptrcall (TextLine.method_clear, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_direction")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1418190634)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_direction (_ direction: TextServer.Direction) {
        #if true
        
        var copy_direction = Int64 (direction.rawValue)
        
        gi.object_method_bind_ptrcall_v (TextLine.method_set_direction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_direction)
        
        #else
        
        var copy_direction = Int64 (direction.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_direction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_set_direction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_direction")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2516697328)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_direction ()-> TextServer.Direction {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TextLine.method_get_direction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.Direction (rawValue: _result)!
    }
    
    fileprivate static var method_set_orientation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_orientation")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 42823726)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_orientation (_ orientation: TextServer.Orientation) {
        #if true
        
        var copy_orientation = Int64 (orientation.rawValue)
        
        gi.object_method_bind_ptrcall_v (TextLine.method_set_orientation, UnsafeMutableRawPointer (mutating: handle), nil, &copy_orientation)
        
        #else
        
        var copy_orientation = Int64 (orientation.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_orientation) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_set_orientation, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_orientation: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_orientation")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 175768116)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_orientation ()-> TextServer.Orientation {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TextLine.method_get_orientation, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.Orientation (rawValue: _result)!
    }
    
    fileprivate static var method_set_preserve_invalid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_preserve_invalid")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_preserve_invalid (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (TextLine.method_set_preserve_invalid, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_set_preserve_invalid, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_preserve_invalid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_preserve_invalid")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_preserve_invalid ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TextLine.method_get_preserve_invalid, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_preserve_control: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_preserve_control")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_preserve_control (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (TextLine.method_set_preserve_control, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_set_preserve_control, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_preserve_control: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_preserve_control")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_preserve_control ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (TextLine.method_get_preserve_control, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bidi_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bidi_override")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    /// Overrides BiDi for the structured text.
    /// 
    /// Override ranges should cover full source text without overlaps. BiDi algorithm will be used on each range separately.
    /// 
    public final func setBidiOverride (_ override: GArray) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (TextLine.method_set_bidi_override, UnsafeMutableRawPointer (mutating: handle), nil, &override.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &override.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_set_bidi_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_string: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_string")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 621426851)!
            }
            
        }
        
    }()
    
    /// Adds text span and font to draw it.
    public final func addString (text: String, font: Font?, fontSize: Int32, language: String = "", meta: Variant)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_text = GString (text)
        var copy_font_size: Int = Int (fontSize)
        let gstr_language = GString (language)
        var copy_font_handle = font?.handle
        
        gi.object_method_bind_ptrcall_v (TextLine.method_add_string, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_text.content, &copy_font_handle, &copy_font_size, &gstr_language.content, &meta.content)
        return _result
        #else
        
        let gstr_text = GString (text)
        var copy_font_size: Int = Int (fontSize)
        let gstr_language = GString (language)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_text.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: font?.handle) { p1 in
            _args.append (font == nil ? nil : p1)
                return withUnsafePointer (to: &copy_font_size) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &gstr_language.content) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &meta.content) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (TextLine.method_add_string, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                            return _result
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_object: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_object")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1316529304)!
            }
            
        }
        
    }()
    
    /// Adds inline object to the text buffer, `key` must be unique. In the text, object is represented as `length` object replacement characters.
    public final func addObject (key: Variant, size: Vector2, inlineAlign: InlineAlignment = .center, length: Int32 = 1, baseline: Double = 0.0)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_size = size
        var copy_inline_align = Int64 (inlineAlign.rawValue)
        var copy_length: Int = Int (length)
        var copy_baseline = baseline
        
        gi.object_method_bind_ptrcall_v (TextLine.method_add_object, UnsafeMutableRawPointer (mutating: handle), &_result, &key.content, &copy_size, &copy_inline_align, &copy_length, &copy_baseline)
        return _result
        #else
        
        var copy_size = size
        var copy_inline_align = Int64 (inlineAlign.rawValue)
        var copy_length: Int = Int (length)
        var copy_baseline = baseline
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &key.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_inline_align) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_length) { p3 in
                        _args.append (p3)
                        return withUnsafePointer (to: &copy_baseline) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (TextLine.method_add_object, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                            return _result
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_resize_object: GDExtensionMethodBindPtr = {
        let methodName = StringName ("resize_object")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2095776372)!
            }
            
        }
        
    }()
    
    /// Sets new size and alignment of embedded object.
    public final func resizeObject (key: Variant, size: Vector2, inlineAlign: InlineAlignment = .center, baseline: Double = 0.0)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_size = size
        var copy_inline_align = Int64 (inlineAlign.rawValue)
        var copy_baseline = baseline
        
        gi.object_method_bind_ptrcall_v (TextLine.method_resize_object, UnsafeMutableRawPointer (mutating: handle), &_result, &key.content, &copy_size, &copy_inline_align, &copy_baseline)
        return _result
        #else
        
        var copy_size = size
        var copy_inline_align = Int64 (inlineAlign.rawValue)
        var copy_baseline = baseline
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &key.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_size) { p1 in
                _args.append (p1)
                return withUnsafePointer (to: &copy_inline_align) { p2 in
                    _args.append (p2)
                    return withUnsafePointer (to: &copy_baseline) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (TextLine.method_resize_object, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                        return _result
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_width")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_width (_ width: Double) {
        #if true
        
        var copy_width = width
        
        gi.object_method_bind_ptrcall_v (TextLine.method_set_width, UnsafeMutableRawPointer (mutating: handle), nil, &copy_width)
        
        #else
        
        var copy_width = width
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_set_width, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_width")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_width ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextLine.method_get_width, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_horizontal_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_horizontal_alignment")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2312603777)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_horizontal_alignment (_ alignment: HorizontalAlignment) {
        #if true
        
        var copy_alignment = Int64 (alignment.rawValue)
        
        gi.object_method_bind_ptrcall_v (TextLine.method_set_horizontal_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &copy_alignment)
        
        #else
        
        var copy_alignment = Int64 (alignment.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_alignment) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_set_horizontal_alignment, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_horizontal_alignment: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_horizontal_alignment")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 341400642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_horizontal_alignment ()-> HorizontalAlignment {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TextLine.method_get_horizontal_alignment, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return HorizontalAlignment (rawValue: _result)!
    }
    
    fileprivate static var method_tab_align: GDExtensionMethodBindPtr = {
        let methodName = StringName ("tab_align")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2899603908)!
            }
            
        }
        
    }()
    
    /// Aligns text to the given tab-stops.
    public final func tabAlign (tabStops: PackedFloat32Array) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (TextLine.method_tab_align, UnsafeMutableRawPointer (mutating: handle), nil, &tabStops.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &tabStops.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_tab_align, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_flags")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2877345813)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_flags (_ flags: TextServer.JustificationFlag) {
        #if true
        
        var copy_flags = flags
        
        gi.object_method_bind_ptrcall_v (TextLine.method_set_flags, UnsafeMutableRawPointer (mutating: handle), nil, &copy_flags)
        
        #else
        
        var copy_flags = flags
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_flags) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_set_flags, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_flags: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_flags")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1583363614)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_flags ()-> TextServer.JustificationFlag {
        var _result: TextServer.JustificationFlag = TextServer.JustificationFlag ()
        gi.object_method_bind_ptrcall (TextLine.method_get_flags, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_text_overrun_behavior: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text_overrun_behavior")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1008890932)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_text_overrun_behavior (_ overrunBehavior: TextServer.OverrunBehavior) {
        #if true
        
        var copy_overrun_behavior = Int64 (overrunBehavior.rawValue)
        
        gi.object_method_bind_ptrcall_v (TextLine.method_set_text_overrun_behavior, UnsafeMutableRawPointer (mutating: handle), nil, &copy_overrun_behavior)
        
        #else
        
        var copy_overrun_behavior = Int64 (overrunBehavior.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_overrun_behavior) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_set_text_overrun_behavior, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_text_overrun_behavior: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text_overrun_behavior")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3779142101)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_text_overrun_behavior ()-> TextServer.OverrunBehavior {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (TextLine.method_get_text_overrun_behavior, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.OverrunBehavior (rawValue: _result)!
    }
    
    fileprivate static var method_get_objects: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_objects")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns array of inline objects.
    public final func getObjects ()-> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall (TextLine.method_get_objects, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_object_rect: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_object_rect")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1742700391)!
            }
            
        }
        
    }()
    
    /// Returns bounding rectangle of the inline object.
    public final func getObjectRect (key: Variant)-> Rect2 {
        var _result: Rect2 = Rect2 ()
        #if true
        
        
        gi.object_method_bind_ptrcall_v (TextLine.method_get_object_rect, UnsafeMutableRawPointer (mutating: handle), &_result, &key.content)
        return _result
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &key.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_get_object_rect, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_size: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_size")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3341600327)!
            }
            
        }
        
    }()
    
    /// Returns size of the bounding box of the text.
    public final func getSize ()-> Vector2 {
        var _result: Vector2 = Vector2 ()
        gi.object_method_bind_ptrcall (TextLine.method_get_size, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_rid: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_rid")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2944877500)!
            }
            
        }
        
    }()
    
    /// Returns TextServer buffer RID.
    public final func getRid ()-> RID {
        let _result: RID = RID ()
        gi.object_method_bind_ptrcall (TextLine.method_get_rid, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_line_ascent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_line_ascent")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the text ascent (number of pixels above the baseline for horizontal layout or to the left of baseline for vertical).
    public final func getLineAscent ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextLine.method_get_line_ascent, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_line_descent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_line_descent")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the text descent (number of pixels below the baseline for horizontal layout or to the right of baseline for vertical).
    public final func getLineDescent ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextLine.method_get_line_descent, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_line_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_line_width")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns width (for horizontal layout) or height (for vertical) of the text.
    public final func getLineWidth ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextLine.method_get_line_width, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_line_underline_position: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_line_underline_position")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns pixel offset of the underline below the baseline.
    public final func getLineUnderlinePosition ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextLine.method_get_line_underline_position, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_line_underline_thickness: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_line_underline_thickness")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns thickness of the underline.
    public final func getLineUnderlineThickness ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (TextLine.method_get_line_underline_thickness, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_draw: GDExtensionMethodBindPtr = {
        let methodName = StringName ("draw")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 856975658)!
            }
            
        }
        
    }()
    
    /// Draw text into a canvas item at a given position, with `color`. `pos` specifies the top left corner of the bounding box.
    public final func draw (canvas: RID, pos: Vector2, color: Color = Color (r: 1, g: 1, b: 1, a: 1)) {
        #if true
        
        var copy_pos = pos
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (TextLine.method_draw, UnsafeMutableRawPointer (mutating: handle), nil, &canvas.content, &copy_pos, &copy_color)
        
        #else
        
        var copy_pos = pos
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &canvas.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_pos) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_color) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (TextLine.method_draw, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_draw_outline: GDExtensionMethodBindPtr = {
        let methodName = StringName ("draw_outline")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1343401456)!
            }
            
        }
        
    }()
    
    /// Draw text into a canvas item at a given position, with `color`. `pos` specifies the top left corner of the bounding box.
    public final func drawOutline (canvas: RID, pos: Vector2, outlineSize: Int32 = 1, color: Color = Color (r: 1, g: 1, b: 1, a: 1)) {
        #if true
        
        var copy_pos = pos
        var copy_outline_size: Int = Int (outlineSize)
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (TextLine.method_draw_outline, UnsafeMutableRawPointer (mutating: handle), nil, &canvas.content, &copy_pos, &copy_outline_size, &copy_color)
        
        #else
        
        var copy_pos = pos
        var copy_outline_size: Int = Int (outlineSize)
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &canvas.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_pos) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_outline_size) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_color) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (TextLine.method_draw_outline, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_hit_test: GDExtensionMethodBindPtr = {
        let methodName = StringName ("hit_test")
        return withUnsafePointer (to: &TextLine.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2401831903)!
            }
            
        }
        
    }()
    
    /// Returns caret character offset at the specified pixel offset at the baseline. This function always returns a valid position.
    public final func hitTest (coords: Double)-> Int32 {
        var _result: Int32 = 0
        #if true
        
        var copy_coords = coords
        
        gi.object_method_bind_ptrcall_v (TextLine.method_hit_test, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_coords)
        return _result
        #else
        
        var copy_coords = coords
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_coords) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextLine.method_hit_test, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
}

