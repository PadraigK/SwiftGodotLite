// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Used to create an HMAC for a message using a key.
/// 
/// The HMACContext class is useful for advanced HMAC use cases, such as streaming the message as it supports creating the message over time rather than providing it all at once.
/// 
open class HMACContext: RefCounted {
    override open class var godotClassName: StringName { "HMACContext" }
    /* Methods */
    fileprivate static var method_start: GDExtensionMethodBindPtr = {
        let methodName = StringName ("start")
        return withUnsafePointer (to: &HMACContext.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3537364598)!
            }
            
        }
        
    }()
    
    /// Initializes the HMACContext. This method cannot be called again on the same HMACContext until ``finish()`` has been called.
    public final func start (hashType: HashingContext.HashType, key: PackedByteArray)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        var copy_hash_type = Int64 (hashType.rawValue)
        
        gi.object_method_bind_ptrcall_v (HMACContext.method_start, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_hash_type, &key.content)
        return GodotError (rawValue: _result)!
        #else
        
        var copy_hash_type = Int64 (hashType.rawValue)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_hash_type) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &key.content) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (HMACContext.method_start, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return GodotError (rawValue: _result)!
            }
        }
        
        #endif
    }
    
    fileprivate static var method_update: GDExtensionMethodBindPtr = {
        let methodName = StringName ("update")
        return withUnsafePointer (to: &HMACContext.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 680677267)!
            }
            
        }
        
    }()
    
    /// Updates the message to be HMACed. This can be called multiple times before ``finish()`` is called to append `data` to the message, but cannot be called until ``start(hashType:key:)`` has been called.
    public final func update (data: PackedByteArray)-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if true
        
        
        gi.object_method_bind_ptrcall_v (HMACContext.method_update, UnsafeMutableRawPointer (mutating: handle), &_result, &data.content)
        return GodotError (rawValue: _result)!
        #else
        
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &data.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (HMACContext.method_update, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return GodotError (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_finish: GDExtensionMethodBindPtr = {
        let methodName = StringName ("finish")
        return withUnsafePointer (to: &HMACContext.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2115431945)!
            }
            
        }
        
    }()
    
    /// Returns the resulting HMAC. If the HMAC failed, an empty ``PackedByteArray`` is returned.
    public final func finish ()-> PackedByteArray {
        let _result: PackedByteArray = PackedByteArray ()
        gi.object_method_bind_ptrcall (HMACContext.method_finish, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
}

