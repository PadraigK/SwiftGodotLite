// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 3D trimesh shape used for physics collision.
/// 
/// A 3D trimesh shape, intended for use in physics. Usually used to provide a shape for a ``CollisionShape3D``.
/// 
/// Being just a collection of interconnected triangles, ``ConcavePolygonShape3D`` is the most freely configurable single 3D shape. It can be used to form polyhedra of any nature, or even shapes that don't enclose a volume. However, ``ConcavePolygonShape3D`` is _hollow_ even if the interconnected triangles do enclose a volume, which often makes it unsuitable for physics or detection.
/// 
/// > Note: When used for collision, ``ConcavePolygonShape3D`` is intended to work with static ``CollisionShape3D`` nodes like ``StaticBody3D`` and will likely not behave well for ``CharacterBody3D``s or ``RigidBody3D``s in a mode other than Static.
/// 
/// > Warning: Physics bodies that are small have a chance to clip through this shape when moving fast. This happens because on one frame, the physics body may be on the "outside" of the shape, and on the next frame it may be "inside" it. ``ConcavePolygonShape3D`` is hollow, so it won't detect a collision.
/// 
/// **Performance:** Due to its complexity, ``ConcavePolygonShape3D`` is the slowest 3D collision shape to check collisions against. Its use should generally be limited to level geometry. For convex geometry, ``ConvexPolygonShape3D`` should be used. For dynamic physics bodies that need concave collision, several ``ConvexPolygonShape3D``s can be used to represent its collision by using convex decomposition; see ``ConvexPolygonShape3D``'s documentation for instructions.
/// 
open class ConcavePolygonShape3D: Shape3D {
    override open class var godotClassName: StringName { "ConcavePolygonShape3D" }
    
    /* Properties */
    
    final public var data: PackedVector3Array {
        get {
            return get_faces ()
        }
        
        set {
            set_faces (newValue)
        }
        
    }
    
    /// If set to `true`, collisions occur on both sides of the concave shape faces. Otherwise they occur only along the face normals.
    final public var backfaceCollision: Bool {
        get {
            return is_backface_collision_enabled ()
        }
        
        set {
            set_backface_collision_enabled (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_faces: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_faces")
        return withUnsafePointer (to: &ConcavePolygonShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 334873810)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Sets the faces of the trimesh shape from an array of vertices. The `faces` array should be composed of triples such that each triple of vertices defines a triangle.
    fileprivate final func set_faces (_ faces: PackedVector3Array) {
        #if false
        
        
        gi.object_method_bind_ptrcall_v (ConcavePolygonShape3D.method_set_faces, UnsafeMutableRawPointer (mutating: handle), nil, &faces.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &faces.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ConcavePolygonShape3D.method_set_faces, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_faces: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_faces")
        return withUnsafePointer (to: &ConcavePolygonShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 497664490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    /// Returns the faces of the trimesh shape as an array of vertices. The array (of length divisible by three) is naturally divided into triples; each triple of vertices defines a triangle.
    fileprivate final func get_faces ()-> PackedVector3Array {
        let _result: PackedVector3Array = PackedVector3Array ()
        gi.object_method_bind_ptrcall (ConcavePolygonShape3D.method_get_faces, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_set_backface_collision_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_backface_collision_enabled")
        return withUnsafePointer (to: &ConcavePolygonShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_backface_collision_enabled (_ enabled: Bool) {
        #if false
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (ConcavePolygonShape3D.method_set_backface_collision_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (ConcavePolygonShape3D.method_set_backface_collision_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_backface_collision_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_backface_collision_enabled")
        return withUnsafePointer (to: &ConcavePolygonShape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_backface_collision_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (ConcavePolygonShape3D.method_is_backface_collision_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

