// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A button that represents a link.
/// 
/// A button that represents a link. This type of button is primarily used for interactions that cause a context change (like linking to a web page).
/// 
/// See also ``BaseButton`` which contains common properties and methods associated with this node.
/// 
open class LinkButton: BaseButton {
    override open class var godotClassName: StringName { "LinkButton" }
    public enum UnderlineMode: Int64 {
        /// The LinkButton will always show an underline at the bottom of its text.
        case always = 0 // UNDERLINE_MODE_ALWAYS
        /// The LinkButton will show an underline at the bottom of its text when the mouse cursor is over it.
        case onHover = 1 // UNDERLINE_MODE_ON_HOVER
        /// The LinkButton will never show an underline at the bottom of its text.
        case never = 2 // UNDERLINE_MODE_NEVER
    }
    
    
    /* Properties */
    
    /// The button's text that will be displayed inside the button's area.
    final public var text: String {
        get {
            return get_text ()
        }
        
        set {
            set_text (newValue)
        }
        
    }
    
    /// The underline mode to use for the text. See ``LinkButton.UnderlineMode`` for the available modes.
    final public var underline: LinkButton.UnderlineMode {
        get {
            return get_underline_mode ()
        }
        
        set {
            set_underline_mode (newValue)
        }
        
    }
    
    /// The [url=https://en.wikipedia.org/wiki/Uniform_Resource_Identifier]URI[/url] for this ``LinkButton``. If set to a valid URI, pressing the button opens the URI using the operating system's default program for the protocol (via ``OS/shellOpen(uri:)``). HTTP and HTTPS URLs open the default web browser.
    /// 
    /// **Examples:**
    /// 
    final public var uri: String {
        get {
            return get_uri ()
        }
        
        set {
            set_uri (newValue)
        }
        
    }
    
    /// Base text writing direction.
    final public var textDirection: Control.TextDirection {
        get {
            return get_text_direction ()
        }
        
        set {
            set_text_direction (newValue)
        }
        
    }
    
    /// Language code used for line-breaking and text shaping algorithms, if left empty current locale is used instead.
    final public var language: String {
        get {
            return get_language ()
        }
        
        set {
            set_language (newValue)
        }
        
    }
    
    /// Set BiDi algorithm override for the structured text.
    final public var structuredTextBidiOverride: TextServer.StructuredTextParser {
        get {
            return get_structured_text_bidi_override ()
        }
        
        set {
            set_structured_text_bidi_override (newValue)
        }
        
    }
    
    /// Set additional options for BiDi override.
    final public var structuredTextBidiOverrideOptions: GArray {
        get {
            return get_structured_text_bidi_override_options ()
        }
        
        set {
            set_structured_text_bidi_override_options (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_text (_ text: String) {
        #if true
        
        let gstr_text = GString (text)
        
        gi.object_method_bind_ptrcall_v (LinkButton.method_set_text, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_text.content)
        
        #else
        
        let gstr_text = GString (text)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_text.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LinkButton.method_set_text, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_text: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_text ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (LinkButton.method_get_text, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_text_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_text_direction")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 119160795)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_text_direction (_ direction: Control.TextDirection) {
        #if true
        
        var copy_direction = Int64 (direction.rawValue)
        
        gi.object_method_bind_ptrcall_v (LinkButton.method_set_text_direction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_direction)
        
        #else
        
        var copy_direction = Int64 (direction.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_direction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LinkButton.method_set_text_direction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_text_direction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_text_direction")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 797257663)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_text_direction ()-> Control.TextDirection {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (LinkButton.method_get_text_direction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return Control.TextDirection (rawValue: _result)!
    }
    
    fileprivate static var method_set_language: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_language")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_language (_ language: String) {
        #if true
        
        let gstr_language = GString (language)
        
        gi.object_method_bind_ptrcall_v (LinkButton.method_set_language, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_language.content)
        
        #else
        
        let gstr_language = GString (language)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_language.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LinkButton.method_set_language, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_language: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_language")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_language ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (LinkButton.method_get_language, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_uri: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_uri")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_uri (_ uri: String) {
        #if true
        
        let gstr_uri = GString (uri)
        
        gi.object_method_bind_ptrcall_v (LinkButton.method_set_uri, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_uri.content)
        
        #else
        
        let gstr_uri = GString (uri)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_uri.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LinkButton.method_set_uri, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_uri: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_uri")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_uri ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (LinkButton.method_get_uri, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_underline_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_underline_mode")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4032947085)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_underline_mode (_ underlineMode: LinkButton.UnderlineMode) {
        #if true
        
        var copy_underline_mode = Int64 (underlineMode.rawValue)
        
        gi.object_method_bind_ptrcall_v (LinkButton.method_set_underline_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_underline_mode)
        
        #else
        
        var copy_underline_mode = Int64 (underlineMode.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_underline_mode) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LinkButton.method_set_underline_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_underline_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_underline_mode")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 568343738)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_underline_mode ()-> LinkButton.UnderlineMode {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (LinkButton.method_get_underline_mode, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return LinkButton.UnderlineMode (rawValue: _result)!
    }
    
    fileprivate static var method_set_structured_text_bidi_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_structured_text_bidi_override")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 55961453)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_structured_text_bidi_override (_ parser: TextServer.StructuredTextParser) {
        #if true
        
        var copy_parser = Int64 (parser.rawValue)
        
        gi.object_method_bind_ptrcall_v (LinkButton.method_set_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), nil, &copy_parser)
        
        #else
        
        var copy_parser = Int64 (parser.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_parser) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LinkButton.method_set_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_structured_text_bidi_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_structured_text_bidi_override")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3385126229)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_structured_text_bidi_override ()-> TextServer.StructuredTextParser {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (LinkButton.method_get_structured_text_bidi_override, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return TextServer.StructuredTextParser (rawValue: _result)!
    }
    
    fileprivate static var method_set_structured_text_bidi_override_options: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_structured_text_bidi_override_options")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 381264803)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_structured_text_bidi_override_options (_ args: GArray) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (LinkButton.method_set_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), nil, &args.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &args.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (LinkButton.method_set_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_structured_text_bidi_override_options: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_structured_text_bidi_override_options")
        return withUnsafePointer (to: &LinkButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_structured_text_bidi_override_options ()-> GArray {
        let _result: GArray = GArray ()
        gi.object_method_bind_ptrcall (LinkButton.method_get_structured_text_bidi_override_options, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
}

