// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 3D physics body that can't be moved by external forces. When moved manually, it doesn't affect other bodies in its path.
/// 
/// A static 3D physics body. It can't be moved by external forces or contacts, but can be moved manually by other means such as code, ``AnimationMixer``s (with ``AnimationMixer/callbackModeProcess`` set to ``AnimationMixer/AnimationCallbackModeProcess/physics``), and ``RemoteTransform3D``.
/// 
/// When ``StaticBody3D`` is moved, it is teleported to its new position without affecting other physics bodies in its path. If this is not desired, use ``AnimatableBody3D`` instead.
/// 
/// ``StaticBody3D`` is useful for completely static objects like floors and walls, as well as moving surfaces like conveyor belts and circular revolving platforms (by using ``constantLinearVelocity`` and ``constantAngularVelocity``).
/// 
open class StaticBody3D: PhysicsBody3D {
    override open class var godotClassName: StringName { "StaticBody3D" }
    
    /* Properties */
    
    /// The physics material override for the body.
    /// 
    /// If a material is assigned to this property, it will be used instead of any other physics material, such as an inherited one.
    /// 
    final public var physicsMaterialOverride: PhysicsMaterial? {
        get {
            return get_physics_material_override ()
        }
        
        set {
            set_physics_material_override (newValue)
        }
        
    }
    
    /// The body's constant linear velocity. This does not move the body, but affects touching bodies, as if it were moving.
    final public var constantLinearVelocity: Vector3 {
        get {
            return get_constant_linear_velocity ()
        }
        
        set {
            set_constant_linear_velocity (newValue)
        }
        
    }
    
    /// The body's constant angular velocity. This does not rotate the body, but affects touching bodies, as if it were rotating.
    final public var constantAngularVelocity: Vector3 {
        get {
            return get_constant_angular_velocity ()
        }
        
        set {
            set_constant_angular_velocity (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_constant_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constant_linear_velocity")
        return withUnsafePointer (to: &StaticBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_constant_linear_velocity (_ vel: Vector3) {
        #if true
        
        var copy_vel = vel
        
        gi.object_method_bind_ptrcall_v (StaticBody3D.method_set_constant_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_vel)
        
        #else
        
        var copy_vel = vel
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_vel) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StaticBody3D.method_set_constant_linear_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_constant_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_constant_angular_velocity")
        return withUnsafePointer (to: &StaticBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3460891852)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_constant_angular_velocity (_ vel: Vector3) {
        #if true
        
        var copy_vel = vel
        
        gi.object_method_bind_ptrcall_v (StaticBody3D.method_set_constant_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &copy_vel)
        
        #else
        
        var copy_vel = vel
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_vel) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (StaticBody3D.method_set_constant_angular_velocity, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_constant_linear_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constant_linear_velocity")
        return withUnsafePointer (to: &StaticBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_constant_linear_velocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (StaticBody3D.method_get_constant_linear_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_constant_angular_velocity: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_constant_angular_velocity")
        return withUnsafePointer (to: &StaticBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3360562783)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_constant_angular_velocity ()-> Vector3 {
        var _result: Vector3 = Vector3 ()
        gi.object_method_bind_ptrcall (StaticBody3D.method_get_constant_angular_velocity, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_physics_material_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_physics_material_override")
        return withUnsafePointer (to: &StaticBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1784508650)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_physics_material_override (_ physicsMaterialOverride: PhysicsMaterial?) {
        #if true
        
        var copy_physics_material_override_handle = physicsMaterialOverride?.handle
        
        gi.object_method_bind_ptrcall_v (StaticBody3D.method_set_physics_material_override, UnsafeMutableRawPointer (mutating: handle), nil, &copy_physics_material_override_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: physicsMaterialOverride?.handle) { p0 in
        _args.append (physicsMaterialOverride == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (StaticBody3D.method_set_physics_material_override, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_physics_material_override: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_physics_material_override")
        return withUnsafePointer (to: &StaticBody3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2521850424)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_physics_material_override ()-> PhysicsMaterial? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (StaticBody3D.method_get_physics_material_override, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

