// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A 1D texture where the red, green, and blue color channels correspond to points on 3 curves.
/// 
/// A 1D texture where the red, green, and blue color channels correspond to points on 3 ``Curve`` resources. Compared to using separate ``CurveTexture``s, this further simplifies the task of saving curves as image files.
/// 
/// If you only need to store one curve within a single texture, use ``CurveTexture`` instead. See also ``GradientTexture1D`` and ``GradientTexture2D``.
/// 
open class CurveXYZTexture: Texture2D {
    override open class var godotClassName: StringName { "CurveXYZTexture" }
    
    /* Properties */
    
    /// The width of the texture (in pixels). Higher values make it possible to represent high-frequency data better (such as sudden direction changes), at the cost of increased generation time and memory usage.
    final public var width: Int32 {
        get {
            return getWidth ()
        }
        
        set {
            set_width (newValue)
        }
        
    }
    
    /// The ``Curve`` that is rendered onto the texture's red channel.
    final public var curveX: Curve? {
        get {
            return get_curve_x ()
        }
        
        set {
            set_curve_x (newValue)
        }
        
    }
    
    /// The ``Curve`` that is rendered onto the texture's green channel.
    final public var curveY: Curve? {
        get {
            return get_curve_y ()
        }
        
        set {
            set_curve_y (newValue)
        }
        
    }
    
    /// The ``Curve`` that is rendered onto the texture's blue channel.
    final public var curveZ: Curve? {
        get {
            return get_curve_z ()
        }
        
        set {
            set_curve_z (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_width: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_width")
        return withUnsafePointer (to: &CurveXYZTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1286410249)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_width (_ width: Int32) {
        #if true
        
        var copy_width: Int = Int (width)
        
        gi.object_method_bind_ptrcall_v (CurveXYZTexture.method_set_width, UnsafeMutableRawPointer (mutating: handle), nil, &copy_width)
        
        #else
        
        var copy_width: Int = Int (width)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_width) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CurveXYZTexture.method_set_width, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_curve_x: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_curve_x")
        return withUnsafePointer (to: &CurveXYZTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 270443179)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_curve_x (_ curve: Curve?) {
        #if true
        
        var copy_curve_handle = curve?.handle
        
        gi.object_method_bind_ptrcall_v (CurveXYZTexture.method_set_curve_x, UnsafeMutableRawPointer (mutating: handle), nil, &copy_curve_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: curve?.handle) { p0 in
        _args.append (curve == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (CurveXYZTexture.method_set_curve_x, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_curve_x: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_curve_x")
        return withUnsafePointer (to: &CurveXYZTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2460114913)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_curve_x ()-> Curve? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (CurveXYZTexture.method_get_curve_x, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_curve_y: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_curve_y")
        return withUnsafePointer (to: &CurveXYZTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 270443179)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_curve_y (_ curve: Curve?) {
        #if true
        
        var copy_curve_handle = curve?.handle
        
        gi.object_method_bind_ptrcall_v (CurveXYZTexture.method_set_curve_y, UnsafeMutableRawPointer (mutating: handle), nil, &copy_curve_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: curve?.handle) { p0 in
        _args.append (curve == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (CurveXYZTexture.method_set_curve_y, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_curve_y: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_curve_y")
        return withUnsafePointer (to: &CurveXYZTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2460114913)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_curve_y ()-> Curve? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (CurveXYZTexture.method_get_curve_y, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_set_curve_z: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_curve_z")
        return withUnsafePointer (to: &CurveXYZTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 270443179)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_curve_z (_ curve: Curve?) {
        #if true
        
        var copy_curve_handle = curve?.handle
        
        gi.object_method_bind_ptrcall_v (CurveXYZTexture.method_set_curve_z, UnsafeMutableRawPointer (mutating: handle), nil, &copy_curve_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: curve?.handle) { p0 in
        _args.append (curve == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (CurveXYZTexture.method_set_curve_z, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_curve_z: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_curve_z")
        return withUnsafePointer (to: &CurveXYZTexture.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2460114913)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_curve_z ()-> Curve? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (CurveXYZTexture.method_get_curve_z, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

