// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Abstract base class for 3D shapes used for physics collision.
/// 
/// Abstract base class for all 3D shapes, intended for use in physics.
/// 
/// **Performance:** Primitive shapes, especially ``SphereShape3D``, are fast to check collisions against. ``ConvexPolygonShape3D`` and ``HeightMapShape3D`` are slower, and ``ConcavePolygonShape3D`` is the slowest.
/// 
open class Shape3D: Resource {
    override open class var godotClassName: StringName { "Shape3D" }
    
    /* Properties */
    
    /// The shape's custom solver bias. Defines how much bodies react to enforce contact separation when this shape is involved.
    /// 
    /// When set to `0`, the default value from ``ProjectSettings/physics/3d/solver/defaultContactBias`` is used.
    /// 
    final public var customSolverBias: Double {
        get {
            return get_custom_solver_bias ()
        }
        
        set {
            set_custom_solver_bias (newValue)
        }
        
    }
    
    /// The collision margin for the shape. This is not used in Godot Physics.
    /// 
    /// Collision margins allow collision detection to be more efficient by adding an extra shell around shapes. Collision algorithms are more expensive when objects overlap by more than their margin, so a higher value for margins is better for performance, at the cost of accuracy around edges as it makes them less sharp.
    /// 
    final public var margin: Double {
        get {
            return get_margin ()
        }
        
        set {
            set_margin (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_custom_solver_bias: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_custom_solver_bias")
        return withUnsafePointer (to: &Shape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_custom_solver_bias (_ bias: Double) {
        #if false
        
        var copy_bias = bias
        
        gi.object_method_bind_ptrcall_v (Shape3D.method_set_custom_solver_bias, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bias)
        
        #else
        
        var copy_bias = bias
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bias) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Shape3D.method_set_custom_solver_bias, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_custom_solver_bias: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_custom_solver_bias")
        return withUnsafePointer (to: &Shape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_custom_solver_bias ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Shape3D.method_get_custom_solver_bias, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_margin")
        return withUnsafePointer (to: &Shape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_margin (_ margin: Double) {
        #if false
        
        var copy_margin = margin
        
        gi.object_method_bind_ptrcall_v (Shape3D.method_set_margin, UnsafeMutableRawPointer (mutating: handle), nil, &copy_margin)
        
        #else
        
        var copy_margin = margin
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_margin) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (Shape3D.method_set_margin, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_margin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_margin")
        return withUnsafePointer (to: &Shape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_margin ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (Shape3D.method_get_margin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_debug_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_debug_mesh")
        return withUnsafePointer (to: &Shape3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1605880883)!
            }
            
        }
        
    }()
    
    /// Returns the ``ArrayMesh`` used to draw the debug collision for this ``Shape3D``.
    public final func getDebugMesh ()-> ArrayMesh? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (Shape3D.method_get_debug_mesh, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

