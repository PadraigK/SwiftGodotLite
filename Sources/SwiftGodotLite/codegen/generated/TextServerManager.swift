// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A singleton for managing ``TextServer`` implementations.
/// 
/// ``TextServerManager`` is the API backend for loading, enumerating, and switching ``TextServer``s.
/// 
/// > Note: Switching text server at runtime is possible, but will invalidate all fonts and text buffers. Make sure to unload all controls, fonts, and themes before doing so.
/// 
/// 
/// 
/// This object emits the following signals:
/// 
/// - ``interfaceAdded``
/// - ``interfaceRemoved``
open class TextServerManager: Object {
    /// The shared instance of this class
    public static var shared: TextServerManager = {
        return withUnsafePointer (to: &TextServerManager.godotClassName.content) { ptr in
            TextServerManager (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "TextServerManager" }
    /* Methods */
    fileprivate static var method_add_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_interface")
        return withUnsafePointer (to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1799689403)!
            }
            
        }
        
    }()
    
    /// Registers a ``TextServer`` interface.
    public static func addInterface (_ interface: TextServer?) {
        #if false
        
        var copy_interface_handle = interface?.handle
        
        gi.object_method_bind_ptrcall_v (TextServerManager.method_add_interface, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_interface_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: interface?.handle) { p0 in
        _args.append (interface == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TextServerManager.method_add_interface, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_interface_count: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_interface_count")
        return withUnsafePointer (to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3905245786)!
            }
            
        }
        
    }()
    
    /// Returns the number of interfaces currently registered.
    public static func getInterfaceCount ()-> Int32 {
        var _result: Int32 = 0
        gi.object_method_bind_ptrcall (TextServerManager.method_get_interface_count, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_remove_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName ("remove_interface")
        return withUnsafePointer (to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1799689403)!
            }
            
        }
        
    }()
    
    /// Removes an interface. All fonts and shaped text caches should be freed before removing an interface.
    public static func removeInterface (_ interface: TextServer?) {
        #if false
        
        var copy_interface_handle = interface?.handle
        
        gi.object_method_bind_ptrcall_v (TextServerManager.method_remove_interface, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_interface_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: interface?.handle) { p0 in
        _args.append (interface == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TextServerManager.method_remove_interface, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_interface")
        return withUnsafePointer (to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1672475555)!
            }
            
        }
        
    }()
    
    /// Returns the interface registered at a given index.
    public static func getInterface (idx: Int32)-> TextServer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (TextServerManager.method_get_interface, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &copy_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextServerManager.method_get_interface, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_get_interfaces: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_interfaces")
        return withUnsafePointer (to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3995934104)!
            }
            
        }
        
    }()
    
    /// Returns a list of available interfaces, with the index and name of each interface.
    public static func getInterfaces ()-> VariantCollection<GDictionary> {
        var _result: Int64 = 0
        gi.object_method_bind_ptrcall (TextServerManager.method_get_interfaces, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        return VariantCollection<GDictionary>(content: _result)
    }
    
    fileprivate static var method_find_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName ("find_interface")
        return withUnsafePointer (to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2240905781)!
            }
            
        }
        
    }()
    
    /// Finds an interface by its `name`.
    public static func findInterface (name: String)-> TextServer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (TextServerManager.method_find_interface, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &gstr_name.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (TextServerManager.method_find_interface, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_primary_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_primary_interface")
        return withUnsafePointer (to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1799689403)!
            }
            
        }
        
    }()
    
    /// Sets the primary ``TextServer`` interface.
    public static func setPrimaryInterface (index: TextServer?) {
        #if false
        
        var copy_index_handle = index?.handle
        
        gi.object_method_bind_ptrcall_v (TextServerManager.method_set_primary_interface, UnsafeMutableRawPointer (mutating: shared.handle), nil, &copy_index_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: index?.handle) { p0 in
        _args.append (index == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (TextServerManager.method_set_primary_interface, UnsafeMutableRawPointer (mutating: shared.handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_primary_interface: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_primary_interface")
        return withUnsafePointer (to: &TextServerManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 905850878)!
            }
            
        }
        
    }()
    
    /// Returns the primary ``TextServer`` interface currently in use.
    public static func getPrimaryInterface ()-> TextServer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (TextServerManager.method_get_primary_interface, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    // Signals 
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal1/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal1/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal1/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal1 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal1 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ interfaceName: StringName) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = StringName (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when a new interface has been added.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.interfaceAdded.connect { interfaceName in
    ///    print ("caught signal")
    /// }
    /// ```
    public var interfaceAdded: Signal1 { Signal1 (target: self, signalName: "interface_added") }
    
    /// Signal support.
    /// 
    /// 
    /// 
    /// Use the ``Signal2/connect(flags:_:)`` method to connect to the signal on the container object, and ``Signal2/disconnect(_:)`` to drop the connection.
    /// 
    /// You can also await the ``Signal2/emitted`` property for waiting for a single emission of the signal.
    /// 
    public class Signal2 {
        var target: Object
        var signalName: StringName
        init (target: Object, signalName: StringName) {
            self.target = target
            self.signalName = signalName
        }
        
        /// Connects the signal to the specified callback
        /// 
        /// 
        /// 
        /// To disconnect, call the disconnect method, with the returned token on success
        /// 
        /// - Parameters:
        /// 
        /// - callback: the method to invoke when this signal is raised
        /// 
        /// - flags: Optional, can be also added to configure the connection's behavior (see ``Object/ConnectFlags`` constants).
        /// 
        /// - Returns: an object token that can be used to disconnect the object from the target on success, or the error produced by Godot.
        /// 
        @discardableResult /* Signal2 */
        public func connect (flags: Object.ConnectFlags = [], _ callback: @escaping (_ interfaceName: StringName) -> ()) -> Object {
            let signalProxy = SignalProxy()
            signalProxy.proxy =  {
                args in
                let arg_0 = StringName (args [0])!
                
                callback (arg_0)
            }
            
            let callable = Callable(object: signalProxy, method: SignalProxy.proxyName)
            let r = target.connect(signal: signalName, callable: callable, flags: UInt32 (flags.rawValue))
            if r != .ok { print ("Warning, error connecting to signal, code: \(r)") }
            return signalProxy
        }
        
        /// Disconnects a signal that was previously connected, the return value from calling ``connect(flags:_:)``
        public func disconnect (_ token: Object) {
            target.disconnect(signal: signalName, callable: Callable (object: token, method: SignalProxy.proxyName))
        }
        
        /// You can await this property to wait for the signal to be emitted once
        public var emitted: Void  {
            get async {
                await withCheckedContinuation {
                    c in
                    connect (flags: .oneShot) { _ in c.resume () }
                }
                
            }
            
        }
        
    }
    
    /// Emitted when an interface is removed.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.interfaceRemoved.connect { interfaceName in
    ///    print ("caught signal")
    /// }
    /// ```
    public var interfaceRemoved: Signal2 { Signal2 (target: self, signalName: "interface_removed") }
    
}

