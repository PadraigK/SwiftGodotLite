// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Gizmo for editing ``Node3D`` objects.
/// 
/// Gizmo that is used for providing custom visualization and editing (handles and subgizmos) for ``Node3D`` objects. Can be overridden to create custom gizmos, but for simple gizmos creating a ``EditorNode3DGizmoPlugin`` is usually recommended.
open class EditorNode3DGizmo: Node3DGizmo {
    override open class var godotClassName: StringName { "EditorNode3DGizmo" }
    /* Methods */
    /// Override this method to add all the gizmo elements whenever a gizmo update is requested. It's common to call ``clear()`` at the beginning of this method and then add visual elements depending on the node's properties.
    @_documentation(visibility: public)
    open func _redraw () {
    }
    
    /// Override this method to return the name of an edited handle (handles must have been previously added by ``addHandles(_:material:ids:billboard:secondary:)``). Handles can be named for reference to the user when editing.
    /// 
    /// The `secondary` argument is `true` when the requested handle is secondary (see ``addHandles(_:material:ids:billboard:secondary:)`` for more information).
    /// 
    @_documentation(visibility: public)
    open func _getHandleName (id: Int32, secondary: Bool)-> String {
        return String ()
    }
    
    /// Override this method to return `true` whenever the given handle should be highlighted in the editor.
    /// 
    /// The `secondary` argument is `true` when the requested handle is secondary (see ``addHandles(_:material:ids:billboard:secondary:)`` for more information).
    /// 
    @_documentation(visibility: public)
    open func _isHandleHighlighted (id: Int32, secondary: Bool)-> Bool {
        return false
    }
    
    /// Override this method to return the current value of a handle. This value will be requested at the start of an edit and used as the `restore` argument in ``_commitHandle(id:secondary:restore:cancel:)``.
    /// 
    /// The `secondary` argument is `true` when the requested handle is secondary (see ``addHandles(_:material:ids:billboard:secondary:)`` for more information).
    /// 
    @_documentation(visibility: public)
    open func _getHandleValue (id: Int32, secondary: Bool)-> Variant {
        return Variant ()
    }
    
    /// Override this method to update the node properties when the user drags a gizmo handle (previously added with ``addHandles(_:material:ids:billboard:secondary:)``). The provided `point` is the mouse position in screen coordinates and the `camera` can be used to convert it to raycasts.
    /// 
    /// The `secondary` argument is `true` when the edited handle is secondary (see ``addHandles(_:material:ids:billboard:secondary:)`` for more information).
    /// 
    @_documentation(visibility: public)
    open func _setHandle (id: Int32, secondary: Bool, camera: Camera3D?, point: Vector2) {
    }
    
    /// Override this method to commit a handle being edited (handles must have been previously added by ``addHandles(_:material:ids:billboard:secondary:)``). This usually means creating an ``UndoRedo`` action for the change, using the current handle value as "do" and the `restore` argument as "undo".
    /// 
    /// If the `cancel` argument is `true`, the `restore` value should be directly set, without any ``UndoRedo`` action.
    /// 
    /// The `secondary` argument is `true` when the committed handle is secondary (see ``addHandles(_:material:ids:billboard:secondary:)`` for more information).
    /// 
    @_documentation(visibility: public)
    open func _commitHandle (id: Int32, secondary: Bool, restore: Variant, cancel: Bool) {
    }
    
    /// Override this method to allow selecting subgizmos using mouse clicks. Given a `camera` and a `point` in screen coordinates, this method should return which subgizmo should be selected. The returned value should be a unique subgizmo identifier, which can have any non-negative value and will be used in other virtual methods like ``_getSubgizmoTransform(id:)`` or ``_commitSubgizmos(ids:restores:cancel:)``.
    @_documentation(visibility: public)
    open func _subgizmosIntersectRay (camera: Camera3D?, point: Vector2)-> Int32 {
        return 0
    }
    
    /// Override this method to allow selecting subgizmos using mouse drag box selection. Given a `camera` and a `frustum`, this method should return which subgizmos are contained within the frustum. The `frustum` argument consists of an array with all the ``Plane``s that make up the selection frustum. The returned value should contain a list of unique subgizmo identifiers, which can have any non-negative value and will be used in other virtual methods like ``_getSubgizmoTransform(id:)`` or ``_commitSubgizmos(ids:restores:cancel:)``.
    @_documentation(visibility: public)
    open func _subgizmosIntersectFrustum (camera: Camera3D?, frustum: VariantCollection<Plane>)-> PackedInt32Array {
        return PackedInt32Array ()
    }
    
    /// Override this method to update the node properties during subgizmo editing (see ``_subgizmosIntersectRay(camera:point:)`` and ``_subgizmosIntersectFrustum(camera:frustum:)``). The `transform` is given in the ``Node3D``'s local coordinate system.
    @_documentation(visibility: public)
    open func _setSubgizmoTransform (id: Int32, transform: Transform3D) {
    }
    
    /// Override this method to return the current transform of a subgizmo. This transform will be requested at the start of an edit and used as the `restore` argument in ``_commitSubgizmos(ids:restores:cancel:)``.
    @_documentation(visibility: public)
    open func _getSubgizmoTransform (id: Int32)-> Transform3D {
        return Transform3D ()
    }
    
    /// Override this method to commit a group of subgizmos being edited (see ``_subgizmosIntersectRay(camera:point:)`` and ``_subgizmosIntersectFrustum(camera:frustum:)``). This usually means creating an ``UndoRedo`` action for the change, using the current transforms as "do" and the `restores` transforms as "undo".
    /// 
    /// If the `cancel` argument is `true`, the `restores` transforms should be directly set, without any ``UndoRedo`` action.
    /// 
    @_documentation(visibility: public)
    open func _commitSubgizmos (ids: PackedInt32Array, restores: VariantCollection<Transform3D>, cancel: Bool) {
    }
    
    fileprivate static var method_add_lines: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_lines")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2910971437)!
            }
            
        }
        
    }()
    
    /// Adds lines to the gizmo (as sets of 2 points), with a given material. The lines are used for visualizing the gizmo. Call this method during ``_redraw()``.
    public final func addLines (_ lines: PackedVector3Array, material: Material?, billboard: Bool = false, modulate: Color = Color (r: 1, g: 1, b: 1, a: 1)) {
        #if true
        
        var copy_billboard = billboard
        var copy_modulate = modulate
        var copy_material_handle = material?.handle
        
        gi.object_method_bind_ptrcall_v (EditorNode3DGizmo.method_add_lines, UnsafeMutableRawPointer (mutating: handle), nil, &lines.content, &copy_material_handle, &copy_billboard, &copy_modulate)
        
        #else
        
        var copy_billboard = billboard
        var copy_modulate = modulate
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &lines.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: material?.handle) { p1 in
            _args.append (material == nil ? nil : p1)
                withUnsafePointer (to: &copy_billboard) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_modulate) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_add_lines, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_mesh: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_mesh")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1579955111)!
            }
            
        }
        
    }()
    
    /// Adds a mesh to the gizmo with the specified `material`, local `transform` and `skeleton`. Call this method during ``_redraw()``.
    public final func addMesh (_ mesh: Mesh?, material: Material? = nil, transform: Transform3D = Transform3D (xAxis: Vector3 (x: 1, y: 0, z: 0), yAxis: Vector3 (x: 0, y: 1, z: 0), zAxis: Vector3(x: 0, y: 0, z: 1), origin: Vector3 (x: 0, y: 0, z: 0)), skeleton: SkinReference? = nil) {
        #if true
        
        var copy_transform = transform
        var copy_mesh_handle = mesh?.handle
        var copy_material_handle = material?.handle
        var copy_skeleton_handle = skeleton?.handle
        
        gi.object_method_bind_ptrcall_v (EditorNode3DGizmo.method_add_mesh, UnsafeMutableRawPointer (mutating: handle), nil, &copy_mesh_handle, &copy_material_handle, &copy_transform, &copy_skeleton_handle)
        
        #else
        
        var copy_transform = transform
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: mesh?.handle) { p0 in
        _args.append (mesh == nil ? nil : p0)
            withUnsafePointer (to: material?.handle) { p1 in
            _args.append (material == nil ? nil : p1)
                withUnsafePointer (to: &copy_transform) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: skeleton?.handle) { p3 in
                    _args.append (skeleton == nil ? nil : p3)
        
                        gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_add_mesh, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_collision_segments: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_collision_segments")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 334873810)!
            }
            
        }
        
    }()
    
    /// Adds the specified `segments` to the gizmo's collision shape for picking. Call this method during ``_redraw()``.
    public final func addCollisionSegments (_ segments: PackedVector3Array) {
        #if true
        
        
        gi.object_method_bind_ptrcall_v (EditorNode3DGizmo.method_add_collision_segments, UnsafeMutableRawPointer (mutating: handle), nil, &segments.content)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &segments.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_add_collision_segments, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_collision_triangles: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_collision_triangles")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 54901064)!
            }
            
        }
        
    }()
    
    /// Adds collision triangles to the gizmo for picking. A ``TriangleMesh`` can be generated from a regular ``Mesh`` too. Call this method during ``_redraw()``.
    public final func addCollisionTriangles (_ triangles: TriangleMesh?) {
        #if true
        
        var copy_triangles_handle = triangles?.handle
        
        gi.object_method_bind_ptrcall_v (EditorNode3DGizmo.method_add_collision_triangles, UnsafeMutableRawPointer (mutating: handle), nil, &copy_triangles_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: triangles?.handle) { p0 in
        _args.append (triangles == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_add_collision_triangles, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_add_unscaled_billboard: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_unscaled_billboard")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 520007164)!
            }
            
        }
        
    }()
    
    /// Adds an unscaled billboard for visualization and selection. Call this method during ``_redraw()``.
    public final func addUnscaledBillboard (material: Material?, defaultScale: Double = 1, modulate: Color = Color (r: 1, g: 1, b: 1, a: 1)) {
        #if true
        
        var copy_default_scale = defaultScale
        var copy_modulate = modulate
        var copy_material_handle = material?.handle
        
        gi.object_method_bind_ptrcall_v (EditorNode3DGizmo.method_add_unscaled_billboard, UnsafeMutableRawPointer (mutating: handle), nil, &copy_material_handle, &copy_default_scale, &copy_modulate)
        
        #else
        
        var copy_default_scale = defaultScale
        var copy_modulate = modulate
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: material?.handle) { p0 in
        _args.append (material == nil ? nil : p0)
            withUnsafePointer (to: &copy_default_scale) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_modulate) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_add_unscaled_billboard, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_add_handles: GDExtensionMethodBindPtr = {
        let methodName = StringName ("add_handles")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2254560097)!
            }
            
        }
        
    }()
    
    /// Adds a list of handles (points) which can be used to edit the properties of the gizmo's ``Node3D``. The `ids` argument can be used to specify a custom identifier for each handle, if an empty array is passed, the ids will be assigned automatically from the `handles` argument order.
    /// 
    /// The `secondary` argument marks the added handles as secondary, meaning they will normally have lower selection priority than regular handles. When the user is holding the shift key secondary handles will switch to have higher priority than regular handles. This change in priority can be used to place multiple handles at the same point while still giving the user control on their selection.
    /// 
    /// There are virtual methods which will be called upon editing of these handles. Call this method during ``_redraw()``.
    /// 
    public final func addHandles (_ handles: PackedVector3Array, material: Material?, ids: PackedInt32Array, billboard: Bool = false, secondary: Bool = false) {
        #if true
        
        var copy_billboard = billboard
        var copy_secondary = secondary
        var copy_material_handle = material?.handle
        
        gi.object_method_bind_ptrcall_v (EditorNode3DGizmo.method_add_handles, UnsafeMutableRawPointer (mutating: handle), nil, &handles.content, &copy_material_handle, &ids.content, &copy_billboard, &copy_secondary)
        
        #else
        
        var copy_billboard = billboard
        var copy_secondary = secondary
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &handles.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: material?.handle) { p1 in
            _args.append (material == nil ? nil : p1)
                withUnsafePointer (to: &ids.content) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_billboard) { p3 in
                        _args.append (p3)
                        withUnsafePointer (to: &copy_secondary) { p4 in
                            _args.append (p4)
        
                            gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_add_handles, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                        }
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_node_3d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_node_3d")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    /// Sets the reference ``Node3D`` node for the gizmo. `node` must inherit from ``Node3D``.
    public final func setNode3d (node: Node?) {
        #if true
        
        var copy_node_handle = node?.handle
        
        gi.object_method_bind_ptrcall_v (EditorNode3DGizmo.method_set_node_3d, UnsafeMutableRawPointer (mutating: handle), nil, &copy_node_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: node?.handle) { p0 in
        _args.append (node == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_set_node_3d, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_node_3d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_node_3d")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 151077316)!
            }
            
        }
        
    }()
    
    /// Returns the ``Node3D`` node associated with this gizmo.
    public final func getNode3d ()-> Node3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_get_node_3d, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_plugin: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_plugin")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4250544552)!
            }
            
        }
        
    }()
    
    /// Returns the ``EditorNode3DGizmoPlugin`` that owns this gizmo. It's useful to retrieve materials using ``EditorNode3DGizmoPlugin/getMaterial(name:gizmo:)``.
    public final func getPlugin ()-> EditorNode3DGizmoPlugin? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_get_plugin, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_clear: GDExtensionMethodBindPtr = {
        let methodName = StringName ("clear")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Removes everything in the gizmo including meshes, collisions and handles.
    public final func clear () {
        gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_clear, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_set_hidden: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_hidden")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// Sets the gizmo's hidden state. If `true`, the gizmo will be hidden. If `false`, it will be shown.
    public final func setHidden (_ hidden: Bool) {
        #if true
        
        var copy_hidden = hidden
        
        gi.object_method_bind_ptrcall_v (EditorNode3DGizmo.method_set_hidden, UnsafeMutableRawPointer (mutating: handle), nil, &copy_hidden)
        
        #else
        
        var copy_hidden = hidden
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_hidden) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_set_hidden, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_subgizmo_selected: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_subgizmo_selected")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1116898809)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the given subgizmo is currently selected. Can be used to highlight selected elements during ``_redraw()``.
    public final func isSubgizmoSelected (id: Int32)-> Bool {
        var _result: Bool = false
        #if true
        
        var copy_id: Int = Int (id)
        
        gi.object_method_bind_ptrcall_v (EditorNode3DGizmo.method_is_subgizmo_selected, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_id)
        return _result
        #else
        
        var copy_id: Int = Int (id)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_id) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_is_subgizmo_selected, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_subgizmo_selection: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_subgizmo_selection")
        return withUnsafePointer (to: &EditorNode3DGizmo.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1930428628)!
            }
            
        }
        
    }()
    
    /// Returns a list of the currently selected subgizmos. Can be used to highlight selected elements during ``_redraw()``.
    public final func getSubgizmoSelection ()-> PackedInt32Array {
        let _result: PackedInt32Array = PackedInt32Array ()
        gi.object_method_bind_ptrcall (EditorNode3DGizmo.method_get_subgizmo_selection, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_commit_handle":
                return _EditorNode3DGizmo_proxy_commit_handle
            case "_commit_subgizmos":
                return _EditorNode3DGizmo_proxy_commit_subgizmos
            case "_get_handle_name":
                return _EditorNode3DGizmo_proxy_get_handle_name
            case "_get_handle_value":
                return _EditorNode3DGizmo_proxy_get_handle_value
            case "_get_subgizmo_transform":
                return _EditorNode3DGizmo_proxy_get_subgizmo_transform
            case "_is_handle_highlighted":
                return _EditorNode3DGizmo_proxy_is_handle_highlighted
            case "_redraw":
                return _EditorNode3DGizmo_proxy_redraw
            case "_set_handle":
                return _EditorNode3DGizmo_proxy_set_handle
            case "_set_subgizmo_transform":
                return _EditorNode3DGizmo_proxy_set_subgizmo_transform
            case "_subgizmos_intersect_frustum":
                return _EditorNode3DGizmo_proxy_subgizmos_intersect_frustum
            case "_subgizmos_intersect_ray":
                return _EditorNode3DGizmo_proxy_subgizmos_intersect_ray
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _EditorNode3DGizmo_proxy_commit_handle (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._commitHandle (id: args [0]!.assumingMemoryBound (to: Int32.self).pointee, secondary: args [1]!.assumingMemoryBound (to: Bool.self).pointee, restore: args [2]!.assumingMemoryBound (to: Variant.self).pointee, cancel: args [3]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _EditorNode3DGizmo_proxy_commit_subgizmos (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._commitSubgizmos (ids: PackedInt32Array (content: args [0]!.assumingMemoryBound (to: (Int64, Int64).self).pointee), restores: args [1]!.assumingMemoryBound (to: VariantCollection<Transform3D>.self).pointee, cancel: args [2]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _EditorNode3DGizmo_proxy_get_handle_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getHandleName (id: args [0]!.assumingMemoryBound (to: Int32.self).pointee, secondary: args [1]!.assumingMemoryBound (to: Bool.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _EditorNode3DGizmo_proxy_get_handle_value (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getHandleValue (id: args [0]!.assumingMemoryBound (to: Int32.self).pointee, secondary: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Variant
    ret.content = Variant.zero
}

func _EditorNode3DGizmo_proxy_get_subgizmo_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getSubgizmoTransform (id: args [0]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret, as: Transform3D.self)
}

func _EditorNode3DGizmo_proxy_is_handle_highlighted (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isHandleHighlighted (id: args [0]!.assumingMemoryBound (to: Int32.self).pointee, secondary: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _EditorNode3DGizmo_proxy_redraw (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._redraw ()
}

func _EditorNode3DGizmo_proxy_set_handle (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    let resolved_2 = args [2]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._setHandle (id: args [0]!.assumingMemoryBound (to: Int32.self).pointee, secondary: args [1]!.assumingMemoryBound (to: Bool.self).pointee, camera: lookupLiveObject (handleAddress: resolved_2) as? Camera3D ?? Camera3D (nativeHandle: resolved_2), point: args [3]!.assumingMemoryBound (to: Vector2.self).pointee)
}

func _EditorNode3DGizmo_proxy_set_subgizmo_transform (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setSubgizmoTransform (id: args [0]!.assumingMemoryBound (to: Int32.self).pointee, transform: args [1]!.assumingMemoryBound (to: Transform3D.self).pointee)
}

func _EditorNode3DGizmo_proxy_subgizmos_intersect_frustum (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._subgizmosIntersectFrustum (camera: lookupLiveObject (handleAddress: resolved_0) as? Camera3D ?? Camera3D (nativeHandle: resolved_0), frustum: args [1]!.assumingMemoryBound (to: VariantCollection<Plane>.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedInt32Array
    ret.content = PackedInt32Array.zero
}

func _EditorNode3DGizmo_proxy_subgizmos_intersect_ray (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<EditorNode3DGizmo>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._subgizmosIntersectRay (camera: lookupLiveObject (handleAddress: resolved_0) as? Camera3D ?? Camera3D (nativeHandle: resolved_0), point: args [1]!.assumingMemoryBound (to: Vector2.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

