// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

open class ScriptLanguageExtension: ScriptLanguage {
    override open class var godotClassName: StringName { "ScriptLanguageExtension" }
    public enum LookupResultType: Int64 {
        /// 
        case scriptLocation = 0 // LOOKUP_RESULT_SCRIPT_LOCATION
        /// 
        case `class` = 1 // LOOKUP_RESULT_CLASS
        /// 
        case classConstant = 2 // LOOKUP_RESULT_CLASS_CONSTANT
        /// 
        case classProperty = 3 // LOOKUP_RESULT_CLASS_PROPERTY
        /// 
        case classMethod = 4 // LOOKUP_RESULT_CLASS_METHOD
        /// 
        case classSignal = 5 // LOOKUP_RESULT_CLASS_SIGNAL
        /// 
        case classEnum = 6 // LOOKUP_RESULT_CLASS_ENUM
        /// 
        case classTbdGlobalscope = 7 // LOOKUP_RESULT_CLASS_TBD_GLOBALSCOPE
        /// 
        case classAnnotation = 8 // LOOKUP_RESULT_CLASS_ANNOTATION
        /// 
        case max = 9 // LOOKUP_RESULT_MAX
    }
    
    public enum CodeCompletionLocation: Int64 {
        /// The option is local to the location of the code completion query - e.g. a local variable. Subsequent value of location represent options from the outer class, the exact value represent how far they are (in terms of inner classes).
        case local = 0 // LOCATION_LOCAL
        /// The option is from the containing class or a parent class, relative to the location of the code completion query. Perform a bitwise OR with the class depth (e.g. 0 for the local class, 1 for the parent, 2 for the grandparent, etc) to store the depth of an option in the class or a parent class.
        case parentMask = 256 // LOCATION_PARENT_MASK
        /// The option is from user code which is not local and not in a derived class (e.g. Autoload Singletons).
        case otherUserCode = 512 // LOCATION_OTHER_USER_CODE
        /// The option is from other engine code, not covered by the other enum constants - e.g. built-in classes.
        case other = 1024 // LOCATION_OTHER
    }
    
    public enum CodeCompletionKind: Int64 {
        /// 
        case `class` = 0 // CODE_COMPLETION_KIND_CLASS
        /// 
        case function = 1 // CODE_COMPLETION_KIND_FUNCTION
        /// 
        case signal = 2 // CODE_COMPLETION_KIND_SIGNAL
        /// 
        case variable = 3 // CODE_COMPLETION_KIND_VARIABLE
        /// 
        case member = 4 // CODE_COMPLETION_KIND_MEMBER
        /// 
        case `enum` = 5 // CODE_COMPLETION_KIND_ENUM
        /// 
        case constant = 6 // CODE_COMPLETION_KIND_CONSTANT
        /// 
        case nodePath = 7 // CODE_COMPLETION_KIND_NODE_PATH
        /// 
        case filePath = 8 // CODE_COMPLETION_KIND_FILE_PATH
        /// 
        case plainText = 9 // CODE_COMPLETION_KIND_PLAIN_TEXT
        /// 
        case max = 10 // CODE_COMPLETION_KIND_MAX
    }
    
    /* Methods */
    /// 
    @_documentation(visibility: public)
    open func _getName ()-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _init () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getType ()-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getExtension ()-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _finish () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getReservedWords ()-> PackedStringArray {
        return PackedStringArray ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _isControlFlowKeyword (_ keyword: String)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getCommentDelimiters ()-> PackedStringArray {
        return PackedStringArray ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getDocCommentDelimiters ()-> PackedStringArray {
        return PackedStringArray ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getStringDelimiters ()-> PackedStringArray {
        return PackedStringArray ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _makeTemplate (_ template: String, className: String, baseClassName: String)-> Script? {
        return Script ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getBuiltInTemplates (object: StringName)-> VariantCollection<GDictionary> {
        return VariantCollection<GDictionary>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _isUsingTemplates ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _validate (script: String, path: String, validateFunctions: Bool, validateErrors: Bool, validateWarnings: Bool, validateSafeLines: Bool)-> GDictionary {
        return GDictionary ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _validatePath (_ path: String)-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _createScript ()-> Object? {
        return Object ()
    }
    
    /// _Deprecated._ This method is not called by the engine.
    @_documentation(visibility: public)
    open func _hasNamedClasses ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _supportsBuiltinMode ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _supportsDocumentation ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _canInheritFromFile ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _findFunction (className: String, functionName: String)-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _makeFunction (className: String, functionName: String, functionArgs: PackedStringArray)-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _openInExternalEditor (script: Script?, line: Int32, column: Int32)-> GodotError {
        return .ok
    }
    
    /// 
    @_documentation(visibility: public)
    open func _overridesExternalEditor ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _completeCode (_ code: String, path: String, owner: Object?)-> GDictionary {
        return GDictionary ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _lookupCode (_ code: String, symbol: String, path: String, owner: Object?)-> GDictionary {
        return GDictionary ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _autoIndentCode (_ code: String, fromLine: Int32, toLine: Int32)-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _addGlobalConstant (name: StringName, value: Variant) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _addNamedGlobalConstant (name: StringName, value: Variant) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _removeNamedGlobalConstant (name: StringName) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _threadEnter () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _threadExit () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _debugGetError ()-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _debugGetStackLevelCount ()-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _debugGetStackLevelLine (level: Int32)-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _debugGetStackLevelFunction (level: Int32)-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _debugGetStackLevelLocals (level: Int32, maxSubitems: Int32, maxDepth: Int32)-> GDictionary {
        return GDictionary ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _debugGetStackLevelMembers (level: Int32, maxSubitems: Int32, maxDepth: Int32)-> GDictionary {
        return GDictionary ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _debugGetStackLevelInstance (level: Int32)-> OpaquePointer? {
        return nil
    }
    
    /// 
    @_documentation(visibility: public)
    open func _debugGetGlobals (maxSubitems: Int32, maxDepth: Int32)-> GDictionary {
        return GDictionary ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _debugParseStackLevelExpression (level: Int32, expression: String, maxSubitems: Int32, maxDepth: Int32)-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _debugGetCurrentStackInfo ()-> VariantCollection<GDictionary> {
        return VariantCollection<GDictionary>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _reloadAllScripts () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _reloadToolScript (_ script: Script?, softReload: Bool) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getRecognizedExtensions ()-> PackedStringArray {
        return PackedStringArray ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getPublicFunctions ()-> VariantCollection<GDictionary> {
        return VariantCollection<GDictionary>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getPublicConstants ()-> GDictionary {
        return GDictionary ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getPublicAnnotations ()-> VariantCollection<GDictionary> {
        return VariantCollection<GDictionary>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _profilingStart () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _profilingStop () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _frame () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _handlesGlobalClassType (_ type: String)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getGlobalClassName (path: String)-> GDictionary {
        return GDictionary ()
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_add_global_constant":
                return _ScriptLanguageExtension_proxy_add_global_constant
            case "_add_named_global_constant":
                return _ScriptLanguageExtension_proxy_add_named_global_constant
            case "_auto_indent_code":
                return _ScriptLanguageExtension_proxy_auto_indent_code
            case "_can_inherit_from_file":
                return _ScriptLanguageExtension_proxy_can_inherit_from_file
            case "_complete_code":
                return _ScriptLanguageExtension_proxy_complete_code
            case "_create_script":
                return _ScriptLanguageExtension_proxy_create_script
            case "_debug_get_current_stack_info":
                return _ScriptLanguageExtension_proxy_debug_get_current_stack_info
            case "_debug_get_error":
                return _ScriptLanguageExtension_proxy_debug_get_error
            case "_debug_get_globals":
                return _ScriptLanguageExtension_proxy_debug_get_globals
            case "_debug_get_stack_level_count":
                return _ScriptLanguageExtension_proxy_debug_get_stack_level_count
            case "_debug_get_stack_level_function":
                return _ScriptLanguageExtension_proxy_debug_get_stack_level_function
            case "_debug_get_stack_level_instance":
                return _ScriptLanguageExtension_proxy_debug_get_stack_level_instance
            case "_debug_get_stack_level_line":
                return _ScriptLanguageExtension_proxy_debug_get_stack_level_line
            case "_debug_get_stack_level_locals":
                return _ScriptLanguageExtension_proxy_debug_get_stack_level_locals
            case "_debug_get_stack_level_members":
                return _ScriptLanguageExtension_proxy_debug_get_stack_level_members
            case "_debug_parse_stack_level_expression":
                return _ScriptLanguageExtension_proxy_debug_parse_stack_level_expression
            case "_find_function":
                return _ScriptLanguageExtension_proxy_find_function
            case "_finish":
                return _ScriptLanguageExtension_proxy_finish
            case "_frame":
                return _ScriptLanguageExtension_proxy_frame
            case "_get_built_in_templates":
                return _ScriptLanguageExtension_proxy_get_built_in_templates
            case "_get_comment_delimiters":
                return _ScriptLanguageExtension_proxy_get_comment_delimiters
            case "_get_doc_comment_delimiters":
                return _ScriptLanguageExtension_proxy_get_doc_comment_delimiters
            case "_get_extension":
                return _ScriptLanguageExtension_proxy_get_extension
            case "_get_global_class_name":
                return _ScriptLanguageExtension_proxy_get_global_class_name
            case "_get_name":
                return _ScriptLanguageExtension_proxy_get_name
            case "_get_public_annotations":
                return _ScriptLanguageExtension_proxy_get_public_annotations
            case "_get_public_constants":
                return _ScriptLanguageExtension_proxy_get_public_constants
            case "_get_public_functions":
                return _ScriptLanguageExtension_proxy_get_public_functions
            case "_get_recognized_extensions":
                return _ScriptLanguageExtension_proxy_get_recognized_extensions
            case "_get_reserved_words":
                return _ScriptLanguageExtension_proxy_get_reserved_words
            case "_get_string_delimiters":
                return _ScriptLanguageExtension_proxy_get_string_delimiters
            case "_get_type":
                return _ScriptLanguageExtension_proxy_get_type
            case "_handles_global_class_type":
                return _ScriptLanguageExtension_proxy_handles_global_class_type
            case "_has_named_classes":
                return _ScriptLanguageExtension_proxy_has_named_classes
            case "_init":
                return _ScriptLanguageExtension_proxy_init
            case "_is_control_flow_keyword":
                return _ScriptLanguageExtension_proxy_is_control_flow_keyword
            case "_is_using_templates":
                return _ScriptLanguageExtension_proxy_is_using_templates
            case "_lookup_code":
                return _ScriptLanguageExtension_proxy_lookup_code
            case "_make_function":
                return _ScriptLanguageExtension_proxy_make_function
            case "_make_template":
                return _ScriptLanguageExtension_proxy_make_template
            case "_open_in_external_editor":
                return _ScriptLanguageExtension_proxy_open_in_external_editor
            case "_overrides_external_editor":
                return _ScriptLanguageExtension_proxy_overrides_external_editor
            case "_profiling_start":
                return _ScriptLanguageExtension_proxy_profiling_start
            case "_profiling_stop":
                return _ScriptLanguageExtension_proxy_profiling_stop
            case "_reload_all_scripts":
                return _ScriptLanguageExtension_proxy_reload_all_scripts
            case "_reload_tool_script":
                return _ScriptLanguageExtension_proxy_reload_tool_script
            case "_remove_named_global_constant":
                return _ScriptLanguageExtension_proxy_remove_named_global_constant
            case "_supports_builtin_mode":
                return _ScriptLanguageExtension_proxy_supports_builtin_mode
            case "_supports_documentation":
                return _ScriptLanguageExtension_proxy_supports_documentation
            case "_thread_enter":
                return _ScriptLanguageExtension_proxy_thread_enter
            case "_thread_exit":
                return _ScriptLanguageExtension_proxy_thread_exit
            case "_validate":
                return _ScriptLanguageExtension_proxy_validate
            case "_validate_path":
                return _ScriptLanguageExtension_proxy_validate_path
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _ScriptLanguageExtension_proxy_add_global_constant (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._addGlobalConstant (name: StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), value: args [1]!.assumingMemoryBound (to: Variant.self).pointee)
}

func _ScriptLanguageExtension_proxy_add_named_global_constant (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._addNamedGlobalConstant (name: StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee), value: args [1]!.assumingMemoryBound (to: Variant.self).pointee)
}

func _ScriptLanguageExtension_proxy_auto_indent_code (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._autoIndentCode (GString.stringFromGStringPtr (ptr: args [0]!) ?? "", fromLine: args [1]!.assumingMemoryBound (to: Int32.self).pointee, toLine: args [2]!.assumingMemoryBound (to: Int32.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _ScriptLanguageExtension_proxy_can_inherit_from_file (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._canInheritFromFile ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptLanguageExtension_proxy_complete_code (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_2 = args [2]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._completeCode (GString.stringFromGStringPtr (ptr: args [0]!) ?? "", path: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", owner: lookupLiveObject (handleAddress: resolved_2) as? Object ?? Object (nativeHandle: resolved_2))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _ScriptLanguageExtension_proxy_create_script (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._createScript ()
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // Object
}

func _ScriptLanguageExtension_proxy_debug_get_current_stack_info (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._debugGetCurrentStackInfo ()
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Dictionary
}

func _ScriptLanguageExtension_proxy_debug_get_error (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._debugGetError ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _ScriptLanguageExtension_proxy_debug_get_globals (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._debugGetGlobals (maxSubitems: args [0]!.assumingMemoryBound (to: Int32.self).pointee, maxDepth: args [1]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _ScriptLanguageExtension_proxy_debug_get_stack_level_count (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._debugGetStackLevelCount ()
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _ScriptLanguageExtension_proxy_debug_get_stack_level_function (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._debugGetStackLevelFunction (level: args [0]!.assumingMemoryBound (to: Int32.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _ScriptLanguageExtension_proxy_debug_get_stack_level_instance (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._debugGetStackLevelInstance (level: args [0]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret, as: OpaquePointer?.self)
}

func _ScriptLanguageExtension_proxy_debug_get_stack_level_line (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._debugGetStackLevelLine (level: args [0]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _ScriptLanguageExtension_proxy_debug_get_stack_level_locals (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._debugGetStackLevelLocals (level: args [0]!.assumingMemoryBound (to: Int32.self).pointee, maxSubitems: args [1]!.assumingMemoryBound (to: Int32.self).pointee, maxDepth: args [2]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _ScriptLanguageExtension_proxy_debug_get_stack_level_members (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._debugGetStackLevelMembers (level: args [0]!.assumingMemoryBound (to: Int32.self).pointee, maxSubitems: args [1]!.assumingMemoryBound (to: Int32.self).pointee, maxDepth: args [2]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _ScriptLanguageExtension_proxy_debug_parse_stack_level_expression (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._debugParseStackLevelExpression (level: args [0]!.assumingMemoryBound (to: Int32.self).pointee, expression: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", maxSubitems: args [2]!.assumingMemoryBound (to: Int32.self).pointee, maxDepth: args [3]!.assumingMemoryBound (to: Int32.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _ScriptLanguageExtension_proxy_find_function (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._findFunction (className: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", functionName: GString.stringFromGStringPtr (ptr: args [1]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _ScriptLanguageExtension_proxy_finish (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._finish ()
}

func _ScriptLanguageExtension_proxy_frame (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._frame ()
}

func _ScriptLanguageExtension_proxy_get_built_in_templates (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getBuiltInTemplates (object: StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Dictionary
}

func _ScriptLanguageExtension_proxy_get_comment_delimiters (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getCommentDelimiters ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

func _ScriptLanguageExtension_proxy_get_doc_comment_delimiters (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getDocCommentDelimiters ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

func _ScriptLanguageExtension_proxy_get_extension (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getExtension ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _ScriptLanguageExtension_proxy_get_global_class_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getGlobalClassName (path: GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _ScriptLanguageExtension_proxy_get_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getName ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _ScriptLanguageExtension_proxy_get_public_annotations (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPublicAnnotations ()
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Dictionary
}

func _ScriptLanguageExtension_proxy_get_public_constants (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPublicConstants ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _ScriptLanguageExtension_proxy_get_public_functions (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPublicFunctions ()
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Dictionary
}

func _ScriptLanguageExtension_proxy_get_recognized_extensions (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getRecognizedExtensions ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

func _ScriptLanguageExtension_proxy_get_reserved_words (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getReservedWords ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

func _ScriptLanguageExtension_proxy_get_string_delimiters (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getStringDelimiters ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // PackedStringArray
    ret.content = PackedStringArray.zero
}

func _ScriptLanguageExtension_proxy_get_type (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getType ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _ScriptLanguageExtension_proxy_handles_global_class_type (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._handlesGlobalClassType (GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptLanguageExtension_proxy_has_named_classes (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._hasNamedClasses ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptLanguageExtension_proxy_init (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._init ()
}

func _ScriptLanguageExtension_proxy_is_control_flow_keyword (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isControlFlowKeyword (GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptLanguageExtension_proxy_is_using_templates (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isUsingTemplates ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptLanguageExtension_proxy_lookup_code (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_3 = args [3]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._lookupCode (GString.stringFromGStringPtr (ptr: args [0]!) ?? "", symbol: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", path: GString.stringFromGStringPtr (ptr: args [2]!) ?? "", owner: lookupLiveObject (handleAddress: resolved_3) as? Object ?? Object (nativeHandle: resolved_3))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _ScriptLanguageExtension_proxy_make_function (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._makeFunction (className: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", functionName: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", functionArgs: PackedStringArray (content: args [2]!.assumingMemoryBound (to: (Int64, Int64).self).pointee)))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _ScriptLanguageExtension_proxy_make_template (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._makeTemplate (GString.stringFromGStringPtr (ptr: args [0]!) ?? "", className: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", baseClassName: GString.stringFromGStringPtr (ptr: args [2]!) ?? "")
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // Script
}

func _ScriptLanguageExtension_proxy_open_in_external_editor (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._openInExternalEditor (script: lookupLiveObject (handleAddress: resolved_0) as? Script ?? Script (nativeHandle: resolved_0), line: args [1]!.assumingMemoryBound (to: Int32.self).pointee, column: args [2]!.assumingMemoryBound (to: Int32.self).pointee)
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _ScriptLanguageExtension_proxy_overrides_external_editor (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._overridesExternalEditor ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptLanguageExtension_proxy_profiling_start (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._profilingStart ()
}

func _ScriptLanguageExtension_proxy_profiling_stop (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._profilingStop ()
}

func _ScriptLanguageExtension_proxy_reload_all_scripts (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._reloadAllScripts ()
}

func _ScriptLanguageExtension_proxy_reload_tool_script (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    swiftObject._reloadToolScript (lookupLiveObject (handleAddress: resolved_0) as? Script ?? Script (nativeHandle: resolved_0), softReload: args [1]!.assumingMemoryBound (to: Bool.self).pointee)
}

func _ScriptLanguageExtension_proxy_remove_named_global_constant (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._removeNamedGlobalConstant (name: StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
}

func _ScriptLanguageExtension_proxy_supports_builtin_mode (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._supportsBuiltinMode ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptLanguageExtension_proxy_supports_documentation (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._supportsDocumentation ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptLanguageExtension_proxy_thread_enter (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._threadEnter ()
}

func _ScriptLanguageExtension_proxy_thread_exit (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._threadExit ()
}

func _ScriptLanguageExtension_proxy_validate (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._validate (script: GString.stringFromGStringPtr (ptr: args [0]!) ?? "", path: GString.stringFromGStringPtr (ptr: args [1]!) ?? "", validateFunctions: args [2]!.assumingMemoryBound (to: Bool.self).pointee, validateErrors: args [3]!.assumingMemoryBound (to: Bool.self).pointee, validateWarnings: args [4]!.assumingMemoryBound (to: Bool.self).pointee, validateSafeLines: args [5]!.assumingMemoryBound (to: Bool.self).pointee)
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _ScriptLanguageExtension_proxy_validate_path (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptLanguageExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._validatePath (GString.stringFromGStringPtr (ptr: args [0]!) ?? ""))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

