// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

open class ScriptExtension: Script {
    override open class var godotClassName: StringName { "ScriptExtension" }
    /* Methods */
    /// 
    @_documentation(visibility: public)
    open func _editorCanReloadFromFile ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _canInstantiate ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getBaseScript ()-> Script? {
        return Script ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getGlobalName ()-> StringName {
        return StringName ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _inheritsScript (_ script: Script?)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getInstanceBaseType ()-> StringName {
        return StringName ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _instanceCreate (forObject: Object?)-> OpaquePointer? {
        return nil
    }
    
    /// 
    @_documentation(visibility: public)
    open func _placeholderInstanceCreate (forObject: Object?)-> OpaquePointer? {
        return nil
    }
    
    /// 
    @_documentation(visibility: public)
    open func _instanceHas (object: Object?)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _hasSourceCode ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getSourceCode ()-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _setSourceCode (_ code: String) {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _reload (keepState: Bool)-> GodotError {
        return .ok
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getDocumentation ()-> VariantCollection<GDictionary> {
        return VariantCollection<GDictionary>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getClassIconPath ()-> String {
        return String ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _hasMethod (_ method: StringName)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _hasStaticMethod (_ method: StringName)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getMethodInfo (method: StringName)-> GDictionary {
        return GDictionary ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _isTool ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _isValid ()-> Bool {
        return false
    }
    
    /// Returns `true` if the script is an abstract script. An abstract script does not have a constructor and cannot be instantiated.
    @_documentation(visibility: public)
    open func _isAbstract ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getLanguage ()-> ScriptLanguage? {
        return ScriptLanguage ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _hasScriptSignal (_ signal: StringName)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getScriptSignalList ()-> VariantCollection<GDictionary> {
        return VariantCollection<GDictionary>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _hasPropertyDefaultValue (property: StringName)-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getPropertyDefaultValue (property: StringName)-> Variant {
        return Variant ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _updateExports () {
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getScriptMethodList ()-> VariantCollection<GDictionary> {
        return VariantCollection<GDictionary>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getScriptPropertyList ()-> VariantCollection<GDictionary> {
        return VariantCollection<GDictionary>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getMemberLine (member: StringName)-> Int32 {
        return 0
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getConstants ()-> GDictionary {
        return GDictionary ()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getMembers ()-> VariantCollection<StringName> {
        return VariantCollection<StringName>()
    }
    
    /// 
    @_documentation(visibility: public)
    open func _isPlaceholderFallbackEnabled ()-> Bool {
        return false
    }
    
    /// 
    @_documentation(visibility: public)
    open func _getRpcConfig ()-> Variant {
        return Variant ()
    }
    
    override class func getVirtualDispatcher (name: StringName) -> GDExtensionClassCallVirtual? {
        guard implementedOverrides().contains(name) else { return nil }
        switch name.description {
            case "_can_instantiate":
                return _ScriptExtension_proxy_can_instantiate
            case "_editor_can_reload_from_file":
                return _ScriptExtension_proxy_editor_can_reload_from_file
            case "_get_base_script":
                return _ScriptExtension_proxy_get_base_script
            case "_get_class_icon_path":
                return _ScriptExtension_proxy_get_class_icon_path
            case "_get_constants":
                return _ScriptExtension_proxy_get_constants
            case "_get_documentation":
                return _ScriptExtension_proxy_get_documentation
            case "_get_global_name":
                return _ScriptExtension_proxy_get_global_name
            case "_get_instance_base_type":
                return _ScriptExtension_proxy_get_instance_base_type
            case "_get_language":
                return _ScriptExtension_proxy_get_language
            case "_get_member_line":
                return _ScriptExtension_proxy_get_member_line
            case "_get_members":
                return _ScriptExtension_proxy_get_members
            case "_get_method_info":
                return _ScriptExtension_proxy_get_method_info
            case "_get_property_default_value":
                return _ScriptExtension_proxy_get_property_default_value
            case "_get_rpc_config":
                return _ScriptExtension_proxy_get_rpc_config
            case "_get_script_method_list":
                return _ScriptExtension_proxy_get_script_method_list
            case "_get_script_property_list":
                return _ScriptExtension_proxy_get_script_property_list
            case "_get_script_signal_list":
                return _ScriptExtension_proxy_get_script_signal_list
            case "_get_source_code":
                return _ScriptExtension_proxy_get_source_code
            case "_has_method":
                return _ScriptExtension_proxy_has_method
            case "_has_property_default_value":
                return _ScriptExtension_proxy_has_property_default_value
            case "_has_script_signal":
                return _ScriptExtension_proxy_has_script_signal
            case "_has_source_code":
                return _ScriptExtension_proxy_has_source_code
            case "_has_static_method":
                return _ScriptExtension_proxy_has_static_method
            case "_inherits_script":
                return _ScriptExtension_proxy_inherits_script
            case "_instance_create":
                return _ScriptExtension_proxy_instance_create
            case "_instance_has":
                return _ScriptExtension_proxy_instance_has
            case "_is_abstract":
                return _ScriptExtension_proxy_is_abstract
            case "_is_placeholder_fallback_enabled":
                return _ScriptExtension_proxy_is_placeholder_fallback_enabled
            case "_is_tool":
                return _ScriptExtension_proxy_is_tool
            case "_is_valid":
                return _ScriptExtension_proxy_is_valid
            case "_placeholder_instance_create":
                return _ScriptExtension_proxy_placeholder_instance_create
            case "_reload":
                return _ScriptExtension_proxy_reload
            case "_set_source_code":
                return _ScriptExtension_proxy_set_source_code
            case "_update_exports":
                return _ScriptExtension_proxy_update_exports
            default:
                return super.getVirtualDispatcher (name: name)
        }
        
    }
    
}

// Support methods for proxies
func _ScriptExtension_proxy_can_instantiate (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._canInstantiate ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_editor_can_reload_from_file (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._editorCanReloadFromFile ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_get_base_script (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getBaseScript ()
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // Script
}

func _ScriptExtension_proxy_get_class_icon_path (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getClassIconPath ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _ScriptExtension_proxy_get_constants (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getConstants ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _ScriptExtension_proxy_get_documentation (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getDocumentation ()
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Dictionary
}

func _ScriptExtension_proxy_get_global_name (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getGlobalName ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // StringName
    ret.content = StringName.zero
}

func _ScriptExtension_proxy_get_instance_base_type (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getInstanceBaseType ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // StringName
    ret.content = StringName.zero
}

func _ScriptExtension_proxy_get_language (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getLanguage ()
    retPtr!.storeBytes (of: ret?.handle, as: UnsafeRawPointer?.self) // ScriptLanguage
}

func _ScriptExtension_proxy_get_member_line (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getMemberLine (member: StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Int32.self)
}

func _ScriptExtension_proxy_get_members (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getMembers ()
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::StringName
}

func _ScriptExtension_proxy_get_method_info (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getMethodInfo (method: StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Dictionary
    ret.content = GDictionary.zero
}

func _ScriptExtension_proxy_get_property_default_value (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getPropertyDefaultValue (property: StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Variant
    ret.content = Variant.zero
}

func _ScriptExtension_proxy_get_rpc_config (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getRpcConfig ()
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // Variant
    ret.content = Variant.zero
}

func _ScriptExtension_proxy_get_script_method_list (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getScriptMethodList ()
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Dictionary
}

func _ScriptExtension_proxy_get_script_property_list (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getScriptPropertyList ()
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Dictionary
}

func _ScriptExtension_proxy_get_script_signal_list (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._getScriptSignalList ()
    retPtr!.storeBytes (of: ret.array.content, as: type (of: ret.array.content)) // typedarray::Dictionary
}

func _ScriptExtension_proxy_get_source_code (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = GString (swiftObject._getSourceCode ())
    retPtr!.storeBytes (of: ret.content, as: type (of: ret.content)) // String
    ret.content = GString.zero
}

func _ScriptExtension_proxy_has_method (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._hasMethod (StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_has_property_default_value (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._hasPropertyDefaultValue (property: StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_has_script_signal (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._hasScriptSignal (StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_has_source_code (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._hasSourceCode ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_has_static_method (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._hasStaticMethod (StringName (content: args [0]!.assumingMemoryBound (to: Int64.self).pointee))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_inherits_script (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._inheritsScript (lookupLiveObject (handleAddress: resolved_0) as? Script ?? Script (nativeHandle: resolved_0))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_instance_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._instanceCreate (forObject: lookupLiveObject (handleAddress: resolved_0) as? Object ?? Object (nativeHandle: resolved_0))
    retPtr!.storeBytes (of: ret, as: OpaquePointer?.self)
}

func _ScriptExtension_proxy_instance_has (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._instanceHas (object: lookupLiveObject (handleAddress: resolved_0) as? Object ?? Object (nativeHandle: resolved_0))
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_is_abstract (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isAbstract ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_is_placeholder_fallback_enabled (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isPlaceholderFallbackEnabled ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_is_tool (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isTool ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_is_valid (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._isValid ()
    retPtr!.storeBytes (of: ret, as: Bool.self)
}

func _ScriptExtension_proxy_placeholder_instance_create (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let resolved_0 = args [0]!.load (as: UnsafeRawPointer.self)
    
    let ret = swiftObject._placeholderInstanceCreate (forObject: lookupLiveObject (handleAddress: resolved_0) as? Object ?? Object (nativeHandle: resolved_0))
    retPtr!.storeBytes (of: ret, as: OpaquePointer?.self)
}

func _ScriptExtension_proxy_reload (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    let ret = swiftObject._reload (keepState: args [0]!.assumingMemoryBound (to: Bool.self).pointee)
    retPtr!.storeBytes (of: Int32 (ret.rawValue), as: Int32.self)
}

func _ScriptExtension_proxy_set_source_code (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    guard let args else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._setSourceCode (GString.stringFromGStringPtr (ptr: args [0]!) ?? "")
}

func _ScriptExtension_proxy_update_exports (instance: UnsafeMutableRawPointer?, args: UnsafePointer<UnsafeRawPointer?>?, retPtr: UnsafeMutableRawPointer?) {
    guard let instance else { return }
    let swiftObject = Unmanaged<ScriptExtension>.fromOpaque(instance).takeUnretainedValue()
    swiftObject._updateExports ()
}

