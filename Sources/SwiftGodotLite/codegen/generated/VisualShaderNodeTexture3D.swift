// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Performs a 3D texture lookup within the visual shader graph.
/// 
/// Performs a lookup operation on the provided texture, with support for multiple texture sources to choose from.
open class VisualShaderNodeTexture3D: VisualShaderNodeSample3D {
    override open class var godotClassName: StringName { "VisualShaderNodeTexture3D" }
    
    /* Properties */
    
    /// A source texture. Used if ``VisualShaderNodeSample3D/source`` is set to ``VisualShaderNodeSample3D/Source/texture``.
    final public var texture: Texture3D? {
        get {
            return get_texture ()
        }
        
        set {
            set_texture (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_texture")
        return withUnsafePointer (to: &VisualShaderNodeTexture3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1188404210)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_texture (_ value: Texture3D?) {
        #if false
        
        var copy_value_handle = value?.handle
        
        gi.object_method_bind_ptrcall_v (VisualShaderNodeTexture3D.method_set_texture, UnsafeMutableRawPointer (mutating: handle), nil, &copy_value_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: value?.handle) { p0 in
        _args.append (value == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (VisualShaderNodeTexture3D.method_set_texture, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_texture: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_texture")
        return withUnsafePointer (to: &VisualShaderNodeTexture3D.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373985333)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_texture ()-> Texture3D? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (VisualShaderNodeTexture3D.method_get_texture, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

