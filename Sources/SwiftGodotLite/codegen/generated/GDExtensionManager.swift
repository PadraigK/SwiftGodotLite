// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// 
/// 
/// This object emits the following signals:
/// 
/// - ``extensionsReloaded``
open class GDExtensionManager: Object {
    /// The shared instance of this class
    public static var shared: GDExtensionManager = {
        return withUnsafePointer (to: &GDExtensionManager.godotClassName.content) { ptr in
            GDExtensionManager (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "GDExtensionManager" }
    public enum LoadStatus: Int64 {
        /// 
        case ok = 0 // LOAD_STATUS_OK
        /// 
        case failed = 1 // LOAD_STATUS_FAILED
        /// 
        case alreadyLoaded = 2 // LOAD_STATUS_ALREADY_LOADED
        /// 
        case notLoaded = 3 // LOAD_STATUS_NOT_LOADED
        /// 
        case needsRestart = 4 // LOAD_STATUS_NEEDS_RESTART
    }
    
    /* Methods */
    fileprivate static var method_load_extension: GDExtensionMethodBindPtr = {
        let methodName = StringName ("load_extension")
        return withUnsafePointer (to: &GDExtensionManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4024158731)!
            }
            
        }
        
    }()
    
    /// 
    public static func loadExtension (path: String)-> GDExtensionManager.LoadStatus {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (GDExtensionManager.method_load_extension, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &gstr_path.content)
        return GDExtensionManager.LoadStatus (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GDExtensionManager.method_load_extension, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return GDExtensionManager.LoadStatus (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_reload_extension: GDExtensionMethodBindPtr = {
        let methodName = StringName ("reload_extension")
        return withUnsafePointer (to: &GDExtensionManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4024158731)!
            }
            
        }
        
    }()
    
    /// 
    public static func reloadExtension (path: String)-> GDExtensionManager.LoadStatus {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (GDExtensionManager.method_reload_extension, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &gstr_path.content)
        return GDExtensionManager.LoadStatus (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GDExtensionManager.method_reload_extension, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return GDExtensionManager.LoadStatus (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_unload_extension: GDExtensionMethodBindPtr = {
        let methodName = StringName ("unload_extension")
        return withUnsafePointer (to: &GDExtensionManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4024158731)!
            }
            
        }
        
    }()
    
    /// 
    public static func unloadExtension (path: String)-> GDExtensionManager.LoadStatus {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        #if false
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (GDExtensionManager.method_unload_extension, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &gstr_path.content)
        return GDExtensionManager.LoadStatus (rawValue: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GDExtensionManager.method_unload_extension, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return GDExtensionManager.LoadStatus (rawValue: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_is_extension_loaded: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_extension_loaded")
        return withUnsafePointer (to: &GDExtensionManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// 
    public static func isExtensionLoaded (path: String)-> Bool {
        var _result: Bool = false
        #if false
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (GDExtensionManager.method_is_extension_loaded, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &gstr_path.content)
        return _result
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GDExtensionManager.method_is_extension_loaded, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_loaded_extensions: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_loaded_extensions")
        return withUnsafePointer (to: &GDExtensionManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// 
    public static func getLoadedExtensions ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (GDExtensionManager.method_get_loaded_extensions, UnsafeMutableRawPointer (mutating: shared.handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_extension: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_extension")
        return withUnsafePointer (to: &GDExtensionManager.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 49743343)!
            }
            
        }
        
    }()
    
    /// 
    public static func getExtension (path: String)-> GDExtension? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if false
        
        let gstr_path = GString (path)
        
        gi.object_method_bind_ptrcall_v (GDExtensionManager.method_get_extension, UnsafeMutableRawPointer (mutating: shared.handle), &_result, &gstr_path.content)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        let gstr_path = GString (path)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (GDExtensionManager.method_get_extension, UnsafeMutableRawPointer (mutating: shared.handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    // Signals 
    /// Emitted after the editor has automatically reloaded any extensions.
    ///
    /// To connect to this signal, reference this property and call the
    /// 
    /// `connect` method with the method you want to invoke
    /// 
    /// 
    /// 
    /// Example:
    /// ```swift
    /// obj.extensionsReloaded.connect {
    ///    print ("caught signal")
    /// }
    /// ```
    public var extensionsReloaded: SimpleSignal { SimpleSignal (target: self, signalName: "extensions_reloaded") }
    
}

