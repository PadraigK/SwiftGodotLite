// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// A node that applies a color tint to a canvas.
/// 
/// ``CanvasModulate`` applies a color tint to all nodes on a canvas. Only one can be used to tint a canvas, but ``CanvasLayer``s can be used to render things independently.
open class CanvasModulate: Node2D {
    override open class var godotClassName: StringName { "CanvasModulate" }
    
    /* Properties */
    
    /// The tint color to apply.
    final public var color: Color {
        get {
            return get_color ()
        }
        
        set {
            set_color (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_color")
        return withUnsafePointer (to: &CanvasModulate.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2920490490)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_color (_ color: Color) {
        #if false
        
        var copy_color = color
        
        gi.object_method_bind_ptrcall_v (CanvasModulate.method_set_color, UnsafeMutableRawPointer (mutating: handle), nil, &copy_color)
        
        #else
        
        var copy_color = color
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_color) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (CanvasModulate.method_set_color, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_color: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_color")
        return withUnsafePointer (to: &CanvasModulate.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3444240500)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_color ()-> Color {
        var _result: Color = Color ()
        gi.object_method_bind_ptrcall (CanvasModulate.method_get_color, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

