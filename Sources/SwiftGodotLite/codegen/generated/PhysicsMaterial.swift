// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Holds physics-related properties of a surface, namely its roughness and bounciness.
/// 
/// Holds physics-related properties of a surface, namely its roughness and bounciness. This class is used to apply these properties to a physics body.
open class PhysicsMaterial: Resource {
    override open class var godotClassName: StringName { "PhysicsMaterial" }
    
    /* Properties */
    
    /// The body's friction. Values range from `0` (frictionless) to `1` (maximum friction).
    final public var friction: Double {
        get {
            return get_friction ()
        }
        
        set {
            set_friction (newValue)
        }
        
    }
    
    /// If `true`, the physics engine will use the friction of the object marked as "rough" when two objects collide. If `false`, the physics engine will use the lowest friction of all colliding objects instead. If `true` for both colliding objects, the physics engine will use the highest friction.
    final public var rough: Bool {
        get {
            return is_rough ()
        }
        
        set {
            set_rough (newValue)
        }
        
    }
    
    /// The body's bounciness. Values range from `0` (no bounce) to `1` (full bounciness).
    final public var bounce: Double {
        get {
            return get_bounce ()
        }
        
        set {
            set_bounce (newValue)
        }
        
    }
    
    /// If `true`, subtracts the bounciness from the colliding object's bounciness instead of adding it.
    final public var absorbent: Bool {
        get {
            return is_absorbent ()
        }
        
        set {
            set_absorbent (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_friction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_friction")
        return withUnsafePointer (to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_friction (_ friction: Double) {
        #if false
        
        var copy_friction = friction
        
        gi.object_method_bind_ptrcall_v (PhysicsMaterial.method_set_friction, UnsafeMutableRawPointer (mutating: handle), nil, &copy_friction)
        
        #else
        
        var copy_friction = friction
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_friction) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsMaterial.method_set_friction, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_friction: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_friction")
        return withUnsafePointer (to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_friction ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicsMaterial.method_get_friction, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_rough: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_rough")
        return withUnsafePointer (to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_rough (_ rough: Bool) {
        #if false
        
        var copy_rough = rough
        
        gi.object_method_bind_ptrcall_v (PhysicsMaterial.method_set_rough, UnsafeMutableRawPointer (mutating: handle), nil, &copy_rough)
        
        #else
        
        var copy_rough = rough
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_rough) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsMaterial.method_set_rough, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_rough: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_rough")
        return withUnsafePointer (to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_rough ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicsMaterial.method_is_rough, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_bounce: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_bounce")
        return withUnsafePointer (to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_bounce (_ bounce: Double) {
        #if false
        
        var copy_bounce = bounce
        
        gi.object_method_bind_ptrcall_v (PhysicsMaterial.method_set_bounce, UnsafeMutableRawPointer (mutating: handle), nil, &copy_bounce)
        
        #else
        
        var copy_bounce = bounce
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_bounce) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsMaterial.method_set_bounce, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_bounce: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_bounce")
        return withUnsafePointer (to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_bounce ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (PhysicsMaterial.method_get_bounce, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_absorbent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_absorbent")
        return withUnsafePointer (to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_absorbent (_ absorbent: Bool) {
        #if false
        
        var copy_absorbent = absorbent
        
        gi.object_method_bind_ptrcall_v (PhysicsMaterial.method_set_absorbent, UnsafeMutableRawPointer (mutating: handle), nil, &copy_absorbent)
        
        #else
        
        var copy_absorbent = absorbent
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_absorbent) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (PhysicsMaterial.method_set_absorbent, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_absorbent: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_absorbent")
        return withUnsafePointer (to: &PhysicsMaterial.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_absorbent ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (PhysicsMaterial.method_is_absorbent, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

