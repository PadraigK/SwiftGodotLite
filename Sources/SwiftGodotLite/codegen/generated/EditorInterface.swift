// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Godot editor's interface.
/// 
/// ``EditorInterface`` gives you control over Godot editor's window. It allows customizing the window, saving and (re-)loading scenes, rendering mesh previews, inspecting and editing resources and objects, and provides access to ``EditorSettings``, ``EditorFileSystem``, ``EditorResourcePreview``, ``ScriptEditor``, the editor viewport, and information about scenes.
/// 
/// > Note: This class shouldn't be instantiated directly. Instead, access the singleton directly by its name.
/// 
open class EditorInterface: Object {
    /// The shared instance of this class
    public static var shared: EditorInterface = {
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { ptr in
            EditorInterface (nativeHandle: gi.global_get_singleton (ptr)!)
        }
        
    }()
    
    override open class var godotClassName: StringName { "EditorInterface" }
    
    /* Properties */
    
    /// If `true`, enables distraction-free mode which hides side docks to increase the space available for the main view.
    final public var distractionFreeMode: Bool {
        get {
            return is_distraction_free_mode_enabled ()
        }
        
        set {
            set_distraction_free_mode (newValue)
        }
        
    }
    
    /// If `true`, the Movie Maker mode is enabled in the editor. See ``MovieWriter`` for more information.
    final public var movieMakerEnabled: Bool {
        get {
            return is_movie_maker_enabled ()
        }
        
        set {
            set_movie_maker_enabled (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_restart_editor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("restart_editor")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3216645846)!
            }
            
        }
        
    }()
    
    /// Restarts the editor. This closes the editor and then opens the same project. If `save` is `true`, the project will be saved before restarting.
    public final func restartEditor (save: Bool = true) {
        #if true
        
        var copy_save = save
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_restart_editor, UnsafeMutableRawPointer (mutating: handle), nil, &copy_save)
        
        #else
        
        var copy_save = save
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_save) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_restart_editor, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_command_palette: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_command_palette")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2471163807)!
            }
            
        }
        
    }()
    
    /// Returns the editor's ``EditorCommandPalette`` instance.
    /// 
    /// > Warning: Removing and freeing this node will render a part of the editor useless and may cause a crash.
    /// 
    public final func getCommandPalette ()-> EditorCommandPalette? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_command_palette, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_resource_filesystem: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_resource_filesystem")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 780151678)!
            }
            
        }
        
    }()
    
    /// Returns the editor's ``EditorFileSystem`` instance.
    public final func getResourceFilesystem ()-> EditorFileSystem? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_resource_filesystem, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_editor_paths: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_editor_paths")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1595760068)!
            }
            
        }
        
    }()
    
    /// Returns the ``EditorPaths`` singleton.
    public final func getEditorPaths ()-> EditorPaths? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_editor_paths, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_resource_previewer: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_resource_previewer")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 943486957)!
            }
            
        }
        
    }()
    
    /// Returns the editor's ``EditorResourcePreview`` instance.
    public final func getResourcePreviewer ()-> EditorResourcePreview? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_resource_previewer, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_selection: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_selection")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2690272531)!
            }
            
        }
        
    }()
    
    /// Returns the editor's ``EditorSelection`` instance.
    public final func getSelection ()-> EditorSelection? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_selection, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_editor_settings: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_editor_settings")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 4086932459)!
            }
            
        }
        
    }()
    
    /// Returns the editor's ``EditorSettings`` instance.
    public final func getEditorSettings ()-> EditorSettings? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_editor_settings, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_make_mesh_previews: GDExtensionMethodBindPtr = {
        let methodName = StringName ("make_mesh_previews")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 878078554)!
            }
            
        }
        
    }()
    
    /// Returns mesh previews rendered at the given size as an ``GArray`` of ``Texture2D``s.
    public final func makeMeshPreviews (meshes: ObjectCollection<Mesh>, previewSize: Int32)-> ObjectCollection<Texture2D> {
        var _result: Int64 = 0
        #if true
        
        var copy_preview_size: Int = Int (previewSize)
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_make_mesh_previews, UnsafeMutableRawPointer (mutating: handle), &_result, &meshes.array.content, &copy_preview_size)
        return ObjectCollection<Texture2D>(content: _result)
        #else
        
        var copy_preview_size: Int = Int (previewSize)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &meshes.array.content) { p0 in
            _args.append (p0)
            return withUnsafePointer (to: &copy_preview_size) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorInterface.method_make_mesh_previews, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
                return ObjectCollection<Texture2D>(content: _result)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_set_plugin_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_plugin_enabled")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2678287736)!
            }
            
        }
        
    }()
    
    /// Sets the enabled status of a plugin. The plugin name is the same as its directory name.
    public final func setPluginEnabled (plugin: String, enabled: Bool) {
        #if true
        
        let gstr_plugin = GString (plugin)
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_set_plugin_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_plugin.content, &copy_enabled)
        
        #else
        
        let gstr_plugin = GString (plugin)
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_plugin.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_enabled) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorInterface.method_set_plugin_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_is_plugin_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_plugin_enabled")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3927539163)!
            }
            
        }
        
    }()
    
    /// Returns `true` if the specified `plugin` is enabled. The plugin name is the same as its directory name.
    public final func isPluginEnabled (plugin: String)-> Bool {
        var _result: Bool = false
        #if true
        
        let gstr_plugin = GString (plugin)
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_is_plugin_enabled, UnsafeMutableRawPointer (mutating: handle), &_result, &gstr_plugin.content)
        return _result
        #else
        
        let gstr_plugin = GString (plugin)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_plugin.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_is_plugin_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            return _result
        }
        
        #endif
    }
    
    fileprivate static var method_get_editor_theme: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_editor_theme")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3846893731)!
            }
            
        }
        
    }()
    
    /// Returns the editor's ``Theme``.
    /// 
    /// > Note: When creating custom editor UI, prefer accessing theme items directly from your GUI nodes using the `get_theme_*` methods.
    /// 
    public final func getEditorTheme ()-> Theme? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_editor_theme, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_base_control: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_base_control")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2783021301)!
            }
            
        }
        
    }()
    
    /// Returns the main container of Godot editor's window. For example, you can use it to retrieve the size of the container and place your controls accordingly.
    /// 
    /// > Warning: Removing and freeing this node will render the editor useless and may cause a crash.
    /// 
    public final func getBaseControl ()-> Control? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_base_control, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_editor_main_screen: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_editor_main_screen")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1706218421)!
            }
            
        }
        
    }()
    
    /// Returns the editor control responsible for main screen plugins and tools. Use it with plugins that implement ``EditorPlugin/_hasMainScreen()``.
    /// 
    /// > Warning: Removing and freeing this node will render a part of the editor useless and may cause a crash.
    /// 
    public final func getEditorMainScreen ()-> VBoxContainer? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_editor_main_screen, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_script_editor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_script_editor")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 90868003)!
            }
            
        }
        
    }()
    
    /// Returns the editor's ``ScriptEditor`` instance.
    /// 
    /// > Warning: Removing and freeing this node will render a part of the editor useless and may cause a crash.
    /// 
    public final func getScriptEditor ()-> ScriptEditor? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_script_editor, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_editor_viewport_2d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_editor_viewport_2d")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3750751911)!
            }
            
        }
        
    }()
    
    /// Returns the 2D editor ``SubViewport``. It does not have a camera. Instead, the view transforms are done directly and can be accessed with ``Viewport/globalCanvasTransform``.
    public final func getEditorViewport2d ()-> SubViewport? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_editor_viewport_2d, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_get_editor_viewport_3d: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_editor_viewport_3d")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1970834490)!
            }
            
        }
        
    }()
    
    /// Returns the specified 3D editor ``SubViewport``, from `0` to `3`. The viewport can be used to access the active editor cameras with ``Viewport/getCamera3d()``.
    public final func getEditorViewport3d (idx: Int32 = 0)-> SubViewport? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        #if true
        
        var copy_idx: Int = Int (idx)
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_get_editor_viewport_3d, UnsafeMutableRawPointer (mutating: handle), &_result, &copy_idx)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        #else
        
        var copy_idx: Int = Int (idx)
        var _args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_idx) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_get_editor_viewport_3d, UnsafeMutableRawPointer (mutating: handle), &_args, &_result)
            guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
        }
        
        #endif
    }
    
    fileprivate static var method_set_main_screen_editor: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_main_screen_editor")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Sets the editor's current main screen to the one specified in `name`. `name` must match the title of the tab in question exactly (e.g. `2D`, `3D`, [code skip-lint]Script`, or `AssetLib` for default tabs).
    public final func setMainScreenEditor (name: String) {
        #if true
        
        let gstr_name = GString (name)
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_set_main_screen_editor, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_name.content)
        
        #else
        
        let gstr_name = GString (name)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_set_main_screen_editor, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_set_distraction_free_mode: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_distraction_free_mode")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_distraction_free_mode (_ enter: Bool) {
        #if true
        
        var copy_enter = enter
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_set_distraction_free_mode, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enter)
        
        #else
        
        var copy_enter = enter
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enter) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_set_distraction_free_mode, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_distraction_free_mode_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_distraction_free_mode_enabled")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_distraction_free_mode_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EditorInterface.method_is_distraction_free_mode_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_editor_scale: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_editor_scale")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    /// Returns the actual scale of the editor UI (`1.0` being 100% scale). This can be used to adjust position and dimensions of the UI added by plugins.
    /// 
    /// > Note: This value is set via the `interface/editor/display_scale` and `interface/editor/custom_display_scale` editor settings. Editor must be restarted for changes to be properly applied.
    /// 
    public final func getEditorScale ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (EditorInterface.method_get_editor_scale, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_popup_dialog: GDExtensionMethodBindPtr = {
        let methodName = StringName ("popup_dialog")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2015770942)!
            }
            
        }
        
    }()
    
    /// Pops up the `dialog` in the editor UI with ``Window/popupExclusive(fromNode:rect:)``. The dialog must have no current parent, otherwise the method fails.
    /// 
    /// See also ``Window/setUnparentWhenInvisible(unparent:)``.
    /// 
    public final func popupDialog (_ dialog: Window?, rect: Rect2i = Rect2i (x: 0, y: 0, width: 0, height: 0)) {
        #if true
        
        var copy_rect = rect
        var copy_dialog_handle = dialog?.handle
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_popup_dialog, UnsafeMutableRawPointer (mutating: handle), nil, &copy_dialog_handle, &copy_rect)
        
        #else
        
        var copy_rect = rect
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: dialog?.handle) { p0 in
        _args.append (dialog == nil ? nil : p0)
            withUnsafePointer (to: &copy_rect) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorInterface.method_popup_dialog, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_popup_dialog_centered: GDExtensionMethodBindPtr = {
        let methodName = StringName ("popup_dialog_centered")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 346557367)!
            }
            
        }
        
    }()
    
    /// Pops up the `dialog` in the editor UI with ``Window/popupExclusiveCentered(fromNode:minsize:)``. The dialog must have no current parent, otherwise the method fails.
    /// 
    /// See also ``Window/setUnparentWhenInvisible(unparent:)``.
    /// 
    public final func popupDialogCentered (dialog: Window?, minsize: Vector2i = Vector2i (x: 0, y: 0)) {
        #if true
        
        var copy_minsize = minsize
        var copy_dialog_handle = dialog?.handle
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_popup_dialog_centered, UnsafeMutableRawPointer (mutating: handle), nil, &copy_dialog_handle, &copy_minsize)
        
        #else
        
        var copy_minsize = minsize
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: dialog?.handle) { p0 in
        _args.append (dialog == nil ? nil : p0)
            withUnsafePointer (to: &copy_minsize) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorInterface.method_popup_dialog_centered, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_popup_dialog_centered_ratio: GDExtensionMethodBindPtr = {
        let methodName = StringName ("popup_dialog_centered_ratio")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2093669136)!
            }
            
        }
        
    }()
    
    /// Pops up the `dialog` in the editor UI with ``Window/popupExclusiveCenteredRatio(fromNode:ratio:)``. The dialog must have no current parent, otherwise the method fails.
    /// 
    /// See also ``Window/setUnparentWhenInvisible(unparent:)``.
    /// 
    public final func popupDialogCenteredRatio (dialog: Window?, ratio: Double = 0.8) {
        #if true
        
        var copy_ratio = ratio
        var copy_dialog_handle = dialog?.handle
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_popup_dialog_centered_ratio, UnsafeMutableRawPointer (mutating: handle), nil, &copy_dialog_handle, &copy_ratio)
        
        #else
        
        var copy_ratio = ratio
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: dialog?.handle) { p0 in
        _args.append (dialog == nil ? nil : p0)
            withUnsafePointer (to: &copy_ratio) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorInterface.method_popup_dialog_centered_ratio, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_popup_dialog_centered_clamped: GDExtensionMethodBindPtr = {
        let methodName = StringName ("popup_dialog_centered_clamped")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3763385571)!
            }
            
        }
        
    }()
    
    /// Pops up the `dialog` in the editor UI with ``Window/popupExclusiveCenteredClamped(fromNode:minsize:fallbackRatio:)``. The dialog must have no current parent, otherwise the method fails.
    /// 
    /// See also ``Window/setUnparentWhenInvisible(unparent:)``.
    /// 
    public final func popupDialogCenteredClamped (dialog: Window?, minsize: Vector2i = Vector2i (x: 0, y: 0), fallbackRatio: Double = 0.75) {
        #if true
        
        var copy_minsize = minsize
        var copy_fallback_ratio = fallbackRatio
        var copy_dialog_handle = dialog?.handle
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_popup_dialog_centered_clamped, UnsafeMutableRawPointer (mutating: handle), nil, &copy_dialog_handle, &copy_minsize, &copy_fallback_ratio)
        
        #else
        
        var copy_minsize = minsize
        var copy_fallback_ratio = fallbackRatio
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: dialog?.handle) { p0 in
        _args.append (dialog == nil ? nil : p0)
            withUnsafePointer (to: &copy_minsize) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_fallback_ratio) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (EditorInterface.method_popup_dialog_centered_clamped, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_get_current_feature_profile: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_feature_profile")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the name of the currently activated feature profile. If the default profile is currently active, an empty string is returned instead.
    /// 
    /// In order to get a reference to the ``EditorFeatureProfile``, you must load the feature profile using ``EditorFeatureProfile/loadFromFile(path:)``.
    /// 
    /// > Note: Feature profiles created via the user interface are loaded from the `feature_profiles` directory, as a file with the `.profile` extension. The editor configuration folder can be found by using ``EditorPaths/getConfigDir()``.
    /// 
    public final func getCurrentFeatureProfile ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (EditorInterface.method_get_current_feature_profile, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_current_feature_profile: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_current_feature_profile")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Selects and activates the specified feature profile with the given `profileName`. Set `profileName` to an empty string to reset to the default feature profile.
    /// 
    /// A feature profile can be created programmatically using the ``EditorFeatureProfile`` class.
    /// 
    /// > Note: The feature profile that gets activated must be located in the `feature_profiles` directory, as a file with the `.profile` extension. If a profile could not be found, an error occurs. The editor configuration folder can be found by using ``EditorPaths/getConfigDir()``.
    /// 
    public final func setCurrentFeatureProfile (profileName: String) {
        #if true
        
        let gstr_profile_name = GString (profileName)
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_set_current_feature_profile, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_profile_name.content)
        
        #else
        
        let gstr_profile_name = GString (profileName)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_profile_name.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_set_current_feature_profile, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_file_system_dock: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_file_system_dock")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3751012327)!
            }
            
        }
        
    }()
    
    /// Returns the editor's ``FileSystemDock`` instance.
    /// 
    /// > Warning: Removing and freeing this node will render a part of the editor useless and may cause a crash.
    /// 
    public final func getFileSystemDock ()-> FileSystemDock? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_file_system_dock, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_select_file: GDExtensionMethodBindPtr = {
        let methodName = StringName ("select_file")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Selects the file, with the path provided by `file`, in the FileSystem dock.
    public final func selectFile (_ file: String) {
        #if true
        
        let gstr_file = GString (file)
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_select_file, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_file.content)
        
        #else
        
        let gstr_file = GString (file)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_file.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_select_file, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_selected_paths: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_selected_paths")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns an array containing the paths of the currently selected files (and directories) in the ``FileSystemDock``.
    public final func getSelectedPaths ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (EditorInterface.method_get_selected_paths, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_current_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_path")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the current path being viewed in the ``FileSystemDock``.
    public final func getCurrentPath ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (EditorInterface.method_get_current_path, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_current_directory: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_current_directory")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the current directory being viewed in the ``FileSystemDock``. If a file is selected, its base directory will be returned using ``String/getBaseDir()`` instead.
    public final func getCurrentDirectory ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (EditorInterface.method_get_current_directory, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_get_inspector: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_inspector")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3517113938)!
            }
            
        }
        
    }()
    
    /// Returns the editor's ``EditorInspector`` instance.
    /// 
    /// > Warning: Removing and freeing this node will render a part of the editor useless and may cause a crash.
    /// 
    public final func getInspector ()-> EditorInspector? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_inspector, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_inspect_object: GDExtensionMethodBindPtr = {
        let methodName = StringName ("inspect_object")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 127962172)!
            }
            
        }
        
    }()
    
    /// Shows the given property on the given `object` in the editor's Inspector dock. If `inspectorOnly` is `true`, plugins will not attempt to edit `object`.
    public final func inspectObject (_ object: Object?, forProperty: String = "", inspectorOnly: Bool = false) {
        #if true
        
        let gstr_for_property = GString (forProperty)
        var copy_inspector_only = inspectorOnly
        var copy_object_handle = object?.handle
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_inspect_object, UnsafeMutableRawPointer (mutating: handle), nil, &copy_object_handle, &gstr_for_property.content, &copy_inspector_only)
        
        #else
        
        let gstr_for_property = GString (forProperty)
        var copy_inspector_only = inspectorOnly
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: object?.handle) { p0 in
        _args.append (object == nil ? nil : p0)
            withUnsafePointer (to: &gstr_for_property.content) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_inspector_only) { p2 in
                    _args.append (p2)
        
                    gi.object_method_bind_ptrcall (EditorInterface.method_inspect_object, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_edit_resource: GDExtensionMethodBindPtr = {
        let methodName = StringName ("edit_resource")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 968641751)!
            }
            
        }
        
    }()
    
    /// Edits the given ``Resource``. If the resource is a ``Script`` you can also edit it with ``editScript(_:line:column:grabFocus:)`` to specify the line and column position.
    public final func editResource (_ resource: Resource?) {
        #if true
        
        var copy_resource_handle = resource?.handle
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_edit_resource, UnsafeMutableRawPointer (mutating: handle), nil, &copy_resource_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: resource?.handle) { p0 in
        _args.append (resource == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_edit_resource, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_edit_node: GDExtensionMethodBindPtr = {
        let methodName = StringName ("edit_node")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1078189570)!
            }
            
        }
        
    }()
    
    /// Edits the given ``Node``. The node will be also selected if it's inside the scene tree.
    public final func editNode (_ node: Node?) {
        #if true
        
        var copy_node_handle = node?.handle
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_edit_node, UnsafeMutableRawPointer (mutating: handle), nil, &copy_node_handle)
        
        #else
        
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: node?.handle) { p0 in
        _args.append (node == nil ? nil : p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_edit_node, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_edit_script: GDExtensionMethodBindPtr = {
        let methodName = StringName ("edit_script")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 219829402)!
            }
            
        }
        
    }()
    
    /// Edits the given ``Script``. The line and column on which to open the script can also be specified. The script will be open with the user-configured editor for the script's language which may be an external editor.
    public final func editScript (_ script: Script?, line: Int32 = -1, column: Int32 = 0, grabFocus: Bool = true) {
        #if true
        
        var copy_line: Int = Int (line)
        var copy_column: Int = Int (column)
        var copy_grab_focus = grabFocus
        var copy_script_handle = script?.handle
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_edit_script, UnsafeMutableRawPointer (mutating: handle), nil, &copy_script_handle, &copy_line, &copy_column, &copy_grab_focus)
        
        #else
        
        var copy_line: Int = Int (line)
        var copy_column: Int = Int (column)
        var copy_grab_focus = grabFocus
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: script?.handle) { p0 in
        _args.append (script == nil ? nil : p0)
            withUnsafePointer (to: &copy_line) { p1 in
                _args.append (p1)
                withUnsafePointer (to: &copy_column) { p2 in
                    _args.append (p2)
                    withUnsafePointer (to: &copy_grab_focus) { p3 in
                        _args.append (p3)
        
                        gi.object_method_bind_ptrcall (EditorInterface.method_edit_script, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
                    }
                }
            }
        }
        
        #endif
    }
    
    fileprivate static var method_open_scene_from_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("open_scene_from_path")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Opens the scene at the given path.
    public final func openSceneFromPath (sceneFilepath: String) {
        #if true
        
        let gstr_scene_filepath = GString (sceneFilepath)
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_open_scene_from_path, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_scene_filepath.content)
        
        #else
        
        let gstr_scene_filepath = GString (sceneFilepath)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_scene_filepath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_open_scene_from_path, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_reload_scene_from_path: GDExtensionMethodBindPtr = {
        let methodName = StringName ("reload_scene_from_path")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Reloads the scene at the given path.
    public final func reloadSceneFromPath (sceneFilepath: String) {
        #if true
        
        let gstr_scene_filepath = GString (sceneFilepath)
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_reload_scene_from_path, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_scene_filepath.content)
        
        #else
        
        let gstr_scene_filepath = GString (sceneFilepath)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_scene_filepath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_reload_scene_from_path, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_open_scenes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_open_scenes")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1139954409)!
            }
            
        }
        
    }()
    
    /// Returns an ``GArray`` with the file paths of the currently opened scenes.
    public final func getOpenScenes ()-> PackedStringArray {
        let _result: PackedStringArray = PackedStringArray ()
        gi.object_method_bind_ptrcall (EditorInterface.method_get_open_scenes, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result
    }
    
    fileprivate static var method_get_edited_scene_root: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_edited_scene_root")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3160264692)!
            }
            
        }
        
    }()
    
    /// Returns the edited (current) scene's root ``Node``.
    public final func getEditedSceneRoot ()-> Node? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (EditorInterface.method_get_edited_scene_root, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
    fileprivate static var method_save_scene: GDExtensionMethodBindPtr = {
        let methodName = StringName ("save_scene")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 166280745)!
            }
            
        }
        
    }()
    
    /// Saves the currently active scene. Returns either ``GodotError/ok`` or ``GodotError/errCantCreate``.
    public final func saveScene ()-> GodotError {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (EditorInterface.method_save_scene, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return GodotError (rawValue: _result)!
    }
    
    fileprivate static var method_save_scene_as: GDExtensionMethodBindPtr = {
        let methodName = StringName ("save_scene_as")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3647332257)!
            }
            
        }
        
    }()
    
    /// Saves the currently active scene as a file at `path`.
    public final func saveSceneAs (path: String, withPreview: Bool = true) {
        #if true
        
        let gstr_path = GString (path)
        var copy_with_preview = withPreview
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_save_scene_as, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_path.content, &copy_with_preview)
        
        #else
        
        let gstr_path = GString (path)
        var copy_with_preview = withPreview
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_path.content) { p0 in
            _args.append (p0)
            withUnsafePointer (to: &copy_with_preview) { p1 in
                _args.append (p1)
        
                gi.object_method_bind_ptrcall (EditorInterface.method_save_scene_as, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
            }
        }
        
        #endif
    }
    
    fileprivate static var method_save_all_scenes: GDExtensionMethodBindPtr = {
        let methodName = StringName ("save_all_scenes")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Saves all opened scenes in the editor.
    public final func saveAllScenes () {
        gi.object_method_bind_ptrcall (EditorInterface.method_save_all_scenes, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_mark_scene_as_unsaved: GDExtensionMethodBindPtr = {
        let methodName = StringName ("mark_scene_as_unsaved")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Marks the current scene tab as unsaved.
    public final func markSceneAsUnsaved () {
        gi.object_method_bind_ptrcall (EditorInterface.method_mark_scene_as_unsaved, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_play_main_scene: GDExtensionMethodBindPtr = {
        let methodName = StringName ("play_main_scene")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Plays the main scene.
    public final func playMainScene () {
        gi.object_method_bind_ptrcall (EditorInterface.method_play_main_scene, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_play_current_scene: GDExtensionMethodBindPtr = {
        let methodName = StringName ("play_current_scene")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Plays the currently active scene.
    public final func playCurrentScene () {
        gi.object_method_bind_ptrcall (EditorInterface.method_play_current_scene, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_play_custom_scene: GDExtensionMethodBindPtr = {
        let methodName = StringName ("play_custom_scene")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 83702148)!
            }
            
        }
        
    }()
    
    /// Plays the scene specified by its filepath.
    public final func playCustomScene (sceneFilepath: String) {
        #if true
        
        let gstr_scene_filepath = GString (sceneFilepath)
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_play_custom_scene, UnsafeMutableRawPointer (mutating: handle), nil, &gstr_scene_filepath.content)
        
        #else
        
        let gstr_scene_filepath = GString (sceneFilepath)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_scene_filepath.content) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_play_custom_scene, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_stop_playing_scene: GDExtensionMethodBindPtr = {
        let methodName = StringName ("stop_playing_scene")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3218959716)!
            }
            
        }
        
    }()
    
    /// Stops the scene that is currently playing.
    public final func stopPlayingScene () {
        gi.object_method_bind_ptrcall (EditorInterface.method_stop_playing_scene, UnsafeMutableRawPointer (mutating: handle), nil, nil)
    }
    
    fileprivate static var method_is_playing_scene: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_playing_scene")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns `true` if a scene is currently being played, `false` otherwise. Paused scenes are considered as being played.
    public final func isPlayingScene ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EditorInterface.method_is_playing_scene, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_get_playing_scene: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_playing_scene")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 201670096)!
            }
            
        }
        
    }()
    
    /// Returns the name of the scene that is being played. If no scene is currently being played, returns an empty string.
    public final func getPlayingScene ()-> String {
        let _result = GString ()
        gi.object_method_bind_ptrcall (EditorInterface.method_get_playing_scene, UnsafeMutableRawPointer (mutating: handle), nil, &_result.content)
        return _result.description
    }
    
    fileprivate static var method_set_movie_maker_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_movie_maker_enabled")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_movie_maker_enabled (_ enabled: Bool) {
        #if true
        
        var copy_enabled = enabled
        
        gi.object_method_bind_ptrcall_v (EditorInterface.method_set_movie_maker_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &copy_enabled)
        
        #else
        
        var copy_enabled = enabled
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_enabled) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (EditorInterface.method_set_movie_maker_enabled, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_movie_maker_enabled: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_movie_maker_enabled")
        return withUnsafePointer (to: &EditorInterface.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func is_movie_maker_enabled ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (EditorInterface.method_is_movie_maker_enabled, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
}

