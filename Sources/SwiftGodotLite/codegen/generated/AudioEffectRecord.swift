// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Audio effect used for recording the sound from an audio bus.
/// 
/// Allows the user to record the sound from an audio bus. This can include all audio output by Godot when used on the "Master" audio bus.
/// 
/// Can be used (with an ``AudioStreamMicrophone``) to record from a microphone.
/// 
/// It sets and gets the format in which the audio file will be recorded (8-bit, 16-bit, or compressed). It checks whether or not the recording is active, and if it is, records the sound. It then returns the recorded sample.
/// 
open class AudioEffectRecord: AudioEffect {
    override open class var godotClassName: StringName { "AudioEffectRecord" }
    
    /* Properties */
    
    /// Specifies the format in which the sample will be recorded. See ``AudioStreamWAV.Format`` for available formats.
    final public var format: AudioStreamWAV.Format {
        get {
            return get_format ()
        }
        
        set {
            set_format (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_recording_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_recording_active")
        return withUnsafePointer (to: &AudioEffectRecord.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    /// If `true`, the sound will be recorded. Note that restarting the recording will remove the previously recorded sample.
    public final func setRecordingActive (record: Bool) {
        #if true
        
        var copy_record = record
        
        gi.object_method_bind_ptrcall_v (AudioEffectRecord.method_set_recording_active, UnsafeMutableRawPointer (mutating: handle), nil, &copy_record)
        
        #else
        
        var copy_record = record
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_record) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectRecord.method_set_recording_active, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_is_recording_active: GDExtensionMethodBindPtr = {
        let methodName = StringName ("is_recording_active")
        return withUnsafePointer (to: &AudioEffectRecord.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 36873697)!
            }
            
        }
        
    }()
    
    /// Returns whether the recording is active or not.
    public final func isRecordingActive ()-> Bool {
        var _result: Bool = false
        gi.object_method_bind_ptrcall (AudioEffectRecord.method_is_recording_active, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_format: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_format")
        return withUnsafePointer (to: &AudioEffectRecord.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 60648488)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_format (_ format: AudioStreamWAV.Format) {
        #if true
        
        var copy_format = Int64 (format.rawValue)
        
        gi.object_method_bind_ptrcall_v (AudioEffectRecord.method_set_format, UnsafeMutableRawPointer (mutating: handle), nil, &copy_format)
        
        #else
        
        var copy_format = Int64 (format.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_format) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (AudioEffectRecord.method_set_format, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_format: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_format")
        return withUnsafePointer (to: &AudioEffectRecord.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 3151724922)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_format ()-> AudioStreamWAV.Format {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (AudioEffectRecord.method_get_format, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return AudioStreamWAV.Format (rawValue: _result)!
    }
    
    fileprivate static var method_get_recording: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_recording")
        return withUnsafePointer (to: &AudioEffectRecord.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2964110865)!
            }
            
        }
        
    }()
    
    /// Returns the recorded sample.
    public final func getRecording ()-> AudioStreamWAV? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (AudioEffectRecord.method_get_recording, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

