// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// Represents a gamepad button being pressed or released.
/// 
/// Input event type for gamepad buttons. For gamepad analog sticks and joysticks, see ``InputEventJoypadMotion``.
open class InputEventJoypadButton: InputEvent {
    override open class var godotClassName: StringName { "InputEventJoypadButton" }
    
    /* Properties */
    
    /// Button identifier. One of the ``JoyButton`` button constants.
    final public var buttonIndex: JoyButton {
        get {
            return get_button_index ()
        }
        
        set {
            set_button_index (newValue)
        }
        
    }
    
    /// Represents the pressure the user puts on the button with their finger, if the controller supports it. Ranges from `0` to `1`.
    final public var pressure: Double {
        get {
            return get_pressure ()
        }
        
        set {
            set_pressure (newValue)
        }
        
    }
    
    /// If `true`, the button's state is pressed. If `false`, the button's state is released.
    final public var pressed: Bool {
        get {
            return isPressed ()
        }
        
        set {
            set_pressed (newValue)
        }
        
    }
    
    /* Methods */
    fileprivate static var method_set_button_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_button_index")
        return withUnsafePointer (to: &InputEventJoypadButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1466368136)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_button_index (_ buttonIndex: JoyButton) {
        #if false
        
        var copy_button_index = Int64 (buttonIndex.rawValue)
        
        gi.object_method_bind_ptrcall_v (InputEventJoypadButton.method_set_button_index, UnsafeMutableRawPointer (mutating: handle), nil, &copy_button_index)
        
        #else
        
        var copy_button_index = Int64 (buttonIndex.rawValue)
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_button_index) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventJoypadButton.method_set_button_index, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_button_index: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_button_index")
        return withUnsafePointer (to: &InputEventJoypadButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 595588182)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_button_index ()-> JoyButton {
        var _result: Int64 = 0 // to avoid packed enums on the stack
        gi.object_method_bind_ptrcall (InputEventJoypadButton.method_get_button_index, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return JoyButton (rawValue: _result)!
    }
    
    fileprivate static var method_set_pressure: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pressure")
        return withUnsafePointer (to: &InputEventJoypadButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 373806689)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pressure (_ pressure: Double) {
        #if false
        
        var copy_pressure = pressure
        
        gi.object_method_bind_ptrcall_v (InputEventJoypadButton.method_set_pressure, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pressure)
        
        #else
        
        var copy_pressure = pressure
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pressure) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventJoypadButton.method_set_pressure, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
    fileprivate static var method_get_pressure: GDExtensionMethodBindPtr = {
        let methodName = StringName ("get_pressure")
        return withUnsafePointer (to: &InputEventJoypadButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 1740695150)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func get_pressure ()-> Double {
        var _result: Double = 0.0
        gi.object_method_bind_ptrcall (InputEventJoypadButton.method_get_pressure, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        return _result
    }
    
    fileprivate static var method_set_pressed: GDExtensionMethodBindPtr = {
        let methodName = StringName ("set_pressed")
        return withUnsafePointer (to: &InputEventJoypadButton.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 2586408642)!
            }
            
        }
        
    }()
    
    @inline(__always)
    fileprivate final func set_pressed (_ pressed: Bool) {
        #if false
        
        var copy_pressed = pressed
        
        gi.object_method_bind_ptrcall_v (InputEventJoypadButton.method_set_pressed, UnsafeMutableRawPointer (mutating: handle), nil, &copy_pressed)
        
        #else
        
        var copy_pressed = pressed
        var _args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_pressed) { p0 in
            _args.append (p0)
        
            gi.object_method_bind_ptrcall (InputEventJoypadButton.method_set_pressed, UnsafeMutableRawPointer (mutating: handle), &_args, nil)
        }
        
        #endif
    }
    
}

