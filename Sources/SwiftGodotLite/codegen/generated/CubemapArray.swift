// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

// Generated by Swift code generator - do not edit
@_implementationOnly import GDExtension

/// An array of ``Cubemap``s, stored together and with a single reference.
/// 
/// ``CubemapArray``s are made of an array of ``Cubemap``s. Like ``Cubemap``s, they are made of multiple textures, the amount of which must be divisible by 6 (one for each face of the cube). The primary benefit of ``CubemapArray``s is that they can be accessed in shader code using a single texture reference. In other words, you can pass multiple ``Cubemap``s into a shader using a single ``CubemapArray``.
/// 
/// Moreover, ``Cubemap``s are allocated in adjacent cache regions on the GPU. This makes ``CubemapArray``s the most efficient way to store multiple ``Cubemap``s.
/// 
/// Internally, Godot uses ``CubemapArray``s for many effects, including the ``Sky`` if you set ``ProjectSettings/rendering/reflections/skyReflections/textureArrayReflections`` to `true`.
/// 
/// To create such a texture file yourself, reimport your image files using the import presets of the File System dock.
/// 
/// > Note: ``CubemapArray`` is not supported in the OpenGL 3 rendering backend.
/// 
open class CubemapArray: ImageTextureLayered {
    override open class var godotClassName: StringName { "CubemapArray" }
    /* Methods */
    fileprivate static var method_create_placeholder: GDExtensionMethodBindPtr = {
        let methodName = StringName ("create_placeholder")
        return withUnsafePointer (to: &CubemapArray.godotClassName.content) { classPtr in
            withUnsafePointer (to: &methodName.content) { mnamePtr in
                gi.classdb_get_method_bind (classPtr, mnamePtr, 121922552)!
            }
            
        }
        
    }()
    
    /// Creates a placeholder version of this resource (``PlaceholderCubemapArray``).
    public final func createPlaceholder ()-> Resource? {
        var _result = UnsafeRawPointer (bitPattern: 0)
        gi.object_method_bind_ptrcall (CubemapArray.method_create_placeholder, UnsafeMutableRawPointer (mutating: handle), nil, &_result)
        guard let _result else { return nil } ; return lookupObject (nativeHandle: _result)!
    }
    
}

