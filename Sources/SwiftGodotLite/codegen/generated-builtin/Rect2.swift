// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

/// A 2D axis-aligned bounding box using floating-point coordinates.
/// 
/// The ``Rect2`` built-in ``Variant`` type represents an axis-aligned rectangle in a 2D space. It is defined by its ``position`` and ``size``, which are ``Vector2``. It is frequently used for fast overlap tests (see ``intersects(b:includeBorders:)``). Although ``Rect2`` itself is axis-aligned, it can be combined with ``Transform2D`` to represent a rotated or skewed rectangle.
/// 
/// For integer coordinates, use ``Rect2i``. The 3D equivalent to ``Rect2`` is ``AABB``.
/// 
/// > Note: Negative values for ``size`` are not supported. With negative size, most ``Rect2`` methods do not work correctly. Use ``abs()`` to get an equivalent ``Rect2`` with a non-negative size.
/// 
/// > Note: In a boolean context, a ``Rect2`` evaluates to `false` if both ``position`` and ``size`` are zero (equal to ``Vector2.ZERO``). Otherwise, it always evaluates to `true`.
/// 
public struct Rect2: Equatable, Hashable {
    /// The origin point. This is usually the top-left corner of the rectangle.
    public var position: Vector2
    /// The rectangle's width and height, starting from ``position``. Setting this value also affects the ``end`` point.
    /// 
    /// > Note: It's recommended setting the width and height to non-negative values, as most methods in Godot assume that the ``position`` is the top-left corner, and the ``end`` is the bottom-right corner. To get an equivalent rectangle with non-negative size, use ``abs()``.
    /// 
    public var size: Vector2
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2, 0)!
    
    /// Constructs a ``Rect2`` with its ``position`` and ``size`` set to ``Vector2.ZERO``.
    public init () {
        self.position = Vector2 ()
        self.size = Vector2 ()
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2, 1)!
    
    /// Constructs a ``Rect2`` as a copy of the given ``Rect2``.
    public init (from: Rect2) {
        self.position = Vector2 ()
        self.size = Vector2 ()
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_from) { p0 in
            args.append (p0)
        
            Rect2.constructor1 (&self, &args)
        }
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2, 2)!
    
    /// Constructs a ``Rect2`` from a ``Rect2i``.
    public init (from: Rect2i) {
        self.position = Vector2 ()
        self.size = Vector2 ()
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_from) { p0 in
            args.append (p0)
        
            Rect2.constructor2 (&self, &args)
        }
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2, 3)!
    
    /// Constructs a ``Rect2`` by `position` and `size`.
    public init (position: Vector2, size: Vector2) {
        self.position = position
        self.size = size
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_RECT2, 4)!
    
    /// Constructs a ``Rect2`` by setting its ``position`` to (`x`, `y`), and its ``size`` to (`width`, `height`).
    public init (x: Float, y: Float, width: Float, height: Float) {
        self.position = Vector2 ()
        self.size = Vector2 ()
        var copy_x = Double (x)
        var copy_y = Double (y)
        var copy_width = Double (width)
        var copy_height = Double (height)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_x) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_y) { p1 in
                args.append (p1)
                withUnsafePointer (to: &copy_width) { p2 in
                    args.append (p2)
                    withUnsafePointer (to: &copy_height) { p3 in
                        args.append (p3)
        
                        Rect2.constructor4 (&self, &args)
                    }
                }
            }
        }
    }
    
    
    /* Methods */
    
    static var method_get_center: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_center")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 2428350749)!
    }()
    
    /// Returns the center point of the rectangle. This is the same as `position + (size / 2.0)`.
    public func getCenter ()-> Vector2 {
        var result: Vector2 = Vector2()
        withUnsafePointer (to: self) { ptr in 
            Rect2.method_get_center (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_get_area: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_area")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 466405837)!
    }()
    
    /// Returns the rectangle's area. This is equivalent to `size.x * size.y`. See also ``hasArea()``.
    public func getArea ()-> Double {
        var result: Double = Double()
        withUnsafePointer (to: self) { ptr in 
            Rect2.method_get_area (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_has_area: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("has_area")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this rectangle has positive width and height. See also ``getArea()``.
    public func hasArea ()-> Bool {
        var result: Bool = Bool()
        withUnsafePointer (to: self) { ptr in 
            Rect2.method_has_area (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_has_point: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("has_point")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 3190634762)!
    }()
    
    /// Returns `true` if the rectangle contains the given `point`. By convention, points on the right and bottom edges are **not** included.
    /// 
    /// > Note: This method is not reliable for ``Rect2`` with a _negative_ ``size``. Use ``abs()`` first to get a valid rectangle.
    /// 
    public func hasPoint (_ point: Vector2)-> Bool {
        var result: Bool = Bool()
        var copy_point = point
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_point) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Rect2.method_has_point (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_is_equal_approx: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_equal_approx")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 1908192260)!
    }()
    
    /// Returns `true` if this rectangle and `rect` are approximately equal, by calling ``Vector2/isEqualApprox(to:)`` on the ``position`` and the ``size``.
    public func isEqualApprox (rect: Rect2)-> Bool {
        var result: Bool = Bool()
        var copy_rect = rect
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_rect) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Rect2.method_is_equal_approx (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_is_finite: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_finite")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this rectangle's values are finite, by calling ``Vector2/isFinite()`` on the ``position`` and the ``size``.
    public func isFinite ()-> Bool {
        var result: Bool = Bool()
        withUnsafePointer (to: self) { ptr in 
            Rect2.method_is_finite (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_intersects: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("intersects")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 819294880)!
    }()
    
    /// Returns `true` if this rectangle overlaps with the `b` rectangle. The edges of both rectangles are excluded, unless `includeBorders` is `true`.
    public func intersects (b: Rect2, includeBorders: Bool = false)-> Bool {
        var result: Bool = Bool()
        var copy_b = b
        var copy_include_borders = includeBorders
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_b) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_include_borders) { p1 in
                args.append (p1)
        
                withUnsafePointer (to: self) { ptr in 
                    Rect2.method_intersects (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 2)
                }
                return result
            }
        }
    }
    
    static var method_encloses: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encloses")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 1908192260)!
    }()
    
    /// Returns `true` if this rectangle _completely_ encloses the `b` rectangle.
    public func encloses (b: Rect2)-> Bool {
        var result: Bool = Bool()
        var copy_b = b
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_b) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Rect2.method_encloses (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_intersection: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("intersection")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 2282977743)!
    }()
    
    /// Returns the intersection between this rectangle and `b`. If the rectangles do not intersect, returns an empty ``Rect2``.
    /// 
    /// > Note: If you only need to know whether two rectangles are overlapping, use ``intersects(b:includeBorders:)``, instead.
    /// 
    public func intersection (b: Rect2)-> Rect2 {
        var result: Rect2 = Rect2()
        var copy_b = b
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_b) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Rect2.method_intersection (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_merge: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("merge")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 2282977743)!
    }()
    
    /// Returns a ``Rect2`` that encloses both this rectangle and `b` around the edges. See also ``encloses(b:)``.
    public func merge (b: Rect2)-> Rect2 {
        var result: Rect2 = Rect2()
        var copy_b = b
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_b) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Rect2.method_merge (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_expand: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("expand")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 293272265)!
    }()
    
    /// Returns a copy of this rectangle expanded to align the edges with the given `to` point, if necessary.
    /// 
    public func expand (to: Vector2)-> Rect2 {
        var result: Rect2 = Rect2()
        var copy_to = to
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_to) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Rect2.method_expand (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_grow: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("grow")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 39664498)!
    }()
    
    /// Returns a copy of this rectangle extended on all sides by the given `amount`. A negative `amount` shrinks the rectangle instead. See also ``growIndividual(left:top:right:bottom:)`` and ``growSide(side:amount:)``.
    /// 
    public func grow (amount: Double)-> Rect2 {
        var result: Rect2 = Rect2()
        var copy_amount = Double (amount)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_amount) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Rect2.method_grow (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_grow_side: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("grow_side")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 4177736158)!
    }()
    
    /// Returns a copy of this rectangle with its `side` extended by the given `amount` (see ``Side`` constants). A negative `amount` shrinks the rectangle, instead. See also ``grow(amount:)`` and ``growIndividual(left:top:right:bottom:)``.
    public func growSide (_ side: Int64, amount: Double)-> Rect2 {
        var result: Rect2 = Rect2()
        var copy_side = side
        var copy_amount = Double (amount)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_side) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_amount) { p1 in
                args.append (p1)
        
                withUnsafePointer (to: self) { ptr in 
                    Rect2.method_grow_side (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 2)
                }
                return result
            }
        }
    }
    
    static var method_grow_individual: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("grow_individual")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 3203390369)!
    }()
    
    /// Returns a copy of this rectangle with its `left`, `top`, `right`, and `bottom` sides extended by the given amounts. Negative values shrink the sides, instead. See also ``grow(amount:)`` and ``growSide(side:amount:)``.
    public func growIndividual (left: Double, top: Double, right: Double, bottom: Double)-> Rect2 {
        var result: Rect2 = Rect2()
        var copy_left = Double (left)
        var copy_top = Double (top)
        var copy_right = Double (right)
        var copy_bottom = Double (bottom)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_left) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_top) { p1 in
                args.append (p1)
                return withUnsafePointer (to: &copy_right) { p2 in
                    args.append (p2)
                    return withUnsafePointer (to: &copy_bottom) { p3 in
                        args.append (p3)
        
                        withUnsafePointer (to: self) { ptr in 
                            Rect2.method_grow_individual (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 4)
                        }
                        return result
                    }
                }
            }
        }
    }
    
    static var method_abs: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("abs")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_RECT2, &name.content, 3107653634)!
    }()
    
    /// Returns a ``Rect2`` equivalent to this rectangle, with its width and height modified to be non-negative values, and with its ``position`` being the top-left corner of the rectangle.
    /// 
    /// > Note: It's recommended to use this method when ``size`` is negative, as most other methods in Godot assume that the ``position`` is the top-left corner, and the ``end`` is the bottom-right corner.
    /// 
    public func abs ()-> Rect2 {
        var result: Rect2 = Rect2()
        withUnsafePointer (to: self) { ptr in 
            Rect2.method_abs (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var operator_3: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_RECT2, GDEXTENSION_VARIANT_TYPE_RECT2)!
    }()
    
    /// Returns `true` if both ``position`` and ``size`` of the rectangles are exactly equal, respectively.
    /// 
    /// > Note: Due to floating-point precision errors, consider using ``isEqualApprox(rect:)`` instead, which is more reliable.
    /// 
    public static func == (lhs: Rect2, rhs: Rect2) -> Bool  {
        var result: Bool = Bool()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Rect2.operator_3 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_4: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_RECT2, GDEXTENSION_VARIANT_TYPE_RECT2)!
    }()
    
    /// Returns `true` if the ``position`` or ``size`` of both rectangles are not equal.
    /// 
    /// > Note: Due to floating-point precision errors, consider using ``isEqualApprox(rect:)`` instead, which is more reliable.
    /// 
    public static func != (lhs: Rect2, rhs: Rect2) -> Bool  {
        var result: Bool = Bool()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Rect2.operator_4 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_5: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_RECT2, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)!
    }()
    
    /// Inversely transforms (multiplies) the ``Rect2`` by the given ``Transform2D`` transformation matrix, under the assumption that the transformation basis is orthonormal (i.e. rotation/reflection is fine, scaling/skew is not).
    /// 
    /// `rect * transform` is equivalent to `transform.inverse() * rect`. See ``Transform2D/inverse()``.
    /// 
    /// For transforming by inverse of an affine transformation (e.g. with scaling) `transform.affine_inverse() * rect` can be used instead. See ``Transform2D/affineInverse()``.
    /// 
    public static func * (lhs: Rect2, rhs: Transform2D) -> Rect2  {
        var result: Rect2 = Rect2()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Rect2.operator_5 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    /// The ending point. This is usually the bottom-right corner of the rectangle, and is equivalent to `position + size`. Setting this point affects the ``size``.
    public var end: Vector2 {
        set {
            size = newValue - position
        }
        
        get {
            position + size
        }
        
    }
    
}

