// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

/// A built-in type for unique strings.
/// 
/// ``StringName``s are immutable strings designed for general-purpose representation of unique names (also called "string interning"). Two ``StringName``s with the same value are the same object. Comparing them is extremely fast compared to regular ``String``s.
/// 
/// You will usually just pass a ``String`` to methods expecting a ``StringName`` and it will be automatically converted, but you may occasionally want to construct a ``StringName`` ahead of time with the ``StringName`` constructor or, in GDScript, the literal syntax `&"example"`.
/// 
/// See also ``NodePath``, which is a similar concept specifically designed to store pre-parsed scene tree paths.
/// 
/// All of ``String``'s methods are available in this class too. They convert the ``StringName`` into a string, and they also return a string. This is highly inefficient and should only be used if the string is desired.
/// 
/// > Note: In a boolean context, a ``StringName`` will evaluate to `false` if it is empty (`StringName("")`). Otherwise, a ``StringName`` will always evaluate to `true`. The `not` operator cannot be used. Instead, ``isEmpty()`` should be used to check for empty ``StringName``s.
/// 
public class StringName: Equatable, ExpressibleByStringLiteral, ExpressibleByStringInterpolation, LosslessStringConvertible {
    public init (fromPtr: UnsafeRawPointer?) {
        var args: [UnsafeRawPointer?] = [
            fromPtr,
        ]
        StringName.constructor1 (&content, &args)
    }
    
    // ExpressibleByStringLiteral conformace
    public required init (stringLiteral value: String) {
        let from = GString (value)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &from.content) { ptr in
            args.append (ptr)
            StringName.constructor2 (&content, &args)
        }
        
    }
    
    // LosslessStringConvertible conformance)
    public required init (_ value: String) {
        let from = GString (value)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &from.content) { ptr in
            args.append (ptr)
            StringName.constructor2 (&content, &args)
        }
        
    }
    
    static var destructor: GDExtensionPtrDestructor = {
        return gi.variant_get_ptr_destructor (GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    deinit {
        if content != StringName.zero {
            StringName.destructor (&content)
        }
        
    }
    
    // Contains a binary blob where this type information is stored
    public var content: ContentType = 0
    // Used to initialize empty types
    public static let zero: ContentType  = 0
    // Convenience type that matches the build configuration storage needs
    public typealias ContentType = Int64
    // Used to construct objects on virtual proxies
    public required init (content: ContentType) {
        var copy = content
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy) { ptr in
            args.append (ptr)
            StringName.constructor1 (&self.content, &args)
        }
        
    }
    
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING_NAME, 0)!
    
    /// Constructs an empty ``StringName``.
    public required init () {
        StringName.constructor0 (&content, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING_NAME, 1)!
    
    /// Constructs a ``StringName`` as a copy of the given ``StringName``.
    public init (from: StringName) {
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &from.content) { p0 in
            args.append (p0)
        
            StringName.constructor1 (&content, &args)
        }
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_STRING_NAME, 2)!
    
    /// Creates a new ``StringName`` from the given ``String``. In GDScript, `StringName("example")` is equivalent to `&"example"`.
    public init (from: String) {
        let gstr_from = GString (from)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_from.content) { p0 in
            args.append (p0)
        
            StringName.constructor2 (&content, &args)
        }
    }
    
    
    /* Methods */
    
    static var method_casecmp_to: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("casecmp_to")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2920860731)!
    }()
    
    /// Performs a case-sensitive comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" and "greater than" are determined by the [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode code points[/url] of each string, which roughly matches the alphabetical order.
    /// 
    /// With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
    /// 
    /// To get a [bool] result from a string comparison, use the `==` operator instead. See also ``nocasecmpTo(to:)``, ``naturalcasecmpTo(to:)``, and ``naturalnocasecmpTo(to:)``.
    /// 
    public final func casecmpTo (_ to: String)-> Int64 {
        var result: Int64 = Int64()
        let gstr_to = GString (to)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_to.content) { p0 in
            args.append (p0)
        
            StringName.method_casecmp_to (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_nocasecmp_to: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("nocasecmp_to")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2920860731)!
    }()
    
    /// Performs a **case-insensitive** comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode code points[/url] of each string, which roughly matches the alphabetical order. Internally, lowercase characters are converted to uppercase for the comparison.
    /// 
    /// With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
    /// 
    /// To get a [bool] result from a string comparison, use the `==` operator instead. See also ``casecmpTo(to:)``, ``naturalcasecmpTo(to:)``, and ``naturalnocasecmpTo(to:)``.
    /// 
    public final func nocasecmpTo (_ to: String)-> Int64 {
        var result: Int64 = Int64()
        let gstr_to = GString (to)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_to.content) { p0 in
            args.append (p0)
        
            StringName.method_nocasecmp_to (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_naturalcasecmp_to: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("naturalcasecmp_to")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2920860731)!
    }()
    
    /// Performs a **case-sensitive**, _natural order_ comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode code points[/url] of each string, which roughly matches the alphabetical order.
    /// 
    /// When used for sorting, natural order comparison orders sequences of numbers by the combined value of each digit as is often expected, instead of the single digit's value. A sorted sequence of numbered strings will be `["1", "2", "3", ...]`, not `["1", "10", "2", "3", ...]`.
    /// 
    /// With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
    /// 
    /// To get a [bool] result from a string comparison, use the `==` operator instead. See also ``naturalnocasecmpTo(to:)``, ``nocasecmpTo(to:)``, and ``casecmpTo(to:)``.
    /// 
    public final func naturalcasecmpTo (_ to: String)-> Int64 {
        var result: Int64 = Int64()
        let gstr_to = GString (to)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_to.content) { p0 in
            args.append (p0)
        
            StringName.method_naturalcasecmp_to (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_naturalnocasecmp_to: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("naturalnocasecmp_to")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2920860731)!
    }()
    
    /// Performs a **case-insensitive**, _natural order_ comparison to another string. Returns `-1` if less than, `1` if greater than, or `0` if equal. "Less than" or "greater than" are determined by the [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode code points[/url] of each string, which roughly matches the alphabetical order. Internally, lowercase characters are converted to uppercase for the comparison.
    /// 
    /// When used for sorting, natural order comparison orders sequences of numbers by the combined value of each digit as is often expected, instead of the single digit's value. A sorted sequence of numbered strings will be `["1", "2", "3", ...]`, not `["1", "10", "2", "3", ...]`.
    /// 
    /// With different string lengths, returns `1` if this string is longer than the `to` string, or `-1` if shorter. Note that the length of empty strings is _always_ `0`.
    /// 
    /// To get a [bool] result from a string comparison, use the `==` operator instead. See also ``naturalcasecmpTo(to:)``, ``nocasecmpTo(to:)``, and ``casecmpTo(to:)``.
    /// 
    public final func naturalnocasecmpTo (_ to: String)-> Int64 {
        var result: Int64 = Int64()
        let gstr_to = GString (to)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_to.content) { p0 in
            args.append (p0)
        
            StringName.method_naturalnocasecmp_to (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_length: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("length")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3173160232)!
    }()
    
    /// Returns the number of characters in the string. Empty strings (`""`) always return `0`. See also ``isEmpty()``.
    public final func length ()-> Int64 {
        var result: Int64 = Int64()
        StringName.method_length (&content, nil, &result, 0)
        return result
    }
    
    static var method_substr: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("substr")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 787537301)!
    }()
    
    /// Returns part of the string from the position `from` with length `len`. If `len` is `-1` (as by default), returns the rest of the string starting from the given position.
    public final func substr (from: Int64, len: Int64 = -1)-> String {
        let result = GString ()
        var copy_from = from
        var copy_len = len
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_from) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_len) { p1 in
                args.append (p1)
        
                StringName.method_substr (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_get_slice: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_slice")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3535100402)!
    }()
    
    /// Splits the string using a `delimiter` and returns the substring at index `slice`. Returns an empty string if the `slice` does not exist.
    /// 
    /// This is faster than ``split(delimiter:allowEmpty:maxsplit:)``, if you only need one substring.
    /// 
    /// **Example:**
    /// 
    public final func getSlice (delimiter: String, slice: Int64)-> String {
        let result = GString ()
        let gstr_delimiter = GString (delimiter)
        var copy_slice = slice
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_delimiter.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_slice) { p1 in
                args.append (p1)
        
                StringName.method_get_slice (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_get_slicec: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_slicec")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 787537301)!
    }()
    
    /// Splits the string using a Unicode character with code `delimiter` and returns the substring at index `slice`. Returns an empty string if the `slice` does not exist.
    /// 
    /// This is faster than ``split(delimiter:allowEmpty:maxsplit:)``, if you only need one substring.
    /// 
    public final func getSlicec (delimiter: Int64, slice: Int64)-> String {
        let result = GString ()
        var copy_delimiter = delimiter
        var copy_slice = slice
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_delimiter) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_slice) { p1 in
                args.append (p1)
        
                StringName.method_get_slicec (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_get_slice_count: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_slice_count")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2920860731)!
    }()
    
    /// Returns the total number of slices when the string is split with the given `delimiter` (see ``split(delimiter:allowEmpty:maxsplit:)``).
    public final func getSliceCount (delimiter: String)-> Int64 {
        var result: Int64 = Int64()
        let gstr_delimiter = GString (delimiter)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_delimiter.content) { p0 in
            args.append (p0)
        
            StringName.method_get_slice_count (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_find: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("find")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 1760645412)!
    }()
    
    /// Returns the index of the **first** occurrence of `what` in this string, or `-1` if there are none. The search's start can be specified with `from`, continuing to the end of the string.
    /// 
    /// > Note: If you just want to know whether the string contains `what`, use ``contains(what:)``. In GDScript, you may also use the `in` operator.
    /// 
    public final func find (what: String, from: Int64 = 0)-> Int64 {
        var result: Int64 = Int64()
        let gstr_what = GString (what)
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_what.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_from) { p1 in
                args.append (p1)
        
                StringName.method_find (&content, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_count: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("count")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2343087891)!
    }()
    
    /// Returns the number of occurrences of the substring `what` between `from` and `to` positions. If `to` is 0, the search continues until the end of the string.
    public final func count (what: String, from: Int64 = 0, to: Int64 = 0)-> Int64 {
        var result: Int64 = Int64()
        let gstr_what = GString (what)
        var copy_from = from
        var copy_to = to
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_what.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_from) { p1 in
                args.append (p1)
                return withUnsafePointer (to: &copy_to) { p2 in
                    args.append (p2)
        
                    StringName.method_count (&content, &args, &result, 3)
                    return result
                }
            }
        }
    }
    
    static var method_countn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("countn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2343087891)!
    }()
    
    /// Returns the number of occurrences of the substring `what` between `from` and `to` positions, **ignoring case**. If `to` is 0, the search continues until the end of the string.
    public final func countn (what: String, from: Int64 = 0, to: Int64 = 0)-> Int64 {
        var result: Int64 = Int64()
        let gstr_what = GString (what)
        var copy_from = from
        var copy_to = to
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_what.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_from) { p1 in
                args.append (p1)
                return withUnsafePointer (to: &copy_to) { p2 in
                    args.append (p2)
        
                    StringName.method_countn (&content, &args, &result, 3)
                    return result
                }
            }
        }
    }
    
    static var method_findn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("findn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 1760645412)!
    }()
    
    /// Returns the index of the **first** **case-insensitive** occurrence of `what` in this string, or `-1` if there are none. The starting search index can be specified with `from`, continuing to the end of the string.
    public final func findn (what: String, from: Int64 = 0)-> Int64 {
        var result: Int64 = Int64()
        let gstr_what = GString (what)
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_what.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_from) { p1 in
                args.append (p1)
        
                StringName.method_findn (&content, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_rfind: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rfind")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 1760645412)!
    }()
    
    /// Returns the index of the **last** occurrence of `what` in this string, or `-1` if there are none. The search's start can be specified with `from`, continuing to the beginning of the string. This method is the reverse of ``find(what:from:)``.
    public final func rfind (what: String, from: Int64 = -1)-> Int64 {
        var result: Int64 = Int64()
        let gstr_what = GString (what)
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_what.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_from) { p1 in
                args.append (p1)
        
                StringName.method_rfind (&content, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_rfindn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rfindn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 1760645412)!
    }()
    
    /// Returns the index of the **last** **case-insensitive** occurrence of `what` in this string, or `-1` if there are none. The starting search index can be specified with `from`, continuing to the beginning of the string. This method is the reverse of ``findn(what:from:)``.
    public final func rfindn (what: String, from: Int64 = -1)-> Int64 {
        var result: Int64 = Int64()
        let gstr_what = GString (what)
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_what.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_from) { p1 in
                args.append (p1)
        
                StringName.method_rfindn (&content, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_match: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("match")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2566493496)!
    }()
    
    /// Does a simple expression match (also called "glob" or "globbing"), where `*` matches zero or more arbitrary characters and `?` matches any single character except a period (`.`). An empty string or empty expression always evaluates to `false`.
    public final func match (expr: String)-> Bool {
        var result: Bool = Bool()
        let gstr_expr = GString (expr)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_expr.content) { p0 in
            args.append (p0)
        
            StringName.method_match (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_matchn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("matchn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2566493496)!
    }()
    
    /// Does a simple **case-insensitive** expression match, where `*` matches zero or more arbitrary characters and `?` matches any single character except a period (`.`). An empty string or empty expression always evaluates to `false`.
    public final func matchn (expr: String)-> Bool {
        var result: Bool = Bool()
        let gstr_expr = GString (expr)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_expr.content) { p0 in
            args.append (p0)
        
            StringName.method_matchn (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_begins_with: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("begins_with")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if the string begins with the given `text`. See also ``endsWith(text:)``.
    public final func beginsWith (text: String)-> Bool {
        var result: Bool = Bool()
        let gstr_text = GString (text)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_text.content) { p0 in
            args.append (p0)
        
            StringName.method_begins_with (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_ends_with: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("ends_with")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if the string ends with the given `text`. See also ``beginsWith(text:)``.
    public final func endsWith (text: String)-> Bool {
        var result: Bool = Bool()
        let gstr_text = GString (text)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_text.content) { p0 in
            args.append (p0)
        
            StringName.method_ends_with (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_is_subsequence_of: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_subsequence_of")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if all characters of this string can be found in `text` in their original order.
    /// 
    public final func isSubsequenceOf (text: String)-> Bool {
        var result: Bool = Bool()
        let gstr_text = GString (text)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_text.content) { p0 in
            args.append (p0)
        
            StringName.method_is_subsequence_of (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_is_subsequence_ofn: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_subsequence_ofn")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if all characters of this string can be found in `text` in their original order, **ignoring case**.
    public final func isSubsequenceOfn (text: String)-> Bool {
        var result: Bool = Bool()
        let gstr_text = GString (text)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_text.content) { p0 in
            args.append (p0)
        
            StringName.method_is_subsequence_ofn (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_bigrams: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("bigrams")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 747180633)!
    }()
    
    /// Returns an array containing the bigrams (pairs of consecutive characters) of this string.
    /// 
    public final func bigrams ()-> PackedStringArray {
        let result: PackedStringArray = PackedStringArray()
        StringName.method_bigrams (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_similarity: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("similarity")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2697460964)!
    }()
    
    /// Returns the similarity index ([url=https://en.wikipedia.org/wiki/S%C3%B8rensen%E2%80%93Dice_coefficient]Sorensen-Dice coefficient[/url]) of this string compared to another. A result of `1.0` means totally similar, while `0.0` means totally dissimilar.
    /// 
    public final func similarity (text: String)-> Double {
        var result: Double = Double()
        let gstr_text = GString (text)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_text.content) { p0 in
            args.append (p0)
        
            StringName.method_similarity (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_format: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("format")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3212199029)!
    }()
    
    /// Formats the string by replacing all occurrences of `placeholder` with the elements of `values`.
    /// 
    /// `values` can be a ``GDictionary`` or an ``GArray``. Any underscores in `placeholder` will be replaced with the corresponding keys in advance. Array elements use their index as keys.
    /// 
    /// Some additional handling is performed when `values` is an ``GArray``. If `placeholder` does not contain an underscore, the elements of the `values` array will be used to replace one occurrence of the placeholder in order; If an element of `values` is another 2-element array, it'll be interpreted as a key-value pair.
    /// 
    /// See also the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format string[/url] tutorial.
    /// 
    /// > Note: In C#, it's recommended to [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]interpolate strings with "$"[/url], instead.
    /// 
    public final func format (values: Variant, placeholder: String = "{_}")-> String {
        let result = GString ()
        let gstr_placeholder = GString (placeholder)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &values.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &gstr_placeholder.content) { p1 in
                args.append (p1)
        
                StringName.method_format (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_replace: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("replace")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 1340436205)!
    }()
    
    /// Replaces all occurrences of `what` inside the string with the given `forwhat`.
    public final func replace (what: String, forwhat: String)-> String {
        let result = GString ()
        let gstr_what = GString (what)
        let gstr_forwhat = GString (forwhat)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_what.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &gstr_forwhat.content) { p1 in
                args.append (p1)
        
                StringName.method_replace (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_replacen: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("replacen")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 1340436205)!
    }()
    
    /// Replaces all **case-insensitive** occurrences of `what` inside the string with the given `forwhat`.
    public final func replacen (what: String, forwhat: String)-> String {
        let result = GString ()
        let gstr_what = GString (what)
        let gstr_forwhat = GString (forwhat)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_what.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &gstr_forwhat.content) { p1 in
                args.append (p1)
        
                StringName.method_replacen (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_reverse: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("reverse")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns the copy of this string in reverse order.
    public final func reverse ()-> String {
        let result = GString ()
        StringName.method_reverse (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_insert: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("insert")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 248737229)!
    }()
    
    /// Inserts `what` at the given `position` in the string.
    public final func insert (position: Int64, what: String)-> String {
        let result = GString ()
        var copy_position = position
        let gstr_what = GString (what)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_position) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &gstr_what.content) { p1 in
                args.append (p1)
        
                StringName.method_insert (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_erase: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("erase")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 787537301)!
    }()
    
    /// Returns a string with `chars` characters erased starting from `position`. If `chars` goes beyond the string's length given the specified `position`, fewer characters will be erased from the returned string. Returns an empty string if either `position` or `chars` is negative. Returns the original string unmodified if `chars` is `0`.
    public final func erase (position: Int64, chars: Int64 = 1)-> String {
        let result = GString ()
        var copy_position = position
        var copy_chars = chars
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_position) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_chars) { p1 in
                args.append (p1)
        
                StringName.method_erase (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_capitalize: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("capitalize")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Changes the appearance of the string: replaces underscores (`_`) with spaces, adds spaces before uppercase letters in the middle of a word, converts all letters to lowercase, then converts the first one and each one following a space to uppercase.
    /// 
    /// > Note: This method not the same as the default appearance of properties in the Inspector dock, as it does not capitalize acronyms (`"2D"`, `"FPS"`, `"PNG"`, etc.) as you may expect.
    /// 
    public final func capitalize ()-> String {
        let result = GString ()
        StringName.method_capitalize (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_to_camel_case: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_camel_case")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns the string converted to `camelCase`.
    public final func toCamelCase ()-> String {
        let result = GString ()
        StringName.method_to_camel_case (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_to_pascal_case: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_pascal_case")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns the string converted to `PascalCase`.
    public final func toPascalCase ()-> String {
        let result = GString ()
        StringName.method_to_pascal_case (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_to_snake_case: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_snake_case")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns the string converted to `snake_case`.
    public final func toSnakeCase ()-> String {
        let result = GString ()
        StringName.method_to_snake_case (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_split: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("split")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 1252735785)!
    }()
    
    /// Splits the string using a `delimiter` and returns an array of the substrings. If `delimiter` is an empty string, each substring will be a single character. This method is the opposite of ``join(parts:)``.
    /// 
    /// If `allowEmpty` is `false`, empty strings between adjacent delimiters are excluded from the array.
    /// 
    /// If `maxsplit` is greater than `0`, the number of splits may not exceed `maxsplit`. By default, the entire string is split.
    /// 
    /// **Example:**
    /// 
    /// > Note: If you only need one substring from the array, consider using ``getSlice(delimiter:slice:)`` which is faster. If you need to split strings with more complex rules, use the ``RegEx`` class instead.
    /// 
    public final func split (delimiter: String = "", allowEmpty: Bool = true, maxsplit: Int64 = 0)-> PackedStringArray {
        let result: PackedStringArray = PackedStringArray()
        let gstr_delimiter = GString (delimiter)
        var copy_allow_empty = allowEmpty
        var copy_maxsplit = maxsplit
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_delimiter.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_allow_empty) { p1 in
                args.append (p1)
                return withUnsafePointer (to: &copy_maxsplit) { p2 in
                    args.append (p2)
        
                    StringName.method_split (&content, &args, &result.content, 3)
                    return result
                }
            }
        }
    }
    
    static var method_rsplit: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rsplit")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 1252735785)!
    }()
    
    /// Splits the string using a `delimiter` and returns an array of the substrings, starting from the end of the string. The splits in the returned array appear in the same order as the original string. If `delimiter` is an empty string, each substring will be a single character.
    /// 
    /// If `allowEmpty` is `false`, empty strings between adjacent delimiters are excluded from the array.
    /// 
    /// If `maxsplit` is greater than `0`, the number of splits may not exceed `maxsplit`. By default, the entire string is split, which is mostly identical to ``split(delimiter:allowEmpty:maxsplit:)``.
    /// 
    /// **Example:**
    /// 
    public final func rsplit (delimiter: String = "", allowEmpty: Bool = true, maxsplit: Int64 = 0)-> PackedStringArray {
        let result: PackedStringArray = PackedStringArray()
        let gstr_delimiter = GString (delimiter)
        var copy_allow_empty = allowEmpty
        var copy_maxsplit = maxsplit
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_delimiter.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_allow_empty) { p1 in
                args.append (p1)
                return withUnsafePointer (to: &copy_maxsplit) { p2 in
                    args.append (p2)
        
                    StringName.method_rsplit (&content, &args, &result.content, 3)
                    return result
                }
            }
        }
    }
    
    static var method_split_floats: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("split_floats")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2092079095)!
    }()
    
    /// Splits the string into floats by using a `delimiter` and returns a ``PackedFloat64Array``.
    /// 
    /// If `allowEmpty` is `false`, empty or invalid float conversions between adjacent delimiters are excluded.
    /// 
    public final func splitFloats (delimiter: String, allowEmpty: Bool = true)-> PackedFloat64Array {
        let result: PackedFloat64Array = PackedFloat64Array()
        let gstr_delimiter = GString (delimiter)
        var copy_allow_empty = allowEmpty
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_delimiter.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_allow_empty) { p1 in
                args.append (p1)
        
                StringName.method_split_floats (&content, &args, &result.content, 2)
                return result
            }
        }
    }
    
    static var method_join: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("join")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3595973238)!
    }()
    
    /// Returns the concatenation of `parts`' elements, with each element separated by the string calling this method. This method is the opposite of ``split(delimiter:allowEmpty:maxsplit:)``.
    /// 
    /// **Example:**
    /// 
    public final func join (parts: PackedStringArray)-> String {
        let result = GString ()
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &parts.content) { p0 in
            args.append (p0)
        
            StringName.method_join (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_to_upper: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_upper")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns the string converted to uppercase.
    public final func toUpper ()-> String {
        let result = GString ()
        StringName.method_to_upper (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_to_lower: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_lower")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns the string converted to lowercase.
    public final func toLower ()-> String {
        let result = GString ()
        StringName.method_to_lower (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_left: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("left")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2162347432)!
    }()
    
    /// Returns the first `length` characters from the beginning of the string. If `length` is negative, strips the last `length` characters from the string's end.
    /// 
    public final func left (length: Int64)-> String {
        let result = GString ()
        var copy_length = length
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_length) { p0 in
            args.append (p0)
        
            StringName.method_left (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_right: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("right")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2162347432)!
    }()
    
    /// Returns the last `length` characters from the end of the string. If `length` is negative, strips the first `length` characters from the string's beginning.
    /// 
    public final func right (length: Int64)-> String {
        let result = GString ()
        var copy_length = length
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_length) { p0 in
            args.append (p0)
        
            StringName.method_right (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_strip_edges: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("strip_edges")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 907855311)!
    }()
    
    /// Strips all non-printable characters from the beginning and the end of the string. These include spaces, tabulations (`\t`), and newlines (`\n` `\r`).
    /// 
    /// If `left` is `false`, ignores the string's beginning. Likewise, if `right` is `false`, ignores the string's end.
    /// 
    public final func stripEdges (left: Bool = true, right: Bool = true)-> String {
        let result = GString ()
        var copy_left = left
        var copy_right = right
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_left) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_right) { p1 in
                args.append (p1)
        
                StringName.method_strip_edges (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_strip_escapes: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("strip_escapes")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Strips all escape characters from the string. These include all non-printable control characters of the first page of the ASCII table (values from 0 to 31), such as tabulation (`\t`) and newline (`\n`, `\r`) characters, but _not_ spaces.
    public final func stripEscapes ()-> String {
        let result = GString ()
        StringName.method_strip_escapes (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_lstrip: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("lstrip")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3134094431)!
    }()
    
    /// Removes a set of characters defined in `chars` from the string's beginning. See also ``rstrip(chars:)``.
    /// 
    /// > Note: `chars` is not a prefix. Use ``trimPrefix(prefix:)`` to remove a single prefix, rather than a set of characters.
    /// 
    public final func lstrip (chars: String)-> String {
        let result = GString ()
        let gstr_chars = GString (chars)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_chars.content) { p0 in
            args.append (p0)
        
            StringName.method_lstrip (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_rstrip: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rstrip")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3134094431)!
    }()
    
    /// Removes a set of characters defined in `chars` from the string's end. See also ``lstrip(chars:)``.
    /// 
    /// > Note: `chars` is not a suffix. Use ``trimSuffix(suffix:)`` to remove a single suffix, rather than a set of characters.
    /// 
    public final func rstrip (chars: String)-> String {
        let result = GString ()
        let gstr_chars = GString (chars)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_chars.content) { p0 in
            args.append (p0)
        
            StringName.method_rstrip (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_get_extension: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_extension")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// If the string is a valid file name or path, returns the file extension without the leading period (`.`). Otherwise, returns an empty string.
    /// 
    public final func getExtension ()-> String {
        let result = GString ()
        StringName.method_get_extension (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_get_basename: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_basename")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// If the string is a valid file path, returns the full file path, without the extension.
    /// 
    public final func getBasename ()-> String {
        let result = GString ()
        StringName.method_get_basename (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_path_join: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("path_join")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3134094431)!
    }()
    
    /// Concatenates `file` at the end of the string as a subpath, adding `/` if necessary.
    /// 
    /// **Example:** `"this/is".path_join("path") == "this/is/path"`.
    /// 
    public final func pathJoin (file: String)-> String {
        let result = GString ()
        let gstr_file = GString (file)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_file.content) { p0 in
            args.append (p0)
        
            StringName.method_path_join (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_unicode_at: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("unicode_at")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 4103005248)!
    }()
    
    /// Returns the character code at position `at`.
    public final func unicodeAt (_ at: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_at = at
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_at) { p0 in
            args.append (p0)
        
            StringName.method_unicode_at (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_indent: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("indent")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3134094431)!
    }()
    
    /// Indents every line of the string with the given `prefix`. Empty lines are not indented. See also ``dedent()`` to remove indentation.
    /// 
    /// For example, the string can be indented with two tabulations using `"\t\t"`, or four spaces using `"    "`.
    /// 
    public final func indent (prefix: String)-> String {
        let result = GString ()
        let gstr_prefix = GString (prefix)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_prefix.content) { p0 in
            args.append (p0)
        
            StringName.method_indent (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_dedent: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("dedent")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with indentation (leading tabs and spaces) removed. See also ``indent(prefix:)`` to add indentation.
    public final func dedent ()-> String {
        let result = GString ()
        StringName.method_dedent (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_md5_text: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("md5_text")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns the [url=https://en.wikipedia.org/wiki/MD5]MD5 hash[/url] of the string as another ``String``.
    public final func md5Text ()-> String {
        let result = GString ()
        StringName.method_md5_text (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_sha1_text: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sha1_text")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns the [url=https://en.wikipedia.org/wiki/SHA-1]SHA-1[/url] hash of the string as another ``String``.
    public final func sha1Text ()-> String {
        let result = GString ()
        StringName.method_sha1_text (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_sha256_text: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sha256_text")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns the [url=https://en.wikipedia.org/wiki/SHA-2]SHA-256[/url] hash of the string as another ``String``.
    public final func sha256Text ()-> String {
        let result = GString ()
        StringName.method_sha256_text (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_md5_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("md5_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 247621236)!
    }()
    
    /// Returns the [url=https://en.wikipedia.org/wiki/MD5]MD5 hash[/url] of the string as a ``PackedByteArray``.
    public final func md5Buffer ()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        StringName.method_md5_buffer (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_sha1_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sha1_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 247621236)!
    }()
    
    /// Returns the [url=https://en.wikipedia.org/wiki/SHA-1]SHA-1[/url] hash of the string as a ``PackedByteArray``.
    public final func sha1Buffer ()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        StringName.method_sha1_buffer (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_sha256_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sha256_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 247621236)!
    }()
    
    /// Returns the [url=https://en.wikipedia.org/wiki/SHA-2]SHA-256[/url] hash of the string as a ``PackedByteArray``.
    public final func sha256Buffer ()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        StringName.method_sha256_buffer (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_is_empty: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_empty")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the string's length is `0` (`""`). See also ``length()``.
    public final func isEmpty ()-> Bool {
        var result: Bool = Bool()
        StringName.method_is_empty (&content, nil, &result, 0)
        return result
    }
    
    static var method_contains: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("contains")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2566493496)!
    }()
    
    /// Returns `true` if the string contains `what`. In GDScript, this corresponds to the `in` operator.
    /// 
    /// If you need to know where `what` is within the string, use ``find(what:from:)``.
    /// 
    public final func contains (what: String)-> Bool {
        var result: Bool = Bool()
        let gstr_what = GString (what)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_what.content) { p0 in
            args.append (p0)
        
            StringName.method_contains (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_is_absolute_path: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_absolute_path")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the string is a path to a file or directory, and its starting point is explicitly defined. This method is the opposite of ``isRelativePath()``.
    /// 
    /// This includes all paths starting with `"res://"`, `"user://"`, `"C:\"`, `"/"`, etc.
    /// 
    public final func isAbsolutePath ()-> Bool {
        var result: Bool = Bool()
        StringName.method_is_absolute_path (&content, nil, &result, 0)
        return result
    }
    
    static var method_is_relative_path: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_relative_path")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the string is a path, and its starting point is dependent on context. The path could begin from the current directory, or the current ``Node`` (if the string is derived from a ``NodePath``), and may sometimes be prefixed with `"./"`. This method is the opposite of ``isAbsolutePath()``.
    public final func isRelativePath ()-> Bool {
        var result: Bool = Bool()
        StringName.method_is_relative_path (&content, nil, &result, 0)
        return result
    }
    
    static var method_simplify_path: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("simplify_path")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// If the string is a valid file path, converts the string into a canonical path. This is the shortest possible path, without `"./"`, and all the unnecessary `".."` and `"/"`.
    /// 
    public final func simplifyPath ()-> String {
        let result = GString ()
        StringName.method_simplify_path (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_get_base_dir: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_base_dir")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// If the string is a valid file path, returns the base directory name.
    /// 
    public final func getBaseDir ()-> String {
        let result = GString ()
        StringName.method_get_base_dir (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_get_file: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_file")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// If the string is a valid file path, returns the file name, including the extension.
    /// 
    public final func getFile ()-> String {
        let result = GString ()
        StringName.method_get_file (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_xml_escape: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("xml_escape")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3429816538)!
    }()
    
    /// Returns a copy of the string with special characters escaped using the XML standard. If `escapeQuotes` is `true`, the single quote (`'`) and double quote (`"`) characters are also escaped.
    public final func xmlEscape (escapeQuotes: Bool = false)-> String {
        let result = GString ()
        var copy_escape_quotes = escapeQuotes
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_escape_quotes) { p0 in
            args.append (p0)
        
            StringName.method_xml_escape (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_xml_unescape: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("xml_unescape")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with escaped characters replaced by their meanings according to the XML standard.
    public final func xmlUnescape ()-> String {
        let result = GString ()
        StringName.method_xml_unescape (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_uri_encode: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("uri_encode")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Encodes the string to URL-friendly format. This method is meant to properly encode the parameters in a URL when sending an HTTP request.
    /// 
    public final func uriEncode ()-> String {
        let result = GString ()
        StringName.method_uri_encode (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_uri_decode: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("uri_decode")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Decodes the string from its URL-encoded format. This method is meant to properly decode the parameters in a URL when receiving an HTTP request.
    /// 
    public final func uriDecode ()-> String {
        let result = GString ()
        StringName.method_uri_decode (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_c_escape: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("c_escape")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with special characters escaped using the C language standard.
    public final func cEscape ()-> String {
        let result = GString ()
        StringName.method_c_escape (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_c_unescape: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("c_unescape")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with escaped characters replaced by their meanings. Supported escape sequences are `\'`, `\"`, `\\`, `\a`, `\b`, `\f`, `\n`, `\r`, `\t`, `\v`.
    /// 
    /// > Note: Unlike the GDScript parser, this method doesn't support the `\uXXXX` escape sequence.
    /// 
    public final func cUnescape ()-> String {
        let result = GString ()
        StringName.method_c_unescape (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_json_escape: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("json_escape")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with special characters escaped using the JSON standard. Because it closely matches the C standard, it is possible to use ``cUnescape()`` to unescape the string, if necessary.
    public final func jsonEscape ()-> String {
        let result = GString ()
        StringName.method_json_escape (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_validate_node_name: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("validate_node_name")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with all characters that are not allowed in ``Node/name`` (`.` `:` `@` `/` `"` `%`) replaced with underscores.
    public final func validateNodeName ()-> String {
        let result = GString ()
        StringName.method_validate_node_name (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_validate_filename: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("validate_filename")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3942272618)!
    }()
    
    /// Returns a copy of the string with all characters that are not allowed in ``isValidFilename()`` replaced with underscores.
    public final func validateFilename ()-> String {
        let result = GString ()
        StringName.method_validate_filename (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_is_valid_identifier: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_identifier")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string is a valid identifier. A valid identifier may contain only letters, digits and underscores (`_`), and the first character may not be a digit.
    /// 
    public final func isValidIdentifier ()-> Bool {
        var result: Bool = Bool()
        StringName.method_is_valid_identifier (&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid_int: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_int")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string represents a valid integer. A valid integer only contains digits, and may be prefixed with a positive (`+`) or negative (`-`) sign. See also ``toInt()``.
    /// 
    public final func isValidInt ()-> Bool {
        var result: Bool = Bool()
        StringName.method_is_valid_int (&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid_float: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_float")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string represents a valid floating-point number. A valid float may contain only digits, one decimal point (`.`), and the exponent letter (`e`). It may also be prefixed with a positive (`+`) or negative (`-`) sign. Any valid integer is also a valid float (see ``isValidInt()``). See also ``toFloat()``.
    /// 
    public final func isValidFloat ()-> Bool {
        var result: Bool = Bool()
        StringName.method_is_valid_float (&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid_hex_number: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_hex_number")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 593672999)!
    }()
    
    /// Returns `true` if this string is a valid hexadecimal number. A valid hexadecimal number only contains digits or letters `A` to `F` (either uppercase or lowercase), and may be prefixed with a positive (`+`) or negative (`-`) sign.
    /// 
    /// If `withPrefix` is `true`, the hexadecimal number needs to prefixed by `"0x"` to be considered valid.
    /// 
    public final func isValidHexNumber (withPrefix: Bool = false)-> Bool {
        var result: Bool = Bool()
        var copy_with_prefix = withPrefix
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_with_prefix) { p0 in
            args.append (p0)
        
            StringName.method_is_valid_hex_number (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_is_valid_html_color: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_html_color")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string is a valid color in hexadecimal HTML notation. The string must be a hexadecimal value (see ``isValidHexNumber(withPrefix:)``) of either 3, 4, 6 or 8 digits, and may be prefixed by a hash sign (`#`). Other HTML notations for colors, such as names or `hsl()`, are not considered valid. See also ``Color/html(rgba:)``.
    public final func isValidHtmlColor ()-> Bool {
        var result: Bool = Bool()
        StringName.method_is_valid_html_color (&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid_ip_address: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_ip_address")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string represents a well-formatted IPv4 or IPv6 address. This method considers [url=https://en.wikipedia.org/wiki/Reserved_IP_addresses]reserved IP addresses[/url] such as `"0.0.0.0"` and `"ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff"` as valid.
    public final func isValidIpAddress ()-> Bool {
        var result: Bool = Bool()
        StringName.method_is_valid_ip_address (&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid_filename: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid_filename")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this string does not contain characters that are not allowed in file names (`:` `/` `\` `?` `*` `"` `|` `%` `<` `>`).
    public final func isValidFilename ()-> Bool {
        var result: Bool = Bool()
        StringName.method_is_valid_filename (&content, nil, &result, 0)
        return result
    }
    
    static var method_to_int: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_int")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3173160232)!
    }()
    
    /// Converts the string representing an integer number into an integer. This method removes any non-number character and stops at the first decimal point (`.`). See also ``isValidInt()``.
    /// 
    public final func toInt ()-> Int64 {
        var result: Int64 = Int64()
        StringName.method_to_int (&content, nil, &result, 0)
        return result
    }
    
    static var method_to_float: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_float")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 466405837)!
    }()
    
    /// Converts the string representing a decimal number into a float. This method stops on the first non-number character, except the first decimal point (`.`) and the exponent letter (`e`). See also ``isValidFloat()``.
    /// 
    public final func toFloat ()-> Double {
        var result: Double = Double()
        StringName.method_to_float (&content, nil, &result, 0)
        return result
    }
    
    static var method_hex_to_int: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hex_to_int")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3173160232)!
    }()
    
    /// Converts the string representing a hexadecimal number into an integer. The string may be optionally prefixed with `"0x"`, and an additional `-` prefix for negative numbers.
    /// 
    public final func hexToInt ()-> Int64 {
        var result: Int64 = Int64()
        StringName.method_hex_to_int (&content, nil, &result, 0)
        return result
    }
    
    static var method_bin_to_int: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("bin_to_int")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3173160232)!
    }()
    
    /// Converts the string representing a binary number into an integer. The string may optionally be prefixed with `"0b"`, and an additional `-` prefix for negative numbers.
    /// 
    public final func binToInt ()-> Int64 {
        var result: Int64 = Int64()
        StringName.method_bin_to_int (&content, nil, &result, 0)
        return result
    }
    
    static var method_lpad: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("lpad")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 248737229)!
    }()
    
    /// Formats the string to be at least `minLength` long by adding `character`s to the left of the string, if necessary. See also ``rpad(minLength:character:)``.
    public final func lpad (minLength: Int64, character: String = " ")-> String {
        let result = GString ()
        var copy_min_length = minLength
        let gstr_character = GString (character)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_min_length) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &gstr_character.content) { p1 in
                args.append (p1)
        
                StringName.method_lpad (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_rpad: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rpad")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 248737229)!
    }()
    
    /// Formats the string to be at least `minLength` long, by adding `character`s to the right of the string, if necessary. See also ``lpad(minLength:character:)``.
    public final func rpad (minLength: Int64, character: String = " ")-> String {
        let result = GString ()
        var copy_min_length = minLength
        let gstr_character = GString (character)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_min_length) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &gstr_character.content) { p1 in
                args.append (p1)
        
                StringName.method_rpad (&content, &args, &result.content, 2)
                return result.description
            }
        }
    }
    
    static var method_pad_decimals: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("pad_decimals")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2162347432)!
    }()
    
    /// Formats the string representing a number to have an exact number of `digits` _after_ the decimal point.
    public final func padDecimals (digits: Int64)-> String {
        let result = GString ()
        var copy_digits = digits
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_digits) { p0 in
            args.append (p0)
        
            StringName.method_pad_decimals (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_pad_zeros: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("pad_zeros")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 2162347432)!
    }()
    
    /// Formats the string representing a number to have an exact number of `digits` _before_ the decimal point.
    public final func padZeros (digits: Int64)-> String {
        let result = GString ()
        var copy_digits = digits
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_digits) { p0 in
            args.append (p0)
        
            StringName.method_pad_zeros (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_trim_prefix: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("trim_prefix")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3134094431)!
    }()
    
    /// Removes the given `prefix` from the start of the string, or returns the string unchanged.
    public final func trimPrefix (_ prefix: String)-> String {
        let result = GString ()
        let gstr_prefix = GString (prefix)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_prefix.content) { p0 in
            args.append (p0)
        
            StringName.method_trim_prefix (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_trim_suffix: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("trim_suffix")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3134094431)!
    }()
    
    /// Removes the given `suffix` from the end of the string, or returns the string unchanged.
    public final func trimSuffix (_ suffix: String)-> String {
        let result = GString ()
        let gstr_suffix = GString (suffix)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_suffix.content) { p0 in
            args.append (p0)
        
            StringName.method_trim_suffix (&content, &args, &result.content, 1)
            return result.description
        }
    }
    
    static var method_to_ascii_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_ascii_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 247621236)!
    }()
    
    /// Converts the string to an [url=https://en.wikipedia.org/wiki/ASCII]ASCII[/url]/Latin-1 encoded ``PackedByteArray``. This method is slightly faster than ``toUtf8Buffer()``, but replaces all unsupported characters with spaces.
    public final func toAsciiBuffer ()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        StringName.method_to_ascii_buffer (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_utf8_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_utf8_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 247621236)!
    }()
    
    /// Converts the string to a [url=https://en.wikipedia.org/wiki/UTF-8]UTF-8[/url] encoded ``PackedByteArray``. This method is slightly slower than ``toAsciiBuffer()``, but supports all UTF-8 characters. For most cases, prefer using this method.
    public final func toUtf8Buffer ()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        StringName.method_to_utf8_buffer (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_utf16_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_utf16_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 247621236)!
    }()
    
    /// Converts the string to a [url=https://en.wikipedia.org/wiki/UTF-16]UTF-16[/url] encoded ``PackedByteArray``.
    public final func toUtf16Buffer ()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        StringName.method_to_utf16_buffer (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_utf32_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_utf32_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 247621236)!
    }()
    
    /// Converts the string to a [url=https://en.wikipedia.org/wiki/UTF-32]UTF-32[/url] encoded ``PackedByteArray``.
    public final func toUtf32Buffer ()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        StringName.method_to_utf32_buffer (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_hex_decode: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hex_decode")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 247621236)!
    }()
    
    /// Decodes a hexadecimal string as a ``PackedByteArray``.
    /// 
    public final func hexDecode ()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        StringName.method_hex_decode (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_wchar_buffer: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_wchar_buffer")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 247621236)!
    }()
    
    /// Converts the string to a [url=https://en.wikipedia.org/wiki/Wide_character]wide character[/url] (`wchar_t`, UTF-16 on Windows, UTF-32 on other platforms) encoded ``PackedByteArray``.
    public final func toWcharBuffer ()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        StringName.method_to_wchar_buffer (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_hash: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hash")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_STRING_NAME, &name.content, 3173160232)!
    }()
    
    /// Returns the 32-bit hash value representing the string's contents.
    /// 
    /// > Note: Strings with equal hash values are _not_ guaranteed to be the same, as a result of hash collisions. On the countrary, strings with different hash values are guaranteed to be different.
    /// 
    public final func hash ()-> Int64 {
        var result: Int64 = Int64()
        StringName.method_hash (&content, nil, &result, 0)
        return result
    }
    
    static var operator_4: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_BOOL)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Bool) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_4 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_5: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_INT)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Int64) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_5 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_6: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_FLOAT)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Double) -> String  {
        let result = GString ()
        var copy_rhs = Double (rhs)
        
        StringName.operator_6 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_7: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Returns `true` if this ``StringName`` is equivalent to the given ``String``.
    public static func == (lhs: StringName, rhs: String) -> Bool  {
        var result: Bool = Bool()
        let gstr_rhs = GString (rhs)
        
        StringName.operator_7 (&lhs.content, &gstr_rhs.content, &result)
        return result
    }
    
    static var operator_8: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Returns `true` if this ``StringName`` is not equivalent to the given ``String``.
    public static func != (lhs: StringName, rhs: String) -> Bool  {
        var result: Bool = Bool()
        let gstr_rhs = GString (rhs)
        
        StringName.operator_8 (&lhs.content, &gstr_rhs.content, &result)
        return result
    }
    
    static var operator_9: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Appends `right` at the end of this ``StringName``, returning a ``String``. This is also known as a string concatenation.
    public static func + (lhs: StringName, rhs: String) -> String  {
        let result = GString ()
        let gstr_rhs = GString (rhs)
        
        StringName.operator_9 (&lhs.content, &gstr_rhs.content, &result.content)
        return result.description
    }
    
    static var operator_10: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: String) -> String  {
        let result = GString ()
        let gstr_rhs = GString (rhs)
        
        StringName.operator_10 (&lhs.content, &gstr_rhs.content, &result.content)
        return result.description
    }
    
    static var operator_12: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR2)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Vector2) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_12 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_13: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR2I)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Vector2i) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_13 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_14: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_RECT2)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Rect2) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_14 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_15: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_RECT2I)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Rect2i) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_15 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_16: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR3)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Vector3) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_16 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_17: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR3I)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Vector3i) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_17 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_18: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_TRANSFORM2D)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Transform2D) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_18 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_19: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR4)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Vector4) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_19 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_20: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Vector4i) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_20 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_21: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PLANE)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Plane) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_21 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_22: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_QUATERNION)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Quaternion) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_22 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_23: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_AABB)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: AABB) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_23 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_24: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_BASIS)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Basis) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_24 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_25: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_TRANSFORM3D)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Transform3D) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_25 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_26: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PROJECTION)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Projection) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_26 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_27: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_COLOR)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Color) -> String  {
        let result = GString ()
        var copy_rhs = rhs
        
        StringName.operator_27 (&lhs.content, &copy_rhs, &result.content)
        return result.description
    }
    
    static var operator_29: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    /// Returns `true` if this ``StringName`` is not equivalent to the given ``String``.
    public static func != (lhs: StringName, rhs: StringName) -> Bool  {
        var result: Bool = Bool()
        
        StringName.operator_29 (&lhs.content, &rhs.content, &result)
        return result
    }
    
    static var operator_30: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    /// Returns `true` if the left ``StringName``'s pointer comes before `right`. Note that this will not match their [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode order[/url].
    public static func < (lhs: StringName, rhs: StringName) -> Bool  {
        var result: Bool = Bool()
        
        StringName.operator_30 (&lhs.content, &rhs.content, &result)
        return result
    }
    
    static var operator_31: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    /// Returns `true` if the left ``StringName``'s pointer comes before `right` or if they are the same. Note that this will not match their [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode order[/url].
    public static func <= (lhs: StringName, rhs: StringName) -> Bool  {
        var result: Bool = Bool()
        
        StringName.operator_31 (&lhs.content, &rhs.content, &result)
        return result
    }
    
    static var operator_32: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    /// Returns `true` if the left ``StringName``'s pointer comes after `right`. Note that this will not match their [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode order[/url].
    public static func > (lhs: StringName, rhs: StringName) -> Bool  {
        var result: Bool = Bool()
        
        StringName.operator_32 (&lhs.content, &rhs.content, &result)
        return result
    }
    
    static var operator_33: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    /// Returns `true` if the left ``StringName``'s pointer comes after `right` or if they are the same. Note that this will not match their [url=https://en.wikipedia.org/wiki/List_of_Unicode_characters]Unicode order[/url].
    public static func >= (lhs: StringName, rhs: StringName) -> Bool  {
        var result: Bool = Bool()
        
        StringName.operator_33 (&lhs.content, &rhs.content, &result)
        return result
    }
    
    static var operator_34: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    /// Appends `right` at the end of this ``StringName``, returning a ``String``. This is also known as a string concatenation.
    public static func + (lhs: StringName, rhs: StringName) -> String  {
        let result = GString ()
        
        StringName.operator_34 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_35: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_STRING_NAME)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: StringName) -> String  {
        let result = GString ()
        
        StringName.operator_35 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_37: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_NODE_PATH)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: NodePath) -> String  {
        let result = GString ()
        
        StringName.operator_37 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_38: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_OBJECT)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Object) -> String  {
        let result = GString ()
        
        StringName.operator_38 (&lhs.content, &rhs.handle, &result.content)
        return result.description
    }
    
    static var operator_40: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_CALLABLE)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Callable) -> String  {
        let result = GString ()
        
        StringName.operator_40 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_41: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_SIGNAL)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: Signal) -> String  {
        let result = GString ()
        
        StringName.operator_41 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_42: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_DICTIONARY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: GDictionary) -> String  {
        let result = GString ()
        
        StringName.operator_42 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_44: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_ARRAY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: GArray) -> String  {
        let result = GString ()
        
        StringName.operator_44 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_46: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: PackedByteArray) -> String  {
        let result = GString ()
        
        StringName.operator_46 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_47: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_INT32_ARRAY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: PackedInt32Array) -> String  {
        let result = GString ()
        
        StringName.operator_47 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_48: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_INT64_ARRAY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: PackedInt64Array) -> String  {
        let result = GString ()
        
        StringName.operator_48 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_49: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT32_ARRAY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: PackedFloat32Array) -> String  {
        let result = GString ()
        
        StringName.operator_49 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_50: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_FLOAT64_ARRAY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: PackedFloat64Array) -> String  {
        let result = GString ()
        
        StringName.operator_50 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_51: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_STRING_ARRAY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: PackedStringArray) -> String  {
        let result = GString ()
        
        StringName.operator_51 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_53: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR2_ARRAY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: PackedVector2Array) -> String  {
        let result = GString ()
        
        StringName.operator_53 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_54: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_VECTOR3_ARRAY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: PackedVector3Array) -> String  {
        let result = GString ()
        
        StringName.operator_54 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
    static var operator_55: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_STRING_NAME, GDEXTENSION_VARIANT_TYPE_PACKED_COLOR_ARRAY)!
    }()
    
    /// Formats the ``StringName``, replacing the placeholders with one or more parameters, returning a ``String``. To pass multiple parameters, `right` needs to be an ``GArray``.
    /// 
    /// For more information, see the [url=$DOCS_URL/tutorials/scripting/gdscript/gdscript_format_string.html]GDScript format strings[/url] tutorial.
    /// 
    /// > Note: In C#, this operator is not available. Instead, see [url=https://learn.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated]how to interpolate strings with "$"[/url].
    /// 
    public static func % (lhs: StringName, rhs: PackedColorArray) -> String  {
        let result = GString ()
        
        StringName.operator_55 (&lhs.content, &rhs.content, &result.content)
        return result.description
    }
    
}

