// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

/// A color represented in RGBA format.
/// 
/// A color represented in RGBA format by a red (``r``), green (``g``), blue (``b``), and alpha (``a``) component. Each component is a 16-bit floating-point value, usually ranging from `0.0` to `1.0`. Some properties (such as ``CanvasItem/modulate``) may support values greater than `1.0`, for overbright or HDR (High Dynamic Range) colors.
/// 
/// Colors can be created in various ways: By the various ``Color`` constructors, by static methods such as ``fromHsv(h:s:v:alpha:)``, and by using a name from the set of standardized colors based on [url=https://en.wikipedia.org/wiki/X11_color_names]X11 color names[/url] with the addition of ``TRANSPARENT``. GDScript also provides ``@GDScript.Color8``, which uses integers from `0` to `255` and doesn't support overbright colors.
/// 
/// > Note: In a boolean context, a Color will evaluate to `false` if it is equal to `Color(0, 0, 0, 1)` (opaque black). Otherwise, a Color will always evaluate to `true`.
/// 
/// [url=https://raw.githubusercontent.com/godotengine/godot-docs/master/img/color_constants.png]Color constants cheatsheet[/url]
/// 
public struct Color: Equatable, Hashable {
    /// The color's red component, typically on the range of 0 to 1.
    public var red: Float
    /// The color's green component, typically on the range of 0 to 1.
    public var green: Float
    /// The color's blue component, typically on the range of 0 to 1.
    public var blue: Float
    /// The color's alpha component, typically on the range of 0 to 1. A value of 0 means that the color is fully transparent. A value of 1 means that the color is fully opaque.
    public var alpha: Float
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 0)!
    
    /// Constructs a default ``Color`` from opaque black. This is the same as ``BLACK``.
    /// 
    /// > Note: in C#, constructs an empty color with all of its components set to `0.0` (transparent black).
    /// 
    public init () {
        self.red = 0
        self.green = 0
        self.blue = 0
        self.alpha = 1
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 1)!
    
    /// Constructs a ``Color`` as a copy of the given ``Color``.
    public init (from: Color) {
        self.red = 0
        self.green = 0
        self.blue = 0
        self.alpha = 1
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_from) { p0 in
            args.append (p0)
        
            Color.constructor1 (&self, &args)
        }
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 2)!
    
    /// Constructs a ``Color`` from the existing color, with ``a`` set to the given `alpha` value.
    /// 
    public init (from: Color, alpha: Float) {
        self.red = 0
        self.green = 0
        self.blue = 0
        self.alpha = 1
        var copy_from = from
        var copy_alpha = Double (alpha)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_from) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_alpha) { p1 in
                args.append (p1)
        
                Color.constructor2 (&self, &args)
            }
        }
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 3)!
    
    /// Constructs a ``Color`` from RGB values, typically between 0.0 and 1.0. ``a`` is set to 1.0.
    /// 
    public init (r: Float, g: Float, b: Float) {
        self.red = 0
        self.green = 0
        self.blue = 0
        self.alpha = 1
        var copy_r = Double (r)
        var copy_g = Double (g)
        var copy_b = Double (b)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_r) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_g) { p1 in
                args.append (p1)
                withUnsafePointer (to: &copy_b) { p2 in
                    args.append (p2)
        
                    Color.constructor3 (&self, &args)
                }
            }
        }
    }
    
    static var constructor4: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 4)!
    
    /// Constructs a ``Color`` from RGBA values, typically between 0.0 and 1.0.
    /// 
    public init (r: Float, g: Float, b: Float, a: Float) {
        self.red = 0
        self.green = 0
        self.blue = 0
        self.alpha = 1
        var copy_r = Double (r)
        var copy_g = Double (g)
        var copy_b = Double (b)
        var copy_a = Double (a)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_r) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_g) { p1 in
                args.append (p1)
                withUnsafePointer (to: &copy_b) { p2 in
                    args.append (p2)
                    withUnsafePointer (to: &copy_a) { p3 in
                        args.append (p3)
        
                        Color.constructor4 (&self, &args)
                    }
                }
            }
        }
    }
    
    static var constructor5: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 5)!
    
    /// Constructs a ``Color`` either from an HTML color code or from a standardized color name. The supported color names are the same as the constants.
    public init (code: String) {
        self.red = 0
        self.green = 0
        self.blue = 0
        self.alpha = 1
        let gstr_code = GString (code)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_code.content) { p0 in
            args.append (p0)
        
            Color.constructor5 (&self, &args)
        }
    }
    
    static var constructor6: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_COLOR, 6)!
    
    /// Constructs a ``Color`` either from an HTML color code or from a standardized color name, with `alpha` on the range of 0.0 to 1.0. The supported color names are the same as the constants.
    public init (code: String, alpha: Float) {
        self.red = 0
        self.green = 0
        self.blue = 0
        self.alpha = 1
        let gstr_code = GString (code)
        var copy_alpha = Double (alpha)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &gstr_code.content) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_alpha) { p1 in
                args.append (p1)
        
                Color.constructor6 (&self, &args)
            }
        }
    }
    
    
    /* Methods */
    
    static var method_to_argb32: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_argb32")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3173160232)!
    }()
    
    /// Returns the color converted to a 32-bit integer in ARGB format (each component is 8 bits). ARGB is more compatible with DirectX.
    /// 
    public func toArgb32 ()-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer (to: self) { ptr in 
            Color.method_to_argb32 (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_to_abgr32: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_abgr32")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3173160232)!
    }()
    
    /// Returns the color converted to a 32-bit integer in ABGR format (each component is 8 bits). ABGR is the reversed version of the default RGBA format.
    /// 
    public func toAbgr32 ()-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer (to: self) { ptr in 
            Color.method_to_abgr32 (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_to_rgba32: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_rgba32")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3173160232)!
    }()
    
    /// Returns the color converted to a 32-bit integer in RGBA format (each component is 8 bits). RGBA is Godot's default format.
    /// 
    public func toRgba32 ()-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer (to: self) { ptr in 
            Color.method_to_rgba32 (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_to_argb64: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_argb64")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3173160232)!
    }()
    
    /// Returns the color converted to a 64-bit integer in ARGB format (each component is 16 bits). ARGB is more compatible with DirectX.
    /// 
    public func toArgb64 ()-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer (to: self) { ptr in 
            Color.method_to_argb64 (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_to_abgr64: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_abgr64")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3173160232)!
    }()
    
    /// Returns the color converted to a 64-bit integer in ABGR format (each component is 16 bits). ABGR is the reversed version of the default RGBA format.
    /// 
    public func toAbgr64 ()-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer (to: self) { ptr in 
            Color.method_to_abgr64 (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_to_rgba64: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_rgba64")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3173160232)!
    }()
    
    /// Returns the color converted to a 64-bit integer in RGBA format (each component is 16 bits). RGBA is Godot's default format.
    /// 
    public func toRgba64 ()-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer (to: self) { ptr in 
            Color.method_to_rgba64 (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_to_html: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_html")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3429816538)!
    }()
    
    /// Returns the color converted to an HTML hexadecimal color ``String`` in RGBA format, without the hash (`#`) prefix.
    /// 
    /// Setting `withAlpha` to `false`, excludes alpha from the hexadecimal string, using RGB format instead of RGBA format.
    /// 
    public func toHtml (withAlpha: Bool = true)-> String {
        let result = GString ()
        var copy_with_alpha = withAlpha
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_with_alpha) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Color.method_to_html (UnsafeMutableRawPointer (mutating: ptr), &args, &result.content, 1)
            }
            return result.description
        }
    }
    
    static var method_clamp: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("clamp")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 105651410)!
    }()
    
    /// Returns a new color with all components clamped between the components of `min` and `max`, by running ``@GlobalScope.clamp`` on each component.
    public func clamp (min: Color = Color (r: 0, g: 0, b: 0, a: 0), max: Color = Color (r: 1, g: 1, b: 1, a: 1))-> Color {
        var result: Color = Color()
        var copy_min = min
        var copy_max = max
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_min) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_max) { p1 in
                args.append (p1)
        
                withUnsafePointer (to: self) { ptr in 
                    Color.method_clamp (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 2)
                }
                return result
            }
        }
    }
    
    static var method_inverted: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("inverted")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3334027602)!
    }()
    
    /// Returns the color with its ``r``, ``g``, and ``b`` components inverted (`(1 - r, 1 - g, 1 - b, a)`).
    /// 
    public func inverted ()-> Color {
        var result: Color = Color()
        withUnsafePointer (to: self) { ptr in 
            Color.method_inverted (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_lightened: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("lightened")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 1466039168)!
    }()
    
    /// Returns a new color resulting from making this color lighter by the specified `amount`, which should be a ratio from 0.0 to 1.0. See also ``darkened(amount:)``.
    /// 
    public func lightened (amount: Double)-> Color {
        var result: Color = Color()
        var copy_amount = Double (amount)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_amount) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Color.method_lightened (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_darkened: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("darkened")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 1466039168)!
    }()
    
    /// Returns a new color resulting from making this color darker by the specified `amount` (ratio from 0.0 to 1.0). See also ``lightened(amount:)``.
    /// 
    public func darkened (amount: Double)-> Color {
        var result: Color = Color()
        var copy_amount = Double (amount)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_amount) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Color.method_darkened (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_blend: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("blend")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3803690977)!
    }()
    
    /// Returns a new color resulting from overlaying this color over the given color. In a painting program, you can imagine it as the `over` color painted over this color (including alpha).
    /// 
    public func blend (over: Color)-> Color {
        var result: Color = Color()
        var copy_over = over
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_over) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Color.method_blend (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_get_luminance: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_luminance")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 466405837)!
    }()
    
    /// Returns the light intensity of the color, as a value between 0.0 and 1.0 (inclusive). This is useful when determining light or dark color. Colors with a luminance smaller than 0.5 can be generally considered dark.
    /// 
    /// > Note: ``getLuminance()`` relies on the color being in the linear color space to return an accurate relative luminance value. If the color is in the sRGB color space, use ``srgbToLinear()`` to convert it to the linear color space first.
    /// 
    public func getLuminance ()-> Double {
        var result: Double = Double()
        withUnsafePointer (to: self) { ptr in 
            Color.method_get_luminance (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_srgb_to_linear: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("srgb_to_linear")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3334027602)!
    }()
    
    /// Returns the color converted to the linear color space. This method assumes the original color already is in the sRGB color space. See also ``linearToSrgb()`` which performs the opposite operation.
    public func srgbToLinear ()-> Color {
        var result: Color = Color()
        withUnsafePointer (to: self) { ptr in 
            Color.method_srgb_to_linear (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_linear_to_srgb: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("linear_to_srgb")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3334027602)!
    }()
    
    /// Returns the color converted to the [url=https://en.wikipedia.org/wiki/SRGB]sRGB[/url] color space. This method assumes the original color is in the linear color space. See also ``srgbToLinear()`` which performs the opposite operation.
    public func linearToSrgb ()-> Color {
        var result: Color = Color()
        withUnsafePointer (to: self) { ptr in 
            Color.method_linear_to_srgb (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_is_equal_approx: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_equal_approx")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3167426256)!
    }()
    
    /// Returns `true` if this color and `to` are approximately equal, by running ``@GlobalScope.is_equal_approx`` on each component.
    public func isEqualApprox (to: Color)-> Bool {
        var result: Bool = Bool()
        var copy_to = to
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_to) { p0 in
            args.append (p0)
        
            withUnsafePointer (to: self) { ptr in 
                Color.method_is_equal_approx (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 1)
            }
            return result
        }
    }
    
    static var method_hex: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hex")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 351421375)!
    }()
    
    /// Returns the ``Color`` associated with the provided `hex` integer in 32-bit RGBA format (8 bits per channel).
    /// 
    /// In GDScript and C#, the integer is best visualized with hexadecimal notation (`"0x"` prefix, making it `"0xRRGGBBAA"`).
    /// 
    public static func hex (hex: Int64)-> Color {
        var result: Color = Color()
        var copy_hex = hex
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_hex) { p0 in
            args.append (p0)
        
            Color.method_hex (nil, &args, &result, 1)
            return result
        }
    }
    
    static var method_hex64: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hex64")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 351421375)!
    }()
    
    /// Returns the ``Color`` associated with the provided `hex` integer in 64-bit RGBA format (16 bits per channel).
    /// 
    /// In GDScript and C#, the integer is best visualized with hexadecimal notation (`"0x"` prefix, making it `"0xRRRRGGGGBBBBAAAA"`).
    /// 
    public static func hex64 (hex: Int64)-> Color {
        var result: Color = Color()
        var copy_hex = hex
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_hex) { p0 in
            args.append (p0)
        
            Color.method_hex64 (nil, &args, &result, 1)
            return result
        }
    }
    
    static var method_html: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("html")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 2500054655)!
    }()
    
    /// Returns a new color from `rgba`, an HTML hexadecimal color string. `rgba` is not case-sensitive, and may be prefixed by a hash sign (`#`).
    /// 
    /// `rgba` must be a valid three-digit or six-digit hexadecimal color string, and may contain an alpha channel value. If `rgba` does not contain an alpha channel value, an alpha channel value of 1.0 is applied. If `rgba` is invalid, returns an empty color.
    /// 
    public static func html (rgba: String)-> Color {
        var result: Color = Color()
        let gstr_rgba = GString (rgba)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_rgba.content) { p0 in
            args.append (p0)
        
            Color.method_html (nil, &args, &result, 1)
            return result
        }
    }
    
    static var method_html_is_valid: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("html_is_valid")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 2942997125)!
    }()
    
    /// Returns `true` if `color` is a valid HTML hexadecimal color string. The string must be a hexadecimal value (case-insensitive) of either 3, 4, 6 or 8 digits, and may be prefixed by a hash sign (`#`). This method is identical to ``String/isValidHtmlColor()``.
    /// 
    public static func htmlIsValid (color: String)-> Bool {
        var result: Bool = Bool()
        let gstr_color = GString (color)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_color.content) { p0 in
            args.append (p0)
        
            Color.method_html_is_valid (nil, &args, &result, 1)
            return result
        }
    }
    
    static var method_from_string: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("from_string")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 3755044230)!
    }()
    
    /// Creates a ``Color`` from the given string, which can be either an HTML color code or a named color (case-insensitive). Returns `default` if the color cannot be inferred from the string.
    public static func fromString (str: String, `default`: Color)-> Color {
        var result: Color = Color()
        let gstr_str = GString (str)
        var copy_default = `default`
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &gstr_str.content) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_default) { p1 in
                args.append (p1)
        
                Color.method_from_string (nil, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_from_hsv: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("from_hsv")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 1573799446)!
    }()
    
    /// Constructs a color from an [url=https://en.wikipedia.org/wiki/HSL_and_HSV]HSV profile[/url]. The hue (`h`), saturation (`s`), and value (`v`) are typically between 0.0 and 1.0.
    /// 
    public static func fromHsv (h: Double, s: Double, v: Double, alpha: Double = 1.0)-> Color {
        var result: Color = Color()
        var copy_h = Double (h)
        var copy_s = Double (s)
        var copy_v = Double (v)
        var copy_alpha = Double (alpha)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_h) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_s) { p1 in
                args.append (p1)
                return withUnsafePointer (to: &copy_v) { p2 in
                    args.append (p2)
                    return withUnsafePointer (to: &copy_alpha) { p3 in
                        args.append (p3)
        
                        Color.method_from_hsv (nil, &args, &result, 4)
                        return result
                    }
                }
            }
        }
    }
    
    static var method_from_ok_hsl: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("from_ok_hsl")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 1573799446)!
    }()
    
    /// Constructs a color from an [url=https://bottosson.github.io/posts/colorpicker/]OK HSL profile[/url]. The hue (`h`), saturation (`s`), and lightness (`l`) are typically between 0.0 and 1.0.
    /// 
    public static func fromOkHsl (h: Double, s: Double, l: Double, alpha: Double = 1.0)-> Color {
        var result: Color = Color()
        var copy_h = Double (h)
        var copy_s = Double (s)
        var copy_l = Double (l)
        var copy_alpha = Double (alpha)
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_h) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_s) { p1 in
                args.append (p1)
                return withUnsafePointer (to: &copy_l) { p2 in
                    args.append (p2)
                    return withUnsafePointer (to: &copy_alpha) { p3 in
                        args.append (p3)
        
                        Color.method_from_ok_hsl (nil, &args, &result, 4)
                        return result
                    }
                }
            }
        }
    }
    
    static var method_from_rgbe9995: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("from_rgbe9995")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_COLOR, &name.content, 351421375)!
    }()
    
    /// Decodes a ``Color`` from a RGBE9995 format integer. See ``Image/Format/rgbe9995``.
    public static func fromRgbe9995 (rgbe: Int64)-> Color {
        var result: Color = Color()
        var copy_rgbe = rgbe
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_rgbe) { p0 in
            args.append (p0)
        
            Color.method_from_rgbe9995 (nil, &args, &result, 1)
            return result
        }
    }
    
    private static var indexed_getter: GDExtensionPtrIndexedGetter = {
        return gi.variant_get_ptr_indexed_getter (GDEXTENSION_VARIANT_TYPE_COLOR)!
    }()
    
    private static var indexed_setter: GDExtensionPtrIndexedSetter = {
        return gi.variant_get_ptr_indexed_setter (GDEXTENSION_VARIANT_TYPE_COLOR)!
    }()
    
     public subscript (index: Int64) -> Double {
        mutating get {
            var result = Double ()
            Self.indexed_getter (&self, index, &result)
            return result
        }
        
        set {
            var value = newValue
            Self.indexed_setter (&self, index, &value)
        }
        
    }
    
    static var operator_5: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_INT)!
    }()
    
    /// Multiplies each component of the ``Color`` by the given integer.
    public static func * (lhs: Color, rhs: Int64) -> Color  {
        var result: Color = Color()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Color.operator_5 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_6: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_INT)!
    }()
    
    /// Divides each component of the ``Color`` by the given integer.
    public static func / (lhs: Color, rhs: Int64) -> Color  {
        var result: Color = Color()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Color.operator_6 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_7: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_FLOAT)!
    }()
    
    /// Multiplies each component of the ``Color`` by the given integer.
    public static func * (lhs: Color, rhs: Double) -> Color  {
        var result: Color = Color()
        var copy_lhs = lhs
        var copy_rhs = Double (rhs)
        
        Color.operator_7 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_8: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_FLOAT)!
    }()
    
    /// Divides each component of the ``Color`` by the given integer.
    public static func / (lhs: Color, rhs: Double) -> Color  {
        var result: Color = Color()
        var copy_lhs = lhs
        var copy_rhs = Double (rhs)
        
        Color.operator_8 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_9: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)!
    }()
    
    /// Returns `true` if the colors are exactly equal.
    /// 
    /// > Note: Due to floating-point precision errors, consider using ``isEqualApprox(to:)`` instead, which is more reliable.
    /// 
    public static func == (lhs: Color, rhs: Color) -> Bool  {
        var result: Bool = Bool()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Color.operator_9 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_10: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)!
    }()
    
    /// Returns `true` if the colors are not exactly equal.
    /// 
    /// > Note: Due to floating-point precision errors, consider using ``isEqualApprox(to:)`` instead, which is more reliable.
    /// 
    public static func != (lhs: Color, rhs: Color) -> Bool  {
        var result: Bool = Bool()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Color.operator_10 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_11: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)!
    }()
    
    /// Adds each component of the ``Color`` with the components of the given ``Color``.
    public static func + (lhs: Color, rhs: Color) -> Color  {
        var result: Color = Color()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Color.operator_11 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_12: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_SUBTRACT, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)!
    }()
    
    /// Subtracts each component of the ``Color`` by the components of the given ``Color``.
    public static func - (lhs: Color, rhs: Color) -> Color  {
        var result: Color = Color()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Color.operator_12 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_13: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)!
    }()
    
    /// Multiplies each component of the ``Color`` by the given integer.
    public static func * (lhs: Color, rhs: Color) -> Color  {
        var result: Color = Color()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Color.operator_13 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_14: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_COLOR, GDEXTENSION_VARIANT_TYPE_COLOR)!
    }()
    
    /// Divides each component of the ``Color`` by the given integer.
    public static func / (lhs: Color, rhs: Color) -> Color  {
        var result: Color = Color()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Color.operator_14 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    /// Alice blue color.
    public static let aliceBlue = Color (r: 0.941176, g: 0.972549, b: 1, a: 1)
    /// Antique white color.
    public static let antiqueWhite = Color (r: 0.980392, g: 0.921569, b: 0.843137, a: 1)
    /// Aqua color.
    public static let aqua = Color (r: 0, g: 1, b: 1, a: 1)
    /// Aquamarine color.
    public static let aquamarine = Color (r: 0.498039, g: 1, b: 0.831373, a: 1)
    /// Azure color.
    public static let azure = Color (r: 0.941176, g: 1, b: 1, a: 1)
    /// Beige color.
    public static let beige = Color (r: 0.960784, g: 0.960784, b: 0.862745, a: 1)
    /// Bisque color.
    public static let bisque = Color (r: 1, g: 0.894118, b: 0.768627, a: 1)
    /// Black color. In GDScript, this is the default value of any color.
    public static let black = Color (r: 0, g: 0, b: 0, a: 1)
    /// Blanched almond color.
    public static let blanchedAlmond = Color (r: 1, g: 0.921569, b: 0.803922, a: 1)
    /// Blue color.
    public static let blue = Color (r: 0, g: 0, b: 1, a: 1)
    /// Blue violet color.
    public static let blueViolet = Color (r: 0.541176, g: 0.168627, b: 0.886275, a: 1)
    /// Brown color.
    public static let brown = Color (r: 0.647059, g: 0.164706, b: 0.164706, a: 1)
    /// Burlywood color.
    public static let burlywood = Color (r: 0.870588, g: 0.721569, b: 0.529412, a: 1)
    /// Cadet blue color.
    public static let cadetBlue = Color (r: 0.372549, g: 0.619608, b: 0.627451, a: 1)
    /// Chartreuse color.
    public static let chartreuse = Color (r: 0.498039, g: 1, b: 0, a: 1)
    /// Chocolate color.
    public static let chocolate = Color (r: 0.823529, g: 0.411765, b: 0.117647, a: 1)
    /// Coral color.
    public static let coral = Color (r: 1, g: 0.498039, b: 0.313726, a: 1)
    /// Cornflower blue color.
    public static let cornflowerBlue = Color (r: 0.392157, g: 0.584314, b: 0.929412, a: 1)
    /// Cornsilk color.
    public static let cornsilk = Color (r: 1, g: 0.972549, b: 0.862745, a: 1)
    /// Crimson color.
    public static let crimson = Color (r: 0.862745, g: 0.0784314, b: 0.235294, a: 1)
    /// Cyan color.
    public static let cyan = Color (r: 0, g: 1, b: 1, a: 1)
    /// Dark blue color.
    public static let darkBlue = Color (r: 0, g: 0, b: 0.545098, a: 1)
    /// Dark cyan color.
    public static let darkCyan = Color (r: 0, g: 0.545098, b: 0.545098, a: 1)
    /// Dark goldenrod color.
    public static let darkGoldenrod = Color (r: 0.721569, g: 0.52549, b: 0.0431373, a: 1)
    /// Dark gray color.
    public static let darkGray = Color (r: 0.662745, g: 0.662745, b: 0.662745, a: 1)
    /// Dark green color.
    public static let darkGreen = Color (r: 0, g: 0.392157, b: 0, a: 1)
    /// Dark khaki color.
    public static let darkKhaki = Color (r: 0.741176, g: 0.717647, b: 0.419608, a: 1)
    /// Dark magenta color.
    public static let darkMagenta = Color (r: 0.545098, g: 0, b: 0.545098, a: 1)
    /// Dark olive green color.
    public static let darkOliveGreen = Color (r: 0.333333, g: 0.419608, b: 0.184314, a: 1)
    /// Dark orange color.
    public static let darkOrange = Color (r: 1, g: 0.54902, b: 0, a: 1)
    /// Dark orchid color.
    public static let darkOrchid = Color (r: 0.6, g: 0.196078, b: 0.8, a: 1)
    /// Dark red color.
    public static let darkRed = Color (r: 0.545098, g: 0, b: 0, a: 1)
    /// Dark salmon color.
    public static let darkSalmon = Color (r: 0.913725, g: 0.588235, b: 0.478431, a: 1)
    /// Dark sea green color.
    public static let darkSeaGreen = Color (r: 0.560784, g: 0.737255, b: 0.560784, a: 1)
    /// Dark slate blue color.
    public static let darkSlateBlue = Color (r: 0.282353, g: 0.239216, b: 0.545098, a: 1)
    /// Dark slate gray color.
    public static let darkSlateGray = Color (r: 0.184314, g: 0.309804, b: 0.309804, a: 1)
    /// Dark turquoise color.
    public static let darkTurquoise = Color (r: 0, g: 0.807843, b: 0.819608, a: 1)
    /// Dark violet color.
    public static let darkViolet = Color (r: 0.580392, g: 0, b: 0.827451, a: 1)
    /// Deep pink color.
    public static let deepPink = Color (r: 1, g: 0.0784314, b: 0.576471, a: 1)
    /// Deep sky blue color.
    public static let deepSkyBlue = Color (r: 0, g: 0.74902, b: 1, a: 1)
    /// Dim gray color.
    public static let dimGray = Color (r: 0.411765, g: 0.411765, b: 0.411765, a: 1)
    /// Dodger blue color.
    public static let dodgerBlue = Color (r: 0.117647, g: 0.564706, b: 1, a: 1)
    /// Firebrick color.
    public static let firebrick = Color (r: 0.698039, g: 0.133333, b: 0.133333, a: 1)
    /// Floral white color.
    public static let floralWhite = Color (r: 1, g: 0.980392, b: 0.941176, a: 1)
    /// Forest green color.
    public static let forestGreen = Color (r: 0.133333, g: 0.545098, b: 0.133333, a: 1)
    /// Fuchsia color.
    public static let fuchsia = Color (r: 1, g: 0, b: 1, a: 1)
    /// Gainsboro color.
    public static let gainsboro = Color (r: 0.862745, g: 0.862745, b: 0.862745, a: 1)
    /// Ghost white color.
    public static let ghostWhite = Color (r: 0.972549, g: 0.972549, b: 1, a: 1)
    /// Gold color.
    public static let gold = Color (r: 1, g: 0.843137, b: 0, a: 1)
    /// Goldenrod color.
    public static let goldenrod = Color (r: 0.854902, g: 0.647059, b: 0.12549, a: 1)
    /// Gray color.
    public static let gray = Color (r: 0.745098, g: 0.745098, b: 0.745098, a: 1)
    /// Green color.
    public static let green = Color (r: 0, g: 1, b: 0, a: 1)
    /// Green yellow color.
    public static let greenYellow = Color (r: 0.678431, g: 1, b: 0.184314, a: 1)
    /// Honeydew color.
    public static let honeydew = Color (r: 0.941176, g: 1, b: 0.941176, a: 1)
    /// Hot pink color.
    public static let hotPink = Color (r: 1, g: 0.411765, b: 0.705882, a: 1)
    /// Indian red color.
    public static let indianRed = Color (r: 0.803922, g: 0.360784, b: 0.360784, a: 1)
    /// Indigo color.
    public static let indigo = Color (r: 0.294118, g: 0, b: 0.509804, a: 1)
    /// Ivory color.
    public static let ivory = Color (r: 1, g: 1, b: 0.941176, a: 1)
    /// Khaki color.
    public static let khaki = Color (r: 0.941176, g: 0.901961, b: 0.54902, a: 1)
    /// Lavender color.
    public static let lavender = Color (r: 0.901961, g: 0.901961, b: 0.980392, a: 1)
    /// Lavender blush color.
    public static let lavenderBlush = Color (r: 1, g: 0.941176, b: 0.960784, a: 1)
    /// Lawn green color.
    public static let lawnGreen = Color (r: 0.486275, g: 0.988235, b: 0, a: 1)
    /// Lemon chiffon color.
    public static let lemonChiffon = Color (r: 1, g: 0.980392, b: 0.803922, a: 1)
    /// Light blue color.
    public static let lightBlue = Color (r: 0.678431, g: 0.847059, b: 0.901961, a: 1)
    /// Light coral color.
    public static let lightCoral = Color (r: 0.941176, g: 0.501961, b: 0.501961, a: 1)
    /// Light cyan color.
    public static let lightCyan = Color (r: 0.878431, g: 1, b: 1, a: 1)
    /// Light goldenrod color.
    public static let lightGoldenrod = Color (r: 0.980392, g: 0.980392, b: 0.823529, a: 1)
    /// Light gray color.
    public static let lightGray = Color (r: 0.827451, g: 0.827451, b: 0.827451, a: 1)
    /// Light green color.
    public static let lightGreen = Color (r: 0.564706, g: 0.933333, b: 0.564706, a: 1)
    /// Light pink color.
    public static let lightPink = Color (r: 1, g: 0.713726, b: 0.756863, a: 1)
    /// Light salmon color.
    public static let lightSalmon = Color (r: 1, g: 0.627451, b: 0.478431, a: 1)
    /// Light sea green color.
    public static let lightSeaGreen = Color (r: 0.12549, g: 0.698039, b: 0.666667, a: 1)
    /// Light sky blue color.
    public static let lightSkyBlue = Color (r: 0.529412, g: 0.807843, b: 0.980392, a: 1)
    /// Light slate gray color.
    public static let lightSlateGray = Color (r: 0.466667, g: 0.533333, b: 0.6, a: 1)
    /// Light steel blue color.
    public static let lightSteelBlue = Color (r: 0.690196, g: 0.768627, b: 0.870588, a: 1)
    /// Light yellow color.
    public static let lightYellow = Color (r: 1, g: 1, b: 0.878431, a: 1)
    /// Lime color.
    public static let lime = Color (r: 0, g: 1, b: 0, a: 1)
    /// Lime green color.
    public static let limeGreen = Color (r: 0.196078, g: 0.803922, b: 0.196078, a: 1)
    /// Linen color.
    public static let linen = Color (r: 0.980392, g: 0.941176, b: 0.901961, a: 1)
    /// Magenta color.
    public static let magenta = Color (r: 1, g: 0, b: 1, a: 1)
    /// Maroon color.
    public static let maroon = Color (r: 0.690196, g: 0.188235, b: 0.376471, a: 1)
    /// Medium aquamarine color.
    public static let mediumAquamarine = Color (r: 0.4, g: 0.803922, b: 0.666667, a: 1)
    /// Medium blue color.
    public static let mediumBlue = Color (r: 0, g: 0, b: 0.803922, a: 1)
    /// Medium orchid color.
    public static let mediumOrchid = Color (r: 0.729412, g: 0.333333, b: 0.827451, a: 1)
    /// Medium purple color.
    public static let mediumPurple = Color (r: 0.576471, g: 0.439216, b: 0.858824, a: 1)
    /// Medium sea green color.
    public static let mediumSeaGreen = Color (r: 0.235294, g: 0.701961, b: 0.443137, a: 1)
    /// Medium slate blue color.
    public static let mediumSlateBlue = Color (r: 0.482353, g: 0.407843, b: 0.933333, a: 1)
    /// Medium spring green color.
    public static let mediumSpringGreen = Color (r: 0, g: 0.980392, b: 0.603922, a: 1)
    /// Medium turquoise color.
    public static let mediumTurquoise = Color (r: 0.282353, g: 0.819608, b: 0.8, a: 1)
    /// Medium violet red color.
    public static let mediumVioletRed = Color (r: 0.780392, g: 0.0823529, b: 0.521569, a: 1)
    /// Midnight blue color.
    public static let midnightBlue = Color (r: 0.0980392, g: 0.0980392, b: 0.439216, a: 1)
    /// Mint cream color.
    public static let mintCream = Color (r: 0.960784, g: 1, b: 0.980392, a: 1)
    /// Misty rose color.
    public static let mistyRose = Color (r: 1, g: 0.894118, b: 0.882353, a: 1)
    /// Moccasin color.
    public static let moccasin = Color (r: 1, g: 0.894118, b: 0.709804, a: 1)
    /// Navajo white color.
    public static let navajoWhite = Color (r: 1, g: 0.870588, b: 0.678431, a: 1)
    /// Navy blue color.
    public static let navyBlue = Color (r: 0, g: 0, b: 0.501961, a: 1)
    /// Old lace color.
    public static let oldLace = Color (r: 0.992157, g: 0.960784, b: 0.901961, a: 1)
    /// Olive color.
    public static let olive = Color (r: 0.501961, g: 0.501961, b: 0, a: 1)
    /// Olive drab color.
    public static let oliveDrab = Color (r: 0.419608, g: 0.556863, b: 0.137255, a: 1)
    /// Orange color.
    public static let orange = Color (r: 1, g: 0.647059, b: 0, a: 1)
    /// Orange red color.
    public static let orangeRed = Color (r: 1, g: 0.270588, b: 0, a: 1)
    /// Orchid color.
    public static let orchid = Color (r: 0.854902, g: 0.439216, b: 0.839216, a: 1)
    /// Pale goldenrod color.
    public static let paleGoldenrod = Color (r: 0.933333, g: 0.909804, b: 0.666667, a: 1)
    /// Pale green color.
    public static let paleGreen = Color (r: 0.596078, g: 0.984314, b: 0.596078, a: 1)
    /// Pale turquoise color.
    public static let paleTurquoise = Color (r: 0.686275, g: 0.933333, b: 0.933333, a: 1)
    /// Pale violet red color.
    public static let paleVioletRed = Color (r: 0.858824, g: 0.439216, b: 0.576471, a: 1)
    /// Papaya whip color.
    public static let papayaWhip = Color (r: 1, g: 0.937255, b: 0.835294, a: 1)
    /// Peach puff color.
    public static let peachPuff = Color (r: 1, g: 0.854902, b: 0.72549, a: 1)
    /// Peru color.
    public static let peru = Color (r: 0.803922, g: 0.521569, b: 0.247059, a: 1)
    /// Pink color.
    public static let pink = Color (r: 1, g: 0.752941, b: 0.796078, a: 1)
    /// Plum color.
    public static let plum = Color (r: 0.866667, g: 0.627451, b: 0.866667, a: 1)
    /// Powder blue color.
    public static let powderBlue = Color (r: 0.690196, g: 0.878431, b: 0.901961, a: 1)
    /// Purple color.
    public static let purple = Color (r: 0.627451, g: 0.12549, b: 0.941176, a: 1)
    /// Rebecca purple color.
    public static let rebeccaPurple = Color (r: 0.4, g: 0.2, b: 0.6, a: 1)
    /// Red color.
    public static let red = Color (r: 1, g: 0, b: 0, a: 1)
    /// Rosy brown color.
    public static let rosyBrown = Color (r: 0.737255, g: 0.560784, b: 0.560784, a: 1)
    /// Royal blue color.
    public static let royalBlue = Color (r: 0.254902, g: 0.411765, b: 0.882353, a: 1)
    /// Saddle brown color.
    public static let saddleBrown = Color (r: 0.545098, g: 0.270588, b: 0.0745098, a: 1)
    /// Salmon color.
    public static let salmon = Color (r: 0.980392, g: 0.501961, b: 0.447059, a: 1)
    /// Sandy brown color.
    public static let sandyBrown = Color (r: 0.956863, g: 0.643137, b: 0.376471, a: 1)
    /// Sea green color.
    public static let seaGreen = Color (r: 0.180392, g: 0.545098, b: 0.341176, a: 1)
    /// Seashell color.
    public static let seashell = Color (r: 1, g: 0.960784, b: 0.933333, a: 1)
    /// Sienna color.
    public static let sienna = Color (r: 0.627451, g: 0.321569, b: 0.176471, a: 1)
    /// Silver color.
    public static let silver = Color (r: 0.752941, g: 0.752941, b: 0.752941, a: 1)
    /// Sky blue color.
    public static let skyBlue = Color (r: 0.529412, g: 0.807843, b: 0.921569, a: 1)
    /// Slate blue color.
    public static let slateBlue = Color (r: 0.415686, g: 0.352941, b: 0.803922, a: 1)
    /// Slate gray color.
    public static let slateGray = Color (r: 0.439216, g: 0.501961, b: 0.564706, a: 1)
    /// Snow color.
    public static let snow = Color (r: 1, g: 0.980392, b: 0.980392, a: 1)
    /// Spring green color.
    public static let springGreen = Color (r: 0, g: 1, b: 0.498039, a: 1)
    /// Steel blue color.
    public static let steelBlue = Color (r: 0.27451, g: 0.509804, b: 0.705882, a: 1)
    /// Tan color.
    public static let tan = Color (r: 0.823529, g: 0.705882, b: 0.54902, a: 1)
    /// Teal color.
    public static let teal = Color (r: 0, g: 0.501961, b: 0.501961, a: 1)
    /// Thistle color.
    public static let thistle = Color (r: 0.847059, g: 0.74902, b: 0.847059, a: 1)
    /// Tomato color.
    public static let tomato = Color (r: 1, g: 0.388235, b: 0.278431, a: 1)
    /// Transparent color (white with zero alpha).
    public static let transparent = Color (r: 1, g: 1, b: 1, a: 0)
    /// Turquoise color.
    public static let turquoise = Color (r: 0.25098, g: 0.878431, b: 0.815686, a: 1)
    /// Violet color.
    public static let violet = Color (r: 0.933333, g: 0.509804, b: 0.933333, a: 1)
    /// Web gray color.
    public static let webGray = Color (r: 0.501961, g: 0.501961, b: 0.501961, a: 1)
    /// Web green color.
    public static let webGreen = Color (r: 0, g: 0.501961, b: 0, a: 1)
    /// Web maroon color.
    public static let webMaroon = Color (r: 0.501961, g: 0, b: 0, a: 1)
    /// Web purple color.
    public static let webPurple = Color (r: 0.501961, g: 0, b: 0.501961, a: 1)
    /// Wheat color.
    public static let wheat = Color (r: 0.960784, g: 0.870588, b: 0.701961, a: 1)
    /// White color.
    public static let white = Color (r: 1, g: 1, b: 1, a: 1)
    /// White smoke color.
    public static let whiteSmoke = Color (r: 0.960784, g: 0.960784, b: 0.960784, a: 1)
    /// Yellow color.
    public static let yellow = Color (r: 1, g: 1, b: 0, a: 1)
    /// Yellow green color.
    public static let yellowGreen = Color (r: 0.603922, g: 0.803922, b: 0.196078, a: 1)
}

