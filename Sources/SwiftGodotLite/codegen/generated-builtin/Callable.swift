// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

/// A built-in type representing a method or a standalone function.
/// 
/// ``Callable`` is a built-in ``Variant`` type that represents a function. It can either be a method within an ``Object`` instance, or a standalone function not related to any object, like a lambda function. Like all ``Variant`` types, it can be stored in variables and passed to other functions. It is most commonly used for signal callbacks.
/// 
/// **Example:**
/// 
/// In GDScript, it's possible to create lambda functions within a method. Lambda functions are custom callables that are not associated with an ``Object`` instance. Optionally, lambda functions can also be named. The name will be displayed in the debugger, or when calling ``getMethod()``.
/// 
/// > Note: Methods of native types such as ``Signal``, ``GArray``, or ``GDictionary`` are not of type ``Callable`` in order to avoid unnecessary overhead. If you need to pass those methods as ``Callable``, use a lambda function as a wrapper.
/// 
public class Callable: Equatable {
    /// Creates a Callable instance from a Swift function
    /// - Parameter callback: the swift function that receives an array of Variant arguments, and returns an optional Variant
    public init (_ callback: @escaping ([Variant])->Variant?) {
        content = CallableWrapper.makeCallable (callback)
    }
    
    static var destructor: GDExtensionPtrDestructor = {
        return gi.variant_get_ptr_destructor (GDEXTENSION_VARIANT_TYPE_CALLABLE)!
    }()
    
    deinit {
        if content != Callable.zero {
            Callable.destructor (&content)
        }
        
    }
    
    // Contains a binary blob where this type information is stored
    public var content: ContentType = (0, 0)
    // Used to initialize empty types
    public static let zero: ContentType  = (0, 0)
    // Convenience type that matches the build configuration storage needs
    public typealias ContentType = (Int64, Int64)
    // Used to construct objects on virtual proxies
    public required init (content: ContentType) {
        var copy = content
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy) { ptr in
            args.append (ptr)
            Callable.constructor1 (&self.content, &args)
        }
        
    }
    
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_CALLABLE, 0)!
    
    /// Constructs an empty ``Callable``, with no object nor method bound.
    public required init () {
        Callable.constructor0 (&content, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_CALLABLE, 1)!
    
    /// Constructs a ``Callable`` as a copy of the given ``Callable``.
    public init (from: Callable) {
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &from.content) { p0 in
            args.append (p0)
        
            Callable.constructor1 (&content, &args)
        }
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_CALLABLE, 2)!
    
    /// Creates a new ``Callable`` for the method named `method` in the specified `object`.
    public init (object: Object, method: StringName) {
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &object.handle) { p0 in
            args.append (p0)
            withUnsafePointer (to: &method.content) { p1 in
                args.append (p1)
        
                Callable.constructor2 (&content, &args)
            }
        }
    }
    
    
    /* Methods */
    
    static var method_callv: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("callv")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 413578926)!
    }()
    
    /// Calls the method represented by this ``Callable``. Unlike ``call()``, this method expects all arguments to be contained inside the `arguments` ``GArray``.
    public final func callv (arguments: GArray)-> Variant {
        let result: Variant = Variant()
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &arguments.content) { p0 in
            args.append (p0)
        
            Callable.method_callv (&content, &args, &result.content, 1)
            return result
        }
    }
    
    static var method_is_null: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_null")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this ``Callable`` has no target to call the method on.
    public final func isNull ()-> Bool {
        var result: Bool = Bool()
        Callable.method_is_null (&content, nil, &result, 0)
        return result
    }
    
    static var method_is_custom: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_custom")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this ``Callable`` is a custom callable. Custom callables are created from ``bind()`` or ``unbind(argcount:)``. In GDScript, lambda functions are also custom callables.
    public final func isCustom ()-> Bool {
        var result: Bool = Bool()
        Callable.method_is_custom (&content, nil, &result, 0)
        return result
    }
    
    static var method_is_standard: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_standard")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if this ``Callable`` is a standard callable. This method is the opposite of ``isCustom()``. Returns `false` if this callable is a lambda function.
    public final func isStandard ()-> Bool {
        var result: Bool = Bool()
        Callable.method_is_standard (&content, nil, &result, 0)
        return result
    }
    
    static var method_is_valid: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_valid")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the callable's object exists and has a valid method name assigned, or is a custom callable.
    public final func isValid ()-> Bool {
        var result: Bool = Bool()
        Callable.method_is_valid (&content, nil, &result, 0)
        return result
    }
    
    static var method_get_object_id: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_object_id")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3173160232)!
    }()
    
    /// Returns the ID of this ``Callable``'s object (see ``Object/getInstanceId()``).
    public final func getObjectId ()-> Int64 {
        var result: Int64 = Int64()
        Callable.method_get_object_id (&content, nil, &result, 0)
        return result
    }
    
    static var method_get_method: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_method")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 1825232092)!
    }()
    
    /// Returns the name of the method represented by this ``Callable``. If the callable is a GDScript lambda function, returns the function's name or `"<anonymous lambda>"`.
    public final func getMethod ()-> StringName {
        let result: StringName = StringName()
        Callable.method_get_method (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_get_bound_arguments_count: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_bound_arguments_count")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3173160232)!
    }()
    
    /// Returns the total amount of arguments bound (or unbound) via successive ``bind()`` or ``unbind(argcount:)`` calls. If the amount of arguments unbound is greater than the ones bound, this function returns a value less than zero.
    public final func getBoundArgumentsCount ()-> Int64 {
        var result: Int64 = Int64()
        Callable.method_get_bound_arguments_count (&content, nil, &result, 0)
        return result
    }
    
    static var method_get_bound_arguments: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_bound_arguments")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 4144163970)!
    }()
    
    /// Return the bound arguments (as long as ``getBoundArgumentsCount()`` is greater than zero), or empty (if ``getBoundArgumentsCount()`` is less than or equal to zero).
    public final func getBoundArguments ()-> GArray {
        let result: GArray = GArray()
        Callable.method_get_bound_arguments (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_hash: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hash")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3173160232)!
    }()
    
    /// Returns the 32-bit hash value of this ``Callable``'s object.
    /// 
    /// > Note: ``Callable``s with equal content will always produce identical hash values. However, the reverse is not true. Returning identical hash values does _not_ imply the callables are equal, because different callables can have identical hash values due to hash collisions. The engine uses a 32-bit hash algorithm for ``hash()``.
    /// 
    public final func hash ()-> Int64 {
        var result: Int64 = Int64()
        Callable.method_hash (&content, nil, &result, 0)
        return result
    }
    
    static var method_bindv: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("bindv")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3564560322)!
    }()
    
    /// Returns a copy of this ``Callable`` with one or more arguments bound, reading them from an array. When called, the bound arguments are passed _after_ the arguments supplied by ``call()``. See also ``unbind(argcount:)``.
    /// 
    /// > Note: When this method is chained with other similar methods, the order in which the argument list is modified is read from right to left.
    /// 
    public final func bindv (arguments: GArray)-> Callable {
        let result: Callable = Callable()
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &arguments.content) { p0 in
            args.append (p0)
        
            Callable.method_bindv (&content, &args, &result.content, 1)
            return result
        }
    }
    
    static var method_unbind: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("unbind")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 755001590)!
    }()
    
    /// Returns a copy of this ``Callable`` with a number of arguments unbound. In other words, when the new callable is called the last few arguments supplied by the user are ignored, according to `argcount`. The remaining arguments are passed to the callable. This allows to use the original callable in a context that attempts to pass more arguments than this callable can handle, e.g. a signal with a fixed number of arguments. See also ``bind()``.
    /// 
    /// > Note: When this method is chained with other similar methods, the order in which the argument list is modified is read from right to left.
    /// 
    public final func unbind (argcount: Int64)-> Callable {
        let result: Callable = Callable()
        var copy_argcount = argcount
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_argcount) { p0 in
            args.append (p0)
        
            Callable.method_unbind (&content, &args, &result.content, 1)
            return result
        }
    }
    
    static var method_call: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("call")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3643564216)!
    }()
    
    /// Calls the method represented by this ``Callable``. Arguments can be passed and should match the method's signature.
    public final func call ()-> Variant {
        let result: Variant = Variant()
        Callable.method_call (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_call_deferred: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("call_deferred")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3286317445)!
    }()
    
    /// Calls the method represented by this ``Callable`` in deferred mode, i.e. at the end of the current frame. Arguments can be passed and should match the method's signature.
    /// 
    /// See also ``Object/callDeferred(method:)``.
    /// 
    public final func callDeferred () {
        Callable.method_call_deferred (&content, nil, nil, 0)
    }
    
    static var method_rpc: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rpc")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3286317445)!
    }()
    
    /// Perform an RPC (Remote Procedure Call) on all connected peers. This is used for multiplayer and is normally not available, unless the function being called has been marked as _RPC_ (using [annotation @GDScript.@rpc] or ``Node/rpcConfig(method:config:)``). Calling this method on unsupported functions will result in an error. See ``Node/rpc(method:)``.
    public final func rpc () {
        Callable.method_rpc (&content, nil, nil, 0)
    }
    
    static var method_rpc_id: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rpc_id")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 2270047679)!
    }()
    
    /// Perform an RPC (Remote Procedure Call) on a specific peer ID (see multiplayer documentation for reference). This is used for multiplayer and is normally not available unless the function being called has been marked as _RPC_ (using [annotation @GDScript.@rpc] or ``Node/rpcConfig(method:config:)``). Calling this method on unsupported functions will result in an error. See ``Node/rpcId(peerId:method:)``.
    public final func rpcId (peerId: Int64) {
        var copy_peer_id = peerId
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_peer_id) { p0 in
            args.append (p0)
        
            Callable.method_rpc_id (&content, &args, nil, 1)
        }
    }
    
    static var method_bind: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("bind")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_CALLABLE, &name.content, 3224143119)!
    }()
    
    /// Returns a copy of this ``Callable`` with one or more arguments bound. When called, the bound arguments are passed _after_ the arguments supplied by ``call()``. See also ``unbind(argcount:)``.
    /// 
    /// > Note: When this method is chained with other similar methods, the order in which the argument list is modified is read from right to left.
    /// 
    public final func bind ()-> Callable {
        let result: Callable = Callable()
        Callable.method_bind (&content, nil, &result.content, 0)
        return result
    }
    
    static var operator_3: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_CALLABLE, GDEXTENSION_VARIANT_TYPE_CALLABLE)!
    }()
    
    /// Returns `true` if both ``Callable``s invoke the same custom target.
    public static func == (lhs: Callable, rhs: Callable) -> Bool  {
        var result: Bool = Bool()
        
        Callable.operator_3 (&lhs.content, &rhs.content, &result)
        return result
    }
    
    static var operator_4: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_CALLABLE, GDEXTENSION_VARIANT_TYPE_CALLABLE)!
    }()
    
    /// Returns `true` if both ``Callable``s invoke different targets.
    public static func != (lhs: Callable, rhs: Callable) -> Bool  {
        var result: Bool = Bool()
        
        Callable.operator_4 (&lhs.content, &rhs.content, &result)
        return result
    }
    
}

