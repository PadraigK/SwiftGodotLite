// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

/// A 4D vector using integer coordinates.
/// 
/// A 4-element structure that can be used to represent 4D grid coordinates or any other quadruplet of integers.
/// 
/// It uses integer coordinates and is therefore preferable to ``Vector4`` when exact precision is required. Note that the values are limited to 32 bits, and unlike ``Vector4`` this cannot be configured with an engine build option. Use integer or ``PackedInt64Array`` if 64-bit values are needed.
/// 
/// > Note: In a boolean context, a Vector4i will evaluate to `false` if it's equal to `Vector4i(0, 0, 0, 0)`. Otherwise, a Vector3i will always evaluate to `true`.
/// 
public struct Vector4i: Equatable, Hashable {
    /// The vector's X component. Also accessible by using the index position `[0]`.
    public var x: Int32
    /// The vector's Y component. Also accessible by using the index position `[1]`.
    public var y: Int32
    /// The vector's Z component. Also accessible by using the index position `[2]`.
    public var z: Int32
    /// The vector's W component. Also accessible by using the index position `[3]`.
    public var w: Int32
    public enum Axis: Int64 {
        /// Enumerated value for the X axis. Returned by ``maxAxisIndex()`` and ``minAxisIndex()``.
        case x = 0 // AXIS_X
        /// Enumerated value for the Y axis. Returned by ``maxAxisIndex()`` and ``minAxisIndex()``.
        case y = 1 // AXIS_Y
        /// Enumerated value for the Z axis. Returned by ``maxAxisIndex()`` and ``minAxisIndex()``.
        case z = 2 // AXIS_Z
        /// Enumerated value for the W axis. Returned by ``maxAxisIndex()`` and ``minAxisIndex()``.
        case w = 3 // AXIS_W
    }
    
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4I, 0)!
    
    /// Constructs a default-initialized ``Vector4i`` with all components set to `0`.
    public init () {
        self.x = Int32 ()
        self.y = Int32 ()
        self.z = Int32 ()
        self.w = Int32 ()
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4I, 1)!
    
    /// Constructs a ``Vector4i`` as a copy of the given ``Vector4i``.
    public init (from: Vector4i) {
        self.x = Int32 ()
        self.y = Int32 ()
        self.z = Int32 ()
        self.w = Int32 ()
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_from) { p0 in
            args.append (p0)
        
            Vector4i.constructor1 (&self, &args)
        }
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4I, 2)!
    
    /// Constructs a new ``Vector4i`` from the given ``Vector4`` by truncating components' fractional parts (rounding towards zero). For a different behavior consider passing the result of ``Vector4/ceil()``, ``Vector4/floor()`` or ``Vector4/round()`` to this constructor instead.
    public init (from: Vector4) {
        self.x = Int32 ()
        self.y = Int32 ()
        self.z = Int32 ()
        self.w = Int32 ()
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_from) { p0 in
            args.append (p0)
        
            Vector4i.constructor2 (&self, &args)
        }
    }
    
    static var constructor3: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_VECTOR4I, 3)!
    
    /// Returns a ``Vector4i`` with the given components.
    public init (x: Int32, y: Int32, z: Int32, w: Int32) {
        self.x = x
        self.y = y
        self.z = z
        self.w = w
    }
    
    
    /* Methods */
    
    static var method_min_axis_index: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("min_axis_index")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_VECTOR4I, &name.content, 3173160232)!
    }()
    
    /// Returns the axis of the vector's lowest value. See `AXIS_*` constants. If all components are equal, this method returns .w.
    public func minAxisIndex ()-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer (to: self) { ptr in 
            Vector4i.method_min_axis_index (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_max_axis_index: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("max_axis_index")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_VECTOR4I, &name.content, 3173160232)!
    }()
    
    /// Returns the axis of the vector's highest value. See `AXIS_*` constants. If all components are equal, this method returns .x.
    public func maxAxisIndex ()-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer (to: self) { ptr in 
            Vector4i.method_max_axis_index (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_length: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("length")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_VECTOR4I, &name.content, 466405837)!
    }()
    
    /// Returns the length (magnitude) of this vector.
    public func length ()-> Double {
        var result: Double = Double()
        withUnsafePointer (to: self) { ptr in 
            Vector4i.method_length (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_length_squared: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("length_squared")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_VECTOR4I, &name.content, 3173160232)!
    }()
    
    /// Returns the squared length (squared magnitude) of this vector.
    /// 
    /// This method runs faster than ``length()``, so prefer it if you need to compare vectors or need the squared distance for some formula.
    /// 
    public func lengthSquared ()-> Int64 {
        var result: Int64 = Int64()
        withUnsafePointer (to: self) { ptr in 
            Vector4i.method_length_squared (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_sign: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sign")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_VECTOR4I, &name.content, 4134919947)!
    }()
    
    /// Returns a new vector with each component set to `1` if it's positive, `-1` if it's negative, and `0` if it's zero. The result is identical to calling ``@GlobalScope.sign`` on each component.
    public func sign ()-> Vector4i {
        var result: Vector4i = Vector4i()
        withUnsafePointer (to: self) { ptr in 
            Vector4i.method_sign (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_abs: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("abs")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_VECTOR4I, &name.content, 4134919947)!
    }()
    
    /// Returns a new vector with all components in absolute values (i.e. positive).
    public func abs ()-> Vector4i {
        var result: Vector4i = Vector4i()
        withUnsafePointer (to: self) { ptr in 
            Vector4i.method_abs (UnsafeMutableRawPointer (mutating: ptr), nil, &result, 0)
        }
        return result
    }
    
    static var method_clamp: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("clamp")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_VECTOR4I, &name.content, 3046490913)!
    }()
    
    /// Returns a new vector with all components clamped between the components of `min` and `max`, by running ``@GlobalScope.clamp`` on each component.
    public func clamp (min: Vector4i, max: Vector4i)-> Vector4i {
        var result: Vector4i = Vector4i()
        var copy_min = min
        var copy_max = max
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_min) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_max) { p1 in
                args.append (p1)
        
                withUnsafePointer (to: self) { ptr in 
                    Vector4i.method_clamp (UnsafeMutableRawPointer (mutating: ptr), &args, &result, 2)
                }
                return result
            }
        }
    }
    
    private static var indexed_getter: GDExtensionPtrIndexedGetter = {
        return gi.variant_get_ptr_indexed_getter (GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    private static var indexed_setter: GDExtensionPtrIndexedSetter = {
        return gi.variant_get_ptr_indexed_setter (GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
     public subscript (index: Int64) -> Int64 {
        mutating get {
            var result = Int64 ()
            Self.indexed_getter (&self, index, &result)
            return result
        }
        
        set {
            var value = newValue
            Self.indexed_setter (&self, index, &value)
        }
        
    }
    
    static var operator_5: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_INT)!
    }()
    
    /// Multiplies each component of the ``Vector4i`` by the given integer.
    public static func * (lhs: Vector4i, rhs: Int64) -> Vector4i  {
        var result: Vector4i = Vector4i()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_5 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_6: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_INT)!
    }()
    
    /// Divides each component of the ``Vector4i`` by the given integer.
    public static func / (lhs: Vector4i, rhs: Int64) -> Vector4i  {
        var result: Vector4i = Vector4i()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_6 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_7: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_INT)!
    }()
    
    /// Gets the remainder of each component of the ``Vector4i`` with the the given integer. This operation uses truncated division, which is often not desired as it does not work well with negative numbers. Consider using ``@GlobalScope.posmod`` instead if you want to handle negative numbers.
    /// 
    public static func % (lhs: Vector4i, rhs: Int64) -> Vector4i  {
        var result: Vector4i = Vector4i()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_7 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_8: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_FLOAT)!
    }()
    
    /// Multiplies each component of the ``Vector4i`` by the given integer.
    public static func * (lhs: Vector4i, rhs: Double) -> Vector4  {
        var result: Vector4 = Vector4()
        var copy_lhs = lhs
        var copy_rhs = Double (rhs)
        
        Vector4i.operator_8 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_9: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_FLOAT)!
    }()
    
    /// Divides each component of the ``Vector4i`` by the given integer.
    public static func / (lhs: Vector4i, rhs: Double) -> Vector4  {
        var result: Vector4 = Vector4()
        var copy_lhs = lhs
        var copy_rhs = Double (rhs)
        
        Vector4i.operator_9 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_10: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Returns `true` if the vectors are exactly equal.
    public static func == (lhs: Vector4i, rhs: Vector4i) -> Bool  {
        var result: Bool = Bool()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_10 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_11: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Returns `true` if the vectors are not equal.
    public static func != (lhs: Vector4i, rhs: Vector4i) -> Bool  {
        var result: Bool = Bool()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_11 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_12: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_LESS_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Compares two ``Vector4i`` vectors by first checking if the X value of the left vector is less than the X value of the `right` vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors, Z values of the two vectors, and then with the W values. This operator is useful for sorting vectors.
    public static func < (lhs: Vector4i, rhs: Vector4i) -> Bool  {
        var result: Bool = Bool()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_12 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_13: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_LESS, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Compares two ``Vector4i`` vectors by first checking if the X value of the left vector is less than or equal to the X value of the `right` vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors, Z values of the two vectors, and then with the W values. This operator is useful for sorting vectors.
    public static func <= (lhs: Vector4i, rhs: Vector4i) -> Bool  {
        var result: Bool = Bool()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_13 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_14: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_GREATER, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Compares two ``Vector4i`` vectors by first checking if the X value of the left vector is greater than the X value of the `right` vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors, Z values of the two vectors, and then with the W values. This operator is useful for sorting vectors.
    public static func > (lhs: Vector4i, rhs: Vector4i) -> Bool  {
        var result: Bool = Bool()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_14 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_15: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_GREATER_EQUAL, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Compares two ``Vector4i`` vectors by first checking if the X value of the left vector is greater than or equal to the X value of the `right` vector. If the X values are exactly equal, then it repeats this check with the Y values of the two vectors, Z values of the two vectors, and then with the W values. This operator is useful for sorting vectors.
    public static func >= (lhs: Vector4i, rhs: Vector4i) -> Bool  {
        var result: Bool = Bool()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_15 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_16: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Adds each component of the ``Vector4i`` by the components of the given ``Vector4i``.
    /// 
    public static func + (lhs: Vector4i, rhs: Vector4i) -> Vector4i  {
        var result: Vector4i = Vector4i()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_16 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_17: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_SUBTRACT, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Subtracts each component of the ``Vector4i`` by the components of the given ``Vector4i``.
    /// 
    public static func - (lhs: Vector4i, rhs: Vector4i) -> Vector4i  {
        var result: Vector4i = Vector4i()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_17 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_18: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MULTIPLY, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Multiplies each component of the ``Vector4i`` by the given integer.
    public static func * (lhs: Vector4i, rhs: Vector4i) -> Vector4i  {
        var result: Vector4i = Vector4i()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_18 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_19: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_DIVIDE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Divides each component of the ``Vector4i`` by the given integer.
    public static func / (lhs: Vector4i, rhs: Vector4i) -> Vector4i  {
        var result: Vector4i = Vector4i()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_19 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    static var operator_20: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_MODULE, GDEXTENSION_VARIANT_TYPE_VECTOR4I, GDEXTENSION_VARIANT_TYPE_VECTOR4I)!
    }()
    
    /// Gets the remainder of each component of the ``Vector4i`` with the the given integer. This operation uses truncated division, which is often not desired as it does not work well with negative numbers. Consider using ``@GlobalScope.posmod`` instead if you want to handle negative numbers.
    /// 
    public static func % (lhs: Vector4i, rhs: Vector4i) -> Vector4i  {
        var result: Vector4i = Vector4i()
        var copy_lhs = lhs
        var copy_rhs = rhs
        
        Vector4i.operator_20 (&copy_lhs, &copy_rhs, &result)
        return result
    }
    
    /// Enumerated value for the X axis. Returned by ``maxAxisIndex()`` and ``minAxisIndex()``.
    public static let axisX = 0
    /// Enumerated value for the Y axis. Returned by ``maxAxisIndex()`` and ``minAxisIndex()``.
    public static let axisY = 1
    /// Enumerated value for the Z axis. Returned by ``maxAxisIndex()`` and ``minAxisIndex()``.
    public static let axisZ = 2
    /// Enumerated value for the W axis. Returned by ``maxAxisIndex()`` and ``minAxisIndex()``.
    public static let axisW = 3
    /// Zero vector, a vector with all components set to `0`.
    public static let zero = Vector4i (x: 0, y: 0, z: 0, w: 0)
    /// One vector, a vector with all components set to `1`.
    public static let one = Vector4i (x: 1, y: 1, z: 1, w: 1)
    /// Min vector, a vector with all components equal to `INT32_MIN`. Can be used as a negative integer equivalent of ``Vector4.INF``.
    public static let min = Vector4i (x: -2147483648, y: -2147483648, z: -2147483648, w: -2147483648)
    /// Max vector, a vector with all components equal to `INT32_MAX`. Can be used as an integer equivalent of ``Vector4.INF``.
    public static let max = Vector4i (x: 2147483647, y: 2147483647, z: 2147483647, w: 2147483647)
}

