// This file is autogenerated, do not edit

@_implementationOnly import GDExtension

/// A packed array of bytes.
/// 
/// An array specifically designed to hold bytes. Packs data tightly, so it saves memory for large array sizes.
/// 
/// ``PackedByteArray`` also provides methods to encode/decode various types to/from bytes. The way values are encoded is an implementation detail and shouldn't be relied upon when interacting with external apps.
/// 
public class PackedByteArray: Equatable, Collection {
    static var destructor: GDExtensionPtrDestructor = {
        return gi.variant_get_ptr_destructor (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)!
    }()
    
    deinit {
        if content != PackedByteArray.zero {
            PackedByteArray.destructor (&content)
        }
        
    }
    
    /// The number of elements in the array
    public var count: Int { Int (size()) }
    // Contains a binary blob where this type information is stored
    public var content: ContentType = (0, 0)
    // Used to initialize empty types
    public static let zero: ContentType  = (0, 0)
    // Convenience type that matches the build configuration storage needs
    public typealias ContentType = (Int64, Int64)
    // Used to construct objects on virtual proxies
    public required init (content: ContentType) {
        var copy = content
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy) { ptr in
            args.append (ptr)
            PackedByteArray.constructor1 (&self.content, &args)
        }
        
    }
    
    static var constructor0: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, 0)!
    
    /// Constructs an empty ``PackedByteArray``.
    public required init () {
        PackedByteArray.constructor0 (&content, nil)
    }
    
    static var constructor1: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, 1)!
    
    /// Constructs a ``PackedByteArray`` as a copy of the given ``PackedByteArray``.
    public init (from: PackedByteArray) {
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &from.content) { p0 in
            args.append (p0)
        
            PackedByteArray.constructor1 (&content, &args)
        }
    }
    
    static var constructor2: GDExtensionPtrConstructor = gi.variant_get_ptr_constructor (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, 2)!
    
    /// Constructs a new ``PackedByteArray``. Optionally, you can pass in a generic ``GArray`` that will be converted.
    public init (from: GArray) {
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &from.content) { p0 in
            args.append (p0)
        
            PackedByteArray.constructor2 (&content, &args)
        }
    }
    
    
    /* Methods */
    
    static var method_size: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("size")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3173160232)!
    }()
    
    /// Returns the number of elements in the array.
    public final func size ()-> Int64 {
        var result: Int64 = Int64()
        PackedByteArray.method_size (&content, nil, &result, 0)
        return result
    }
    
    static var method_is_empty: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("is_empty")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3918633141)!
    }()
    
    /// Returns `true` if the array is empty.
    public final func isEmpty ()-> Bool {
        var result: Bool = Bool()
        PackedByteArray.method_is_empty (&content, nil, &result, 0)
        return result
    }
    
    static var method_set: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("set")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3638975848)!
    }()
    
    /// Changes the byte at the given index.
    public final func set (index: Int64, value: Int64) {
        var copy_index = index
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_index) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_set (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_push_back: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("push_back")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 694024632)!
    }()
    
    /// Appends an element at the end of the array.
    @discardableResult /* 1: push_back */ 
    public final func pushBack (value: Int64)-> Bool {
        var result: Bool = Bool()
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_value) { p0 in
            args.append (p0)
        
            PackedByteArray.method_push_back (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_append: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("append")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 694024632)!
    }()
    
    /// Appends an element at the end of the array (alias of ``pushBack(value:)``).
    @discardableResult /* 1: append */ 
    public final func append (value: Int64)-> Bool {
        var result: Bool = Bool()
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_value) { p0 in
            args.append (p0)
        
            PackedByteArray.method_append (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_append_array: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("append_array")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 791097111)!
    }()
    
    /// Appends a ``PackedByteArray`` at the end of this array.
    public final func appendArray (_ array: PackedByteArray) {
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &array.content) { p0 in
            args.append (p0)
        
            PackedByteArray.method_append_array (&content, &args, nil, 1)
        }
    }
    
    static var method_remove_at: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("remove_at")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 2823966027)!
    }()
    
    /// Removes an element from the array by index.
    public final func removeAt (index: Int64) {
        var copy_index = index
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_index) { p0 in
            args.append (p0)
        
            PackedByteArray.method_remove_at (&content, &args, nil, 1)
        }
    }
    
    static var method_insert: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("insert")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1487112728)!
    }()
    
    /// Inserts a new element at a given position in the array. The position must be valid, or at the end of the array (`idx == size()`).
    public final func insert (atIndex: Int64, value: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_at_index = atIndex
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_at_index) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_insert (&content, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_fill: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("fill")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 2823966027)!
    }()
    
    /// Assigns the given value to all elements in the array. This can typically be used together with ``resize(newSize:)`` to create an array with a given size and initialized elements.
    public final func fill (value: Int64) {
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_value) { p0 in
            args.append (p0)
        
            PackedByteArray.method_fill (&content, &args, nil, 1)
        }
    }
    
    static var method_resize: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("resize")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 848867239)!
    }()
    
    /// Sets the size of the array. If the array is grown, reserves elements at the end of the array. If the array is shrunk, truncates the array to the new size.
    public final func resize (newSize: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_new_size = newSize
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_new_size) { p0 in
            args.append (p0)
        
            PackedByteArray.method_resize (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_clear: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("clear")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3218959716)!
    }()
    
    /// Clears the array. This is equivalent to using ``resize(newSize:)`` with a size of `0`.
    public final func clear () {
        PackedByteArray.method_clear (&content, nil, nil, 0)
    }
    
    static var method_has: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("has")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 931488181)!
    }()
    
    /// Returns `true` if the array contains `value`.
    public final func has (value: Int64)-> Bool {
        var result: Bool = Bool()
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_value) { p0 in
            args.append (p0)
        
            PackedByteArray.method_has (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_reverse: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("reverse")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3218959716)!
    }()
    
    /// Reverses the order of the elements in the array.
    public final func reverse () {
        PackedByteArray.method_reverse (&content, nil, nil, 0)
    }
    
    static var method_slice: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("slice")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 2278869132)!
    }()
    
    /// Returns the slice of the ``PackedByteArray``, from `begin` (inclusive) to `end` (exclusive), as a new ``PackedByteArray``.
    /// 
    /// The absolute value of `begin` and `end` will be clamped to the array size, so the default value for `end` makes it slice to the size of the array by default (i.e. `arr.slice(1)` is a shorthand for `arr.slice(1, arr.size())`).
    /// 
    /// If either `begin` or `end` are negative, they will be relative to the end of the array (i.e. `arr.slice(0, -2)` is a shorthand for `arr.slice(0, arr.size() - 2)`).
    /// 
    public final func slice (begin: Int64, end: Int64 = 2147483647)-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        var copy_begin = begin
        var copy_end = end
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_begin) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_end) { p1 in
                args.append (p1)
        
                PackedByteArray.method_slice (&content, &args, &result.content, 2)
                return result
            }
        }
    }
    
    static var method_sort: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("sort")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3218959716)!
    }()
    
    /// Sorts the elements of the array in ascending order.
    public final func sort () {
        PackedByteArray.method_sort (&content, nil, nil, 0)
    }
    
    static var method_bsearch: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("bsearch")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3380005890)!
    }()
    
    /// Finds the index of an existing value (or the insertion index that maintains sorting order, if the value is not yet present in the array) using binary search. Optionally, a `before` specifier can be passed. If `false`, the returned index comes after all existing entries of the value in the array.
    /// 
    /// > Note: Calling ``bsearch(value:before:)`` on an unsorted array results in unexpected behavior.
    /// 
    public final func bsearch (value: Int64, before: Bool = true)-> Int64 {
        var result: Int64 = Int64()
        var copy_value = value
        var copy_before = before
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_value) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_before) { p1 in
                args.append (p1)
        
                PackedByteArray.method_bsearch (&content, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_duplicate: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("duplicate")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 851781288)!
    }()
    
    /// Creates a copy of the array, and returns it.
    public final func duplicate ()-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        PackedByteArray.method_duplicate (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_find: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("find")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 2984303840)!
    }()
    
    /// Searches the array for a value and returns its index or `-1` if not found. Optionally, the initial search index can be passed.
    public final func find (value: Int64, from: Int64 = 0)-> Int64 {
        var result: Int64 = Int64()
        var copy_value = value
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_value) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_from) { p1 in
                args.append (p1)
        
                PackedByteArray.method_find (&content, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_rfind: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("rfind")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 2984303840)!
    }()
    
    /// Searches the array in reverse order. Optionally, a start search index can be passed. If negative, the start index is considered relative to the end of the array.
    public final func rfind (value: Int64, from: Int64 = -1)-> Int64 {
        var result: Int64 = Int64()
        var copy_value = value
        var copy_from = from
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_value) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_from) { p1 in
                args.append (p1)
        
                PackedByteArray.method_rfind (&content, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_count: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("count")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 4103005248)!
    }()
    
    /// Returns the number of times an element is in the array.
    public final func count (value: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_value) { p0 in
            args.append (p0)
        
            PackedByteArray.method_count (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_get_string_from_ascii: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_string_from_ascii")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3942272618)!
    }()
    
    /// Converts ASCII/Latin-1 encoded array to ``String``. Fast alternative to ``getStringFromUtf8()`` if the content is ASCII/Latin-1 only. Unlike the UTF-8 function this function maps every byte to a character in the array. Multibyte sequences will not be interpreted correctly. For parsing user input always use ``getStringFromUtf8()``. This is the inverse of ``String/toAsciiBuffer()``.
    public final func getStringFromAscii ()-> String {
        let result = GString ()
        PackedByteArray.method_get_string_from_ascii (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_get_string_from_utf8: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_string_from_utf8")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3942272618)!
    }()
    
    /// Converts UTF-8 encoded array to ``String``. Slower than ``getStringFromAscii()`` but supports UTF-8 encoded data. Use this function if you are unsure about the source of the data. For user input this function should always be preferred. Returns empty string if source array is not valid UTF-8 string. This is the inverse of ``String/toUtf8Buffer()``.
    public final func getStringFromUtf8 ()-> String {
        let result = GString ()
        PackedByteArray.method_get_string_from_utf8 (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_get_string_from_utf16: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_string_from_utf16")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3942272618)!
    }()
    
    /// Converts UTF-16 encoded array to ``String``. If the BOM is missing, system endianness is assumed. Returns empty string if source array is not valid UTF-16 string. This is the inverse of ``String/toUtf16Buffer()``.
    public final func getStringFromUtf16 ()-> String {
        let result = GString ()
        PackedByteArray.method_get_string_from_utf16 (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_get_string_from_utf32: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_string_from_utf32")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3942272618)!
    }()
    
    /// Converts UTF-32 encoded array to ``String``. System endianness is assumed. Returns empty string if source array is not valid UTF-32 string. This is the inverse of ``String/toUtf32Buffer()``.
    public final func getStringFromUtf32 ()-> String {
        let result = GString ()
        PackedByteArray.method_get_string_from_utf32 (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_get_string_from_wchar: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("get_string_from_wchar")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3942272618)!
    }()
    
    /// Converts wide character (`wchar_t`, UTF-16 on Windows, UTF-32 on other platforms) encoded array to ``String``. Returns empty string if source array is not valid wide string. This is the inverse of ``String/toWcharBuffer()``.
    public final func getStringFromWchar ()-> String {
        let result = GString ()
        PackedByteArray.method_get_string_from_wchar (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_hex_encode: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("hex_encode")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3942272618)!
    }()
    
    /// Returns a hexadecimal representation of this array as a ``String``.
    /// 
    public final func hexEncode ()-> String {
        let result = GString ()
        PackedByteArray.method_hex_encode (&content, nil, &result.content, 0)
        return result.description
    }
    
    static var method_compress: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("compress")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1845905913)!
    }()
    
    /// Returns a new ``PackedByteArray`` with the data compressed. Set the compression mode using one of ``FileAccess.CompressionMode``'s constants.
    public final func compress (compressionMode: Int64 = 0)-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        var copy_compression_mode = compressionMode
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_compression_mode) { p0 in
            args.append (p0)
        
            PackedByteArray.method_compress (&content, &args, &result.content, 1)
            return result
        }
    }
    
    static var method_decompress: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decompress")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 2278869132)!
    }()
    
    /// Returns a new ``PackedByteArray`` with the data decompressed. Set `bufferSize` to the size of the uncompressed data. Set the compression mode using one of ``FileAccess.CompressionMode``'s constants.
    public final func decompress (bufferSize: Int64, compressionMode: Int64 = 0)-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        var copy_buffer_size = bufferSize
        var copy_compression_mode = compressionMode
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_buffer_size) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_compression_mode) { p1 in
                args.append (p1)
        
                PackedByteArray.method_decompress (&content, &args, &result.content, 2)
                return result
            }
        }
    }
    
    static var method_decompress_dynamic: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decompress_dynamic")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 2278869132)!
    }()
    
    /// Returns a new ``PackedByteArray`` with the data decompressed. Set the compression mode using one of ``FileAccess.CompressionMode``'s constants. **This method only accepts brotli, gzip, and deflate compression modes.**
    /// 
    /// This method is potentially slower than ``decompress(bufferSize:compressionMode:)``, as it may have to re-allocate its output buffer multiple times while decompressing, whereas ``decompress(bufferSize:compressionMode:)`` knows it's output buffer size from the beginning.
    /// 
    /// GZIP has a maximal compression ratio of 1032:1, meaning it's very possible for a small compressed payload to decompress to a potentially very large output. To guard against this, you may provide a maximum size this function is allowed to allocate in bytes via `maxOutputSize`. Passing -1 will allow for unbounded output. If any positive value is passed, and the decompression exceeds that amount in bytes, then an error will be returned.
    /// 
    public final func decompressDynamic (maxOutputSize: Int64, compressionMode: Int64 = 0)-> PackedByteArray {
        let result: PackedByteArray = PackedByteArray()
        var copy_max_output_size = maxOutputSize
        var copy_compression_mode = compressionMode
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_max_output_size) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_compression_mode) { p1 in
                args.append (p1)
        
                PackedByteArray.method_decompress_dynamic (&content, &args, &result.content, 2)
                return result
            }
        }
    }
    
    static var method_decode_u8: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_u8")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 4103005248)!
    }()
    
    /// Decodes a 8-bit unsigned integer number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
    public final func decodeU8 (byteOffset: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_u8 (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_decode_s8: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_s8")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 4103005248)!
    }()
    
    /// Decodes a 8-bit signed integer number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
    public final func decodeS8 (byteOffset: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_s8 (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_decode_u16: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_u16")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 4103005248)!
    }()
    
    /// Decodes a 16-bit unsigned integer number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
    public final func decodeU16 (byteOffset: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_u16 (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_decode_s16: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_s16")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 4103005248)!
    }()
    
    /// Decodes a 16-bit signed integer number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
    public final func decodeS16 (byteOffset: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_s16 (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_decode_u32: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_u32")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 4103005248)!
    }()
    
    /// Decodes a 32-bit unsigned integer number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
    public final func decodeU32 (byteOffset: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_u32 (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_decode_s32: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_s32")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 4103005248)!
    }()
    
    /// Decodes a 32-bit signed integer number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
    public final func decodeS32 (byteOffset: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_s32 (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_decode_u64: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_u64")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 4103005248)!
    }()
    
    /// Decodes a 64-bit unsigned integer number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
    public final func decodeU64 (byteOffset: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_u64 (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_decode_s64: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_s64")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 4103005248)!
    }()
    
    /// Decodes a 64-bit signed integer number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0` if a valid number can't be decoded.
    public final func decodeS64 (byteOffset: Int64)-> Int64 {
        var result: Int64 = Int64()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_s64 (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_decode_half: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_half")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1401583798)!
    }()
    
    /// Decodes a 16-bit floating point number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0.0` if a valid number can't be decoded.
    public final func decodeHalf (byteOffset: Int64)-> Double {
        var result: Double = Double()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_half (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_decode_float: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_float")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1401583798)!
    }()
    
    /// Decodes a 32-bit floating point number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0.0` if a valid number can't be decoded.
    public final func decodeFloat (byteOffset: Int64)-> Double {
        var result: Double = Double()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_float (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_decode_double: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_double")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1401583798)!
    }()
    
    /// Decodes a 64-bit floating point number from the bytes starting at `byteOffset`. Fails if the byte count is insufficient. Returns `0.0` if a valid number can't be decoded.
    public final func decodeDouble (byteOffset: Int64)-> Double {
        var result: Double = Double()
        var copy_byte_offset = byteOffset
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
        
            PackedByteArray.method_decode_double (&content, &args, &result, 1)
            return result
        }
    }
    
    static var method_has_encoded_var: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("has_encoded_var")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 2914632957)!
    }()
    
    /// Returns `true` if a valid ``Variant`` value can be decoded at the `byteOffset`. Returns `false` otherwise or when the value is ``Object``-derived and `allowObjects` is `false`.
    public final func hasEncodedVar (byteOffset: Int64, allowObjects: Bool = false)-> Bool {
        var result: Bool = Bool()
        var copy_byte_offset = byteOffset
        var copy_allow_objects = allowObjects
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_allow_objects) { p1 in
                args.append (p1)
        
                PackedByteArray.method_has_encoded_var (&content, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_decode_var: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_var")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1740420038)!
    }()
    
    /// Decodes a ``Variant`` from the bytes starting at `byteOffset`. Returns `null` if a valid variant can't be decoded or the value is ``Object``-derived and `allowObjects` is `false`.
    public final func decodeVar (byteOffset: Int64, allowObjects: Bool = false)-> Variant {
        let result: Variant = Variant()
        var copy_byte_offset = byteOffset
        var copy_allow_objects = allowObjects
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_allow_objects) { p1 in
                args.append (p1)
        
                PackedByteArray.method_decode_var (&content, &args, &result.content, 2)
                return result
            }
        }
    }
    
    static var method_decode_var_size: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("decode_var_size")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 954237325)!
    }()
    
    /// Decodes a size of a ``Variant`` from the bytes starting at `byteOffset`. Requires at least 4 bytes of data starting at the offset, otherwise fails.
    public final func decodeVarSize (byteOffset: Int64, allowObjects: Bool = false)-> Int64 {
        var result: Int64 = Int64()
        var copy_byte_offset = byteOffset
        var copy_allow_objects = allowObjects
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &copy_allow_objects) { p1 in
                args.append (p1)
        
                PackedByteArray.method_decode_var_size (&content, &args, &result, 2)
                return result
            }
        }
    }
    
    static var method_to_int32_array: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_int32_array")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3158844420)!
    }()
    
    /// Returns a copy of the data converted to a ``PackedInt32Array``, where each block of 4 bytes has been converted to a signed 32-bit integer (C++ `int32_t`).
    /// 
    /// The size of the input array must be a multiple of 4 (size of 32-bit integer). The size of the new array will be `byte_array.size() / 4`.
    /// 
    /// If the original data can't be converted to signed 32-bit integers, the resulting data is undefined.
    /// 
    public final func toInt32Array ()-> PackedInt32Array {
        let result: PackedInt32Array = PackedInt32Array()
        PackedByteArray.method_to_int32_array (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_int64_array: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_int64_array")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1961294120)!
    }()
    
    /// Returns a copy of the data converted to a ``PackedInt64Array``, where each block of 8 bytes has been converted to a signed 64-bit integer (C++ `int64_t`, Godot integer).
    /// 
    /// The size of the input array must be a multiple of 8 (size of 64-bit integer). The size of the new array will be `byte_array.size() / 8`.
    /// 
    /// If the original data can't be converted to signed 64-bit integers, the resulting data is undefined.
    /// 
    public final func toInt64Array ()-> PackedInt64Array {
        let result: PackedInt64Array = PackedInt64Array()
        PackedByteArray.method_to_int64_array (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_float32_array: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_float32_array")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3575107827)!
    }()
    
    /// Returns a copy of the data converted to a ``PackedFloat32Array``, where each block of 4 bytes has been converted to a 32-bit float (C++ [code skip-lint]float`).
    /// 
    /// The size of the input array must be a multiple of 4 (size of 32-bit float). The size of the new array will be `byte_array.size() / 4`.
    /// 
    /// If the original data can't be converted to 32-bit floats, the resulting data is undefined.
    /// 
    public final func toFloat32Array ()-> PackedFloat32Array {
        let result: PackedFloat32Array = PackedFloat32Array()
        PackedByteArray.method_to_float32_array (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_to_float64_array: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("to_float64_array")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1627308337)!
    }()
    
    /// Returns a copy of the data converted to a ``PackedFloat64Array``, where each block of 8 bytes has been converted to a 64-bit float (C++ `double`, Godot float).
    /// 
    /// The size of the input array must be a multiple of 8 (size of 64-bit double). The size of the new array will be `byte_array.size() / 8`.
    /// 
    /// If the original data can't be converted to 64-bit floats, the resulting data is undefined.
    /// 
    public final func toFloat64Array ()-> PackedFloat64Array {
        let result: PackedFloat64Array = PackedFloat64Array()
        PackedByteArray.method_to_float64_array (&content, nil, &result.content, 0)
        return result
    }
    
    static var method_encode_u8: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_u8")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3638975848)!
    }()
    
    /// Encodes a 8-bit unsigned integer number (byte) at the index of `byteOffset` bytes. The array must have at least 1 byte of space, starting at the offset.
    public final func encodeU8 (byteOffset: Int64, value: Int64) {
        var copy_byte_offset = byteOffset
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_u8 (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_s8: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_s8")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3638975848)!
    }()
    
    /// Encodes a 8-bit signed integer number (signed byte) at the index of `byteOffset` bytes. The array must have at least 1 byte of space, starting at the offset.
    public final func encodeS8 (byteOffset: Int64, value: Int64) {
        var copy_byte_offset = byteOffset
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_s8 (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_u16: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_u16")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3638975848)!
    }()
    
    /// Encodes a 16-bit unsigned integer number as bytes at the index of `byteOffset` bytes. The array must have at least 2 bytes of space, starting at the offset.
    public final func encodeU16 (byteOffset: Int64, value: Int64) {
        var copy_byte_offset = byteOffset
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_u16 (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_s16: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_s16")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3638975848)!
    }()
    
    /// Encodes a 16-bit signed integer number as bytes at the index of `byteOffset` bytes. The array must have at least 2 bytes of space, starting at the offset.
    public final func encodeS16 (byteOffset: Int64, value: Int64) {
        var copy_byte_offset = byteOffset
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_s16 (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_u32: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_u32")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3638975848)!
    }()
    
    /// Encodes a 32-bit unsigned integer number as bytes at the index of `byteOffset` bytes. The array must have at least 4 bytes of space, starting at the offset.
    public final func encodeU32 (byteOffset: Int64, value: Int64) {
        var copy_byte_offset = byteOffset
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_u32 (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_s32: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_s32")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3638975848)!
    }()
    
    /// Encodes a 32-bit signed integer number as bytes at the index of `byteOffset` bytes. The array must have at least 4 bytes of space, starting at the offset.
    public final func encodeS32 (byteOffset: Int64, value: Int64) {
        var copy_byte_offset = byteOffset
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_s32 (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_u64: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_u64")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3638975848)!
    }()
    
    /// Encodes a 64-bit unsigned integer number as bytes at the index of `byteOffset` bytes. The array must have at least 8 bytes of space, starting at the offset.
    public final func encodeU64 (byteOffset: Int64, value: Int64) {
        var copy_byte_offset = byteOffset
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_u64 (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_s64: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_s64")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 3638975848)!
    }()
    
    /// Encodes a 64-bit signed integer number as bytes at the index of `byteOffset` bytes. The array must have at least 8 bytes of space, starting at the offset.
    public final func encodeS64 (byteOffset: Int64, value: Int64) {
        var copy_byte_offset = byteOffset
        var copy_value = value
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_s64 (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_half: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_half")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1113000516)!
    }()
    
    /// Encodes a 16-bit floating point number as bytes at the index of `byteOffset` bytes. The array must have at least 2 bytes of space, starting at the offset.
    public final func encodeHalf (byteOffset: Int64, value: Double) {
        var copy_byte_offset = byteOffset
        var copy_value = Double (value)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_half (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_float: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_float")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1113000516)!
    }()
    
    /// Encodes a 32-bit floating point number as bytes at the index of `byteOffset` bytes. The array must have at least 4 bytes of space, starting at the offset.
    public final func encodeFloat (byteOffset: Int64, value: Double) {
        var copy_byte_offset = byteOffset
        var copy_value = Double (value)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_float (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_double: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_double")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 1113000516)!
    }()
    
    /// Encodes a 64-bit floating point number as bytes at the index of `byteOffset` bytes. The array must have at least 8 bytes of allocated space, starting at the offset.
    public final func encodeDouble (byteOffset: Int64, value: Double) {
        var copy_byte_offset = byteOffset
        var copy_value = Double (value)
        var args: [UnsafeRawPointer?] = []
        withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            withUnsafePointer (to: &copy_value) { p1 in
                args.append (p1)
        
                PackedByteArray.method_encode_double (&content, &args, nil, 2)
            }
        }
    }
    
    static var method_encode_var: GDExtensionPtrBuiltInMethod = {
        let name = StringName ("encode_var")
        return gi.variant_get_ptr_builtin_method (GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, &name.content, 2604460497)!
    }()
    
    /// Encodes a ``Variant`` at the index of `byteOffset` bytes. A sufficient space must be allocated, depending on the encoded variant's size. If `allowObjects` is `false`, ``Object``-derived values are not permitted and will instead be serialized as ID-only.
    public final func encodeVar (byteOffset: Int64, value: Variant, allowObjects: Bool = false)-> Int64 {
        var result: Int64 = Int64()
        var copy_byte_offset = byteOffset
        var copy_allow_objects = allowObjects
        var args: [UnsafeRawPointer?] = []
        return withUnsafePointer (to: &copy_byte_offset) { p0 in
            args.append (p0)
            return withUnsafePointer (to: &value.content) { p1 in
                args.append (p1)
                return withUnsafePointer (to: &copy_allow_objects) { p2 in
                    args.append (p2)
        
                    PackedByteArray.method_encode_var (&content, &args, &result, 3)
                    return result
                }
            }
        }
    }
    
    static var operator_5: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)!
    }()
    
    /// Returns `true` if contents of both arrays are the same, i.e. they have all equal bytes at the corresponding indices.
    public static func == (lhs: PackedByteArray, rhs: PackedByteArray) -> Bool  {
        var result: Bool = Bool()
        
        PackedByteArray.operator_5 (&lhs.content, &rhs.content, &result)
        return result
    }
    
    static var operator_6: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_NOT_EQUAL, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)!
    }()
    
    /// Returns `true` if contents of the arrays differ.
    public static func != (lhs: PackedByteArray, rhs: PackedByteArray) -> Bool  {
        var result: Bool = Bool()
        
        PackedByteArray.operator_6 (&lhs.content, &rhs.content, &result)
        return result
    }
    
    static var operator_7: GDExtensionPtrOperatorEvaluator = {
        return gi.variant_get_ptr_operator_evaluator (GDEXTENSION_VARIANT_OP_ADD, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY, GDEXTENSION_VARIANT_TYPE_PACKED_BYTE_ARRAY)!
    }()
    
    /// Returns a new ``PackedByteArray`` with contents of `right` added at the end of this array. For better performance, consider using ``appendArray(array:)`` instead.
    public static func + (lhs: PackedByteArray, rhs: PackedByteArray) -> PackedByteArray  {
        let result: PackedByteArray = PackedByteArray()
        
        PackedByteArray.operator_7 (&lhs.content, &rhs.content, &result.content)
        return result
    }
    
    public var startIndex: Int {
        0
    }
    
    public var endIndex: Int {
        Int (size ())
    }
    
    public func index(after i: Int) -> Int {
        i+1
    }
    
}

